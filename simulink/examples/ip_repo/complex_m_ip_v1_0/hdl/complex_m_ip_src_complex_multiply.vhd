-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/exampleIPCore/complex_m_ip_src_complex_multiply.vhd
-- Created: 2024-06-30 18:26:12
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- a_b_r                         ce_out        0.2
-- a_b_i                         ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: complex_m_ip_src_complex_multiply
-- Source Path: exampleIPCore/complex_multiply
-- Hierarchy Level: 0
-- Model version: 1.1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY complex_m_ip_src_complex_multiply IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        ar                                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        ai                                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        br                                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        bi                                :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En8
        ce_out                            :   OUT   std_logic;
        a_b_r                             :   OUT   std_logic_vector(32 DOWNTO 0);  -- sfix33_En16
        a_b_i                             :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En16
        );
END complex_m_ip_src_complex_multiply;


ARCHITECTURE rtl OF complex_m_ip_src_complex_multiply IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ar_signed                        : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL br_signed                        : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL ai_signed                        : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL bi_signed                        : signed(15 DOWNTO 0);  -- sfix16_En8
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Subtract_sub_cast                : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Subtract_sub_cast_1              : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Subtract_out1                    : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Delay6_out1                      : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Add_add_cast                     : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Add_add_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Add_out1                         : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Delay5_out1                      : signed(32 DOWNTO 0);  -- sfix33_En16

BEGIN
  ar_signed <= signed(ar);

  br_signed <= signed(br);

  Product_out1 <= ar_signed * br_signed;

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  ai_signed <= signed(ai);

  bi_signed <= signed(bi);

  Product2_out1 <= ai_signed * bi_signed;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay3_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Subtract_sub_cast <= resize(Delay_out1, 33);
  Subtract_sub_cast_1 <= resize(Delay3_out1, 33);
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Subtract_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  a_b_r <= std_logic_vector(Delay6_out1);

  Product1_out1 <= ar_signed * bi_signed;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Product3_out1 <= br_signed * ai_signed;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay4_out1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Add_add_cast <= resize(Delay1_out1, 33);
  Add_add_cast_1 <= resize(Delay4_out1, 33);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  a_b_i <= std_logic_vector(Delay5_out1);

  ce_out <= clk_enable;

END rtl;

