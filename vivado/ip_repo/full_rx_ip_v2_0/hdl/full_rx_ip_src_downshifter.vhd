-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_downshifter.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_downshifter
-- Source Path: HDLRx/full_rx/rx_demodulator_full/downshifter
-- Hierarchy Level: 2
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_downshifter IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        valid_in                          :   IN    std_logic;
        frequency_offset                  :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En16
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        valid_out                         :   OUT   std_logic
        );
END full_rx_ip_src_downshifter;


ARCHITECTURE rtl OF full_rx_ip_src_downshifter IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_rising_edge_detector_block3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_NCO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          inc                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          resetPhase                      :   IN    std_logic;
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_digital_carrier_receiver
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          ncoIn_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          ncoIn_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_rising_edge_detector_block3
    USE ENTITY work.full_rx_ip_src_rising_edge_detector_block3(rtl);

  FOR ALL : full_rx_ip_src_NCO
    USE ENTITY work.full_rx_ip_src_NCO(rtl);

  FOR ALL : full_rx_ip_src_digital_carrier_receiver
    USE ENTITY work.full_rx_ip_src_digital_carrier_receiver(rtl);

  -- Signals
  SIGNAL data_in_signed                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay8_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay_reg                        : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL frequency_offset_signed          : signed(31 DOWNTO 0);  -- sfix32_En16
  SIGNAL Add_add_cast                     : signed(48 DOWNTO 0);  -- sfix49_En16
  SIGNAL Add_add_cast_1                   : signed(48 DOWNTO 0);  -- sfix49_En16
  SIGNAL Add_add_temp                     : signed(48 DOWNTO 0);  -- sfix49_En16
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay6_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Gain_mul_temp                    : signed(64 DOWNTO 0);  -- sfix65_En32
  SIGNAL Gain_cast                        : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Gain_out1                        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL inc                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out2                         : std_logic;
  SIGNAL digital_carrier_receiver_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL digital_carrier_receiver_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Delay1_reg                       : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  u_rising_edge_detector : full_rx_ip_src_rising_edge_detector_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_rsvd => Delay7_out1,
              Out_rsvd => rising_edge_detector_out1
              );

  u_NCO : full_rx_ip_src_NCO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              inc => std_logic_vector(inc),  -- uint32
              resetPhase => rising_edge_detector_out1,
              validIn => valid,
              complexexp_re => NCO_out1_re,  -- sfix16_En12
              complexexp_im => NCO_out1_im,  -- sfix16_En12
              validOut => NCO_out2
              );

  u_digital_carrier_receiver : full_rx_ip_src_digital_carrier_receiver
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              dataIn => std_logic_vector(Delay_out1),  -- sfix16_En12
              ncoIn_re => NCO_out1_re,  -- sfix16_En12
              ncoIn_im => NCO_out1_im,  -- sfix16_En12
              data_out_re => digital_carrier_receiver_out1_re,  -- sfix16_En12
              data_out_im => digital_carrier_receiver_out1_im  -- sfix16_En12
              );

  data_in_signed <= signed(data_in);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1 <= data_in_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay_reg(0) <= Delay3_out1;
        Delay_reg(1 TO 5) <= Delay_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(5);

  Constant_out1 <= to_signed(25000000, 32);

  frequency_offset_signed <= signed(frequency_offset);

  Add_add_cast <= resize(Constant_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 49);
  Add_add_cast_1 <= resize(frequency_offset_signed, 49);
  Add_add_temp <= Add_add_cast + Add_add_cast_1;
  Add_out1 <= Add_add_temp(47 DOWNTO 16);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay6_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Gain_mul_temp <= to_signed(1441151881, 33) * Delay6_out1;
  Gain_cast <= Gain_mul_temp(63 DOWNTO 0);
  Gain_out1 <= unsigned(Gain_cast(63 DOWNTO 32)) + ('0' & (Gain_cast(31) AND (( NOT Gain_cast(63)) OR (Gain_cast(30) OR Gain_cast(29) OR Gain_cast(28) OR Gain_cast(27) OR Gain_cast(26) OR Gain_cast(25) OR Gain_cast(24) OR Gain_cast(23) OR Gain_cast(22) OR Gain_cast(21) OR Gain_cast(20) OR Gain_cast(19) OR Gain_cast(18) OR Gain_cast(17) OR Gain_cast(16) OR Gain_cast(15) OR Gain_cast(14) OR Gain_cast(13) OR Gain_cast(12) OR Gain_cast(11) OR Gain_cast(10) OR Gain_cast(9) OR Gain_cast(8) OR Gain_cast(7) OR Gain_cast(6) OR Gain_cast(5) OR Gain_cast(4) OR Gain_cast(3) OR Gain_cast(2) OR Gain_cast(1) OR Gain_cast(0)))));

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        inc <= to_unsigned(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        inc <= Gain_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        valid <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg(0) <= NCO_out2;
        Delay1_reg(3 DOWNTO 1) <= Delay1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(3);

  data_out_re <= digital_carrier_receiver_out1_re;

  data_out_im <= digital_carrier_receiver_out1_im;

  valid_out <= Delay1_out1;

END rtl;

