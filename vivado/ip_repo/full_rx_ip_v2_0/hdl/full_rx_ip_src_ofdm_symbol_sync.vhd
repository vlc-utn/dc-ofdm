-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_ofdm_symbol_sync.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_ofdm_symbol_sync
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync
-- Hierarchy Level: 2
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_ofdm_symbol_sync IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        peak_sync                         :   OUT   std_logic;
        frequency_offset                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En16
        );
END full_rx_ip_src_ofdm_symbol_sync;


ARCHITECTURE rtl OF full_rx_ip_src_ofdm_symbol_sync IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_m_cox
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          M_d                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          P_d_re                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          P_d_im                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_find_peak
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          M_in                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          peak_sync                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_frequency_offset_calculator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          peak_sync                       :   IN    std_logic;
          P_d_re                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          P_d_im                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          frequency_offset                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En16
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_m_cox
    USE ENTITY work.full_rx_ip_src_m_cox(rtl);

  FOR ALL : full_rx_ip_src_find_peak
    USE ENTITY work.full_rx_ip_src_find_peak(rtl);

  FOR ALL : full_rx_ip_src_frequency_offset_calculator
    USE ENTITY work.full_rx_ip_src_frequency_offset_calculator(rtl);

  -- Signals
  SIGNAL m_cox_out1_re                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m_cox_out1_im                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m_cox_out2                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m_cox_out3_re                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL m_cox_out3_im                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL find_peak_out1_re                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL find_peak_out1_im                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL find_peak_out2                   : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(3611 DOWNTO 0);  -- ufix1 [3612]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL m_cox_out3_re_signed             : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL m_cox_out3_im_signed             : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_reg_re                    : vector_of_signed32(0 TO 127);  -- sfix32_En24 [128]
  SIGNAL Delay1_reg_im                    : vector_of_signed32(0 TO 127);  -- sfix32_En24 [128]
  SIGNAL Delay1_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL frequency_offset_calculator_out1 : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Delay of find_peak = peakDetectorWindow 
  -- peakSync is synchronized with the first element of the channel

  u_m_cox : full_rx_ip_src_m_cox
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              data_in_re => data_in_re,  -- sfix16_En12
              data_in_im => data_in_im,  -- sfix16_En12
              data_out_re => m_cox_out1_re,  -- sfix16_En12
              data_out_im => m_cox_out1_im,  -- sfix16_En12
              M_d => m_cox_out2,  -- sfix16_En12
              P_d_re => m_cox_out3_re,  -- sfix32_En24
              P_d_im => m_cox_out3_im  -- sfix32_En24
              );

  u_find_peak : full_rx_ip_src_find_peak
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              data_in_re => m_cox_out1_re,  -- sfix16_En12
              data_in_im => m_cox_out1_im,  -- sfix16_En12
              M_in => m_cox_out2,  -- sfix16_En12
              data_out_re => find_peak_out1_re,  -- sfix16_En12
              data_out_im => find_peak_out1_im,  -- sfix16_En12
              peak_sync => find_peak_out2
              );

  u_frequency_offset_calculator : full_rx_ip_src_frequency_offset_calculator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              peak_sync => find_peak_out2,
              P_d_re => std_logic_vector(Delay1_out1_re),  -- sfix32_En24
              P_d_im => std_logic_vector(Delay1_out1_im),  -- sfix32_En24
              frequency_offset => frequency_offset_calculator_out1  -- sfix32_En16
              );

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => '0');
      ELSIF enb_1_4_0 = '1' THEN
        Delay_reg(0) <= find_peak_out2;
        Delay_reg(3611 DOWNTO 1) <= Delay_reg(3610 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(3611);

  m_cox_out3_re_signed <= signed(m_cox_out3_re);

  m_cox_out3_im_signed <= signed(m_cox_out3_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg_re <= (OTHERS => to_signed(0, 32));
        Delay1_reg_im <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_reg_im(0) <= m_cox_out3_im_signed;
        Delay1_reg_im(1 TO 127) <= Delay1_reg_im(0 TO 126);
        Delay1_reg_re(0) <= m_cox_out3_re_signed;
        Delay1_reg_re(1 TO 127) <= Delay1_reg_re(0 TO 126);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(127);
  Delay1_out1_im <= Delay1_reg_im(127);

  data_out_re <= find_peak_out1_re;

  data_out_im <= find_peak_out1_im;

  peak_sync <= Delay_out1;

  frequency_offset <= frequency_offset_calculator_out1;

END rtl;

