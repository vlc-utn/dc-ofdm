-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_Quadrant_Correction.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_Quadrant_Correction
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/frequency_offset_calculator/HDL_CMA_core/Quadrant_Correction
-- Hierarchy Level: 4
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_Quadrant_Correction IS
  PORT( zin                               :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En32
        QA_Control                        :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        zout                              :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En32
        );
END full_rx_ip_src_Quadrant_Correction;


ARCHITECTURE rtl OF full_rx_ip_src_Quadrant_Correction IS

  -- Signals
  SIGNAL QA_Control_unsigned              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL yZeroXPositive                   : std_logic;  -- ufix1
  SIGNAL yZeroXNegative                   : std_logic;  -- ufix1
  SIGNAL xyNegative                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL AbsRel                           : std_logic;  -- ufix1
  SIGNAL pidivtwo                         : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL zin_signed                       : signed(32 DOWNTO 0);  -- sfix33_En32
  SIGNAL zCast                            : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL pivdivtwosubout                  : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL mux1out                          : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL Negation_cast                    : signed(35 DOWNTO 0);  -- sfix36_En32
  SIGNAL Negation_cast_1                  : signed(35 DOWNTO 0);  -- sfix36_En32
  SIGNAL Negation_cast_2                  : signed(36 DOWNTO 0);  -- sfix37_En32
  SIGNAL mux1out_negate                   : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL pionepos                         : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL pi_subtraction                   : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL pioneneg                         : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL negpi_addition                   : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL mux2out                          : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL mux5out                          : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL zero_1                           : signed(34 DOWNTO 0);  -- sfix35_En32
  SIGNAL mux6out                          : signed(34 DOWNTO 0);  -- sfix35_En32

BEGIN
  QA_Control_unsigned <= unsigned(QA_Control);

  yZeroXPositive <= QA_Control_unsigned(4);

  yZeroXNegative <= QA_Control_unsigned(3);

  xyNegative <= QA_Control_unsigned(1 DOWNTO 0);

  AbsRel <= QA_Control_unsigned(2);

  pidivtwo <= signed'("00110010010000111111011010101000100");

  zin_signed <= signed(zin);

  zCast <= resize(zin_signed, 35);

  pivdivtwosubout <= pidivtwo - zCast;

  
  mux1out <= pivdivtwosubout WHEN AbsRel = '0' ELSE
      zCast;

  Negation_cast <= resize(mux1out, 36);
  Negation_cast_1 <=  - (Negation_cast);
  Negation_cast_2 <= resize(Negation_cast_1, 37);
  mux1out_negate <= Negation_cast_2(34 DOWNTO 0);

  pionepos <= signed'("01100100100001111110110101010001000");

  pi_subtraction <= pionepos - mux1out;

  pioneneg <= signed'("10011011011110000001001010101110111");

  negpi_addition <= pioneneg + mux1out;

  
  mux2out <= mux1out WHEN xyNegative = to_unsigned(16#0#, 2) ELSE
      mux1out_negate WHEN xyNegative = to_unsigned(16#1#, 2) ELSE
      pi_subtraction WHEN xyNegative = to_unsigned(16#2#, 2) ELSE
      negpi_addition;

  
  mux5out <= mux2out WHEN yZeroXNegative = '0' ELSE
      pionepos;

  zero_1 <= to_signed(0, 35);

  
  mux6out <= mux5out WHEN yZeroXPositive = '0' ELSE
      zero_1;

  zout <= std_logic_vector(mux6out);

END rtl;

