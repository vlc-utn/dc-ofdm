-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_OFDM_Demodulator.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_OFDM_Demodulator
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_demod/OFDM Demodulator
-- Hierarchy Level: 3
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_OFDM_Demodulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        valid                             :   IN    std_logic;
        FFTLen                            :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        CPLen                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        numLgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        numRgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        data_re_1                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        data_im_1                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        valid_1                           :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END full_rx_ip_src_OFDM_Demodulator;


ARCHITECTURE rtl OF full_rx_ip_src_OFDM_Demodulator IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_CPRemoval_stage1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_6                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_7                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_5                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_6                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_SamplesRepetition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          varargout_4                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          varargout_5                     :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_HDLFFTShift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargin_2                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          varargout_2                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_dsphdl_FFT
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          dataOut_im                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          startOut                        :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_DownSampler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargin_1_im                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargout_1_im                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_4                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_5                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_SubcarrierSelector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargin_1_im                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargout_1_im                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          varargout_2                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_CPRemoval_stage1
    USE ENTITY work.full_rx_ip_src_CPRemoval_stage1(rtl);

  FOR ALL : full_rx_ip_src_SamplesRepetition
    USE ENTITY work.full_rx_ip_src_SamplesRepetition(rtl);

  FOR ALL : full_rx_ip_src_HDLFFTShift
    USE ENTITY work.full_rx_ip_src_HDLFFTShift(rtl);

  FOR ALL : full_rx_ip_src_dsphdl_FFT
    USE ENTITY work.full_rx_ip_src_dsphdl_FFT(rtl);

  FOR ALL : full_rx_ip_src_DownSampler
    USE ENTITY work.full_rx_ip_src_DownSampler(rtl);

  FOR ALL : full_rx_ip_src_SubcarrierSelector
    USE ENTITY work.full_rx_ip_src_SubcarrierSelector(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL obj_dataReadyDelay_re            : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL obj_dataReadyDelay_im            : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL frstVldANDRdyN                   : std_logic;
  SIGNAL frstVldANDRdyN_1                 : std_logic;
  SIGNAL obj_validLowCount                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_maxFFTMinusVec               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_validLowFlag                 : std_logic;
  SIGNAL obj_validLowFlag_1               : std_logic;
  SIGNAL obj_validLowFlag_2               : std_logic;
  SIGNAL obj_validLowFlag_3               : std_logic;
  SIGNAL vldHvldL                         : std_logic;
  SIGNAL vldHvldL_1                       : std_logic;
  SIGNAL obj_firstValidHighFlag           : std_logic;
  SIGNAL obj_firstValidHighFlag_1         : std_logic;
  SIGNAL frstVldANDRdy                    : std_logic;
  SIGNAL frstVldANDRdy_1                  : std_logic;
  SIGNAL CPLen_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL obj_CPLengthSig                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validHighFlag                : std_logic;
  SIGNAL obj_validHighFlag_1              : std_logic;
  SIGNAL obj_validHighFlag_2              : std_logic;
  SIGNAL vldHvldLN                        : std_logic;
  SIGNAL vldHvldLN_1                      : std_logic;
  SIGNAL samplingSignal                   : std_logic;
  SIGNAL samplingSignal_1                 : std_logic;
  SIGNAL FFTLen_unsigned                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_FFTLengthSig                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_readyDataDelay               : std_logic;
  SIGNAL obj_readyState                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_2                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_3                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyDataDelay_1             : std_logic;
  SIGNAL obj_readyDataDelay_2             : std_logic;
  SIGNAL obj_resetSignal                  : std_logic;
  SIGNAL out_rsvd                         : std_logic;
  SIGNAL out_rsvd_1                       : std_logic;
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL FFTeqMaxFFT                      : std_logic;
  SIGNAL tmp_4                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_4                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_5                            : std_logic;
  SIGNAL tmp_6                            : std_logic;
  SIGNAL tmp_7                            : std_logic;
  SIGNAL tmp_8                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_FFTLength1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_9                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_readyHigh                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_10                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p187tmp_sub_cast                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p187tmp_sub_cast_1               : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p187tmp_sub_cast_2               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p187tmp_sub_cast_3               : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p187tmp_sub_temp                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p187tmp_cast                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_11                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_12                           : std_logic;
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : std_logic;
  SIGNAL obj_validHighFlag_3              : std_logic;
  SIGNAL tmp_15                           : std_logic;
  SIGNAL tmp_16                           : std_logic;
  SIGNAL tmp_17                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_CPLength1                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validHighCount               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_18                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p240tmp_add_temp                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_19                           : std_logic;
  SIGNAL tmp_20                           : std_logic;
  SIGNAL tmp_21                           : std_logic;
  SIGNAL tmp_22                           : std_logic;
  SIGNAL obj_validLowFlag_4               : std_logic;
  SIGNAL tmp_23                           : std_logic;
  SIGNAL obj_readyLow                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p199obj_readyLow_sub_cast        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p199obj_readyLow_sub_cast_1      : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p199obj_readyLow_sub_cast_2      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p199obj_readyLow_sub_cast_3      : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p199obj_readyLow_sub_temp        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p199obj_readyLow_cast            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL obj_validLowCount_1              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_24                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p241tmp_add_temp                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_25                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_26                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_27                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_28                           : std_logic;
  SIGNAL tmp_29                           : std_logic;
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : std_logic;
  SIGNAL tmp_32                           : std_logic;
  SIGNAL tmp_33                           : std_logic;
  SIGNAL tmp_34                           : std_logic;
  SIGNAL tmp_35                           : std_logic;
  SIGNAL obj_firstValidHighFlag_2         : std_logic;
  SIGNAL tmp_36                           : std_logic;
  SIGNAL tmp_37                           : std_logic;
  SIGNAL tmp_38                           : std_logic;
  SIGNAL tmp_39                           : std_logic;
  SIGNAL tmp_40                           : std_logic;
  SIGNAL tmp_41                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL sampCntLessthanVector            : std_logic;
  SIGNAL tmp_42                           : std_logic;
  SIGNAL obj_readyDataDelay_3             : std_logic;
  SIGNAL s                                : std_logic;
  SIGNAL numLgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL obj_LGrdSig                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_43                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_LGaurdSub1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL numRgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL obj_RGrdSig                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_44                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_RGaurdSub1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validReadyDelay              : std_logic;
  SIGNAL obj_fftLenReadyDelay             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_cpLenReadyDelay              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_lgGrdReadyDelay              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_rgGrdReadyDelay              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2                      : std_logic;
  SIGNAL varargout_3                      : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_5                      : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_6                      : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_1                    : std_logic;
  SIGNAL varargout_3_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_4                      : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_5_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_1_re_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_2                    : std_logic;
  SIGNAL varargout_1_re_3                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_1_im_3                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_2_3                    : std_logic;
  SIGNAL varargout_3_2                    : std_logic;
  SIGNAL varargout_1_re_signed            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL varargout_1_im_signed            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL obj_dataDelay1_re                : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL obj_dataDelay1_im                : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL varargout_3_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_fftInFFTDelayBal             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel                              : std_logic;
  SIGNAL obj_countReg                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_countReg_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_45                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p255tmp_add_temp                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL s_1                              : std_logic;
  SIGNAL tmp_46                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_47                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL s_2                              : std_logic;
  SIGNAL sel_1                            : std_logic;
  SIGNAL out_rsvd_2                       : std_logic;
  SIGNAL sel_2                            : std_logic;
  SIGNAL sel_2_1                          : std_logic;
  SIGNAL obj_index                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_48                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p250tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL s_3                              : std_logic;
  SIGNAL tmp_49                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_50                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_51                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_52                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p243tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p243tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_53                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_FFTReg                       : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_4                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_index1                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index1_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_54                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p260tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL s_5                              : std_logic;
  SIGNAL tmp_55                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_56                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_57                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p57tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p57tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_FFTRegDelay                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_58                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_59                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p54tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p54tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_60                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_LGrdInFFTDelayBal            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel_3                            : std_logic;
  SIGNAL sel_4                            : std_logic;
  SIGNAL out_rsvd_3                       : std_logic;
  SIGNAL sel_2_2                          : std_logic;
  SIGNAL sel_2_3                          : std_logic;
  SIGNAL tmp_61                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p244tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p244tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_62                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_LGrdReg                      : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_6                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_63                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p58tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p58tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_LGrdRegDelay                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_64                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_65                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p55tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p55tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_66                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_5_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_RGrdInFFTDelayBal            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel_5                            : std_logic;
  SIGNAL sel_6                            : std_logic;
  SIGNAL out_rsvd_4                       : std_logic;
  SIGNAL sel_2_4                          : std_logic;
  SIGNAL sel_2_5                          : std_logic;
  SIGNAL tmp_67                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p245tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p245tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_68                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_RGrdReg                      : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_7                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_69                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p59tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p59tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_RGrdRegDelay                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_70                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_71                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p56tmp_add_temp                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p56tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_72                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validDelay1                  : std_logic;
  SIGNAL obj_FFTLenDelay1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_LGDelay1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_RGDelay1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_4                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_1_im_4                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_2_4                    : std_logic;
  SIGNAL varargout_3_3                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_1                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_5_2                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_5                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_1_im_5                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_2_5                    : std_logic;
  SIGNAL varargout_1_re_signed_1          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL varargout_1_im_signed_1          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL obj_dataOut_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL obj_dataOut_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL obj_validOut                     : std_logic;
  SIGNAL obj_readyLast                    : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL p197obj_readyLast_sub_cast       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p197obj_readyLast_sub_cast_1     : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p197obj_readyLast_sub_temp       : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p197obj_readyLast_cast           : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_73                           : std_logic;
  SIGNAL obj_readyFlag                    : std_logic;
  SIGNAL obj_readyFlag_1                  : std_logic;
  SIGNAL obj_readyFlag_2                  : std_logic;
  SIGNAL s_8                              : std_logic;
  SIGNAL obj_readyFlag_3                  : std_logic;
  SIGNAL tmp_74                           : std_logic;
  SIGNAL tmp_75                           : std_logic;
  SIGNAL tmp_76                           : std_logic;
  SIGNAL obj_readyOut                     : std_logic;
  SIGNAL obj_readyOut_1                   : std_logic;
  SIGNAL tmp_77                           : std_logic;
  SIGNAL obj_readyOut_2                   : std_logic;
  SIGNAL tmp_78                           : std_logic;
  SIGNAL obj_readyOut_3                   : std_logic;
  SIGNAL tmp_79                           : std_logic;
  SIGNAL obj_readyOut_4                   : std_logic;
  SIGNAL s_9                              : std_logic;
  SIGNAL varargout_3_4                    : std_logic;
  SIGNAL varargout_3_5                    : std_logic;
  SIGNAL tmp_80                           : std_logic;
  SIGNAL tmp_81                           : std_logic;

BEGIN
  u_CPRemoval_stage1 : full_rx_ip_src_CPRemoval_stage1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              varargin_1_re => std_logic_vector(obj_dataReadyDelay_re),  -- sfix16_En12
              varargin_1_im => std_logic_vector(obj_dataReadyDelay_im),  -- sfix16_En12
              varargin_2 => obj_validReadyDelay,
              varargin_3 => std_logic_vector(obj_fftLenReadyDelay),  -- ufix10
              varargin_5 => std_logic_vector(obj_cpLenReadyDelay),  -- ufix10
              varargin_6 => std_logic_vector(obj_lgGrdReadyDelay),  -- ufix10
              varargin_7 => std_logic_vector(obj_rgGrdReadyDelay),  -- ufix10
              varargout_1_re => varargout_1_re,  -- sfix16_En12
              varargout_1_im => varargout_1_im,  -- sfix16_En12
              varargout_2 => varargout_2,
              varargout_3 => varargout_3,  -- ufix10
              varargout_5 => varargout_5,  -- ufix10
              varargout_6 => varargout_6  -- ufix10
              );

  u_SamplesRepetition : full_rx_ip_src_SamplesRepetition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              varargin_1_re => varargout_1_re,  -- sfix16_En12
              varargin_1_im => varargout_1_im,  -- sfix16_En12
              varargin_2 => varargout_2,
              varargin_3 => varargout_3,  -- ufix10
              varargin_4 => varargout_5,  -- ufix10
              varargin_5 => varargout_6,  -- ufix10
              varargout_1_re => varargout_1_re_1,  -- sfix16_En12
              varargout_1_im => varargout_1_im_1,  -- sfix16_En12
              varargout_2 => varargout_2_1,
              varargout_3 => varargout_3_1,  -- ufix9
              varargout_4 => varargout_4,  -- ufix9
              varargout_5 => varargout_5_1  -- ufix9
              );

  u_HDLFFTShift : full_rx_ip_src_HDLFFTShift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              varargin_1_re => varargout_1_re_1,  -- sfix16_En12
              varargin_1_im => varargout_1_im_1,  -- sfix16_En12
              varargin_2 => varargout_2_1,
              varargout_1_re => varargout_1_re_2,  -- sfix16_En12
              varargout_1_im => varargout_1_im_2,  -- sfix16_En12
              varargout_2 => varargout_2_2
              );

  u_dsphdl_FFT : full_rx_ip_src_dsphdl_FFT
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              dataIn_re => varargout_1_re_2,  -- sfix16_En12
              dataIn_im => varargout_1_im_2,  -- sfix16_En12
              validIn => varargout_2_2,
              dataOut_re => varargout_1_re_3,  -- sfix24_En12
              dataOut_im => varargout_1_im_3,  -- sfix24_En12
              startOut => varargout_2_3,
              validOut => varargout_3_2
              );

  u_DownSampler : full_rx_ip_src_DownSampler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              varargin_1_re => std_logic_vector(obj_dataDelay1_re),  -- sfix24_En12
              varargin_1_im => std_logic_vector(obj_dataDelay1_im),  -- sfix24_En12
              varargin_2 => obj_validDelay1,
              varargin_3 => std_logic_vector(obj_FFTLenDelay1),  -- ufix10
              varargin_4 => std_logic_vector(obj_LGDelay1),  -- ufix10
              varargin_5 => std_logic_vector(obj_RGDelay1),  -- ufix10
              varargout_1_re => varargout_1_re_4,  -- sfix24_En12
              varargout_1_im => varargout_1_im_4,  -- sfix24_En12
              varargout_2 => varargout_2_4,
              varargout_3 => varargout_3_3,  -- ufix10
              varargout_4 => varargout_4_1,  -- ufix10
              varargout_5 => varargout_5_2  -- ufix10
              );

  u_SubcarrierSelector : full_rx_ip_src_SubcarrierSelector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              varargin_1_re => varargout_1_re_4,  -- sfix24_En12
              varargin_1_im => varargout_1_im_4,  -- sfix24_En12
              varargin_2 => varargout_2_4,
              varargin_3 => varargout_3_3,  -- ufix10
              varargin_4 => varargout_4_1,  -- ufix10
              varargin_5 => varargout_5_2,  -- ufix10
              varargout_1_re => varargout_1_re_5,  -- sfix24_En12
              varargout_1_im => varargout_1_im_5,  -- sfix24_En12
              varargout_2 => varargout_2_5
              );

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  obj_dataReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataReadyDelay_re <= to_signed(16#0000#, 16);
        obj_dataReadyDelay_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        obj_dataReadyDelay_re <= data_re_signed;
        obj_dataReadyDelay_im <= data_im_signed;
      END IF;
    END IF;
  END PROCESS obj_dataReadyDelay_reg_process;


  frstVldANDRdyN <= '0';

  frstVldANDRdyN_1 <= '1';

  obj_validLowCount <= to_unsigned(16#000#, 11);

  obj_maxFFTMinusVec <= to_unsigned(16#0FF#, 11);

  obj_validLowFlag <= '0';

  obj_validLowFlag_1 <= '1';

  obj_validLowFlag_2 <= '0';

  obj_validLowFlag_3 <= '1';

  vldHvldL <= '0';

  vldHvldL_1 <= '1';

  obj_firstValidHighFlag <= '0';

  obj_firstValidHighFlag_1 <= '1';

  frstVldANDRdy <= '0';

  frstVldANDRdy_1 <= '1';

  CPLen_unsigned <= unsigned(CPLen);

  obj_CPLengthSig <= resize(CPLen_unsigned, 10);

  obj_validHighFlag <= '0';

  obj_validHighFlag_1 <= '0';

  obj_validHighFlag_2 <= '1';

  vldHvldLN <= '0';

  vldHvldLN_1 <= '1';

  samplingSignal <= '0';

  samplingSignal_1 <= '1';

  FFTLen_unsigned <= unsigned(FFTLen);

  obj_FFTLengthSig <= resize(FFTLen_unsigned, 10);

  obj_readyDataDelay <= '1';

  obj_readyState <= to_unsigned(16#0#, 2);

  obj_readyState_1 <= to_unsigned(16#0#, 2);

  obj_readyState_2 <= to_unsigned(16#1#, 2);

  obj_readyState_3 <= to_unsigned(16#0#, 2);

  obj_readyDataDelay_1 <= '0';

  obj_readyDataDelay_2 <= '1';

  obj_resetSignal <= '0';

  out_rsvd <= '0';

  out_rsvd_1 <= '1';

  
  tmp_1 <= obj_readyState WHEN tmp = '0' ELSE
      obj_readyState_1;

  
  tmp_3 <= tmp_1 WHEN tmp_2 = '0' ELSE
      obj_readyState_2;

  
  tmp_4 <= tmp_3 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyState_3;

  obj_readyState_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyState_4 <= to_unsigned(16#0#, 2);
      ELSIF enb_1_4_0 = '1' THEN
        obj_readyState_4 <= tmp_4;
      END IF;
    END IF;
  END PROCESS obj_readyState_reg_process;


  
  tmp_5 <= '1' WHEN obj_readyState_4 = to_unsigned(16#0#, 2) ELSE
      '0';

  
  tmp_6 <= obj_readyDataDelay WHEN tmp = '0' ELSE
      tmp_5;

  
  tmp_7 <= tmp_6 WHEN tmp_2 = '0' ELSE
      obj_readyDataDelay_1;

  obj_FFTLength1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTLength1 <= to_unsigned(16#100#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_FFTLength1 <= tmp_8;
      END IF;
    END IF;
  END PROCESS obj_FFTLength1_reg_process;


  p187tmp_sub_cast <= resize(tmp_9, 12);
  p187tmp_sub_cast_1 <= signed(resize(p187tmp_sub_cast, 13));
  p187tmp_sub_cast_2 <= resize(obj_readyHigh, 12);
  p187tmp_sub_cast_3 <= signed(resize(p187tmp_sub_cast_2, 13));
  p187tmp_sub_temp <= p187tmp_sub_cast_1 - p187tmp_sub_cast_3;
  
  p187tmp_cast <= "000000000000" WHEN p187tmp_sub_temp(12) = '1' ELSE
      unsigned(p187tmp_sub_temp(11 DOWNTO 0));
  
  tmp_10 <= "11111111111" WHEN p187tmp_cast(11) /= '0' ELSE
      p187tmp_cast(10 DOWNTO 0);

  
  tmp_11 <= tmp_9 WHEN tmp = '0' ELSE
      tmp_10;

  
  tmp_13 <= tmp_12 WHEN tmp = '0' ELSE
      obj_validHighFlag;

  
  tmp_14 <= tmp_13 WHEN tmp_2 = '0' ELSE
      tmp_12;

  obj_validHighFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validHighFlag_3 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_validHighFlag_3 <= tmp_14;
      END IF;
    END IF;
  END PROCESS obj_validHighFlag_reg_process;


  
  tmp_16 <= obj_validHighFlag_3 WHEN tmp_15 = '0' ELSE
      obj_validHighFlag_1;

  obj_CPLength1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_CPLength1 <= to_unsigned(16#010#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_CPLength1 <= tmp_17;
      END IF;
    END IF;
  END PROCESS obj_CPLength1_reg_process;


  
  tmp_17 <= obj_CPLength1 WHEN tmp_15 = '0' ELSE
      obj_CPLengthSig;

  obj_readyHigh <= resize(tmp_8, 11) + resize(tmp_17, 11);

  p240tmp_add_temp <= resize(obj_validHighCount, 12) + to_unsigned(16#001#, 12);
  
  tmp_18 <= "11111111111" WHEN p240tmp_add_temp(11) /= '0' ELSE
      p240tmp_add_temp(10 DOWNTO 0);

  
  tmp_20 <= tmp_19 WHEN tmp = '0' ELSE
      obj_validLowFlag;

  
  tmp_21 <= tmp_20 WHEN tmp_2 = '0' ELSE
      tmp_19;

  
  tmp_22 <= tmp_21 WHEN FFTeqMaxFFT = '0' ELSE
      obj_validLowFlag_1;

  obj_validLowFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validLowFlag_4 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_validLowFlag_4 <= tmp_22;
      END IF;
    END IF;
  END PROCESS obj_validLowFlag_reg_process;


  
  tmp_23 <= obj_validLowFlag_4 WHEN tmp_15 = '0' ELSE
      obj_validLowFlag_2;

  p199obj_readyLow_sub_cast <= resize(obj_maxFFTMinusVec, 12);
  p199obj_readyLow_sub_cast_1 <= signed(resize(p199obj_readyLow_sub_cast, 13));
  p199obj_readyLow_sub_cast_2 <= resize(tmp_8, 12);
  p199obj_readyLow_sub_cast_3 <= signed(resize(p199obj_readyLow_sub_cast_2, 13));
  p199obj_readyLow_sub_temp <= p199obj_readyLow_sub_cast_1 - p199obj_readyLow_sub_cast_3;
  
  p199obj_readyLow_cast <= "000000000000" WHEN p199obj_readyLow_sub_temp(12) = '1' ELSE
      unsigned(p199obj_readyLow_sub_temp(11 DOWNTO 0));
  
  obj_readyLow <= "11111111111" WHEN p199obj_readyLow_cast(11) /= '0' ELSE
      p199obj_readyLow_cast(10 DOWNTO 0);

  p241tmp_add_temp <= resize(obj_validLowCount_1, 12) + to_unsigned(16#001#, 12);
  
  tmp_24 <= "11111111111" WHEN p241tmp_add_temp(11) /= '0' ELSE
      p241tmp_add_temp(10 DOWNTO 0);

  
  tmp_26 <= tmp_25 WHEN tmp = '0' ELSE
      obj_validLowCount;

  
  tmp_27 <= tmp_26 WHEN tmp_2 = '0' ELSE
      tmp_25;

  obj_validLowCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validLowCount_1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_4_0 = '1' THEN
        obj_validLowCount_1 <= tmp_27;
      END IF;
    END IF;
  END PROCESS obj_validLowCount_reg_process;


  tmp_30 <= tmp_28 AND ( NOT tmp_29);

  
  tmp_31 <= frstVldANDRdyN WHEN tmp_30 = '0' ELSE
      frstVldANDRdyN_1;

  
  tmp_25 <= obj_validLowCount_1 WHEN tmp_31 = '0' ELSE
      tmp_24;

  
  tmp_32 <= '1' WHEN tmp_25 >= obj_readyLow ELSE
      '0';

  
  tmp_19 <= tmp_23 WHEN tmp_32 = '0' ELSE
      obj_validLowFlag_3;

  tmp_33 <= tmp_12 AND tmp_19;

  
  tmp <= vldHvldL WHEN tmp_33 = '0' ELSE
      vldHvldL_1;

  
  tmp_34 <= tmp_28 WHEN tmp = '0' ELSE
      obj_firstValidHighFlag;

  
  tmp_35 <= tmp_34 WHEN tmp_2 = '0' ELSE
      tmp_28;

  obj_firstValidHighFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_firstValidHighFlag_2 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_firstValidHighFlag_2 <= tmp_35;
      END IF;
    END IF;
  END PROCESS obj_firstValidHighFlag_reg_process;


  tmp_36 <= tmp_29 AND ( NOT obj_firstValidHighFlag_2);

  
  tmp_28 <= obj_firstValidHighFlag_2 WHEN tmp_36 = '0' ELSE
      obj_firstValidHighFlag_1;

  tmp_37 <= tmp_28 AND tmp_29;

  
  tmp_38 <= frstVldANDRdy WHEN tmp_37 = '0' ELSE
      frstVldANDRdy_1;

  
  tmp_9 <= obj_validHighCount WHEN tmp_38 = '0' ELSE
      tmp_18;

  
  tmp_39 <= '1' WHEN tmp_9 >= obj_readyHigh ELSE
      '0';

  
  tmp_12 <= tmp_16 WHEN tmp_39 = '0' ELSE
      obj_validHighFlag_2;

  tmp_40 <= tmp_12 AND ( NOT tmp_19);

  
  tmp_2 <= vldHvldLN WHEN tmp_40 = '0' ELSE
      vldHvldLN_1;

  
  tmp_41 <= tmp_11 WHEN tmp_2 = '0' ELSE
      tmp_9;

  obj_validHighCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validHighCount <= to_unsigned(16#000#, 11);
      ELSIF enb_1_4_0 = '1' THEN
        obj_validHighCount <= tmp_41;
      END IF;
    END IF;
  END PROCESS obj_validHighCount_reg_process;


  sampCntLessthanVector <= hdlcoder_to_stdlogic(obj_validHighCount < to_unsigned(16#001#, 11)) AND tmp_29;

  
  tmp_15 <= samplingSignal WHEN sampCntLessthanVector = '0' ELSE
      samplingSignal_1;

  
  tmp_8 <= obj_FFTLength1 WHEN tmp_15 = '0' ELSE
      obj_FFTLengthSig;

  
  FFTeqMaxFFT <= '1' WHEN tmp_8 = to_unsigned(16#100#, 10) ELSE
      '0';

  
  tmp_42 <= tmp_7 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyDataDelay_2;

  obj_readyDataDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyDataDelay_3 <= '1';
      ELSIF enb_1_4_0 = '1' THEN
        obj_readyDataDelay_3 <= tmp_42;
      END IF;
    END IF;
  END PROCESS obj_readyDataDelay_reg_process;


  s <= (obj_readyDataDelay_3 AND valid) AND ( NOT obj_resetSignal);

  
  tmp_29 <= out_rsvd WHEN s = '0' ELSE
      out_rsvd_1;

  numLgSc_unsigned <= unsigned(numLgSc);

  obj_LGrdSig <= resize(numLgSc_unsigned, 10);

  obj_LGaurdSub1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGaurdSub1 <= to_unsigned(16#006#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_LGaurdSub1 <= tmp_43;
      END IF;
    END IF;
  END PROCESS obj_LGaurdSub1_reg_process;


  
  tmp_43 <= obj_LGaurdSub1 WHEN tmp_15 = '0' ELSE
      obj_LGrdSig;

  numRgSc_unsigned <= unsigned(numRgSc);

  obj_RGrdSig <= resize(numRgSc_unsigned, 10);

  obj_RGaurdSub1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGaurdSub1 <= to_unsigned(16#005#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_RGaurdSub1 <= tmp_44;
      END IF;
    END IF;
  END PROCESS obj_RGaurdSub1_reg_process;


  
  tmp_44 <= obj_RGaurdSub1 WHEN tmp_15 = '0' ELSE
      obj_RGrdSig;

  obj_validReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validReadyDelay <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_validReadyDelay <= tmp_29;
      END IF;
    END IF;
  END PROCESS obj_validReadyDelay_reg_process;


  obj_fftLenReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_fftLenReadyDelay <= to_unsigned(16#040#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_fftLenReadyDelay <= tmp_8;
      END IF;
    END IF;
  END PROCESS obj_fftLenReadyDelay_reg_process;


  obj_cpLenReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_cpLenReadyDelay <= to_unsigned(16#010#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_cpLenReadyDelay <= tmp_17;
      END IF;
    END IF;
  END PROCESS obj_cpLenReadyDelay_reg_process;


  obj_lgGrdReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_lgGrdReadyDelay <= to_unsigned(16#006#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_lgGrdReadyDelay <= tmp_43;
      END IF;
    END IF;
  END PROCESS obj_lgGrdReadyDelay_reg_process;


  obj_rgGrdReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_rgGrdReadyDelay <= to_unsigned(16#005#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_rgGrdReadyDelay <= tmp_44;
      END IF;
    END IF;
  END PROCESS obj_rgGrdReadyDelay_reg_process;


  varargout_1_re_signed <= signed(varargout_1_re_3);

  varargout_1_im_signed <= signed(varargout_1_im_3);

  obj_dataDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataDelay1_re <= to_signed(16#000000#, 24);
        obj_dataDelay1_im <= to_signed(16#000000#, 24);
      ELSIF enb_1_4_0 = '1' THEN
        obj_dataDelay1_re <= varargout_1_re_signed;
        obj_dataDelay1_im <= varargout_1_im_signed;
      END IF;
    END IF;
  END PROCESS obj_dataDelay1_reg_process;


  varargout_3_unsigned <= unsigned(varargout_3_1);

  obj_fftInFFTDelayBal <= resize(varargout_3_unsigned, 10);

  sel <= '0';

  obj_countReg <= to_unsigned(16#000#, 10);

  p255tmp_add_temp <= resize(obj_countReg_1, 12) + to_unsigned(16#001#, 12);
  
  tmp_45 <= "1111111111" WHEN p255tmp_add_temp(11 DOWNTO 10) /= "00" ELSE
      p255tmp_add_temp(9 DOWNTO 0);

  
  s_1 <= '1' WHEN resize(obj_countReg_1, 12) = to_unsigned(16#0FF#, 12) ELSE
      '0';

  
  tmp_46 <= tmp_45 WHEN s_1 = '0' ELSE
      obj_countReg;

  
  tmp_47 <= obj_countReg_1 WHEN varargout_2_2 = '0' ELSE
      tmp_46;

  obj_countReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_countReg_1 <= to_unsigned(16#000#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_countReg_1 <= tmp_47;
      END IF;
    END IF;
  END PROCESS obj_countReg_reg_process;


  
  s_2 <= '1' WHEN obj_countReg_1 = to_unsigned(16#000#, 10) ELSE
      '0';

  sel_1 <= '0';

  out_rsvd_2 <= '1';

  
  sel_2 <= sel_1 WHEN s_2 = '0' ELSE
      out_rsvd_2;

  
  sel_2_1 <= sel WHEN varargout_2_2 = '0' ELSE
      sel_2;

  obj_index <= to_unsigned(16#00#, 7);

  p250tmp_add_temp <= resize(obj_index_1, 8) + to_unsigned(16#01#, 8);
  
  tmp_48 <= "1111111" WHEN p250tmp_add_temp(7) /= '0' ELSE
      p250tmp_add_temp(6 DOWNTO 0);

  
  s_3 <= '1' WHEN obj_index_1 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_49 <= tmp_48 WHEN s_3 = '0' ELSE
      obj_index;

  
  tmp_50 <= obj_index_1 WHEN s_2 = '0' ELSE
      tmp_49;

  
  tmp_51 <= obj_index_1 WHEN varargout_2_2 = '0' ELSE
      tmp_50;

  obj_index_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index_1 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_4_0 = '1' THEN
        obj_index_1 <= tmp_51;
      END IF;
    END IF;
  END PROCESS obj_index_reg_process;


  p243tmp_add_temp <= resize(obj_index_1, 8) + to_unsigned(16#01#, 8);
  p243tmp_sub_cast <= signed(resize(p243tmp_add_temp, 32));
  tmp_52 <= p243tmp_sub_cast - 1;

  obj_FFTReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTReg <= (OTHERS => to_unsigned(16#040#, 10));
      ELSIF enb_1_4_0 = '1' THEN
        obj_FFTReg <= tmp_53;
      END IF;
    END IF;
  END PROCESS obj_FFTReg_reg_process;


  p82_output : PROCESS (obj_FFTReg, obj_fftInFFTDelayBal, sel_2_1, tmp_52)
  BEGIN
    s_4 <= obj_FFTReg;
    IF sel_2_1 = '1' THEN 
      s_4(to_integer(tmp_52)) <= obj_fftInFFTDelayBal;
    END IF;
  END PROCESS p82_output;


  
  tmp_53 <= s_4 WHEN varargout_2_2 = '0' ELSE
      s_4;

  obj_index1 <= to_unsigned(16#00#, 7);

  p260tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  
  tmp_54 <= "1111111" WHEN p260tmp_add_temp(7) /= '0' ELSE
      p260tmp_add_temp(6 DOWNTO 0);

  
  s_5 <= '1' WHEN obj_index1_1 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_55 <= tmp_54 WHEN s_5 = '0' ELSE
      obj_index1;

  
  tmp_56 <= obj_index1_1 WHEN varargout_2_3 = '0' ELSE
      tmp_55;

  obj_index1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index1_1 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_4_0 = '1' THEN
        obj_index1_1 <= tmp_56;
      END IF;
    END IF;
  END PROCESS obj_index1_reg_process;


  p57tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  p57tmp_sub_cast <= signed(resize(p57tmp_add_temp, 32));
  tmp_57 <= tmp_53(to_integer(p57tmp_sub_cast - 1));

  
  tmp_58 <= obj_FFTRegDelay WHEN varargout_2_3 = '0' ELSE
      tmp_57;

  obj_FFTRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTRegDelay <= to_unsigned(16#040#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_FFTRegDelay <= tmp_58;
      END IF;
    END IF;
  END PROCESS obj_FFTRegDelay_reg_process;


  p54tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  p54tmp_sub_cast <= signed(resize(p54tmp_add_temp, 32));
  tmp_59 <= tmp_53(to_integer(p54tmp_sub_cast - 1));

  
  tmp_60 <= obj_FFTRegDelay WHEN varargout_2_3 = '0' ELSE
      tmp_59;

  varargout_4_unsigned <= unsigned(varargout_4);

  obj_LGrdInFFTDelayBal <= resize(varargout_4_unsigned, 10);

  sel_3 <= '0';

  sel_4 <= '0';

  out_rsvd_3 <= '1';

  
  sel_2_2 <= sel_4 WHEN s_2 = '0' ELSE
      out_rsvd_3;

  
  sel_2_3 <= sel_3 WHEN varargout_2_2 = '0' ELSE
      sel_2_2;

  p244tmp_add_temp <= resize(obj_index_1, 8) + to_unsigned(16#01#, 8);
  p244tmp_sub_cast <= signed(resize(p244tmp_add_temp, 32));
  tmp_61 <= p244tmp_sub_cast - 1;

  obj_LGrdReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGrdReg <= (OTHERS => to_unsigned(16#006#, 10));
      ELSIF enb_1_4_0 = '1' THEN
        obj_LGrdReg <= tmp_62;
      END IF;
    END IF;
  END PROCESS obj_LGrdReg_reg_process;


  p78_output : PROCESS (obj_LGrdInFFTDelayBal, obj_LGrdReg, sel_2_3, tmp_61)
  BEGIN
    s_6 <= obj_LGrdReg;
    IF sel_2_3 = '1' THEN 
      s_6(to_integer(tmp_61)) <= obj_LGrdInFFTDelayBal;
    END IF;
  END PROCESS p78_output;


  
  tmp_62 <= s_6 WHEN varargout_2_2 = '0' ELSE
      s_6;

  p58tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  p58tmp_sub_cast <= signed(resize(p58tmp_add_temp, 32));
  tmp_63 <= tmp_62(to_integer(p58tmp_sub_cast - 1));

  
  tmp_64 <= obj_LGrdRegDelay WHEN varargout_2_3 = '0' ELSE
      tmp_63;

  obj_LGrdRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGrdRegDelay <= to_unsigned(16#006#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_LGrdRegDelay <= tmp_64;
      END IF;
    END IF;
  END PROCESS obj_LGrdRegDelay_reg_process;


  p55tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  p55tmp_sub_cast <= signed(resize(p55tmp_add_temp, 32));
  tmp_65 <= tmp_62(to_integer(p55tmp_sub_cast - 1));

  
  tmp_66 <= obj_LGrdRegDelay WHEN varargout_2_3 = '0' ELSE
      tmp_65;

  varargout_5_unsigned <= unsigned(varargout_5_1);

  obj_RGrdInFFTDelayBal <= resize(varargout_5_unsigned, 10);

  sel_5 <= '0';

  sel_6 <= '0';

  out_rsvd_4 <= '1';

  
  sel_2_4 <= sel_6 WHEN s_2 = '0' ELSE
      out_rsvd_4;

  
  sel_2_5 <= sel_5 WHEN varargout_2_2 = '0' ELSE
      sel_2_4;

  p245tmp_add_temp <= resize(obj_index_1, 8) + to_unsigned(16#01#, 8);
  p245tmp_sub_cast <= signed(resize(p245tmp_add_temp, 32));
  tmp_67 <= p245tmp_sub_cast - 1;

  obj_RGrdReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGrdReg <= (OTHERS => to_unsigned(16#005#, 10));
      ELSIF enb_1_4_0 = '1' THEN
        obj_RGrdReg <= tmp_68;
      END IF;
    END IF;
  END PROCESS obj_RGrdReg_reg_process;


  p74_output : PROCESS (obj_RGrdInFFTDelayBal, obj_RGrdReg, sel_2_5, tmp_67)
  BEGIN
    s_7 <= obj_RGrdReg;
    IF sel_2_5 = '1' THEN 
      s_7(to_integer(tmp_67)) <= obj_RGrdInFFTDelayBal;
    END IF;
  END PROCESS p74_output;


  
  tmp_68 <= s_7 WHEN varargout_2_2 = '0' ELSE
      s_7;

  p59tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  p59tmp_sub_cast <= signed(resize(p59tmp_add_temp, 32));
  tmp_69 <= tmp_68(to_integer(p59tmp_sub_cast - 1));

  
  tmp_70 <= obj_RGrdRegDelay WHEN varargout_2_3 = '0' ELSE
      tmp_69;

  obj_RGrdRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGrdRegDelay <= to_unsigned(16#005#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_RGrdRegDelay <= tmp_70;
      END IF;
    END IF;
  END PROCESS obj_RGrdRegDelay_reg_process;


  p56tmp_add_temp <= resize(obj_index1_1, 8) + to_unsigned(16#01#, 8);
  p56tmp_sub_cast <= signed(resize(p56tmp_add_temp, 32));
  tmp_71 <= tmp_68(to_integer(p56tmp_sub_cast - 1));

  
  tmp_72 <= obj_RGrdRegDelay WHEN varargout_2_3 = '0' ELSE
      tmp_71;

  obj_validDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validDelay1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_validDelay1 <= varargout_3_2;
      END IF;
    END IF;
  END PROCESS obj_validDelay1_reg_process;


  obj_FFTLenDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTLenDelay1 <= to_unsigned(16#040#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_FFTLenDelay1 <= tmp_60;
      END IF;
    END IF;
  END PROCESS obj_FFTLenDelay1_reg_process;


  obj_LGDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGDelay1 <= to_unsigned(16#006#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_LGDelay1 <= tmp_66;
      END IF;
    END IF;
  END PROCESS obj_LGDelay1_reg_process;


  obj_RGDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGDelay1 <= to_unsigned(16#005#, 10);
      ELSIF enb_1_4_0 = '1' THEN
        obj_RGDelay1 <= tmp_72;
      END IF;
    END IF;
  END PROCESS obj_RGDelay1_reg_process;


  varargout_1_re_signed_1 <= signed(varargout_1_re_5);

  varargout_1_im_signed_1 <= signed(varargout_1_im_5);

  obj_dataOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataOut_re <= to_signed(16#000000#, 24);
        obj_dataOut_im <= to_signed(16#000000#, 24);
      ELSIF enb_1_4_0 = '1' THEN
        obj_dataOut_re <= varargout_1_re_signed_1;
        obj_dataOut_im <= varargout_1_im_signed_1;
      END IF;
    END IF;
  END PROCESS obj_dataOut_reg_process;


  obj_validOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validOut <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_validOut <= varargout_2_5;
      END IF;
    END IF;
  END PROCESS obj_validOut_reg_process;


  p197obj_readyLast_sub_cast <= resize(obj_readyHigh, 12);
  p197obj_readyLast_sub_cast_1 <= signed(resize(p197obj_readyLast_sub_cast, 13));
  p197obj_readyLast_sub_temp <= p197obj_readyLast_sub_cast_1 - to_signed(16#0001#, 13);
  
  p197obj_readyLast_cast <= "000000000000" WHEN p197obj_readyLast_sub_temp(12) = '1' ELSE
      unsigned(p197obj_readyLast_sub_temp(11 DOWNTO 0));
  obj_readyLast <= resize(p197obj_readyLast_cast, 17);

  
  tmp_73 <= '1' WHEN (resize(tmp_9, 17) >= obj_readyLast) AND (tmp_9 < obj_readyHigh) ELSE
      '0';

  obj_readyFlag <= '0';

  obj_readyFlag_1 <= '1';

  obj_readyFlag_2 <= '0';

  
  tmp_74 <= obj_readyFlag_3 WHEN s_8 = '0' ELSE
      obj_readyFlag;

  
  tmp_75 <= tmp_74 WHEN tmp_73 = '0' ELSE
      obj_readyFlag_1;

  
  tmp_76 <= tmp_75 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyFlag_2;

  obj_readyFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyFlag_3 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        obj_readyFlag_3 <= tmp_76;
      END IF;
    END IF;
  END PROCESS obj_readyFlag_reg_process;


  s_8 <= obj_readyFlag_3 AND valid;

  obj_readyOut <= '1';

  obj_readyOut_1 <= '1';

  
  tmp_77 <= obj_readyOut WHEN tmp = '0' ELSE
      obj_readyOut_1;

  obj_readyOut_2 <= '0';

  
  tmp_78 <= tmp_77 WHEN tmp_2 = '0' ELSE
      obj_readyOut_2;

  obj_readyOut_3 <= '1';

  
  tmp_79 <= tmp_78 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyOut_3;

  obj_readyOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyOut_4 <= '1';
      ELSIF enb_1_4_0 = '1' THEN
        obj_readyOut_4 <= tmp_79;
      END IF;
    END IF;
  END PROCESS obj_readyOut_reg_process;


  s_9 <=  NOT obj_validLowFlag_4;

  varargout_3_4 <= '1';

  varargout_3_5 <= '0';

  
  tmp_80 <= varargout_3_4 WHEN s_9 = '0' ELSE
      varargout_3_5;

  
  tmp_81 <= obj_readyOut_4 WHEN s_8 = '0' ELSE
      tmp_80;

  data_re_1 <= std_logic_vector(obj_dataOut_re);

  data_im_1 <= std_logic_vector(obj_dataOut_im);

  valid_1 <= obj_validOut;

  ready <= tmp_81;

END rtl;

