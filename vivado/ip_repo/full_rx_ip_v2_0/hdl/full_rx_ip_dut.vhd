-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_dut.vhd
-- Created: 2024-08-11 11:01:41
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_dut
-- Source Path: full_rx_ip/full_rx_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        data_in                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        ce_out_0                          :   OUT   std_logic;  -- ufix1
        ce_out_1                          :   OUT   std_logic;  -- ufix1
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        valid_out                         :   OUT   std_logic;  -- ufix1
        reg0                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        end_rsvd                          :   OUT   std_logic;  -- ufix1
        err                               :   OUT   std_logic  -- ufix1
        );
END full_rx_ip_dut;


ARCHITECTURE rtl OF full_rx_ip_dut IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_full_rx
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          ce_out_0                        :   OUT   std_logic;  -- ufix1
          ce_out_1                        :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          valid_out                       :   OUT   std_logic;  -- ufix1
          reg0                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          end_rsvd                        :   OUT   std_logic;  -- ufix1
          err                             :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_full_rx
    USE ENTITY work.full_rx_ip_src_full_rx(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ce_out_0_sig                     : std_logic;  -- ufix1
  SIGNAL ce_out_1_sig                     : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL reg0_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg1_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg2_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg3_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL end_rsvd_sig                     : std_logic;  -- ufix1
  SIGNAL err_sig                          : std_logic;  -- ufix1

BEGIN
  u_full_rx_ip_src_full_rx : full_rx_ip_src_full_rx
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset_x => reset_x,
              data_in => data_in,  -- sfix16_En12
              ce_out_0 => ce_out_0_sig,  -- ufix1
              ce_out_1 => ce_out_1_sig,  -- ufix1
              data_out => data_out_sig,  -- ufix8
              valid_out => valid_out_sig,  -- ufix1
              reg0 => reg0_sig,  -- ufix32
              reg1 => reg1_sig,  -- ufix32
              reg2 => reg2_sig,  -- ufix32
              reg3 => reg3_sig,  -- ufix32
              end_rsvd => end_rsvd_sig,  -- ufix1
              err => err_sig  -- ufix1
              );

  enb <= dut_enable;

  ce_out_0 <= ce_out_0_sig;

  ce_out_1 <= ce_out_1_sig;

  data_out <= data_out_sig;

  valid_out <= valid_out_sig;

  reg0 <= reg0_sig;

  reg1 <= reg1_sig;

  reg2 <= reg2_sig;

  reg3 <= reg3_sig;

  end_rsvd <= end_rsvd_sig;

  err <= err_sig;

END rtl;

