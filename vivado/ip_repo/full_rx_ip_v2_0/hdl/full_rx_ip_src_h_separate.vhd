-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_h_separate.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_h_separate
-- Source Path: HDLRx/full_rx/h_rx_full/h_separate
-- Hierarchy Level: 2
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_h_separate IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        enb_1_16_1                        :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in                           :   IN    std_logic;
        ctrl_in_start                     :   IN    std_logic;
        ctrl_in_valid                     :   IN    std_logic;
        psdu_size                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
        msg_duration                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
        block_size                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
        fec_rate                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        rep_number                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        concat_factor                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        scrambler_init                    :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
        bat_id                            :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
        cp_id                             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_spacing                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_number                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        end_rsvd                          :   OUT   std_logic
        );
END full_rx_ip_src_h_separate;


ARCHITECTURE rtl OF full_rx_ip_src_h_separate IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_Compare_To_Constant_block1
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Constant1
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Constant2
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Constant3
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Constant4
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Constant5
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Constant6
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_Compare_To_Constant_block1
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant_block1(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Constant1
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant1(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Constant2
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant2(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Constant3
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant3(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Constant4
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant4(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Constant5
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant5(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Constant6
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant6(rtl);

  -- Signals
  SIGNAL serial                           : std_logic;
  SIGNAL start                            : std_logic;
  SIGNAL Rate_Transition_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Rate_Transition_out1             : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL Deserializer1D_contl_cnt         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntGlobal   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cnt_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntGlobal_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_hOutSignalsContl  : std_logic;
  SIGNAL Deserializer1D_deserInnerOut     : std_logic;
  SIGNAL Deserializer1D_OutRegComp_reg    : std_logic;  -- ufix1
  SIGNAL Deserializer1D_out2              : std_logic;
  SIGNAL count_step                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_reset                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count                            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_2                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_3                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_4                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL Deserializer1D_tapout            : std_logic_vector(6 DOWNTO 0);  -- boolean [7]
  SIGNAL Deserializer1D_muxOut            : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Deserializer1D_deserInnerOut_1   : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Deserializer1D_OutRegComp_reg_1  : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL parallel                         : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay_out1                       : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay1_out1                      : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Vector_Concatenate_out1          : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL Switch_out1                      : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Unit_Delay_out1                  : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Vector_Concatenate1_out1         : std_logic_vector(15 DOWNTO 0);  -- boolean [16]
  SIGNAL Switch1_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Unit_Delay1_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL Vector_Concatenate2_out1         : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Switch2_out1                     : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay2_out1                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Vector_Concatenate3_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch3_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay3_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Vector_Concatenate4_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch4_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay4_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Vector_Concatenate5_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch5_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Vector_Concatenate6_out1         : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Switch6_out1                     : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Unit_Delay6_out1                 : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL Vector_Concatenate7_out1         : std_logic_vector(4 DOWNTO 0);  -- boolean [5]
  SIGNAL Switch7_out1                     : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Unit_Delay7_out1                 : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Compare_To_Constant5_out1        : std_logic;
  SIGNAL Vector_Concatenate8_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch8_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay8_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Vector_Concatenate9_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch9_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay9_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Compare_To_Constant6_out1        : std_logic;
  SIGNAL Vector_Concatenate10_out1        : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch10_out1                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay10_out1                : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Switch11_out1                    : std_logic;
  SIGNAL Unit_Delay11_out1                : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_Compare_To_Constant : full_rx_ip_src_Compare_To_Constant_block1
    PORT MAP( u => std_logic_vector(count_4),  -- ufix5
              y => Compare_To_Constant_out1
              );

  u_Compare_To_Constant1 : full_rx_ip_src_Compare_To_Constant1
    PORT MAP( u => std_logic_vector(count),  -- ufix5
              y => Compare_To_Constant1_out1
              );

  u_Compare_To_Constant2 : full_rx_ip_src_Compare_To_Constant2
    PORT MAP( u => std_logic_vector(count),  -- ufix5
              y => Compare_To_Constant2_out1
              );

  u_Compare_To_Constant3 : full_rx_ip_src_Compare_To_Constant3
    PORT MAP( u => std_logic_vector(count),  -- ufix5
              y => Compare_To_Constant3_out1
              );

  u_Compare_To_Constant4 : full_rx_ip_src_Compare_To_Constant4
    PORT MAP( u => std_logic_vector(count),  -- ufix5
              y => Compare_To_Constant4_out1
              );

  u_Compare_To_Constant5 : full_rx_ip_src_Compare_To_Constant5
    PORT MAP( u => std_logic_vector(count),  -- ufix5
              y => Compare_To_Constant5_out1
              );

  u_Compare_To_Constant6 : full_rx_ip_src_Compare_To_Constant6
    PORT MAP( u => std_logic_vector(count),  -- ufix5
              y => Compare_To_Constant6_out1
              );

  serial <= data_in;

  start <= ctrl_in_start;

  Rate_Transition_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_bypass_reg <= '0';
      ELSIF enb_1_16_1 = '1' THEN
        Rate_Transition_bypass_reg <= start;
      END IF;
    END IF;
  END PROCESS Rate_Transition_bypass_process;

  
  Rate_Transition_out1 <= start WHEN enb_1_16_1 = '1' ELSE
      Rate_Transition_bypass_reg;

  valid <= ctrl_in_valid;

  Deserializer1D_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_contl_cnt <= to_unsigned(16#0#, 4);
        Deserializer1D_contl_cntGlobal <= to_unsigned(16#0#, 4);
        Deserializer1D_contl_cntInnerRegCtrol <= to_unsigned(16#8#, 4);
      ELSIF enb_1_2_0 = '1' THEN
        Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt_next;
        Deserializer1D_contl_cntGlobal <= Deserializer1D_contl_cntGlobal_next;
        Deserializer1D_contl_cntInnerRegCtrol <= Deserializer1D_contl_cntInnerRegCtrol_next;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_contl_output : PROCESS (Deserializer1D_contl_cnt, Deserializer1D_contl_cntGlobal,
       Deserializer1D_contl_cntInnerRegCtrol, valid)
    VARIABLE out0 : std_logic;
    VARIABLE validOutput : std_logic;
    VARIABLE cntInnerRegCtrol_temp : unsigned(3 DOWNTO 0);
  BEGIN
    cntInnerRegCtrol_temp := Deserializer1D_contl_cntInnerRegCtrol;
    Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt;
    Deserializer1D_tapDelayEn <= valid;
    Deserializer1D_hOutSignalsContl <= '0';
    out0 := '0';
    Deserializer1D_innerRegCtrolEn <= '0';
    validOutput := '0';
    IF (valid /= '0') AND (Deserializer1D_contl_cnt = to_unsigned(16#7#, 4)) THEN 
      validOutput := '1';
    END IF;
    IF validOutput = '1' THEN 
      Deserializer1D_hOutSignalsContl <= '1';
      out0 := '1';
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := Deserializer1D_contl_cntGlobal;
    END IF;
    IF ( NOT out0) = '1' AND (Deserializer1D_contl_cntGlobal = cntInnerRegCtrol_temp) THEN 
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := to_unsigned(16#8#, 4);
    END IF;
    IF valid /= '0' THEN 
      IF Deserializer1D_contl_cnt = to_unsigned(16#7#, 4) THEN 
        Deserializer1D_contl_cnt_next <= to_unsigned(16#0#, 4);
      ELSE 
        Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt + to_unsigned(16#1#, 4);
      END IF;
    END IF;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#7#, 4) THEN 
      Deserializer1D_contl_cntGlobal_next <= to_unsigned(16#0#, 4);
    ELSE 
      Deserializer1D_contl_cntGlobal_next <= Deserializer1D_contl_cntGlobal + to_unsigned(16#1#, 4);
    END IF;
    Deserializer1D_innerRegEn <= out0;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#0#, 4) THEN 
      Deserializer1D_outBypassEn <= '1';
    ELSE 
      Deserializer1D_outBypassEn <= '0';
    END IF;
    Deserializer1D_contl_cntInnerRegCtrol_next <= cntInnerRegCtrol_temp;
  END PROCESS Deserializer1D_contl_output;


  Deserializer1D_innerRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut <= '0';
      ELSIF enb_1_2_0 = '1' AND Deserializer1D_innerRegCtrolEn = '1' THEN
        Deserializer1D_deserInnerOut <= Deserializer1D_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_process;


  Deserializer1D_OutRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg <= '0';
      ELSIF Deserializer1D_outBypassEn = '1' AND enb_1_2_0 = '1' THEN
        Deserializer1D_OutRegComp_reg <= Deserializer1D_deserInnerOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_process;

  
  Deserializer1D_out2 <= Deserializer1D_deserInnerOut WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#01#, 5);

  count_reset <= to_unsigned(16#00#, 5);

  count_1 <= count + count_step;

  
  count_2 <= count WHEN Deserializer1D_out2 = '0' ELSE
      count_1;

  
  count_3 <= count_2 WHEN Rate_Transition_out1 = '0' ELSE
      count_reset;

  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count <= to_unsigned(16#00#, 5);
      ELSIF enb_1_16_0 = '1' THEN
        count <= count_3;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  count_4 <= count;

  Deserializer1D_tapDelayEn_1 <= enb_1_2_0 AND Deserializer1D_tapDelayEn;

  Deserializer1D_tapDelayComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_tapout <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout(6) <= serial;
        Deserializer1D_tapout(5 DOWNTO 0) <= Deserializer1D_tapout(6 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  Deserializer1D_muxOut_gen: FOR idx0 IN 0 TO 6 GENERATE
    Deserializer1D_muxOut(idx0) <= Deserializer1D_tapout(idx0);
  END GENERATE;
  Deserializer1D_muxOut(7) <= serial;

  Deserializer1D_innerRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut_1 <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_deserInnerOut_1 <= Deserializer1D_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_1_process;


  Deserializer1D_OutRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= (OTHERS => '0');
      ELSIF Deserializer1D_outBypassEn = '1' AND enb_1_2_0 = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= Deserializer1D_deserInnerOut_1;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_1_process;

  
  parallel <= Deserializer1D_deserInnerOut_1 WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg_1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Delay_out1 <= parallel;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Delay1_out1 <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Vector_Concatenate_out1_gen: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate_out1(idx0) <= Delay1_out1(idx0);
  END GENERATE;
  Vector_Concatenate_out1_gen1: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate_out1(idx0 + 8) <= Delay_out1(idx0);
  END GENERATE;
  Vector_Concatenate_out1_gen2: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate_out1(idx0 + 16) <= parallel(idx0);
  END GENERATE;

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  Switch_out1 <= Unit_Delay_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      Vector_Concatenate_out1;

  Vector_Concatenate1_out1_gen: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate1_out1(idx0) <= Delay_out1(idx0);
  END GENERATE;
  Vector_Concatenate1_out1_gen1: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate1_out1(idx0 + 8) <= parallel(idx0);
  END GENERATE;

  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  
  Switch1_out1 <= Unit_Delay1_out1 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Vector_Concatenate1_out1;

  Vector_Concatenate2_out1(0) <= parallel(0);
  Vector_Concatenate2_out1(1) <= parallel(1);

  Unit_Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay2_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  
  Switch2_out1 <= Unit_Delay2_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Vector_Concatenate2_out1;

  Vector_Concatenate3_out1(0) <= parallel(2);
  Vector_Concatenate3_out1(1) <= parallel(3);
  Vector_Concatenate3_out1(2) <= parallel(4);

  Unit_Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay3_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay3_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  
  Switch3_out1 <= Unit_Delay3_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Vector_Concatenate3_out1;

  Vector_Concatenate4_out1(0) <= parallel(5);
  Vector_Concatenate4_out1(1) <= parallel(6);
  Vector_Concatenate4_out1(2) <= parallel(7);

  Unit_Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay4_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay4_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  
  Switch4_out1 <= Unit_Delay4_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Vector_Concatenate4_out1;

  Vector_Concatenate5_out1(0) <= parallel(0);
  Vector_Concatenate5_out1(1) <= parallel(1);
  Vector_Concatenate5_out1(2) <= parallel(2);

  Unit_Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay5_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay5_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay5_process;


  
  Switch5_out1 <= Unit_Delay5_out1 WHEN Compare_To_Constant3_out1 = '0' ELSE
      Vector_Concatenate5_out1;

  Vector_Concatenate6_out1(0) <= parallel(3);
  Vector_Concatenate6_out1(1) <= parallel(4);
  Vector_Concatenate6_out1(2) <= parallel(5);
  Vector_Concatenate6_out1(3) <= parallel(6);

  Unit_Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay6_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay6_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay6_process;


  
  Switch6_out1 <= Unit_Delay6_out1 WHEN Compare_To_Constant3_out1 = '0' ELSE
      Vector_Concatenate6_out1;

  Vector_Concatenate7_out1(0) <= parallel(0);
  Vector_Concatenate7_out1(1) <= parallel(1);
  Vector_Concatenate7_out1(2) <= parallel(2);
  Vector_Concatenate7_out1(3) <= parallel(3);
  Vector_Concatenate7_out1(4) <= parallel(4);

  Unit_Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay7_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay7_out1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_process;


  
  Switch7_out1 <= Unit_Delay7_out1 WHEN Compare_To_Constant4_out1 = '0' ELSE
      Vector_Concatenate7_out1;

  Vector_Concatenate8_out1(0) <= parallel(0);
  Vector_Concatenate8_out1(1) <= parallel(1);
  Vector_Concatenate8_out1(2) <= parallel(2);

  Unit_Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay8_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay8_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay8_process;


  
  Switch8_out1 <= Unit_Delay8_out1 WHEN Compare_To_Constant5_out1 = '0' ELSE
      Vector_Concatenate8_out1;

  Vector_Concatenate9_out1(0) <= parallel(3);
  Vector_Concatenate9_out1(1) <= parallel(4);
  Vector_Concatenate9_out1(2) <= parallel(5);

  Unit_Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay9_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay9_out1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay9_process;


  
  Switch9_out1 <= Unit_Delay9_out1 WHEN Compare_To_Constant5_out1 = '0' ELSE
      Vector_Concatenate9_out1;

  Vector_Concatenate10_out1(0) <= parallel(2);
  Vector_Concatenate10_out1(1) <= parallel(3);
  Vector_Concatenate10_out1(2) <= parallel(4);

  Unit_Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay10_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay10_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay10_process;


  
  Switch10_out1 <= Unit_Delay10_out1 WHEN Compare_To_Constant6_out1 = '0' ELSE
      Vector_Concatenate10_out1;

  Logical_Operator_out1 <= Compare_To_Constant6_out1 OR Rate_Transition_out1;

  Unit_Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay11_out1 <= '0';
      ELSIF enb_1_16_0 = '1' THEN
        Unit_Delay11_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay11_process;


  
  Switch11_out1 <= Unit_Delay11_out1 WHEN Logical_Operator_out1 = '0' ELSE
      Compare_To_Constant6_out1;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_16_0 = '1' THEN
        Delay2_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  psdu_size <= Switch_out1;

  msg_duration <= Switch1_out1;

  block_size <= Switch2_out1;

  fec_rate <= Switch3_out1;

  rep_number <= Switch4_out1;

  concat_factor <= Switch5_out1;

  scrambler_init <= Switch6_out1;

  bat_id <= Switch7_out1;

  cp_id <= Switch8_out1;

  mimo_spacing <= Switch9_out1;

  mimo_number <= Switch10_out1;

  end_rsvd <= Delay2_out1;

END rtl;

