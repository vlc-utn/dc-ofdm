-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_h_rx_full.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_h_rx_full
-- Source Path: HDLRx/full_rx/h_rx_full
-- Hierarchy Level: 1
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_h_rx_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_16_0                        :   IN    std_logic;
        enb_1_16_1                        :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        start_in                          :   IN    std_logic;
        psdu_size                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
        msg_duration                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
        block_size                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
        fec_rate                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        rep_number                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        concat_factor                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        scrambler_init                    :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
        bat_id                            :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
        cp_id                             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_spacing                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_number                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        end_rsvd                          :   OUT   std_logic;
        err                               :   OUT   std_logic
        );
END full_rx_ip_src_h_rx_full;


ARCHITECTURE rtl OF full_rx_ip_src_h_rx_full IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_h_remove_repetition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          start_in                        :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_LDPC_Deco_Hc_12H
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in1_start                       :   IN    std_logic;
          in1_end                         :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          out0                            :   OUT   std_logic;
          out1_start                      :   OUT   std_logic;
          out1_end                        :   OUT   std_logic;
          out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_h_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_h_crc_rx
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic;
          err                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_h_separate
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          psdu_size                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          msg_duration                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
          block_size                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
          fec_rate                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          rep_number                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          concat_factor                   :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          scrambler_init                  :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          bat_id                          :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
          cp_id                           :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_spacing                    :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_number                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          end_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_h_remove_repetition
    USE ENTITY work.full_rx_ip_src_h_remove_repetition(rtl);

  FOR ALL : full_rx_ip_src_LDPC_Deco_Hc_12H
    USE ENTITY work.full_rx_ip_src_LDPC_Deco_Hc_12H(rtl);

  FOR ALL : full_rx_ip_src_h_scrambler
    USE ENTITY work.full_rx_ip_src_h_scrambler(rtl);

  FOR ALL : full_rx_ip_src_h_crc_rx
    USE ENTITY work.full_rx_ip_src_h_crc_rx(rtl);

  FOR ALL : full_rx_ip_src_h_separate
    USE ENTITY work.full_rx_ip_src_h_separate(rtl);

  -- Signals
  SIGNAL data_in_signed                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Data_Type_Conversion_out1        : signed(7 DOWNTO 0);  -- int8
  SIGNAL h_remove_repetition_out1         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL h_remove_repetition_out2_start   : std_logic;
  SIGNAL h_remove_repetition_out2_end     : std_logic;
  SIGNAL h_remove_repetition_out2_valid   : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out1            : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out2_start      : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out2_end        : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out2_valid      : std_logic;
  SIGNAL h_scrambler_out1                 : std_logic;
  SIGNAL h_scrambler_out2_start           : std_logic;
  SIGNAL h_scrambler_out2_end             : std_logic;
  SIGNAL h_scrambler_out2_valid           : std_logic;
  SIGNAL h_crc_rx_out1                    : std_logic;
  SIGNAL h_crc_rx_out2_start              : std_logic;
  SIGNAL h_crc_rx_out2_valid              : std_logic;
  SIGNAL h_crc_rx_out3                    : std_logic;
  SIGNAL h_separate_out1                  : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL h_separate_out2                  : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL h_separate_out3                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL h_separate_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out7                  : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL h_separate_out8                  : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL h_separate_out9                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out10                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out11                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out12                 : std_logic;
  SIGNAL Rate_Transition_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Rate_Transition_out1             : std_logic;

BEGIN
  u_h_remove_repetition : full_rx_ip_src_h_remove_repetition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => std_logic_vector(Data_Type_Conversion_out1),  -- int8
              start_in => start_in,
              data_out => h_remove_repetition_out1,  -- int8
              ctrl_out_start => h_remove_repetition_out2_start,
              ctrl_out_end => h_remove_repetition_out2_end,
              ctrl_out_valid => h_remove_repetition_out2_valid
              );

  u_LDPC_Deco_Hc_12H : full_rx_ip_src_LDPC_Deco_Hc_12H
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              in0 => h_remove_repetition_out1,  -- int8
              in1_start => h_remove_repetition_out2_start,
              in1_end => h_remove_repetition_out2_end,
              in1_valid => h_remove_repetition_out2_valid,
              out0 => LDPC_Deco_Hc_12H_out1,
              out1_start => LDPC_Deco_Hc_12H_out2_start,
              out1_end => LDPC_Deco_Hc_12H_out2_end,
              out1_valid => LDPC_Deco_Hc_12H_out2_valid
              );

  u_h_scrambler : full_rx_ip_src_h_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => LDPC_Deco_Hc_12H_out1,
              ctrl_in_start => LDPC_Deco_Hc_12H_out2_start,
              ctrl_in_end => LDPC_Deco_Hc_12H_out2_end,
              ctrl_in_valid => LDPC_Deco_Hc_12H_out2_valid,
              data_out => h_scrambler_out1,
              ctrl_out_start => h_scrambler_out2_start,
              ctrl_out_end => h_scrambler_out2_end,
              ctrl_out_valid => h_scrambler_out2_valid
              );

  u_h_crc_rx : full_rx_ip_src_h_crc_rx
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => h_scrambler_out1,
              ctrl_in_start => h_scrambler_out2_start,
              ctrl_in_end => h_scrambler_out2_end,
              ctrl_in_valid => h_scrambler_out2_valid,
              data_out => h_crc_rx_out1,
              ctrl_out_start => h_crc_rx_out2_start,
              ctrl_out_valid => h_crc_rx_out2_valid,
              err => h_crc_rx_out3
              );

  u_h_separate : full_rx_ip_src_h_separate
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_2_0 => enb_1_2_0,
              data_in => h_crc_rx_out1,
              ctrl_in_start => h_crc_rx_out2_start,
              ctrl_in_valid => h_crc_rx_out2_valid,
              psdu_size => h_separate_out1,  -- ufix1 [24]
              msg_duration => h_separate_out2,  -- ufix1 [16]
              block_size => h_separate_out3,  -- ufix1 [2]
              fec_rate => h_separate_out4,  -- ufix1 [3]
              rep_number => h_separate_out5,  -- ufix1 [3]
              concat_factor => h_separate_out6,  -- ufix1 [3]
              scrambler_init => h_separate_out7,  -- ufix1 [4]
              bat_id => h_separate_out8,  -- ufix1 [5]
              cp_id => h_separate_out9,  -- ufix1 [3]
              mimo_spacing => h_separate_out10,  -- ufix1 [3]
              mimo_number => h_separate_out11,  -- ufix1 [3]
              end_rsvd => h_separate_out12
              );

  data_in_signed <= signed(data_in);

  Data_Type_Conversion_out1 <= resize(data_in_signed(15 DOWNTO 12), 8);

  Rate_Transition_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_bypass_reg <= '0';
      ELSIF enb_1_16_1 = '1' THEN
        Rate_Transition_bypass_reg <= h_crc_rx_out3;
      END IF;
    END IF;
  END PROCESS Rate_Transition_bypass_process;

  
  Rate_Transition_out1 <= h_crc_rx_out3 WHEN enb_1_16_1 = '1' ELSE
      Rate_Transition_bypass_reg;

  psdu_size <= h_separate_out1;

  msg_duration <= h_separate_out2;

  block_size <= h_separate_out3;

  fec_rate <= h_separate_out4;

  rep_number <= h_separate_out5;

  concat_factor <= h_separate_out6;

  scrambler_init <= h_separate_out7;

  bat_id <= h_separate_out8;

  cp_id <= h_separate_out9;

  mimo_spacing <= h_separate_out10;

  mimo_number <= h_separate_out11;

  end_rsvd <= h_separate_out12;

  err <= Rate_Transition_out1;

END rtl;

