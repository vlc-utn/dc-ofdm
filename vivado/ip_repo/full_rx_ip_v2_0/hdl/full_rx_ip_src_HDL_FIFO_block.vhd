-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_HDL_FIFO_block.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_HDL_FIFO_block
-- Source Path: HDLRx/full_rx/prepare_payload_data/HDL_FIFO
-- Hierarchy Level: 2
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_HDL_FIFO_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        In_rsvd                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Push                              :   IN    std_logic;
        Pop                               :   IN    std_logic;
        Out_rsvd                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        Empty                             :   OUT   std_logic  -- ufix1
        );
END full_rx_ip_src_HDL_FIFO_block;


ARCHITECTURE rtl OF full_rx_ip_src_HDL_FIFO_block IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_SimpleDualPortRAM_generic_block7
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_SimpleDualPortRAM_generic_block7
    USE ENTITY work.full_rx_ip_src_SimpleDualPortRAM_generic_block7(rtl);

  -- Signals
  SIGNAL us2_muxsel                       : std_logic;  -- ufix1
  SIGNAL us2_zero                         : std_logic;
  SIGNAL w_us2                            : std_logic;  -- ufix1
  SIGNAL fifo_front_indx                  : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_front_dir                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_back_indx                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_back_dir                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_sample_count                : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL fifo_front_indx_next             : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_front_dir_next              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_back_indx_next              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_back_dir_next               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_sample_count_next           : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL fifo_out3                        : std_logic;
  SIGNAL fifo_out4                        : std_logic;
  SIGNAL fifo_write_enable                : std_logic;
  SIGNAL fifo_read_enable                 : std_logic;
  SIGNAL fifo_front_indx_temp             : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL fifo_back_indx_temp              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL w_waddr                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL w_we                             : std_logic;  -- ufix1
  SIGNAL w_raddr                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL w_full                           : std_logic;  -- ufix1
  SIGNAL Num                              : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL w_cz                             : std_logic;
  SIGNAL w_const                          : std_logic;  -- ufix1
  SIGNAL w_mux1                           : std_logic;  -- ufix1
  SIGNAL w_d1                             : std_logic;  -- ufix1
  SIGNAL us1_muxsel                       : std_logic;  -- ufix1
  SIGNAL In_signed                        : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL us1_zero                         : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL w_us1                            : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL w_waddr_1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL w_waddr_signed                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL w_d2                             : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL w_out                            : signed(15 DOWNTO 0);  -- sfix16_En12

BEGIN
  u_HDL_FIFO_ram_generic : full_rx_ip_src_SimpleDualPortRAM_generic_block7
    GENERIC MAP( AddrWidth => 12,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => std_logic_vector(w_us1),
              wr_addr => std_logic_vector(w_waddr),
              wr_en => w_we,  -- ufix1
              rd_addr => std_logic_vector(w_raddr),
              dout => w_waddr_1
              );

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  us2_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        us2_muxsel <= '1';
      ELSIF enb = '1' THEN
        us2_muxsel <=  NOT us2_muxsel;
      END IF;
    END IF;
  END PROCESS us2_cnt_process;


  us2_zero <= '0';

  -- us2: Upsample by 2, Sample offset 0 
  
  w_us2 <= Push WHEN us2_muxsel = '1' ELSE
      us2_zero;

  -- FIFO logic controller
  -- us3: Upsample by 1, Sample offset 0 
  fifo_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        fifo_front_indx <= to_unsigned(16#000#, 12);
        fifo_front_dir <= to_unsigned(16#001#, 12);
        fifo_back_indx <= to_unsigned(16#000#, 12);
        fifo_back_dir <= to_unsigned(16#001#, 12);
        fifo_sample_count <= to_unsigned(16#0000#, 13);
      ELSIF enb = '1' THEN
        fifo_front_indx <= fifo_front_indx_next;
        fifo_front_dir <= fifo_front_dir_next;
        fifo_back_indx <= fifo_back_indx_next;
        fifo_back_dir <= fifo_back_dir_next;
        fifo_sample_count <= fifo_sample_count_next;
      END IF;
    END IF;
  END PROCESS fifo_process;

  
  fifo_out4 <= '1' WHEN fifo_sample_count = to_unsigned(16#1000#, 13) ELSE
      '0';
  
  fifo_out3 <= '1' WHEN fifo_sample_count = to_unsigned(16#0000#, 13) ELSE
      '0';
  fifo_write_enable <= w_us2 AND (Pop OR ( NOT fifo_out4));
  fifo_read_enable <= Pop AND ( NOT fifo_out3);
  
  fifo_front_indx_temp <= fifo_front_indx + fifo_front_dir WHEN fifo_read_enable = '1' ELSE
      fifo_front_indx;
  
  fifo_front_dir_next <= to_unsigned(16#001#, 12) WHEN fifo_front_indx_temp = to_unsigned(16#FFF#, 12) ELSE
      to_unsigned(16#001#, 12);
  
  fifo_back_indx_temp <= fifo_back_indx + fifo_back_dir WHEN fifo_write_enable = '1' ELSE
      fifo_back_indx;
  
  fifo_back_dir_next <= to_unsigned(16#001#, 12) WHEN fifo_back_indx_temp = to_unsigned(16#FFF#, 12) ELSE
      to_unsigned(16#001#, 12);
  
  fifo_sample_count_next <= fifo_sample_count + to_unsigned(16#0001#, 13) WHEN (fifo_write_enable AND ( NOT fifo_read_enable)) = '1' ELSE
      fifo_sample_count + to_unsigned(16#1FFF#, 13) WHEN (( NOT fifo_write_enable) AND fifo_read_enable) = '1' ELSE
      fifo_sample_count;
  w_waddr <= fifo_back_indx;
  w_we <= fifo_write_enable;
  w_raddr <= fifo_front_indx;
  Empty <= fifo_out3;
  w_full <= fifo_out4;
  Num <= fifo_sample_count;
  fifo_front_indx_next <= fifo_front_indx_temp;
  fifo_back_indx_next <= fifo_back_indx_temp;

  
  w_cz <= '1' WHEN Num > to_unsigned(16#0000#, 13) ELSE
      '0';

  w_const <= '0';

  
  w_mux1 <= w_const WHEN w_cz = '0' ELSE
      Pop;

  f_d1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        w_d1 <= '0';
      ELSIF enb = '1' THEN
        w_d1 <= w_mux1;
      END IF;
    END IF;
  END PROCESS f_d1_process;


  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  us1_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        us1_muxsel <= '1';
      ELSIF enb = '1' THEN
        us1_muxsel <=  NOT us1_muxsel;
      END IF;
    END IF;
  END PROCESS us1_cnt_process;


  In_signed <= signed(In_rsvd);

  us1_zero <= to_signed(16#0000#, 16);

  -- us1: Upsample by 2, Sample offset 0 
  
  w_us1 <= In_signed WHEN us1_muxsel = '1' ELSE
      us1_zero;

  w_waddr_signed <= signed(w_waddr_1);

  f_d2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        w_d2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND w_d1 = '1' THEN
        w_d2 <= w_waddr_signed;
      END IF;
    END IF;
  END PROCESS f_d2_process;


  
  w_out <= w_d2 WHEN w_d1 = '0' ELSE
      w_waddr_signed;

  Out_rsvd <= std_logic_vector(w_out);

END rtl;

