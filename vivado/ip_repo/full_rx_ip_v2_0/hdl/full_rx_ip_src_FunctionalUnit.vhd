-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_FunctionalUnit.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_FunctionalUnit
-- Source Path: HDLRx/full_rx/h_rx_full/LDPC_Deco_Hc_12H/DecoderCore/FunctionalUnit
-- Hierarchy Level: 4
-- Model version: 1.44
-- 
-- Functional_Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_FunctionalUnit IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        reset                             :   IN    std_logic;  -- ufix1
        data                              :   IN    vector_of_std_logic_vector10(0 TO 13);  -- sfix10 [14]
        valid                             :   IN    std_logic;  -- ufix1
        count                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        betaComp1                         :   IN    vector_of_std_logic_vector7(0 TO 13);  -- ufix7 [14]
        betaComp2                         :   IN    vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
        betaComp3                         :   IN    vector_of_std_logic_vector14(0 TO 13);  -- ufix14 [14]
        betaValid                         :   IN    std_logic;  -- ufix1
        gamma                             :   OUT   vector_of_std_logic_vector10(0 TO 13);  -- sfix10 [14]
        valid_1                           :   OUT   std_logic;  -- ufix1
        cnuComp1                          :   OUT   vector_of_std_logic_vector7(0 TO 13);  -- ufix7 [14]
        cnuComp2                          :   OUT   vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
        cnuComp3                          :   OUT   vector_of_std_logic_vector14(0 TO 13);  -- ufix14 [14]
        cnuValid                          :   OUT   std_logic;  -- ufix1
        rdAddr                            :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END full_rx_ip_src_FunctionalUnit;


ARCHITECTURE rtl OF full_rx_ip_src_FunctionalUnit IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_BetaDecompress_1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          betacomp1                       :   IN    vector_of_std_logic_vector7(0 TO 13);  -- ufix7 [14]
          betacomp2                       :   IN    vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
          betacomp3                       :   IN    vector_of_std_logic_vector14(0 TO 13);  -- ufix14 [14]
          validin                         :   IN    std_logic;  -- ufix1
          count                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          reset                           :   IN    std_logic;  -- ufix1
          beta                            :   OUT   vector_of_std_logic_vector8(0 TO 13);  -- sfix8 [14]
          valid                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_VariableNodeUnit
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data                            :   IN    vector_of_std_logic_vector10(0 TO 13);  -- sfix10 [14]
          beta                            :   IN    vector_of_std_logic_vector8(0 TO 13);  -- sfix8 [14]
          valid                           :   IN    std_logic;  -- ufix1
          valid_beta                      :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;  -- ufix1
          alpha                           :   OUT   vector_of_std_logic_vector10(0 TO 13);  -- sfix10 [14]
          valid_1                         :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_CheckNodeUnit
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data                            :   IN    vector_of_std_logic_vector8(0 TO 13);  -- sfix8 [14]
          valid                           :   IN    std_logic;  -- ufix1
          count                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          reset                           :   IN    std_logic;  -- ufix1
          cnuDecomp1                      :   OUT   vector_of_std_logic_vector7(0 TO 13);  -- ufix7 [14]
          cnuDecomp2                      :   OUT   vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
          cnuDecomp3                      :   OUT   vector_of_std_logic_vector14(0 TO 13);  -- ufix14 [14]
          cnuvalid                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_BetaDecompress_2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          betacomp1                       :   IN    vector_of_std_logic_vector7(0 TO 13);  -- ufix7 [14]
          betacomp2                       :   IN    vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
          betacomp3                       :   IN    vector_of_std_logic_vector14(0 TO 13);  -- ufix14 [14]
          validin                         :   IN    std_logic;  -- ufix1
          count                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          reset                           :   IN    std_logic;  -- ufix1
          beta                            :   OUT   vector_of_std_logic_vector8(0 TO 13)  -- sfix8 [14]
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_AposterioriUnit
    PORT( alpha                           :   IN    vector_of_std_logic_vector10(0 TO 13);  -- sfix10 [14]
          beta                            :   IN    vector_of_std_logic_vector8(0 TO 13);  -- sfix8 [14]
          valid                           :   IN    std_logic;  -- ufix1
          gamma                           :   OUT   vector_of_std_logic_vector10(0 TO 13);  -- sfix10 [14]
          valid_1                         :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_BetaDecompress_1
    USE ENTITY work.full_rx_ip_src_BetaDecompress_1(rtl);

  FOR ALL : full_rx_ip_src_VariableNodeUnit
    USE ENTITY work.full_rx_ip_src_VariableNodeUnit(rtl);

  FOR ALL : full_rx_ip_src_CheckNodeUnit
    USE ENTITY work.full_rx_ip_src_CheckNodeUnit(rtl);

  FOR ALL : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    USE ENTITY work.full_rx_ip_src_SimpleDualPortRAM_generic_block4(rtl);

  FOR ALL : full_rx_ip_src_BetaDecompress_2
    USE ENTITY work.full_rx_ip_src_BetaDecompress_2(rtl);

  FOR ALL : full_rx_ip_src_AposterioriUnit
    USE ENTITY work.full_rx_ip_src_AposterioriUnit(rtl);

  -- Signals
  SIGNAL beta                             : vector_of_std_logic_vector8(0 TO 13);  -- ufix8 [14]
  SIGNAL betaValid_1                      : std_logic;  -- ufix1
  SIGNAL alpha                            : vector_of_std_logic_vector10(0 TO 13);  -- ufix10 [14]
  SIGNAL alphaValid                       : std_logic;  -- ufix1
  SIGNAL alpha_signed                     : vector_of_signed10(0 TO 13);  -- sfix10 [14]
  SIGNAL alphaDTC                         : vector_of_signed8(0 TO 13);  -- sfix8 [14]
  SIGNAL alphaDTC_1                       : vector_of_std_logic_vector8(0 TO 13);  -- ufix8 [14]
  SIGNAL cnuDecomp1                       : vector_of_std_logic_vector7(0 TO 13);  -- ufix7 [14]
  SIGNAL cnuDecomp2                       : vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
  SIGNAL cnuDecomp3                       : vector_of_std_logic_vector14(0 TO 13);  -- ufix14 [14]
  SIGNAL cnuValid_1                       : std_logic;  -- ufix1
  SIGNAL count_unsigned                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_rdAddr         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_wrAddr         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_rdValid        : std_logic;
  SIGNAL addressGeneration_rdAddrEnb      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_rdAddr_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_wrAddr_next    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_rdValid_next   : std_logic;
  SIGNAL addressGeneration_rdAddrEnb_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_wrAddr_temp    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL addressGeneration_rdValid_temp   : std_logic;
  SIGNAL addressGeneration_add_temp       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL addressGeneration_add_temp_1     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL addressGeneration_add_temp_2     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL wrAddr                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rdAddr_tmp                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rdValid                          : std_logic;  -- ufix1
  SIGNAL wrAddrEnb                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rdAddrEnb                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL alphaD                           : vector_of_std_logic_vector10(0 TO 13);  -- ufix10 [14]
  SIGNAL beta_1                           : vector_of_std_logic_vector8(0 TO 13);  -- ufix8 [14]
  SIGNAL rdValidReg                       : std_logic;  -- ufix1
  SIGNAL gamma_tmp                        : vector_of_std_logic_vector10(0 TO 13);  -- ufix10 [14]
  SIGNAL valid_2                          : std_logic;  -- ufix1

BEGIN
  u_Beta_Decompress_Unit_1 : full_rx_ip_src_BetaDecompress_1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              betacomp1 => betaComp1,  -- ufix7 [14]
              betacomp2 => betaComp2,  -- ufix4 [14]
              betacomp3 => betaComp3,  -- ufix14 [14]
              validin => betaValid,  -- ufix1
              count => count,  -- ufix3
              reset => reset,  -- ufix1
              beta => beta,  -- sfix8 [14]
              valid => betaValid_1  -- ufix1
              );

  u_Variable_Node_Unit : full_rx_ip_src_VariableNodeUnit
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data => data,  -- sfix10 [14]
              beta => beta,  -- sfix8 [14]
              valid => valid,  -- ufix1
              valid_beta => betaValid_1,  -- ufix1
              reset => reset,  -- ufix1
              alpha => alpha,  -- sfix10 [14]
              valid_1 => alphaValid  -- ufix1
              );

  u_Check_Node_Unit : full_rx_ip_src_CheckNodeUnit
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data => alphaDTC_1,  -- sfix8 [14]
              valid => alphaValid,  -- ufix1
              count => count,  -- ufix3
              reset => reset,  -- ufix1
              cnuDecomp1 => cnuDecomp1,  -- ufix7 [14]
              cnuDecomp2 => cnuDecomp2,  -- ufix4 [14]
              cnuDecomp3 => cnuDecomp3,  -- ufix14 [14]
              cnuvalid => cnuValid_1  -- ufix1
              );

  u_alphaDelay_generic_bank0 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(0),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(0)
              );

  u_alphaDelay_generic_bank1 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(1),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(1)
              );

  u_alphaDelay_generic_bank2 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(2),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(2)
              );

  u_alphaDelay_generic_bank3 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(3),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(3)
              );

  u_alphaDelay_generic_bank4 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(4),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(4)
              );

  u_alphaDelay_generic_bank5 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(5),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(5)
              );

  u_alphaDelay_generic_bank6 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(6),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(6)
              );

  u_alphaDelay_generic_bank7 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(7),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(7)
              );

  u_alphaDelay_generic_bank8 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(8),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(8)
              );

  u_alphaDelay_generic_bank9 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(9),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(9)
              );

  u_alphaDelay_generic_bank10 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(10),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(10)
              );

  u_alphaDelay_generic_bank11 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(11),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(11)
              );

  u_alphaDelay_generic_bank12 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(12),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(12)
              );

  u_alphaDelay_generic_bank13 : full_rx_ip_src_SimpleDualPortRAM_generic_block4
    GENERIC MAP( AddrWidth => 3,
                 DataWidth => 10
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => alpha(13),
              wr_addr => std_logic_vector(wrAddr),
              wr_en => alphaValid,  -- ufix1
              rd_addr => std_logic_vector(rdAddr_tmp),
              dout => alphaD(13)
              );

  u_Beta_Decompress_Unit_2 : full_rx_ip_src_BetaDecompress_2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              betacomp1 => cnuDecomp1,  -- ufix7 [14]
              betacomp2 => cnuDecomp2,  -- ufix4 [14]
              betacomp3 => cnuDecomp3,  -- ufix14 [14]
              validin => cnuValid_1,  -- ufix1
              count => count,  -- ufix3
              reset => reset,  -- ufix1
              beta => beta_1  -- sfix8 [14]
              );

  u_Aposteriori_Node_Unit : full_rx_ip_src_AposterioriUnit
    PORT MAP( alpha => alphaD,  -- sfix10 [14]
              beta => beta_1,  -- sfix8 [14]
              valid => rdValidReg,  -- ufix1
              gamma => gamma_tmp,  -- sfix10 [14]
              valid_1 => valid_2  -- ufix1
              );

  outputgen1: FOR k IN 0 TO 13 GENERATE
    alpha_signed(k) <= signed(alpha(k));
  END GENERATE;


  alphaDTC_gen: FOR ii IN 0 TO 13 GENERATE
    
    alphaDTC(ii) <= "01111111" WHEN (alpha_signed(ii)(9) = '0') AND (alpha_signed(ii)(8 DOWNTO 7) /= "00") ELSE
        "10000000" WHEN (alpha_signed(ii)(9) = '1') AND (alpha_signed(ii)(8 DOWNTO 7) /= "11") ELSE
        alpha_signed(ii)(7 DOWNTO 0);
  END GENERATE alphaDTC_gen;


  outputgen: FOR k IN 0 TO 13 GENERATE
    alphaDTC_1(k) <= std_logic_vector(alphaDTC(k));
  END GENERATE;

  count_unsigned <= unsigned(count);

  addressGeneration_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        addressGeneration_rdAddr <= to_unsigned(16#0#, 3);
        addressGeneration_rdAddrEnb <= to_unsigned(16#1#, 3);
        addressGeneration_wrAddr <= to_unsigned(16#0#, 3);
        addressGeneration_rdValid <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        addressGeneration_rdAddr <= addressGeneration_rdAddr_next;
        addressGeneration_wrAddr <= addressGeneration_wrAddr_next;
        addressGeneration_rdValid <= addressGeneration_rdValid_next;
        addressGeneration_rdAddrEnb <= addressGeneration_rdAddrEnb_next;
      END IF;
    END IF;
  END PROCESS addressGeneration_process;

  addressGeneration_add_temp <= resize(count_unsigned, 4) + to_unsigned(16#1#, 4);
  
  addressGeneration_rdValid_temp <= '0' WHEN reset /= '0' ELSE
      '1' WHEN cnuValid_1 /= '0' ELSE
      '0' WHEN resize(addressGeneration_rdAddr, 4) = addressGeneration_add_temp ELSE
      addressGeneration_rdValid;
  
  addressGeneration_wrAddr_temp <= to_unsigned(16#0#, 3) WHEN reset /= '0' ELSE
      to_unsigned(16#0#, 3) WHEN addressGeneration_rdAddr = count_unsigned ELSE
      addressGeneration_wrAddr + to_unsigned(16#1#, 3) WHEN alphaValid /= '0' ELSE
      addressGeneration_wrAddr;
  addressGeneration_add_temp_1 <= resize(count_unsigned, 4) + to_unsigned(16#1#, 4);
  
  addressGeneration_rdAddr_next <= to_unsigned(16#0#, 3) WHEN reset /= '0' ELSE
      to_unsigned(16#0#, 3) WHEN resize(addressGeneration_rdAddr, 4) = addressGeneration_add_temp_1 ELSE
      addressGeneration_rdAddr + to_unsigned(16#1#, 3) WHEN addressGeneration_rdValid_temp = '1' ELSE
      addressGeneration_rdAddr;
  addressGeneration_add_temp_2 <= resize(count_unsigned, 4) + to_unsigned(16#1#, 4);
  
  addressGeneration_rdAddrEnb_next <= to_unsigned(16#1#, 3) WHEN reset /= '0' ELSE
      to_unsigned(16#1#, 3) WHEN resize(addressGeneration_rdAddrEnb, 4) = addressGeneration_add_temp_2 ELSE
      addressGeneration_rdAddrEnb + to_unsigned(16#1#, 3) WHEN addressGeneration_rdValid_temp = '1' ELSE
      addressGeneration_rdAddrEnb;
  wrAddr <= addressGeneration_wrAddr;
  rdAddr_tmp <= addressGeneration_rdAddr;
  rdValid <= addressGeneration_rdValid_temp;
  wrAddrEnb <= addressGeneration_wrAddr_temp;
  rdAddrEnb <= addressGeneration_rdAddrEnb;
  addressGeneration_wrAddr_next <= addressGeneration_wrAddr_temp;
  addressGeneration_rdValid_next <= addressGeneration_rdValid_temp;


  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdValidReg <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        rdValidReg <= rdValid;
      END IF;
    END IF;
  END PROCESS c_process;


  rdAddr <= std_logic_vector(rdAddr_tmp);

  gamma <= gamma_tmp;

  valid_1 <= valid_2;

  cnuComp1 <= cnuDecomp1;

  cnuComp2 <= cnuDecomp2;

  cnuComp3 <= cnuDecomp3;

  cnuValid <= cnuValid_1;

END rtl;

