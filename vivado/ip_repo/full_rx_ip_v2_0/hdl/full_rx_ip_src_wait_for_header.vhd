-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_wait_for_header.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_wait_for_header
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_separator/wait_for_header
-- Hierarchy Level: 3
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_wait_for_header IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        header_ready                      :   IN    std_logic;
        valid_payload                     :   IN    std_logic;
        zero_payload                      :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        valid_payload_out                 :   OUT   std_logic
        );
END full_rx_ip_src_wait_for_header;


ARCHITECTURE rtl OF full_rx_ip_src_wait_for_header IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_rising_edge_detector1_block1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_HDL_FIFO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          In_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          In_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          Out_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Out_im                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Empty                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_rising_edge_detector1_block1
    USE ENTITY work.full_rx_ip_src_rising_edge_detector1_block1(rtl);

  FOR ALL : full_rx_ip_src_HDL_FIFO
    USE ENTITY work.full_rx_ip_src_HDL_FIFO(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay12_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay12_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL rising_edge_detector1_out1       : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL HDL_FIFO_out1_re                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL HDL_FIFO_out1_im                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL HDL_FIFO_out2                    : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL HDL_FIFO_out1_re_signed          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL HDL_FIFO_out1_im_signed          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Switch3_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Switch3_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En12

BEGIN
  -- The RAM value should be large enough to wait for the header to be processed.
  -- Th e LDPC decoder of the header has a delay > 2500, so a value of 3000 is chosen for an extra margin.
  -- Store payload OFDM symbols until header parameters are known (cyclic prefix has to be known before demodulating 
  -- the OFDM symbol

  u_rising_edge_detector1 : full_rx_ip_src_rising_edge_detector1_block1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              In_rsvd => valid_payload,
              Out_rsvd => rising_edge_detector1_out1
              );

  u_HDL_FIFO : full_rx_ip_src_HDL_FIFO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              In_re => std_logic_vector(Delay12_out1_re),  -- sfix16_En12
              In_im => std_logic_vector(Delay12_out1_im),  -- sfix16_En12
              Push => Delay13_out1,
              Pop => AND_out1,
              rst => OR_out1,
              Out_re => HDL_FIFO_out1_re,  -- sfix16_En12
              Out_im => HDL_FIFO_out1_im,  -- sfix16_En12
              Empty => HDL_FIFO_out2
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1_re <= to_signed(16#0000#, 16);
        Delay12_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_4_0 = '1' THEN
        Delay12_out1_re <= data_in_re_signed;
        Delay12_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay13_out1 <= valid_payload;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  OR_out1 <= rising_edge_detector1_out1 OR zero_payload;

  NOT_out1 <=  NOT HDL_FIFO_out2;

  AND_out1 <= header_ready AND NOT_out1;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb_1_4_0 = '1' THEN
        Delay14_out1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  HDL_FIFO_out1_re_signed <= signed(HDL_FIFO_out1_re);

  HDL_FIFO_out1_im_signed <= signed(HDL_FIFO_out1_im);

  
  Switch3_out1_re <= data_in_re_signed WHEN Delay14_out1 = '0' ELSE
      HDL_FIFO_out1_re_signed;
  
  Switch3_out1_im <= data_in_im_signed WHEN Delay14_out1 = '0' ELSE
      HDL_FIFO_out1_im_signed;

  data_out_re <= std_logic_vector(Switch3_out1_re);

  data_out_im <= std_logic_vector(Switch3_out1_im);

  valid_payload_out <= Delay14_out1;

END rtl;

