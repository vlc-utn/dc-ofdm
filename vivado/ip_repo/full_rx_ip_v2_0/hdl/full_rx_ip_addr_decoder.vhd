-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_addr_decoder.vhd
-- Created: 2024-08-11 11:01:41
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_addr_decoder
-- Source Path: full_rx_ip/full_rx_ip_axi_lite/full_rx_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_reg0                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_reg1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_reg2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_reg3                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_end                          :   IN    std_logic;  -- ufix1
        read_err                          :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_packet_size_axi4_stream_master :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END full_rx_ip_addr_decoder;


ARCHITECTURE rtl OF full_rx_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL decode_sel_reg0_1_1              : std_logic;  -- ufix1
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg0_unsigned               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_reg1_1_1              : std_logic;  -- ufix1
  SIGNAL read_reg_reg0                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_reg0_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg1_unsigned               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_reg2_1_1              : std_logic;  -- ufix1
  SIGNAL read_reg_reg1                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_reg1_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg2_unsigned               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_reg3_1_1              : std_logic;  -- ufix1
  SIGNAL read_reg_reg2                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_reg2_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg3_unsigned               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_err_1_1               : std_logic;  -- ufix1
  SIGNAL decode_sel_end_1_1               : std_logic;  -- ufix1
  SIGNAL read_reg_reg3                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_reg3_1_1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_end                     : std_logic;  -- ufix1
  SIGNAL data_slice_end_1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_end_1_1                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_err                     : std_logic;  -- ufix1
  SIGNAL data_slice_err_1                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_err_1_1                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL decode_sel_packet_size_axi4_stream_master_1_1 : std_logic;  -- ufix1
  SIGNAL reg_enb_packet_size_axi4_stream_master_1_1 : std_logic;  -- ufix1
  SIGNAL data_reg_packet_size_axi4_stream_master_1_1 : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0003#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  const_1_1 <= '1';

  enb <= const_1_1;

  
  decode_sel_reg0_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= const_0 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  read_reg0_unsigned <= unsigned(read_reg0);

  
  decode_sel_reg1_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  reg_reg0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_reg0 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_reg0 <= read_reg0_unsigned;
      END IF;
    END IF;
  END PROCESS reg_reg0_process;


  
  decode_rd_reg0_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_reg0_1_1 = '0' ELSE
      read_reg_reg0;

  read_reg1_unsigned <= unsigned(read_reg1);

  
  decode_sel_reg2_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  reg_reg1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_reg1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_reg1 <= read_reg1_unsigned;
      END IF;
    END IF;
  END PROCESS reg_reg1_process;


  
  decode_rd_reg1_1_1 <= decode_rd_reg0_1_1 WHEN decode_sel_reg1_1_1 = '0' ELSE
      read_reg_reg1;

  read_reg2_unsigned <= unsigned(read_reg2);

  
  decode_sel_reg3_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_reg2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_reg2 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_reg2 <= read_reg2_unsigned;
      END IF;
    END IF;
  END PROCESS reg_reg2_process;


  
  decode_rd_reg2_1_1 <= decode_rd_reg1_1_1 WHEN decode_sel_reg2_1_1 = '0' ELSE
      read_reg_reg2;

  read_reg3_unsigned <= unsigned(read_reg3);

  
  decode_sel_err_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_end_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  reg_reg3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_reg3 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_reg3 <= read_reg3_unsigned;
      END IF;
    END IF;
  END PROCESS reg_reg3_process;


  
  decode_rd_reg3_1_1 <= decode_rd_reg2_1_1 WHEN decode_sel_reg3_1_1 = '0' ELSE
      read_reg_reg3;

  reg_end_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_end <= '0';
      ELSIF enb = '1' THEN
        read_reg_end <= read_end;
      END IF;
    END IF;
  END PROCESS reg_end_process;


  data_slice_end_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_end;

  
  decode_rd_end_1_1 <= decode_rd_reg3_1_1 WHEN decode_sel_end_1_1 = '0' ELSE
      data_slice_end_1;

  reg_err_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        read_reg_err <= '0';
      ELSIF enb = '1' THEN
        read_reg_err <= read_err;
      END IF;
    END IF;
  END PROCESS reg_err_process;


  data_slice_err_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_err;

  
  decode_rd_err_1_1 <= decode_rd_end_1_1 WHEN decode_sel_err_1_1 = '0' ELSE
      data_slice_err_1;

  data_read <= std_logic_vector(decode_rd_err_1_1);

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  
  decode_sel_packet_size_axi4_stream_master_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  reg_enb_packet_size_axi4_stream_master_1_1 <= decode_sel_packet_size_axi4_stream_master_1_1 AND wr_enb;

  reg_packet_size_axi4_stream_master_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_reg_packet_size_axi4_stream_master_1_1 <= to_unsigned(1024, 32);
      ELSIF enb = '1' AND reg_enb_packet_size_axi4_stream_master_1_1 = '1' THEN
        data_reg_packet_size_axi4_stream_master_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_packet_size_axi4_stream_master_1_1_process;


  write_packet_size_axi4_stream_master <= std_logic_vector(data_reg_packet_size_axi4_stream_master_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

END rtl;

