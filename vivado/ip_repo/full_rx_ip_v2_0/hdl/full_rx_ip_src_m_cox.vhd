-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_m_cox.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_m_cox
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/m_cox
-- Hierarchy Level: 3
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_m_cox IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        M_d                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        P_d_re                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        P_d_im                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END full_rx_ip_src_m_cox;


ARCHITECTURE rtl OF full_rx_ip_src_m_cox IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_calculate_P
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          r_d_re                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          r_d_im                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          alphaP_d_2                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          P_d_re                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          P_d_im                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_calculate_R
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          r_d_re                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          r_d_im                          :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          Rf2                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Compare_To_Zero_block
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_Real_Divide_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          num                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          den                             :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_calculate_P
    USE ENTITY work.full_rx_ip_src_calculate_P(rtl);

  FOR ALL : full_rx_ip_src_calculate_R
    USE ENTITY work.full_rx_ip_src_calculate_R(rtl);

  FOR ALL : full_rx_ip_src_Compare_To_Zero_block
    USE ENTITY work.full_rx_ip_src_Compare_To_Zero_block(rtl);

  FOR ALL : full_rx_ip_src_Real_Divide_HDL_Optimized
    USE ENTITY work.full_rx_ip_src_Real_Divide_HDL_Optimized(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_reg_re                    : vector_of_signed16(0 TO 2579);  -- sfix16_En12 [2580]
  SIGNAL Delay4_reg_im                    : vector_of_signed16(0 TO 2579);  -- sfix16_En12 [2580]
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_reg_re                    : vector_of_signed16(0 TO 4);  -- sfix16_En12 [5]
  SIGNAL Delay6_reg_im                    : vector_of_signed16(0 TO 4);  -- sfix16_En12 [5]
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_reg_re                    : vector_of_signed16(0 TO 46);  -- sfix16_En12 [47]
  SIGNAL Delay5_reg_im                    : vector_of_signed16(0 TO 46);  -- sfix16_En12 [47]
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Data_Type_Conversion1_out1_re    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Data_Type_Conversion1_out1_im    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL calculate_P_out2_re              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL calculate_P_out2_im              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL R                                : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Constant1_out1                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL R_signed                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Real_Divide_HDL_Optimized_out1   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL calculate_P_out2_re_signed       : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL calculate_P_out2_im_signed       : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_reg_re                    : vector_of_signed32(0 TO 46);  -- sfix32_En24 [47]
  SIGNAL Delay1_reg_im                    : vector_of_signed32(0 TO 46);  -- sfix32_En24 [47]
  SIGNAL Delay1_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  -- Latency of the real divide block is:1 + nextpow2(u.WordLength + 1 - issigned(u) + 1) + 2 + u.WordLength + 2 - issigned(u) 
  -- + 
  -- Delay of m_cox = delay blocks + delay divider + delay_10_preambles_symbols
  -- Delay of m_cox = 5 + 47 + 2580

  u_calculate_P : full_rx_ip_src_calculate_P
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              r_d_re => std_logic_vector(Data_Type_Conversion1_out1_re),  -- sfix32_En24
              r_d_im => std_logic_vector(Data_Type_Conversion1_out1_im),  -- sfix32_En24
              alphaP_d_2 => P,  -- sfix32_En24
              P_d_re => calculate_P_out2_re,  -- sfix32_En24
              P_d_im => calculate_P_out2_im  -- sfix32_En24
              );

  u_calculate_R : full_rx_ip_src_calculate_R
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              r_d_re => std_logic_vector(Data_Type_Conversion1_out1_re),  -- sfix32_En24
              r_d_im => std_logic_vector(Data_Type_Conversion1_out1_im),  -- sfix32_En24
              Rf2 => R  -- sfix32_En24
              );

  u_Compare_To_Zero : full_rx_ip_src_Compare_To_Zero_block
    PORT MAP( u => R,  -- sfix32_En24
              y => Compare_To_Zero_out1
              );

  u_Real_Divide_HDL_Optimized : full_rx_ip_src_Real_Divide_HDL_Optimized
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              num => P,  -- sfix32_En24
              den => std_logic_vector(Switch_out1),  -- sfix32_En24
              validIn => Constant_out1,
              y => Real_Divide_HDL_Optimized_out1  -- sfix16_En12
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay4_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_4_0 = '1' THEN
        Delay4_reg_im(0) <= data_in_im_signed;
        Delay4_reg_im(1 TO 2579) <= Delay4_reg_im(0 TO 2578);
        Delay4_reg_re(0) <= data_in_re_signed;
        Delay4_reg_re(1 TO 2579) <= Delay4_reg_re(0 TO 2578);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(2579);
  Delay4_out1_im <= Delay4_reg_im(2579);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay6_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_4_0 = '1' THEN
        Delay6_reg_im(0) <= Delay4_out1_im;
        Delay6_reg_im(1 TO 4) <= Delay6_reg_im(0 TO 3);
        Delay6_reg_re(0) <= Delay4_out1_re;
        Delay6_reg_re(1 TO 4) <= Delay6_reg_re(0 TO 3);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1_re <= Delay6_reg_re(4);
  Delay6_out1_im <= Delay6_reg_im(4);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay5_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_4_0 = '1' THEN
        Delay5_reg_im(0) <= Delay6_out1_im;
        Delay5_reg_im(1 TO 46) <= Delay5_reg_im(0 TO 45);
        Delay5_reg_re(0) <= Delay6_out1_re;
        Delay5_reg_re(1 TO 46) <= Delay5_reg_re(0 TO 45);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1_re <= Delay5_reg_re(46);
  Delay5_out1_im <= Delay5_reg_im(46);

  data_out_re <= std_logic_vector(Delay5_out1_re);

  data_out_im <= std_logic_vector(Delay5_out1_im);

  Data_Type_Conversion1_out1_re <= resize(data_in_re_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);
  Data_Type_Conversion1_out1_im <= resize(data_in_im_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32);

  Constant1_out1 <= to_signed(16777216, 32);

  R_signed <= signed(R);

  
  Switch_out1 <= Constant1_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      R_signed;

  Constant_out1 <= '1';

  calculate_P_out2_re_signed <= signed(calculate_P_out2_re);

  calculate_P_out2_im_signed <= signed(calculate_P_out2_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg_re <= (OTHERS => to_signed(0, 32));
        Delay1_reg_im <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_reg_im(0) <= calculate_P_out2_im_signed;
        Delay1_reg_im(1 TO 46) <= Delay1_reg_im(0 TO 45);
        Delay1_reg_re(0) <= calculate_P_out2_re_signed;
        Delay1_reg_re(1 TO 46) <= Delay1_reg_re(0 TO 45);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1_re <= Delay1_reg_re(46);
  Delay1_out1_im <= Delay1_reg_im(46);

  P_d_re <= std_logic_vector(Delay1_out1_re);

  P_d_im <= std_logic_vector(Delay1_out1_im);

  M_d <= Real_Divide_HDL_Optimized_out1;

END rtl;

