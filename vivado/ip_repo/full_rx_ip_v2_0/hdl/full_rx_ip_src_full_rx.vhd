-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_full_rx.vhd
-- Created: 2024-08-11 11:00:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 5e-09
-- Target subsystem base rate: 5e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out_0      4e-08
-- ce_out_1      8e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out                      ce_out_0      4e-08
-- valid_out                     ce_out_0      4e-08
-- reg0                          ce_out_1      8e-08
-- reg1                          ce_out_1      8e-08
-- reg2                          ce_out_1      8e-08
-- reg3                          ce_out_1      8e-08
-- end_rsvd                      ce_out_1      8e-08
-- err                           ce_out_1      8e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_full_rx
-- Source Path: HDLRx/full_rx
-- Hierarchy Level: 0
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_full_rx IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        ce_out_0                          :   OUT   std_logic;
        ce_out_1                          :   OUT   std_logic;
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_out                         :   OUT   std_logic;
        reg0                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        reg1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        reg2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        reg3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        end_rsvd                          :   OUT   std_logic;
        err                               :   OUT   std_logic
        );
END full_rx_ip_src_full_rx;


ARCHITECTURE rtl OF full_rx_ip_src_full_rx IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_full_rx_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic;
          enb_1_8_1                       :   OUT   std_logic;
          enb_1_16_0                      :   OUT   std_logic;
          enb_1_16_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_batid_to_bits_per_subcarrier
    PORT( bat_id                          :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
          bits_per_subcarrier             :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_header_clock_x2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En12 [4]
          valid_header                    :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          start                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_h_rx_full
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          start_in                        :   IN    std_logic;
          psdu_size                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          msg_duration                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
          block_size                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
          fec_rate                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          rep_number                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          concat_factor                   :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          scrambler_init                  :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          bat_id                          :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
          cp_id                           :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_spacing                    :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_number                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          end_rsvd                        :   OUT   std_logic;
          err                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_cpid_to_cplen
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          cp_id                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          payload_cp_len                  :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_rx_demodulator_full
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          payload_cp_len                  :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          payload_bits_per_subcarrier     :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          header_ready                    :   IN    std_logic;
          data_out                        :   OUT   vector_of_std_logic_vector28(0 TO 3);  -- sfix28_En12 [4]
          valid_header                    :   OUT   std_logic;
          valid_payload                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_prepare_payload_data
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En12 [4]
          valid_payload                   :   IN    std_logic;
          payload_ready                   :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          valid_in                        :   OUT   std_logic;
          last_frame                      :   OUT   std_logic;
          new_frame                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_rx_payload_full
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          valid_in                        :   IN    std_logic;
          last_frame                      :   IN    std_logic;
          new_frame                       :   IN    std_logic;
          scrambler_init                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          data_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_variable_to_reg
    PORT( psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          msg_duration                    :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
          block_size                      :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
          fec_rate                        :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          rep_number                      :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          concat_factor                   :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          scrambler_init                  :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          bat_id                          :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
          cp_id                           :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_spacing                    :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_number                     :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          reg0                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          reg1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          reg2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          reg3                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_full_rx_tc
    USE ENTITY work.full_rx_ip_src_full_rx_tc(rtl);

  FOR ALL : full_rx_ip_src_batid_to_bits_per_subcarrier
    USE ENTITY work.full_rx_ip_src_batid_to_bits_per_subcarrier(rtl);

  FOR ALL : full_rx_ip_src_header_clock_x2
    USE ENTITY work.full_rx_ip_src_header_clock_x2(rtl);

  FOR ALL : full_rx_ip_src_h_rx_full
    USE ENTITY work.full_rx_ip_src_h_rx_full(rtl);

  FOR ALL : full_rx_ip_src_cpid_to_cplen
    USE ENTITY work.full_rx_ip_src_cpid_to_cplen(rtl);

  FOR ALL : full_rx_ip_src_rx_demodulator_full
    USE ENTITY work.full_rx_ip_src_rx_demodulator_full(rtl);

  FOR ALL : full_rx_ip_src_prepare_payload_data
    USE ENTITY work.full_rx_ip_src_prepare_payload_data(rtl);

  FOR ALL : full_rx_ip_src_rx_payload_full
    USE ENTITY work.full_rx_ip_src_rx_payload_full(rtl);

  FOR ALL : full_rx_ip_src_variable_to_reg
    USE ENTITY work.full_rx_ip_src_variable_to_reg(rtl);

  -- Signals
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb_1_16_0                       : std_logic;
  SIGNAL enb_1_16_1                       : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_8_1                        : std_logic;
  SIGNAL header_ready                     : std_logic;
  SIGNAL From7_out1                       : std_logic;
  SIGNAL h_rx_full_out1                   : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL From1_out1                       : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL h_rx_full_out8                   : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL y                                : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL y_1                              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL y_2                              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rate_Transition1_out1            : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion_out1        : vector_of_signed16(0 TO 3);  -- sfix16_En12 [4]
  SIGNAL Data_Type_Conversion_out1_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL valid_header                     : std_logic;
  SIGNAL serializer_PostProcessed         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL header_clock_x2_out2             : std_logic;
  SIGNAL h_rx_full_out2                   : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL h_rx_full_out3                   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL h_rx_full_out4                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_rx_full_out5                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_rx_full_out6                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_rx_full_out7                   : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL h_rx_full_out9                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_rx_full_out10                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_rx_full_out11                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_rx_full_out13                  : std_logic;
  SIGNAL cpid_to_cplen_out1               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL cpid_to_cplen_out1_unsigned      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL From2_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Rate_Transition2_out1            : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL rx_demodulator_full_out1         : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL valid_payload                    : std_logic;
  SIGNAL rx_demodulator_full_out1_signed  : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Data_Type_Conversion_out1_2      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL h_rx_full_out7_1                 : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL h_rx_full_out1_1                 : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL rx_payload_full_out3             : std_logic;
  SIGNAL payload_ready                    : std_logic;
  SIGNAL prepare_payload_data_out1        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_payload_to_ldpc            : std_logic;
  SIGNAL prepare_payload_data_out3        : std_logic;
  SIGNAL prepare_payload_data_out4        : std_logic;
  SIGNAL rx_payload_full_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL rx_payload_full_out2             : std_logic;
  SIGNAL reg0_tmp                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg1_tmp                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg2_tmp                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg3_tmp                         : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_full_rx_tc : full_rx_ip_src_full_rx_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1,
              enb_1_8_1 => enb_1_8_1,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1
              );

  u_batid_to_bits_per_subcarrier : full_rx_ip_src_batid_to_bits_per_subcarrier
    PORT MAP( bat_id => h_rx_full_out8,  -- ufix1 [5]
              bits_per_subcarrier => y  -- ufix4
              );

  u_header_clock_x2 : full_rx_ip_src_header_clock_x2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => Data_Type_Conversion_out1_1,  -- sfix16_En12 [4]
              valid_header => valid_header,
              data_out => serializer_PostProcessed,  -- sfix16_En12
              start => header_clock_x2_out2
              );

  u_h_rx_full : full_rx_ip_src_h_rx_full
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in => serializer_PostProcessed,  -- sfix16_En12
              start_in => header_clock_x2_out2,
              psdu_size => h_rx_full_out1,  -- ufix1 [24]
              msg_duration => h_rx_full_out2,  -- ufix1 [16]
              block_size => h_rx_full_out3,  -- ufix1 [2]
              fec_rate => h_rx_full_out4,  -- ufix1 [3]
              rep_number => h_rx_full_out5,  -- ufix1 [3]
              concat_factor => h_rx_full_out6,  -- ufix1 [3]
              scrambler_init => h_rx_full_out7,  -- ufix1 [4]
              bat_id => h_rx_full_out8,  -- ufix1 [5]
              cp_id => h_rx_full_out9,  -- ufix1 [3]
              mimo_spacing => h_rx_full_out10,  -- ufix1 [3]
              mimo_number => h_rx_full_out11,  -- ufix1 [3]
              end_rsvd => header_ready,
              err => h_rx_full_out13
              );

  u_cpid_to_cplen : full_rx_ip_src_cpid_to_cplen
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_16_0 => enb_1_16_0,
              cp_id => h_rx_full_out9,  -- ufix1 [3]
              payload_cp_len => cpid_to_cplen_out1  -- uint8
              );

  u_rx_demodulator_full : full_rx_ip_src_rx_demodulator_full
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_4_0 => enb_1_4_0,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_4_1 => enb_1_4_1,
              data_in => data_in,  -- sfix16_En12
              payload_cp_len => Rate_Transition2_out1,  -- uint8
              payload_bits_per_subcarrier => Rate_Transition1_out1,  -- ufix4
              psdu_size => From1_out1,  -- ufix1 [24]
              header_ready => From7_out1,
              data_out => rx_demodulator_full_out1,  -- sfix28_En12 [4]
              valid_header => valid_header,
              valid_payload => valid_payload
              );

  u_prepare_payload_data : full_rx_ip_src_prepare_payload_data
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in => Data_Type_Conversion_out1_2,  -- sfix16_En12 [4]
              valid_payload => valid_payload,
              payload_ready => payload_ready,
              dataOut => prepare_payload_data_out1,  -- sfix16_En12
              valid_in => valid_payload_to_ldpc,
              last_frame => prepare_payload_data_out3,
              new_frame => prepare_payload_data_out4
              );

  u_rx_payload_full : full_rx_ip_src_rx_payload_full
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => prepare_payload_data_out1,  -- sfix16_En12
              valid_in => valid_payload_to_ldpc,
              last_frame => prepare_payload_data_out3,
              new_frame => prepare_payload_data_out4,
              scrambler_init => h_rx_full_out7_1,  -- ufix1 [4]
              psdu_size => h_rx_full_out1_1,  -- ufix1 [24]
              data_out => rx_payload_full_out1,  -- uint8
              valid_out => rx_payload_full_out2,
              ready => rx_payload_full_out3
              );

  u_variable_to_reg : full_rx_ip_src_variable_to_reg
    PORT MAP( psdu_size => h_rx_full_out1,  -- ufix1 [24]
              msg_duration => h_rx_full_out2,  -- ufix1 [16]
              block_size => h_rx_full_out3,  -- ufix1 [2]
              fec_rate => h_rx_full_out4,  -- ufix1 [3]
              rep_number => h_rx_full_out5,  -- ufix1 [3]
              concat_factor => h_rx_full_out6,  -- ufix1 [3]
              scrambler_init => h_rx_full_out7,  -- ufix1 [4]
              bat_id => h_rx_full_out8,  -- ufix1 [5]
              cp_id => h_rx_full_out9,  -- ufix1 [3]
              mimo_spacing => h_rx_full_out10,  -- ufix1 [3]
              mimo_number => h_rx_full_out11,  -- ufix1 [3]
              reg0 => reg0_tmp,  -- uint32
              reg1 => reg1_tmp,  -- uint32
              reg2 => reg2_tmp,  -- uint32
              reg3 => reg3_tmp  -- uint32
              );

  Rate_Transition9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From7_out1 <= '0';
      ELSIF enb_1_16_0 = '1' THEN
        From7_out1 <= header_ready;
      END IF;
    END IF;
  END PROCESS Rate_Transition9_process;


  Rate_Transition_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From1_out1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        From1_out1 <= h_rx_full_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_process;


  y_1 <= unsigned(y);

  Rate_Transition1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        y_2 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_16_0 = '1' THEN
        y_2 <= y_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_process;


  Rate_Transition1_out1 <= std_logic_vector(y_2);

  outputgen2: FOR k IN 0 TO 3 GENERATE
    Data_Type_Conversion_out1_1(k) <= std_logic_vector(Data_Type_Conversion_out1(k));
  END GENERATE;

  cpid_to_cplen_out1_unsigned <= unsigned(cpid_to_cplen_out1);

  Rate_Transition21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From2_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_16_0 = '1' THEN
        From2_out1 <= cpid_to_cplen_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Rate_Transition21_process;


  Rate_Transition2_out1 <= std_logic_vector(From2_out1);

  outputgen1: FOR k IN 0 TO 3 GENERATE
    rx_demodulator_full_out1_signed(k) <= signed(rx_demodulator_full_out1(k));
  END GENERATE;


  Data_Type_Conversion_out1_gen: FOR ii IN 0 TO 3 GENERATE
    Data_Type_Conversion_out1(ii) <= rx_demodulator_full_out1_signed(ii)(15 DOWNTO 0);
  END GENERATE Data_Type_Conversion_out1_gen;


  outputgen: FOR k IN 0 TO 3 GENERATE
    Data_Type_Conversion_out1_2(k) <= std_logic_vector(Data_Type_Conversion_out1(k));
  END GENERATE;

  Rate_Transition51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        h_rx_full_out7_1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        h_rx_full_out7_1 <= h_rx_full_out7;
      END IF;
    END IF;
  END PROCESS Rate_Transition51_process;


  Rate_Transition81_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        h_rx_full_out1_1 <= (OTHERS => '0');
      ELSIF enb_1_16_0 = '1' THEN
        h_rx_full_out1_1 <= h_rx_full_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition81_process;


  payload_ready <= rx_payload_full_out3;

  ce_out_0 <= enb_1_8_1;

  ce_out_1 <= enb_1_16_1;

  data_out <= rx_payload_full_out1;

  valid_out <= rx_payload_full_out2;

  reg0 <= reg0_tmp;

  reg1 <= reg1_tmp;

  reg2 <= reg2_tmp;

  reg3 <= reg3_tmp;

  end_rsvd <= header_ready;

  err <= h_rx_full_out13;

END rtl;

