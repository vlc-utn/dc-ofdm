-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_calculate_P.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_calculate_P
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/m_cox/calculate_P
-- Hierarchy Level: 4
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_calculate_P IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_4_0                         :   IN    std_logic;
        r_d_re                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        r_d_im                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        alphaP_d_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        P_d_re                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        P_d_im                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END full_rx_ip_src_calculate_P;


ARCHITECTURE rtl OF full_rx_ip_src_calculate_P IS

  -- Signals
  SIGNAL r_d_re_signed                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_im_signed                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay10_out1_re                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay10_out1_im                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_reg_re                    : vector_of_signed32(0 TO 1289);  -- sfix32_En24 [1290]
  SIGNAL Delay1_reg_im                    : vector_of_signed32(0 TO 1289);  -- sfix32_En24 [1290]
  SIGNAL r_d_L_re                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_L_im                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL conj_cast                        : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL conj_cast_1                      : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Conjugate1_out1_re               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Conjugate1_out1_im               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay8_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay8_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product1_sub_cast                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp_1              : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product1_sub_cast_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp_2              : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product1_add_cast                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp_3              : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product1_add_cast_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_out1_re                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_out1_im                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay6_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay6_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay9_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay9_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_reg_re                    : vector_of_signed32(0 TO 1289);  -- sfix32_En24 [1290]
  SIGNAL Delay2_reg_im                    : vector_of_signed32(0 TO 1289);  -- sfix32_En24 [1290]
  SIGNAL r_d_re_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_im_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL conj_cast_2                      : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL conj_cast_3                      : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Conjugate2_out1_re               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Conjugate2_out1_im               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay7_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay7_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp                 : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp_1               : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product_sub_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp_2               : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product_add_cast                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp_3               : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product_add_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_out1_re                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_out1_im                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract1_out1_re                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract1_out1_im                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1_re                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1_im                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product3_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay12_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay11_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay13_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  r_d_re_signed <= signed(r_d_re);

  r_d_im_signed <= signed(r_d_im);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1_re <= to_signed(0, 32);
        Delay10_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay10_out1_re <= r_d_re_signed;
        Delay10_out1_im <= r_d_im_signed;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg_re <= (OTHERS => to_signed(0, 32));
        Delay1_reg_im <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        Delay1_reg_im(0) <= r_d_im_signed;
        Delay1_reg_im(1 TO 1289) <= Delay1_reg_im(0 TO 1288);
        Delay1_reg_re(0) <= r_d_re_signed;
        Delay1_reg_re(1 TO 1289) <= Delay1_reg_re(0 TO 1288);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  r_d_L_re <= Delay1_reg_re(1289);
  r_d_L_im <= Delay1_reg_im(1289);

  Conjugate1_out1_re <= r_d_L_re;
  conj_cast <= resize(r_d_L_im, 33);
  conj_cast_1 <=  - (conj_cast);
  
  Conjugate1_out1_im <= X"7FFFFFFF" WHEN (conj_cast_1(32) = '0') AND (conj_cast_1(31) /= '0') ELSE
      X"80000000" WHEN (conj_cast_1(32) = '1') AND (conj_cast_1(31) /= '1') ELSE
      conj_cast_1(31 DOWNTO 0);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_re <= to_signed(0, 32);
        Delay8_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay8_out1_re <= Conjugate1_out1_re;
        Delay8_out1_im <= Conjugate1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Product1_mul_temp <= Delay10_out1_re * Delay8_out1_re;
  Product1_sub_cast <= Product1_mul_temp(55 DOWNTO 24);
  Product1_mul_temp_1 <= Delay10_out1_im * Delay8_out1_im;
  Product1_sub_cast_1 <= Product1_mul_temp_1(55 DOWNTO 24);
  Product1_out1_re <= Product1_sub_cast - Product1_sub_cast_1;
  Product1_mul_temp_2 <= Delay10_out1_im * Delay8_out1_re;
  Product1_add_cast <= Product1_mul_temp_2(55 DOWNTO 24);
  Product1_mul_temp_3 <= Delay10_out1_re * Delay8_out1_im;
  Product1_add_cast_1 <= Product1_mul_temp_3(55 DOWNTO 24);
  Product1_out1_im <= Product1_add_cast + Product1_add_cast_1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_re <= to_signed(0, 32);
        Delay6_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay6_out1_re <= Product1_out1_re;
        Delay6_out1_im <= Product1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1_re <= to_signed(0, 32);
        Delay9_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay9_out1_re <= r_d_L_re;
        Delay9_out1_im <= r_d_L_im;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg_re <= (OTHERS => to_signed(0, 32));
        Delay2_reg_im <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_4_0 = '1' THEN
        Delay2_reg_im(0) <= r_d_L_im;
        Delay2_reg_im(1 TO 1289) <= Delay2_reg_im(0 TO 1288);
        Delay2_reg_re(0) <= r_d_L_re;
        Delay2_reg_re(1 TO 1289) <= Delay2_reg_re(0 TO 1288);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  r_d_re_1 <= Delay2_reg_re(1289);
  r_d_im_1 <= Delay2_reg_im(1289);

  Conjugate2_out1_re <= r_d_re_1;
  conj_cast_2 <= resize(r_d_im_1, 33);
  conj_cast_3 <=  - (conj_cast_2);
  
  Conjugate2_out1_im <= X"7FFFFFFF" WHEN (conj_cast_3(32) = '0') AND (conj_cast_3(31) /= '0') ELSE
      X"80000000" WHEN (conj_cast_3(32) = '1') AND (conj_cast_3(31) /= '1') ELSE
      conj_cast_3(31 DOWNTO 0);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_re <= to_signed(0, 32);
        Delay7_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay7_out1_re <= Conjugate2_out1_re;
        Delay7_out1_im <= Conjugate2_out1_im;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Product_mul_temp <= Delay9_out1_re * Delay7_out1_re;
  Product_sub_cast <= Product_mul_temp(55 DOWNTO 24);
  Product_mul_temp_1 <= Delay9_out1_im * Delay7_out1_im;
  Product_sub_cast_1 <= Product_mul_temp_1(55 DOWNTO 24);
  Product_out1_re <= Product_sub_cast - Product_sub_cast_1;
  Product_mul_temp_2 <= Delay9_out1_im * Delay7_out1_re;
  Product_add_cast <= Product_mul_temp_2(55 DOWNTO 24);
  Product_mul_temp_3 <= Delay9_out1_re * Delay7_out1_im;
  Product_add_cast_1 <= Product_mul_temp_3(55 DOWNTO 24);
  Product_out1_im <= Product_add_cast + Product_add_cast_1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_re <= to_signed(0, 32);
        Delay5_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay5_out1_re <= Product_out1_re;
        Delay5_out1_im <= Product_out1_im;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Subtract1_out1_re <= Delay6_out1_re - Delay5_out1_re;
  Subtract1_out1_im <= Delay6_out1_im - Delay5_out1_im;

  Add_out1_re <= Subtract1_out1_re + P_d_re_1;
  Add_out1_im <= Subtract1_out1_im + P_d_im_1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        P_d_re_1 <= to_signed(0, 32);
        P_d_im_1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        P_d_re_1 <= Add_out1_re;
        P_d_im_1 <= Add_out1_im;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Product3_mul_temp <= P_d_re_1 * P_d_re_1;
  Product3_out1 <= Product3_mul_temp(55 DOWNTO 24);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay12_out1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Product2_mul_temp <= P_d_im_1 * P_d_im_1;
  Product2_out1 <= Product2_mul_temp(55 DOWNTO 24);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay11_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Add1_out1 <= Delay12_out1 + Delay11_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1 <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay13_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  alphaP_d_2 <= std_logic_vector(Delay13_out1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_re <= to_signed(0, 32);
        Delay3_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay3_out1_re <= P_d_re_1;
        Delay3_out1_im <= P_d_im_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_re <= to_signed(0, 32);
        Delay4_out1_im <= to_signed(0, 32);
      ELSIF enb_1_4_0 = '1' THEN
        Delay4_out1_re <= Delay3_out1_re;
        Delay4_out1_im <= Delay3_out1_im;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  P_d_re <= std_logic_vector(Delay4_out1_re);

  P_d_im <= std_logic_vector(Delay4_out1_im);

END rtl;

