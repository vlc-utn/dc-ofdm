-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_digital_carrier_receiver.vhd
-- Created: 2024-08-11 11:00:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_digital_carrier_receiver
-- Source Path: HDLRx/full_rx/rx_demodulator_full/downshifter/digital_carrier_receiver
-- Hierarchy Level: 3
-- Model version: 1.44
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_digital_carrier_receiver IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        ncoIn_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        ncoIn_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
        );
END full_rx_ip_src_digital_carrier_receiver;


ARCHITECTURE rtl OF full_rx_ip_src_digital_carrier_receiver IS

  -- Signals
  SIGNAL dataIn_signed                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay1_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL ncoIn_re_signed                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL ncoIn_im_signed                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product1_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay2_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En12 [2]
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay_reg                        : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Unary_Minus_cast                 : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Unary_Minus_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Unary_Minus_out1                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay3_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Product2_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_out1                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12

BEGIN
  dataIn_signed <= signed(dataIn);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg(0) <= dataIn_signed;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Constant_out1 <= to_signed(16#2000#, 16);

  ncoIn_re_signed <= signed(ncoIn_re);

  ncoIn_im_signed <= signed(ncoIn_im);

  Product1_mul_temp <= Constant_out1 * ncoIn_re_signed;
  Product1_out1_re <= Product1_mul_temp(27 DOWNTO 12);
  Product1_mul_temp_1 <= Constant_out1 * ncoIn_im_signed;
  Product1_out1_im <= Product1_mul_temp_1(27 DOWNTO 12);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay2_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_reg_im(0) <= Product1_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Product1_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  Product_mul_temp <= Delay1_out1 * Delay2_out1_re;
  Product_out1 <= Product_mul_temp(27 DOWNTO 12);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay_reg(0) <= Product_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  data_out_re <= std_logic_vector(Delay_out1);

  Unary_Minus_cast <= resize(dataIn_signed, 17);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(15 DOWNTO 0);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_reg(0) <= Unary_Minus_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Product2_mul_temp <= Delay3_out1 * Delay2_out1_im;
  Product2_out1 <= Product2_mul_temp(27 DOWNTO 12);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_reg(0) <= Product2_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  data_out_im <= std_logic_vector(Delay4_out1);

END rtl;

