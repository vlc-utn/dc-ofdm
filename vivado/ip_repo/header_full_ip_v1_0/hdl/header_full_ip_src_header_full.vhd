-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLHeaderFull/header_full_ip_src_header_full.vhd
-- Created: 2024-08-31 15:23:55
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- header                        ce_out        1e-08
-- ctrl_out_start                ce_out        1e-08
-- ctrl_out_end                  ce_out        1e-08
-- ctrl_out_valid                ce_out        1e-08
-- next_frame                    ce_out        1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: header_full_ip_src_header_full
-- Source Path: HDLHeaderFull/header_full
-- Hierarchy Level: 0
-- Model version: 1.18
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY header_full_ip_src_header_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        new_frame                         :   IN    std_logic;
        psdu_size_0                       :   IN    std_logic;  -- boolean
        psdu_size_1                       :   IN    std_logic;  -- boolean
        psdu_size_2                       :   IN    std_logic;  -- boolean
        psdu_size_3                       :   IN    std_logic;  -- boolean
        psdu_size_4                       :   IN    std_logic;  -- boolean
        psdu_size_5                       :   IN    std_logic;  -- boolean
        psdu_size_6                       :   IN    std_logic;  -- boolean
        psdu_size_7                       :   IN    std_logic;  -- boolean
        psdu_size_8                       :   IN    std_logic;  -- boolean
        psdu_size_9                       :   IN    std_logic;  -- boolean
        psdu_size_10                      :   IN    std_logic;  -- boolean
        psdu_size_11                      :   IN    std_logic;  -- boolean
        psdu_size_12                      :   IN    std_logic;  -- boolean
        psdu_size_13                      :   IN    std_logic;  -- boolean
        psdu_size_14                      :   IN    std_logic;  -- boolean
        psdu_size_15                      :   IN    std_logic;  -- boolean
        psdu_size_16                      :   IN    std_logic;  -- boolean
        psdu_size_17                      :   IN    std_logic;  -- boolean
        psdu_size_18                      :   IN    std_logic;  -- boolean
        psdu_size_19                      :   IN    std_logic;  -- boolean
        psdu_size_20                      :   IN    std_logic;  -- boolean
        psdu_size_21                      :   IN    std_logic;  -- boolean
        psdu_size_22                      :   IN    std_logic;  -- boolean
        psdu_size_23                      :   IN    std_logic;  -- boolean
        msg_duration_0                    :   IN    std_logic;  -- boolean
        msg_duration_1                    :   IN    std_logic;  -- boolean
        msg_duration_2                    :   IN    std_logic;  -- boolean
        msg_duration_3                    :   IN    std_logic;  -- boolean
        msg_duration_4                    :   IN    std_logic;  -- boolean
        msg_duration_5                    :   IN    std_logic;  -- boolean
        msg_duration_6                    :   IN    std_logic;  -- boolean
        msg_duration_7                    :   IN    std_logic;  -- boolean
        msg_duration_8                    :   IN    std_logic;  -- boolean
        msg_duration_9                    :   IN    std_logic;  -- boolean
        msg_duration_10                   :   IN    std_logic;  -- boolean
        msg_duration_11                   :   IN    std_logic;  -- boolean
        msg_duration_12                   :   IN    std_logic;  -- boolean
        msg_duration_13                   :   IN    std_logic;  -- boolean
        msg_duration_14                   :   IN    std_logic;  -- boolean
        msg_duration_15                   :   IN    std_logic;  -- boolean
        block_size_0                      :   IN    std_logic;  -- boolean
        block_size_1                      :   IN    std_logic;  -- boolean
        fec_rate_0                        :   IN    std_logic;  -- boolean
        fec_rate_1                        :   IN    std_logic;  -- boolean
        fec_rate_2                        :   IN    std_logic;  -- boolean
        rep_number_0                      :   IN    std_logic;  -- boolean
        rep_number_1                      :   IN    std_logic;  -- boolean
        rep_number_2                      :   IN    std_logic;  -- boolean
        concat_factor_0                   :   IN    std_logic;  -- boolean
        concat_factor_1                   :   IN    std_logic;  -- boolean
        concat_factor_2                   :   IN    std_logic;  -- boolean
        scrambler_init_0                  :   IN    std_logic;  -- boolean
        scrambler_init_1                  :   IN    std_logic;  -- boolean
        scrambler_init_2                  :   IN    std_logic;  -- boolean
        scrambler_init_3                  :   IN    std_logic;  -- boolean
        bat_id_0                          :   IN    std_logic;  -- boolean
        bat_id_1                          :   IN    std_logic;  -- boolean
        bat_id_2                          :   IN    std_logic;  -- boolean
        bat_id_3                          :   IN    std_logic;  -- boolean
        bat_id_4                          :   IN    std_logic;  -- boolean
        cp_id_0                           :   IN    std_logic;  -- boolean
        cp_id_1                           :   IN    std_logic;  -- boolean
        cp_id_2                           :   IN    std_logic;  -- boolean
        mimo_spacing_0                    :   IN    std_logic;  -- boolean
        mimo_spacing_1                    :   IN    std_logic;  -- boolean
        mimo_spacing_2                    :   IN    std_logic;  -- boolean
        mimo_number_0                     :   IN    std_logic;  -- boolean
        mimo_number_1                     :   IN    std_logic;  -- boolean
        mimo_number_2                     :   IN    std_logic;  -- boolean
        ce_out                            :   OUT   std_logic;
        header                            :   OUT   std_logic;
        ctrl_out_start                    :   OUT   std_logic;
        ctrl_out_end                      :   OUT   std_logic;
        ctrl_out_valid                    :   OUT   std_logic;
        next_frame                        :   OUT   std_logic
        );
END header_full_ip_src_header_full;


ARCHITECTURE rtl OF header_full_ip_src_header_full IS

  -- Component Declarations
  COMPONENT header_full_ip_src_header_full_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_8_0                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_full_ip_src_h_gen
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          new_frame                       :   IN    std_logic;
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- boolean [24]
          msg_duration                    :   IN    std_logic_vector(15 DOWNTO 0);  -- boolean [16]
          block_size                      :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          fec_rate                        :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          rep_number                      :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          concat_factor                   :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          scrambler_init                  :   IN    std_logic_vector(3 DOWNTO 0);  -- boolean [4]
          bat_id                          :   IN    std_logic_vector(4 DOWNTO 0);  -- boolean [5]
          cp_id                           :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          mimo_spacing                    :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          mimo_number                     :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_full_ip_src_h_crc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_full_ip_src_h_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_full_ip_src_header_fec
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic;
          next_frame                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_full_ip_src_h_repetition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : header_full_ip_src_header_full_tc
    USE ENTITY work.header_full_ip_src_header_full_tc(rtl);

  FOR ALL : header_full_ip_src_h_gen
    USE ENTITY work.header_full_ip_src_h_gen(rtl);

  FOR ALL : header_full_ip_src_h_crc
    USE ENTITY work.header_full_ip_src_h_crc(rtl);

  FOR ALL : header_full_ip_src_h_scrambler
    USE ENTITY work.header_full_ip_src_h_scrambler(rtl);

  FOR ALL : header_full_ip_src_header_fec
    USE ENTITY work.header_full_ip_src_header_fec(rtl);

  FOR ALL : header_full_ip_src_h_repetition
    USE ENTITY work.header_full_ip_src_h_repetition(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_8_0                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL psdu_size                        : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL msg_duration                     : std_logic_vector(15 DOWNTO 0);  -- boolean [16]
  SIGNAL block_size                       : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL fec_rate                         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL rep_number                       : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL concat_factor                    : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL scrambler_init                   : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL bat_id                           : std_logic_vector(4 DOWNTO 0);  -- boolean [5]
  SIGNAL cp_id                            : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL mimo_spacing                     : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL mimo_number                      : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL h_gen_out1                       : std_logic;
  SIGNAL h_gen_out2_start                 : std_logic;
  SIGNAL h_gen_out2_end                   : std_logic;
  SIGNAL h_gen_out2_valid                 : std_logic;
  SIGNAL h_crc_out1                       : std_logic;
  SIGNAL h_crc_out2_start                 : std_logic;
  SIGNAL h_crc_out2_end                   : std_logic;
  SIGNAL h_crc_out2_valid                 : std_logic;
  SIGNAL h_scrambler_out1                 : std_logic;
  SIGNAL h_scrambler_out2_start           : std_logic;
  SIGNAL h_scrambler_out2_end             : std_logic;
  SIGNAL h_scrambler_out2_valid           : std_logic;
  SIGNAL dataOut                          : std_logic;
  SIGNAL header_fec_out2_start            : std_logic;
  SIGNAL header_fec_out2_end              : std_logic;
  SIGNAL header_fec_out2_valid            : std_logic;
  SIGNAL header_fec_out3                  : std_logic;
  SIGNAL h_repetition_out1                : std_logic;
  SIGNAL h_repetition_out2_start          : std_logic;
  SIGNAL h_repetition_out2_end            : std_logic;
  SIGNAL h_repetition_out2_valid          : std_logic;

BEGIN
  u_header_full_tc : header_full_ip_src_header_full_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_8_0 => enb_1_8_0
              );

  u_h_gen : header_full_ip_src_h_gen
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_8_0 => enb_1_8_0,
              new_frame => new_frame,
              psdu_size => psdu_size,  -- boolean [24]
              msg_duration => msg_duration,  -- boolean [16]
              block_size => block_size,  -- boolean [2]
              fec_rate => fec_rate,  -- boolean [3]
              rep_number => rep_number,  -- boolean [3]
              concat_factor => concat_factor,  -- boolean [3]
              scrambler_init => scrambler_init,  -- boolean [4]
              bat_id => bat_id,  -- boolean [5]
              cp_id => cp_id,  -- boolean [3]
              mimo_spacing => mimo_spacing,  -- boolean [3]
              mimo_number => mimo_number,  -- boolean [3]
              data_out => h_gen_out1,
              ctrl_out_start => h_gen_out2_start,
              ctrl_out_end => h_gen_out2_end,
              ctrl_out_valid => h_gen_out2_valid
              );

  u_h_crc : header_full_ip_src_h_crc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => h_gen_out1,
              ctrl_in_start => h_gen_out2_start,
              ctrl_in_end => h_gen_out2_end,
              ctrl_in_valid => h_gen_out2_valid,
              data_out => h_crc_out1,
              ctrl_out_start => h_crc_out2_start,
              ctrl_out_end => h_crc_out2_end,
              ctrl_out_valid => h_crc_out2_valid
              );

  u_h_scrambler : header_full_ip_src_h_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => h_crc_out1,
              ctrl_in_start => h_crc_out2_start,
              ctrl_in_end => h_crc_out2_end,
              ctrl_in_valid => h_crc_out2_valid,
              data_out => h_scrambler_out1,
              ctrl_out_start => h_scrambler_out2_start,
              ctrl_out_end => h_scrambler_out2_end,
              ctrl_out_valid => h_scrambler_out2_valid
              );

  u_header_fec : header_full_ip_src_header_fec
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => h_scrambler_out1,
              ctrl_in_start => h_scrambler_out2_start,
              ctrl_in_end => h_scrambler_out2_end,
              ctrl_in_valid => h_scrambler_out2_valid,
              data_out => dataOut,
              ctrl_out_start => header_fec_out2_start,
              ctrl_out_end => header_fec_out2_end,
              ctrl_out_valid => header_fec_out2_valid,
              next_frame => header_fec_out3
              );

  u_h_repetition : header_full_ip_src_h_repetition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => dataOut,
              ctrl_in_start => header_fec_out2_start,
              ctrl_in_end => header_fec_out2_end,
              ctrl_in_valid => header_fec_out2_valid,
              data_out => h_repetition_out1,
              ctrl_out_start => h_repetition_out2_start,
              ctrl_out_end => h_repetition_out2_end,
              ctrl_out_valid => h_repetition_out2_valid
              );

  psdu_size(0) <= psdu_size_0;
  psdu_size(1) <= psdu_size_1;
  psdu_size(2) <= psdu_size_2;
  psdu_size(3) <= psdu_size_3;
  psdu_size(4) <= psdu_size_4;
  psdu_size(5) <= psdu_size_5;
  psdu_size(6) <= psdu_size_6;
  psdu_size(7) <= psdu_size_7;
  psdu_size(8) <= psdu_size_8;
  psdu_size(9) <= psdu_size_9;
  psdu_size(10) <= psdu_size_10;
  psdu_size(11) <= psdu_size_11;
  psdu_size(12) <= psdu_size_12;
  psdu_size(13) <= psdu_size_13;
  psdu_size(14) <= psdu_size_14;
  psdu_size(15) <= psdu_size_15;
  psdu_size(16) <= psdu_size_16;
  psdu_size(17) <= psdu_size_17;
  psdu_size(18) <= psdu_size_18;
  psdu_size(19) <= psdu_size_19;
  psdu_size(20) <= psdu_size_20;
  psdu_size(21) <= psdu_size_21;
  psdu_size(22) <= psdu_size_22;
  psdu_size(23) <= psdu_size_23;

  msg_duration(0) <= msg_duration_0;
  msg_duration(1) <= msg_duration_1;
  msg_duration(2) <= msg_duration_2;
  msg_duration(3) <= msg_duration_3;
  msg_duration(4) <= msg_duration_4;
  msg_duration(5) <= msg_duration_5;
  msg_duration(6) <= msg_duration_6;
  msg_duration(7) <= msg_duration_7;
  msg_duration(8) <= msg_duration_8;
  msg_duration(9) <= msg_duration_9;
  msg_duration(10) <= msg_duration_10;
  msg_duration(11) <= msg_duration_11;
  msg_duration(12) <= msg_duration_12;
  msg_duration(13) <= msg_duration_13;
  msg_duration(14) <= msg_duration_14;
  msg_duration(15) <= msg_duration_15;

  block_size(0) <= block_size_0;
  block_size(1) <= block_size_1;

  fec_rate(0) <= fec_rate_0;
  fec_rate(1) <= fec_rate_1;
  fec_rate(2) <= fec_rate_2;

  rep_number(0) <= rep_number_0;
  rep_number(1) <= rep_number_1;
  rep_number(2) <= rep_number_2;

  concat_factor(0) <= concat_factor_0;
  concat_factor(1) <= concat_factor_1;
  concat_factor(2) <= concat_factor_2;

  scrambler_init(0) <= scrambler_init_0;
  scrambler_init(1) <= scrambler_init_1;
  scrambler_init(2) <= scrambler_init_2;
  scrambler_init(3) <= scrambler_init_3;

  bat_id(0) <= bat_id_0;
  bat_id(1) <= bat_id_1;
  bat_id(2) <= bat_id_2;
  bat_id(3) <= bat_id_3;
  bat_id(4) <= bat_id_4;

  cp_id(0) <= cp_id_0;
  cp_id(1) <= cp_id_1;
  cp_id(2) <= cp_id_2;

  mimo_spacing(0) <= mimo_spacing_0;
  mimo_spacing(1) <= mimo_spacing_1;
  mimo_spacing(2) <= mimo_spacing_2;

  mimo_number(0) <= mimo_number_0;
  mimo_number(1) <= mimo_number_1;
  mimo_number(2) <= mimo_number_2;

  ce_out <= enb_1_1_1;

  header <= h_repetition_out1;

  ctrl_out_start <= h_repetition_out2_start;

  ctrl_out_end <= h_repetition_out2_end;

  ctrl_out_valid <= h_repetition_out2_valid;

  next_frame <= header_fec_out3;

END rtl;

