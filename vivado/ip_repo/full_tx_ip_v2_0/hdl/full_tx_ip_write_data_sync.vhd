-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_write_data_sync.vhd
-- Created: 2024-08-11 18:38:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_write_data_sync
-- Source Path: full_tx_ip/full_tx_ip_axi_lite/full_tx_ip_axi_lite_module/full_tx_ip_write_data_sync
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_write_data_sync IS
  PORT( i_send_clk                        :   IN    std_logic;  -- ufix1
        i_send_rst                        :   IN    std_logic;  -- ufix1
        i_receive_clk                     :   IN    std_logic;  -- ufix1
        i_receive_rst                     :   IN    std_logic;  -- ufix1
        i_send_pulse                      :   IN    std_logic;  -- ufix1
        i_send_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        i_send_address                    :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        o_send_data                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        o_send_pulse                      :   OUT   std_logic;  -- ufix1
        o_receive_data                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        o_receive_address                 :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
        o_decoder_enable                  :   OUT   std_logic;  -- ufix1
        o_busy                            :   OUT   std_logic  -- ufix1
        );
END full_tx_ip_write_data_sync;


ARCHITECTURE rtl OF full_tx_ip_write_data_sync IS

  -- Component Declarations
  COMPONENT full_tx_ip_write_sync_receive_clk
    PORT( i_receive_clk                   :   IN    std_logic;  -- ufix1
          i_receive_rst                   :   IN    std_logic;  -- ufix1
          i_level_send                    :   IN    std_logic;  -- ufix1
          i_send_data                     :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          i_send_address                  :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          o_receive_pulse                 :   OUT   std_logic;  -- ufix1
          o_level_receive                 :   OUT   std_logic;  -- ufix1
          o_receive_data                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          o_receive_address               :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_write_sync_receive_clk
    USE ENTITY work.full_tx_ip_write_sync_receive_clk(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_send_data_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL o_send_data_tmp                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL s_send_pulse_delayed             : std_logic;  -- ufix1
  SIGNAL s_send_level                     : std_logic;  -- ufix1
  SIGNAL s_send_not_level                 : std_logic;  -- ufix1
  SIGNAL i_send_address_unsigned          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL s_send_waddr                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL s_level_receive                  : std_logic;  -- ufix1
  SIGNAL o_receive_data_tmp               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL o_receive_address_tmp            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL s_level_2FlopSync_1              : std_logic;  -- ufix1
  SIGNAL s_level_2FlopSync_2              : std_logic;  -- ufix1
  SIGNAL s_level_send_2FlopSync_delayed   : std_logic;  -- ufix1
  SIGNAL s_ack_pulse                      : std_logic;  -- ufix1
  SIGNAL axi_lite_CDC_write_curr_state    : std_logic;  -- ufix1
  SIGNAL axi_lite_CDC_write_curr_state_next : std_logic;  -- ufix1

  ATTRIBUTE cdc_info : string;
  ATTRIBUTE dont_touch : boolean;

  ATTRIBUTE cdc_info OF o_send_data_tmp : SIGNAL IS "max_delay_startpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF o_send_data_tmp : SIGNAL IS true;
  ATTRIBUTE cdc_info OF s_send_waddr : SIGNAL IS "max_delay_startpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF s_send_waddr : SIGNAL IS true;
  ATTRIBUTE cdc_info OF s_level_2FlopSync_1 : SIGNAL IS "synchronizer_false_path";
  ATTRIBUTE dont_touch OF s_level_2FlopSync_1 : SIGNAL IS true;
  ATTRIBUTE cdc_info OF s_level_2FlopSync_2 : SIGNAL IS "max_delay_clk_ip_to_axi";
  ATTRIBUTE dont_touch OF s_level_2FlopSync_2 : SIGNAL IS true;
  ATTRIBUTE cdc_info OF o_send_data : SIGNAL IS "max_delay_startpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF o_send_data : SIGNAL IS true;

BEGIN
  u_full_tx_ip_write_sync_receive_clk_inst : full_tx_ip_write_sync_receive_clk
    PORT MAP( i_receive_clk => i_receive_clk,  -- ufix1
              i_receive_rst => i_receive_rst,  -- ufix1
              i_level_send => s_send_level,  -- ufix1
              i_send_data => std_logic_vector(o_send_data_tmp),  -- ufix32
              i_send_address => std_logic_vector(s_send_waddr),  -- ufix14
              o_receive_pulse => o_decoder_enable,  -- ufix1
              o_level_receive => s_level_receive,  -- ufix1
              o_receive_data => o_receive_data_tmp,  -- ufix32
              o_receive_address => o_receive_address_tmp  -- ufix14
              );

  i_send_data_unsigned <= unsigned(i_send_data);

  const_1 <= '1';

  enb <= const_1;

  reg_cdc_wdata_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        o_send_data_tmp <= to_unsigned(0, 32);
      ELSIF enb = '1' AND i_send_pulse = '1' THEN
        o_send_data_tmp <= i_send_data_unsigned;
      END IF;
    END IF;
  END PROCESS reg_cdc_wdata_process;


  o_send_data <= std_logic_vector(o_send_data_tmp);

  reg_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_send_pulse_delayed <= '0';
      ELSIF enb = '1' THEN
        s_send_pulse_delayed <= i_send_pulse;
      END IF;
    END IF;
  END PROCESS reg_process;


  s_send_not_level <=  NOT s_send_level;

  reg_1_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_send_level <= '0';
      ELSIF enb = '1' AND s_send_pulse_delayed = '1' THEN
        s_send_level <= s_send_not_level;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  i_send_address_unsigned <= unsigned(i_send_address);

  reg_cdc_waddress_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_send_waddr <= to_unsigned(16#0000#, 14);
      ELSIF enb = '1' AND i_send_pulse = '1' THEN
        s_send_waddr <= i_send_address_unsigned;
      END IF;
    END IF;
  END PROCESS reg_cdc_waddress_process;


  reg_level_2FlopSync1_receive_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_level_2FlopSync_1 <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_1 <= s_level_receive;
      END IF;
    END IF;
  END PROCESS reg_level_2FlopSync1_receive_process;


  reg_level_2FlopSync2_receive_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_level_2FlopSync_2 <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_2 <= s_level_2FlopSync_1;
      END IF;
    END IF;
  END PROCESS reg_level_2FlopSync2_receive_process;


  intdelay_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_level_send_2FlopSync_delayed <= '0';
      ELSIF enb = '1' THEN
        s_level_send_2FlopSync_delayed <= s_level_2FlopSync_2;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  s_ack_pulse <= s_level_2FlopSync_2 XOR s_level_send_2FlopSync_delayed;

  axi_lite_CDC_write_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        axi_lite_CDC_write_curr_state <= '0';
      ELSIF enb = '1' THEN
        axi_lite_CDC_write_curr_state <= axi_lite_CDC_write_curr_state_next;
      END IF;
    END IF;
  END PROCESS axi_lite_CDC_write_process;

  axi_lite_CDC_write_output : PROCESS (axi_lite_CDC_write_curr_state, i_send_pulse, s_ack_pulse)
  BEGIN
    axi_lite_CDC_write_curr_state_next <= axi_lite_CDC_write_curr_state;
    CASE axi_lite_CDC_write_curr_state IS
      WHEN '0' =>
        o_busy <= '0';
        IF i_send_pulse /= '0' THEN 
          axi_lite_CDC_write_curr_state_next <= '1';
        ELSE 
          axi_lite_CDC_write_curr_state_next <= '0';
        END IF;
      WHEN '1' =>
        o_busy <= '1';
        IF s_ack_pulse /= '0' THEN 
          axi_lite_CDC_write_curr_state_next <= '0';
        ELSE 
          axi_lite_CDC_write_curr_state_next <= '1';
        END IF;
      WHEN OTHERS => 
        o_busy <= '0';
    END CASE;
  END PROCESS axi_lite_CDC_write_output;


  o_send_pulse <= s_send_pulse_delayed;

  o_receive_data <= o_receive_data_tmp;

  o_receive_address <= o_receive_address_tmp;

END rtl;

