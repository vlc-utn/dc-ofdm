-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_write_sync_receive_clk.vhd
-- Created: 2024-08-11 18:38:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_write_sync_receive_clk
-- Source Path: full_tx_ip/full_tx_ip_axi_lite/full_tx_ip_axi_lite_module/full_tx_ip_write_data_sync/full_tx_ip_write_sync_receive_clk
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_write_sync_receive_clk IS
  PORT( i_receive_clk                     :   IN    std_logic;  -- ufix1
        i_receive_rst                     :   IN    std_logic;  -- ufix1
        i_level_send                      :   IN    std_logic;  -- ufix1
        i_send_data                       :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        i_send_address                    :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        o_receive_pulse                   :   OUT   std_logic;  -- ufix1
        o_level_receive                   :   OUT   std_logic;  -- ufix1
        o_receive_data                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        o_receive_address                 :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
        );
END full_tx_ip_write_sync_receive_clk;


ARCHITECTURE rtl OF full_tx_ip_write_sync_receive_clk IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL s_level_2FlopSync_1              : std_logic;  -- ufix1
  SIGNAL s_level_2FlopSync_2              : std_logic;  -- ufix1
  SIGNAL s_level_2FlopSync_delayed        : std_logic;  -- ufix1
  SIGNAL s_receive_pulse                  : std_logic;  -- ufix1
  SIGNAL i_send_data_unsigned             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL o_receive_data_tmp               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL i_send_address_unsigned          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL o_receive_address_tmp            : unsigned(13 DOWNTO 0);  -- ufix14

  ATTRIBUTE cdc_info : string;
  ATTRIBUTE dont_touch : boolean;

  ATTRIBUTE cdc_info OF s_level_2FlopSync_1 : SIGNAL IS "synchronizer_false_path";
  ATTRIBUTE dont_touch OF s_level_2FlopSync_1 : SIGNAL IS true;
  ATTRIBUTE cdc_info OF s_level_2FlopSync_2 : SIGNAL IS "max_delay_clk_axi_to_ip";
  ATTRIBUTE dont_touch OF s_level_2FlopSync_2 : SIGNAL IS true;
  ATTRIBUTE cdc_info OF o_receive_data_tmp : SIGNAL IS "max_delay_endpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF o_receive_data_tmp : SIGNAL IS true;
  ATTRIBUTE cdc_info OF o_receive_address_tmp : SIGNAL IS "max_delay_endpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF o_receive_address_tmp : SIGNAL IS true;
  ATTRIBUTE cdc_info OF o_receive_data : SIGNAL IS "max_delay_endpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF o_receive_data : SIGNAL IS true;
  ATTRIBUTE cdc_info OF o_receive_address : SIGNAL IS "max_delay_endpoint_axi_to_ip";
  ATTRIBUTE dont_touch OF o_receive_address : SIGNAL IS true;

BEGIN
  const_1 <= '1';

  enb <= const_1;

  reg_level_2FlopSync_1_process : PROCESS (i_receive_clk)
  BEGIN
    IF i_receive_clk'EVENT AND i_receive_clk = '1' THEN
      IF i_receive_rst = '1' THEN
        s_level_2FlopSync_1 <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_1 <= i_level_send;
      END IF;
    END IF;
  END PROCESS reg_level_2FlopSync_1_process;


  reg_level_2FlopSync_2_process : PROCESS (i_receive_clk)
  BEGIN
    IF i_receive_clk'EVENT AND i_receive_clk = '1' THEN
      IF i_receive_rst = '1' THEN
        s_level_2FlopSync_2 <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_2 <= s_level_2FlopSync_1;
      END IF;
    END IF;
  END PROCESS reg_level_2FlopSync_2_process;


  reg_process : PROCESS (i_receive_clk)
  BEGIN
    IF i_receive_clk'EVENT AND i_receive_clk = '1' THEN
      IF i_receive_rst = '1' THEN
        s_level_2FlopSync_delayed <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_delayed <= s_level_2FlopSync_2;
      END IF;
    END IF;
  END PROCESS reg_process;


  s_receive_pulse <= s_level_2FlopSync_2 XOR s_level_2FlopSync_delayed;

  reg_1_process : PROCESS (i_receive_clk)
  BEGIN
    IF i_receive_clk'EVENT AND i_receive_clk = '1' THEN
      IF i_receive_rst = '1' THEN
        o_receive_pulse <= '0';
      ELSIF enb = '1' THEN
        o_receive_pulse <= s_receive_pulse;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  i_send_data_unsigned <= unsigned(i_send_data);

  reg_receive_wdata_process : PROCESS (i_receive_clk)
  BEGIN
    IF i_receive_clk'EVENT AND i_receive_clk = '1' THEN
      IF i_receive_rst = '1' THEN
        o_receive_data_tmp <= to_unsigned(0, 32);
      ELSIF enb = '1' AND s_receive_pulse = '1' THEN
        o_receive_data_tmp <= i_send_data_unsigned;
      END IF;
    END IF;
  END PROCESS reg_receive_wdata_process;


  o_receive_data <= std_logic_vector(o_receive_data_tmp);

  i_send_address_unsigned <= unsigned(i_send_address);

  reg_receive_waddress_process : PROCESS (i_receive_clk)
  BEGIN
    IF i_receive_clk'EVENT AND i_receive_clk = '1' THEN
      IF i_receive_rst = '1' THEN
        o_receive_address_tmp <= to_unsigned(16#0000#, 14);
      ELSIF enb = '1' AND s_receive_pulse = '1' THEN
        o_receive_address_tmp <= i_send_address_unsigned;
      END IF;
    END IF;
  END PROCESS reg_receive_waddress_process;


  o_receive_address <= std_logic_vector(o_receive_address_tmp);

  o_level_receive <= s_level_2FlopSync_delayed;

END rtl;

