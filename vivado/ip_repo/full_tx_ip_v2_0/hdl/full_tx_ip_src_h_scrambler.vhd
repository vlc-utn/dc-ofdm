-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_h_scrambler.vhd
-- Created: 2024-08-11 18:37:15
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_h_scrambler
-- Source Path: HDLTx/full_tx/header_full/h_scrambler
-- Hierarchy Level: 2
-- Model version: 4.91
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_h_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic;
        ctrl_in_start                     :   IN    std_logic;
        ctrl_in_end                       :   IN    std_logic;
        ctrl_in_valid                     :   IN    std_logic;
        data_out                          :   OUT   std_logic;
        ctrl_out_start                    :   OUT   std_logic;
        ctrl_out_end                      :   OUT   std_logic;
        ctrl_out_valid                    :   OUT   std_logic
        );
END full_tx_ip_src_h_scrambler;


ARCHITECTURE rtl OF full_tx_ip_src_h_scrambler IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_Sample_Control_Bus_Creator_block3
    PORT( In1                             :   IN    std_logic;
          In2                             :   IN    std_logic;
          In3                             :   IN    std_logic;
          Out1_start                      :   OUT   std_logic;
          Out1_end                        :   OUT   std_logic;
          Out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_Sample_Control_Bus_Creator_block3
    USE ENTITY work.full_tx_ip_src_Sample_Control_Bus_Creator_block3(rtl);

  -- Signals
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL start                            : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL C1_iv                            : std_logic;
  SIGNAL C2_iv                            : std_logic;
  SIGNAL C3_iv                            : std_logic;
  SIGNAL C4_iv                            : std_logic;
  SIGNAL C5_iv                            : std_logic;
  SIGNAL C6_iv                            : std_logic;
  SIGNAL C7_iv                            : std_logic;
  SIGNAL C8_iv                            : std_logic;
  SIGNAL C9_iv                            : std_logic;
  SIGNAL C10_iv                           : std_logic;
  SIGNAL C11_iv                           : std_logic;
  SIGNAL C12_iv                           : std_logic;
  SIGNAL C13_iv                           : std_logic;
  SIGNAL C14_iv                           : std_logic;
  SIGNAL C15_iv                           : std_logic;
  SIGNAL C16_iv                           : std_logic;
  SIGNAL C17_iv                           : std_logic;
  SIGNAL C18_iv                           : std_logic;
  SIGNAL C19_iv                           : std_logic;
  SIGNAL C20_iv                           : std_logic;
  SIGNAL C21_iv                           : std_logic;
  SIGNAL C22_iv                           : std_logic;
  SIGNAL C23_iv                           : std_logic;
  SIGNAL C1_out1                          : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL C1_ectrl                         : std_logic;
  SIGNAL C1_toDelay                       : std_logic;
  SIGNAL C2_out1                          : std_logic;
  SIGNAL C2_ectrl                         : std_logic;
  SIGNAL C2_toDelay                       : std_logic;
  SIGNAL C3_out1                          : std_logic;
  SIGNAL C3_ectrl                         : std_logic;
  SIGNAL C3_toDelay                       : std_logic;
  SIGNAL C4_out1                          : std_logic;
  SIGNAL C4_ectrl                         : std_logic;
  SIGNAL C4_toDelay                       : std_logic;
  SIGNAL C5_out1                          : std_logic;
  SIGNAL C5_ectrl                         : std_logic;
  SIGNAL C5_toDelay                       : std_logic;
  SIGNAL C6_out1                          : std_logic;
  SIGNAL C6_ectrl                         : std_logic;
  SIGNAL C6_toDelay                       : std_logic;
  SIGNAL C7_out1                          : std_logic;
  SIGNAL C7_ectrl                         : std_logic;
  SIGNAL C7_toDelay                       : std_logic;
  SIGNAL C8_out1                          : std_logic;
  SIGNAL C8_ectrl                         : std_logic;
  SIGNAL C8_toDelay                       : std_logic;
  SIGNAL C9_out1                          : std_logic;
  SIGNAL C9_ectrl                         : std_logic;
  SIGNAL C9_toDelay                       : std_logic;
  SIGNAL C10_out1                         : std_logic;
  SIGNAL C10_ectrl                        : std_logic;
  SIGNAL C10_toDelay                      : std_logic;
  SIGNAL C11_out1                         : std_logic;
  SIGNAL C11_ectrl                        : std_logic;
  SIGNAL C11_toDelay                      : std_logic;
  SIGNAL C12_out1                         : std_logic;
  SIGNAL C12_ectrl                        : std_logic;
  SIGNAL C12_toDelay                      : std_logic;
  SIGNAL C13_out1                         : std_logic;
  SIGNAL C13_ectrl                        : std_logic;
  SIGNAL C13_toDelay                      : std_logic;
  SIGNAL C14_out1                         : std_logic;
  SIGNAL C14_ectrl                        : std_logic;
  SIGNAL C14_toDelay                      : std_logic;
  SIGNAL C15_out1                         : std_logic;
  SIGNAL C15_ectrl                        : std_logic;
  SIGNAL C15_toDelay                      : std_logic;
  SIGNAL C16_out1                         : std_logic;
  SIGNAL C16_ectrl                        : std_logic;
  SIGNAL C16_toDelay                      : std_logic;
  SIGNAL C17_out1                         : std_logic;
  SIGNAL C17_ectrl                        : std_logic;
  SIGNAL C17_toDelay                      : std_logic;
  SIGNAL C18_out1                         : std_logic;
  SIGNAL C18_ectrl                        : std_logic;
  SIGNAL C18_toDelay                      : std_logic;
  SIGNAL C19_out1                         : std_logic;
  SIGNAL C19_ectrl                        : std_logic;
  SIGNAL C19_toDelay                      : std_logic;
  SIGNAL C20_out1                         : std_logic;
  SIGNAL C20_ectrl                        : std_logic;
  SIGNAL C20_toDelay                      : std_logic;
  SIGNAL C21_out1                         : std_logic;
  SIGNAL C21_ectrl                        : std_logic;
  SIGNAL C21_toDelay                      : std_logic;
  SIGNAL C22_out1                         : std_logic;
  SIGNAL C22_ectrl                        : std_logic;
  SIGNAL C22_toDelay                      : std_logic;
  SIGNAL C23_out1                         : std_logic;
  SIGNAL C23_ectrl                        : std_logic;
  SIGNAL C23_toDelay                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL end_rsvd                         : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Sample_Control_Bus_Creator_out1_start : std_logic;
  SIGNAL Sample_Control_Bus_Creator_out1_end : std_logic;
  SIGNAL Sample_Control_Bus_Creator_out1_valid : std_logic;

BEGIN
  u_Sample_Control_Bus_Creator : full_tx_ip_src_Sample_Control_Bus_Creator_block3
    PORT MAP( In1 => Delay3_out1,
              In2 => Delay4_out1,
              In3 => Delay5_out1,
              Out1_start => Sample_Control_Bus_Creator_out1_start,
              Out1_end => Sample_Control_Bus_Creator_out1_end,
              Out1_valid => Sample_Control_Bus_Creator_out1_valid
              );

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= data_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  start <= ctrl_in_start;

  valid <= ctrl_in_valid;

  C1_iv <= '0';

  C2_iv <= '1';

  C3_iv <= '0';

  C4_iv <= '1';

  C5_iv <= '0';

  C6_iv <= '1';

  C7_iv <= '0';

  C8_iv <= '1';

  C9_iv <= '0';

  C10_iv <= '1';

  C11_iv <= '0';

  C12_iv <= '1';

  C13_iv <= '0';

  C14_iv <= '1';

  C15_iv <= '0';

  C16_iv <= '1';

  C17_iv <= '0';

  C18_iv <= '1';

  C19_iv <= '0';

  C20_iv <= '1';

  C21_iv <= '0';

  C22_iv <= '1';

  C23_iv <= '0';

  
  C1_ectrl <= C1_out1 WHEN valid = '0' ELSE
      Logical_Operator1_out1;

  
  C1_toDelay <= C1_ectrl WHEN start = '0' ELSE
      C1_iv;

  C1_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C1_out1 <= '0';
      ELSIF enb = '1' THEN
        C1_out1 <= C1_toDelay;
      END IF;
    END IF;
  END PROCESS C1_lowered_process;


  
  C2_ectrl <= C2_out1 WHEN valid = '0' ELSE
      C1_out1;

  
  C2_toDelay <= C2_ectrl WHEN start = '0' ELSE
      C2_iv;

  C2_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C2_out1 <= '1';
      ELSIF enb = '1' THEN
        C2_out1 <= C2_toDelay;
      END IF;
    END IF;
  END PROCESS C2_lowered_process;


  
  C3_ectrl <= C3_out1 WHEN valid = '0' ELSE
      C2_out1;

  
  C3_toDelay <= C3_ectrl WHEN start = '0' ELSE
      C3_iv;

  C3_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C3_out1 <= '0';
      ELSIF enb = '1' THEN
        C3_out1 <= C3_toDelay;
      END IF;
    END IF;
  END PROCESS C3_lowered_process;


  
  C4_ectrl <= C4_out1 WHEN valid = '0' ELSE
      C3_out1;

  
  C4_toDelay <= C4_ectrl WHEN start = '0' ELSE
      C4_iv;

  C4_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C4_out1 <= '1';
      ELSIF enb = '1' THEN
        C4_out1 <= C4_toDelay;
      END IF;
    END IF;
  END PROCESS C4_lowered_process;


  
  C5_ectrl <= C5_out1 WHEN valid = '0' ELSE
      C4_out1;

  
  C5_toDelay <= C5_ectrl WHEN start = '0' ELSE
      C5_iv;

  C5_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C5_out1 <= '0';
      ELSIF enb = '1' THEN
        C5_out1 <= C5_toDelay;
      END IF;
    END IF;
  END PROCESS C5_lowered_process;


  
  C6_ectrl <= C6_out1 WHEN valid = '0' ELSE
      C5_out1;

  
  C6_toDelay <= C6_ectrl WHEN start = '0' ELSE
      C6_iv;

  C6_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C6_out1 <= '1';
      ELSIF enb = '1' THEN
        C6_out1 <= C6_toDelay;
      END IF;
    END IF;
  END PROCESS C6_lowered_process;


  
  C7_ectrl <= C7_out1 WHEN valid = '0' ELSE
      C6_out1;

  
  C7_toDelay <= C7_ectrl WHEN start = '0' ELSE
      C7_iv;

  C7_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C7_out1 <= '0';
      ELSIF enb = '1' THEN
        C7_out1 <= C7_toDelay;
      END IF;
    END IF;
  END PROCESS C7_lowered_process;


  
  C8_ectrl <= C8_out1 WHEN valid = '0' ELSE
      C7_out1;

  
  C8_toDelay <= C8_ectrl WHEN start = '0' ELSE
      C8_iv;

  C8_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C8_out1 <= '1';
      ELSIF enb = '1' THEN
        C8_out1 <= C8_toDelay;
      END IF;
    END IF;
  END PROCESS C8_lowered_process;


  
  C9_ectrl <= C9_out1 WHEN valid = '0' ELSE
      C8_out1;

  
  C9_toDelay <= C9_ectrl WHEN start = '0' ELSE
      C9_iv;

  C9_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C9_out1 <= '0';
      ELSIF enb = '1' THEN
        C9_out1 <= C9_toDelay;
      END IF;
    END IF;
  END PROCESS C9_lowered_process;


  
  C10_ectrl <= C10_out1 WHEN valid = '0' ELSE
      C9_out1;

  
  C10_toDelay <= C10_ectrl WHEN start = '0' ELSE
      C10_iv;

  C10_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C10_out1 <= '1';
      ELSIF enb = '1' THEN
        C10_out1 <= C10_toDelay;
      END IF;
    END IF;
  END PROCESS C10_lowered_process;


  
  C11_ectrl <= C11_out1 WHEN valid = '0' ELSE
      C10_out1;

  
  C11_toDelay <= C11_ectrl WHEN start = '0' ELSE
      C11_iv;

  C11_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C11_out1 <= '0';
      ELSIF enb = '1' THEN
        C11_out1 <= C11_toDelay;
      END IF;
    END IF;
  END PROCESS C11_lowered_process;


  
  C12_ectrl <= C12_out1 WHEN valid = '0' ELSE
      C11_out1;

  
  C12_toDelay <= C12_ectrl WHEN start = '0' ELSE
      C12_iv;

  C12_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C12_out1 <= '1';
      ELSIF enb = '1' THEN
        C12_out1 <= C12_toDelay;
      END IF;
    END IF;
  END PROCESS C12_lowered_process;


  
  C13_ectrl <= C13_out1 WHEN valid = '0' ELSE
      C12_out1;

  
  C13_toDelay <= C13_ectrl WHEN start = '0' ELSE
      C13_iv;

  C13_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C13_out1 <= '0';
      ELSIF enb = '1' THEN
        C13_out1 <= C13_toDelay;
      END IF;
    END IF;
  END PROCESS C13_lowered_process;


  
  C14_ectrl <= C14_out1 WHEN valid = '0' ELSE
      C13_out1;

  
  C14_toDelay <= C14_ectrl WHEN start = '0' ELSE
      C14_iv;

  C14_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C14_out1 <= '1';
      ELSIF enb = '1' THEN
        C14_out1 <= C14_toDelay;
      END IF;
    END IF;
  END PROCESS C14_lowered_process;


  
  C15_ectrl <= C15_out1 WHEN valid = '0' ELSE
      C14_out1;

  
  C15_toDelay <= C15_ectrl WHEN start = '0' ELSE
      C15_iv;

  C15_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C15_out1 <= '0';
      ELSIF enb = '1' THEN
        C15_out1 <= C15_toDelay;
      END IF;
    END IF;
  END PROCESS C15_lowered_process;


  
  C16_ectrl <= C16_out1 WHEN valid = '0' ELSE
      C15_out1;

  
  C16_toDelay <= C16_ectrl WHEN start = '0' ELSE
      C16_iv;

  C16_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C16_out1 <= '1';
      ELSIF enb = '1' THEN
        C16_out1 <= C16_toDelay;
      END IF;
    END IF;
  END PROCESS C16_lowered_process;


  
  C17_ectrl <= C17_out1 WHEN valid = '0' ELSE
      C16_out1;

  
  C17_toDelay <= C17_ectrl WHEN start = '0' ELSE
      C17_iv;

  C17_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C17_out1 <= '0';
      ELSIF enb = '1' THEN
        C17_out1 <= C17_toDelay;
      END IF;
    END IF;
  END PROCESS C17_lowered_process;


  
  C18_ectrl <= C18_out1 WHEN valid = '0' ELSE
      C17_out1;

  
  C18_toDelay <= C18_ectrl WHEN start = '0' ELSE
      C18_iv;

  C18_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C18_out1 <= '1';
      ELSIF enb = '1' THEN
        C18_out1 <= C18_toDelay;
      END IF;
    END IF;
  END PROCESS C18_lowered_process;


  
  C19_ectrl <= C19_out1 WHEN valid = '0' ELSE
      C18_out1;

  
  C19_toDelay <= C19_ectrl WHEN start = '0' ELSE
      C19_iv;

  C19_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C19_out1 <= '0';
      ELSIF enb = '1' THEN
        C19_out1 <= C19_toDelay;
      END IF;
    END IF;
  END PROCESS C19_lowered_process;


  
  C20_ectrl <= C20_out1 WHEN valid = '0' ELSE
      C19_out1;

  
  C20_toDelay <= C20_ectrl WHEN start = '0' ELSE
      C20_iv;

  C20_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C20_out1 <= '1';
      ELSIF enb = '1' THEN
        C20_out1 <= C20_toDelay;
      END IF;
    END IF;
  END PROCESS C20_lowered_process;


  
  C21_ectrl <= C21_out1 WHEN valid = '0' ELSE
      C20_out1;

  
  C21_toDelay <= C21_ectrl WHEN start = '0' ELSE
      C21_iv;

  C21_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C21_out1 <= '0';
      ELSIF enb = '1' THEN
        C21_out1 <= C21_toDelay;
      END IF;
    END IF;
  END PROCESS C21_lowered_process;


  
  C22_ectrl <= C22_out1 WHEN valid = '0' ELSE
      C21_out1;

  
  C22_toDelay <= C22_ectrl WHEN start = '0' ELSE
      C22_iv;

  C22_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C22_out1 <= '1';
      ELSIF enb = '1' THEN
        C22_out1 <= C22_toDelay;
      END IF;
    END IF;
  END PROCESS C22_lowered_process;


  
  C23_ectrl <= C23_out1 WHEN valid = '0' ELSE
      C22_out1;

  
  C23_toDelay <= C23_ectrl WHEN start = '0' ELSE
      C23_iv;

  C23_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        C23_out1 <= '0';
      ELSIF enb = '1' THEN
        C23_out1 <= C23_toDelay;
      END IF;
    END IF;
  END PROCESS C23_lowered_process;


  Logical_Operator1_out1 <= C23_out1 XOR C18_out1;

  Logical_Operator_out1 <= Delay1_out1 XOR Logical_Operator1_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= start;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  end_rsvd <= ctrl_in_end;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= end_rsvd;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= valid;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  data_out <= Logical_Operator_out1;

  ctrl_out_start <= Sample_Control_Bus_Creator_out1_start;

  ctrl_out_end <= Sample_Control_Bus_Creator_out1_end;

  ctrl_out_valid <= Sample_Control_Bus_Creator_out1_valid;

END rtl;

