-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_pulse_sync.vhd
-- Created: 2024-08-11 18:38:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_pulse_sync
-- Source Path: full_tx_ip/full_tx_ip_axi_lite/full_tx_ip_pulse_sync
-- Hierarchy Level: 4
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_pulse_sync IS
  PORT( i_send_clk                        :   IN    std_logic;  -- ufix1
        i_send_rst                        :   IN    std_logic;  -- ufix1
        i_receive_clk                     :   IN    std_logic;  -- ufix1
        i_receive_rst                     :   IN    std_logic;  -- ufix1
        i_send_pulse                      :   IN    std_logic;  -- ufix1
        o_receive_pulse                   :   OUT   std_logic;  -- ufix1
        o_pulse_ack                       :   OUT   std_logic  -- ufix1
        );
END full_tx_ip_pulse_sync;


ARCHITECTURE rtl OF full_tx_ip_pulse_sync IS

  -- Component Declarations
  COMPONENT full_tx_ip_sync_receive_clk
    PORT( i_receive_clk                   :   IN    std_logic;  -- ufix1
          i_receive_rst                   :   IN    std_logic;  -- ufix1
          i_level_send                    :   IN    std_logic;  -- ufix1
          o_receive_pulse                 :   OUT   std_logic;  -- ufix1
          o_receive_level                 :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_sync_receive_clk
    USE ENTITY work.full_tx_ip_sync_receive_clk(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL s_send_pulse_delayed             : std_logic;  -- ufix1
  SIGNAL s_send_level                     : std_logic;  -- ufix1
  SIGNAL s_send_not_level                 : std_logic;  -- ufix1
  SIGNAL s_receive_feedback               : std_logic;  -- ufix1
  SIGNAL s_level_2FlopSync_1              : std_logic;  -- ufix1
  SIGNAL s_level_2FlopSync_2              : std_logic;  -- ufix1
  SIGNAL s_level_send_2FlopSync_delayed   : std_logic;  -- ufix1

  ATTRIBUTE cdc_info : string;
  ATTRIBUTE dont_touch : boolean;

  ATTRIBUTE cdc_info OF s_level_2FlopSync_1 : SIGNAL IS "synchronizer_false_path";
  ATTRIBUTE dont_touch OF s_level_2FlopSync_1 : SIGNAL IS true;

BEGIN
  u_full_tx_ip_sync_receive_clk_inst : full_tx_ip_sync_receive_clk
    PORT MAP( i_receive_clk => i_receive_clk,  -- ufix1
              i_receive_rst => i_receive_rst,  -- ufix1
              i_level_send => s_send_level,  -- ufix1
              o_receive_pulse => o_receive_pulse,  -- ufix1
              o_receive_level => s_receive_feedback  -- ufix1
              );

  const_1 <= '1';

  enb <= const_1;

  reg_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_send_pulse_delayed <= '0';
      ELSIF enb = '1' THEN
        s_send_pulse_delayed <= i_send_pulse;
      END IF;
    END IF;
  END PROCESS reg_process;


  s_send_not_level <=  NOT s_send_level;

  reg_1_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_send_level <= '0';
      ELSIF enb = '1' AND s_send_pulse_delayed = '1' THEN
        s_send_level <= s_send_not_level;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_level_2FlopSync_1_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_level_2FlopSync_1 <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_1 <= s_receive_feedback;
      END IF;
    END IF;
  END PROCESS reg_level_2FlopSync_1_process;


  reg_level_2FlopSync_2_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_level_2FlopSync_2 <= '0';
      ELSIF enb = '1' THEN
        s_level_2FlopSync_2 <= s_level_2FlopSync_1;
      END IF;
    END IF;
  END PROCESS reg_level_2FlopSync_2_process;


  reg_2_process : PROCESS (i_send_clk)
  BEGIN
    IF i_send_clk'EVENT AND i_send_clk = '1' THEN
      IF i_send_rst = '1' THEN
        s_level_send_2FlopSync_delayed <= '0';
      ELSIF enb = '1' THEN
        s_level_send_2FlopSync_delayed <= s_level_2FlopSync_2;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  o_pulse_ack <= s_level_2FlopSync_2 XOR s_level_send_2FlopSync_delayed;

END rtl;

