-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_valid_frame.vhd
-- Created: 2024-08-11 18:37:15
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_valid_frame
-- Source Path: HDLTx/full_tx/store_frame_in_ram/read_frame_from_ram/valid_frame
-- Hierarchy Level: 3
-- Model version: 4.91
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_valid_frame IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        valid_out                         :   OUT   std_logic;
        new_rsvd                          :   OUT   std_logic
        );
END full_tx_ip_src_valid_frame;


ARCHITECTURE rtl OF full_tx_ip_src_valid_frame IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_Compare_To_Zero1
    PORT( u                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_Compare_To_Zero1
    USE ENTITY work.full_tx_ip_src_Compare_To_Zero1(rtl);

  -- Signals
  SIGNAL Delay4_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter2_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;

BEGIN
  u_Compare_To_Zero1 : full_tx_ip_src_Compare_To_Zero1
    PORT MAP( u => std_logic_vector(HDL_Counter2_out1),  -- uint8
              y => Compare_To_Zero1_out1
              );

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_reg(0) <= valid_in;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 193
  count_step <= to_unsigned(16#01#, 8);

  count_from <= to_unsigned(16#00#, 8);

  count <= HDL_Counter2_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter2_out1 = to_unsigned(16#C1#, 8) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter2_out1 WHEN Delay4_out1 = '0' ELSE
      count_value;

  HDL_Counter2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter2_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        HDL_Counter2_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  Logical_Operator4_out1 <= Delay4_out1 AND Compare_To_Zero1_out1;

  valid_out <= Delay4_out1;

  new_rsvd <= Logical_Operator4_out1;

END rtl;

