-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_store_frame_in_ram.vhd
-- Created: 2024-09-01 16:46:29
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_store_frame_in_ram
-- Source Path: HDLTx/full_tx/store_frame_in_ram
-- Hierarchy Level: 1
-- Model version: 4.102
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_store_frame_in_ram IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        preamble                          :   IN    std_logic;
        preamble_valid                    :   IN    std_logic;
        channel                           :   IN    std_logic;
        channel_valid                     :   IN    std_logic;
        header                            :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        header_valid                      :   IN    std_logic;
        payload                           :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        payload_valid                     :   IN    std_logic;
        payload_len                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        cp_len_in                         :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
        ready                             :   IN    std_logic;
        data_out                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_out                         :   OUT   std_logic;
        bits_per_subcarrier_out           :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_rsvd                          :   OUT   std_logic;
        cp_len                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END full_tx_ip_src_store_frame_in_ram;


ARCHITECTURE rtl OF full_tx_ip_src_store_frame_in_ram IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_write_frame_to_ram
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          preamble                        :   IN    std_logic;
          preamble_valid                  :   IN    std_logic;
          channel                         :   IN    std_logic;
          channel_valid                   :   IN    std_logic;
          header                          :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          header_valid                    :   IN    std_logic;
          payload                         :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          payload_valid                   :   IN    std_logic;
          payload_len                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          write_data                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
          wr_addr                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          we                              :   OUT   std_logic;
          end_rsvd                        :   OUT   std_logic;
          ram_size                        :   OUT   std_logic_vector(24 DOWNTO 0)  -- ufix25
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_read_frame_from_ram
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          start_reading                   :   IN    std_logic;
          ram_size                        :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          cp_len_in                       :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          Enable                          :   IN    std_logic;
          rd_addr                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
          valid_out                       :   OUT   std_logic;
          bits_per_subcarrier_out         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          init                            :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_rsvd                        :   OUT   std_logic;
          cp_len                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_RAM
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          new_din                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          new_wr_addr                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          new_we                          :   IN    std_logic;
          new_rd_addr                     :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          dout_new                        :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_write_frame_to_ram
    USE ENTITY work.full_tx_ip_src_write_frame_to_ram(rtl);

  FOR ALL : full_tx_ip_src_read_frame_from_ram
    USE ENTITY work.full_tx_ip_src_read_frame_from_ram(rtl);

  FOR ALL : full_tx_ip_src_RAM
    USE ENTITY work.full_tx_ip_src_RAM(rtl);

  -- Signals
  SIGNAL ready_1                          : std_logic;
  SIGNAL new_din                          : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL new_wr_addr                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL new_we                           : std_logic;
  SIGNAL write_frame_to_ram_out4          : std_logic;
  SIGNAL write_frame_to_ram_out5          : std_logic_vector(24 DOWNTO 0);  -- ufix25
  SIGNAL new_rd_addr                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_new                        : std_logic;
  SIGNAL read_frame_from_ram_out3         : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL read_frame_from_ram_out4         : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL new_new                          : std_logic;
  SIGNAL read_frame_from_ram_out6         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL dout_new                         : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL dout_new_unsigned                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL dout_magic                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL dout_magic_1                     : unsigned(11 DOWNTO 0);  -- ufix12

BEGIN
  u_write_frame_to_ram : full_tx_ip_src_write_frame_to_ram
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              preamble => preamble,
              preamble_valid => preamble_valid,
              channel => channel,
              channel_valid => channel_valid,
              header => header,  -- boolean [2]
              header_valid => header_valid,
              payload => payload,  -- boolean [2]
              payload_valid => payload_valid,
              payload_len => payload_len,  -- uint16
              write_data => new_din,  -- ufix12
              wr_addr => new_wr_addr,  -- uint16
              we => new_we,
              end_rsvd => write_frame_to_ram_out4,
              ram_size => write_frame_to_ram_out5  -- ufix25
              );

  u_read_frame_from_ram : full_tx_ip_src_read_frame_from_ram
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              start_reading => write_frame_to_ram_out4,
              ram_size => write_frame_to_ram_out5,  -- ufix25
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              cp_len_in => cp_len_in,  -- boolean [3]
              Enable => ready,
              rd_addr => new_rd_addr,  -- uint16
              valid_out => valid_new,
              bits_per_subcarrier_out => read_frame_from_ram_out3,  -- ufix4
              init => read_frame_from_ram_out4,  -- boolean [13]
              new_rsvd => new_new,
              cp_len => read_frame_from_ram_out6  -- uint8
              );

  u_RAM : full_tx_ip_src_RAM
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              new_din => new_din,  -- ufix12
              new_wr_addr => new_wr_addr,  -- uint16
              new_we => new_we,
              new_rd_addr => new_rd_addr,  -- uint16
              dout_new => dout_new  -- ufix12
              );

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        ready_1 <= ready;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  dout_new_unsigned <= unsigned(dout_new);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_magic_1 <= to_unsigned(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        dout_magic_1 <= dout_magic;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  
  dout_magic <= dout_magic_1 WHEN ready_1 = '0' ELSE
      dout_new_unsigned;

  data_out <= std_logic_vector(dout_magic);

  valid_out <= valid_new;

  bits_per_subcarrier_out <= read_frame_from_ram_out3;

  init <= read_frame_from_ram_out4;

  new_rsvd <= new_new;

  cp_len <= read_frame_from_ram_out6;

END rtl;

