-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_frequency_upshift.vhd
-- Created: 2024-09-01 00:44:13
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_frequency_upshift
-- Source Path: HDLModulatorFull/full_ofdm_modulator/frequency_upshift
-- Hierarchy Level: 1
-- Model version: 1.36
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_frequency_upshift IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_in                          :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_out                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_frequency_upshift;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_frequency_upshift IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_NCO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          resetPhase                      :   IN    std_logic;
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_Mixer
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataIn_im                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          ncoIn_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ncoIn_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          mixedOut                        :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_NCO
    USE ENTITY work.full_ofdm_modulator_ip_src_NCO(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_Mixer
    USE ENTITY work.full_ofdm_modulator_ip_src_Mixer(rtl);

  -- Signals
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out2                         : std_logic;
  SIGNAL Mixer_out1                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL rd_1_reg                         : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL NCO_out2_1                       : std_logic;

BEGIN
  u_NCO : full_ofdm_modulator_ip_src_NCO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              resetPhase => reset,
              validIn => valid_in_1,
              complexexp_re => NCO_out1_re,  -- sfix16_En14
              complexexp_im => NCO_out1_im,  -- sfix16_En14
              validOut => NCO_out2
              );

  u_Mixer : full_ofdm_modulator_ip_src_Mixer
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => data_in_re,  -- sfix12_En10
              dataIn_im => data_in_im,  -- sfix12_En10
              ncoIn_re => NCO_out1_re,  -- sfix16_En14
              ncoIn_im => NCO_out1_im,  -- sfix16_En14
              mixedOut => Mixer_out1  -- sfix12_En10
              );

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_in_1 <= '0';
      ELSIF enb = '1' THEN
        valid_in_1 <= valid_in;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_1_reg(0) <= NCO_out2;
        rd_1_reg(3 DOWNTO 1) <= rd_1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  NCO_out2_1 <= rd_1_reg(3);

  data_out <= Mixer_out1;

  valid_out <= NCO_out2_1;

END rtl;

