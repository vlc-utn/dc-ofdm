-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_enabled_qam_and_scrambler.vhd
-- Created: 2024-09-01 00:44:13
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_enabled_qam_and_scrambler
-- Source Path: HDLModulatorFull/full_ofdm_modulator/enabled_qam_and_scrambler
-- Hierarchy Level: 1
-- Model version: 1.36
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_enabled_qam_and_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_rsvd                          :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s2_in                             :   IN    std_logic;
        s1_in                             :   IN    std_logic;
        ofdm_en                           :   IN    std_logic;
        Enable                            :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic;
        cp_len_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_scrambler                   :   OUT   std_logic;
        init_out                          :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_out                           :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_enabled_qam_and_scrambler;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_enabled_qam_and_scrambler IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_qam_mod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          ready_out                       :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_in                        :   IN    std_logic;
          s1_in                           :   IN    std_logic;
          s2_in                           :   IN    std_logic;
          ready_out                       :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_qam_mod
    USE ENTITY work.full_ofdm_modulator_ip_src_qam_mod(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_constellation_scrambler
    USE ENTITY work.full_ofdm_modulator_ip_src_constellation_scrambler(rtl);

  -- Signals
  SIGNAL ready_out                        : std_logic;
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL ready_out_2                      : std_logic;
  SIGNAL ready_out_3                      : std_logic;
  SIGNAL ready_out_4                      : std_logic;
  SIGNAL ready_out_5                      : std_logic;
  SIGNAL ready_out_6                      : std_logic;
  SIGNAL ready_out_7                      : std_logic;
  SIGNAL ready_out_8                      : std_logic;
  SIGNAL ready_out_9                      : std_logic;
  SIGNAL qam_mod_out1_re                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL qam_mod_out1_im                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL qam_mod_out2                     : std_logic;
  SIGNAL qam_mod_out1_re_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_im_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_re_2                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_im_2                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1_im                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1_im_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1_re_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1_re_2                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1_im_2                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_re_3                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_im_3                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_re_4                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out1_im_4                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_bypass_reg_re            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_bypass_reg_im            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL qam_mod_out2_1                   : std_logic;
  SIGNAL qam_mod_out2_2                   : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay9_out1_1                    : std_logic;
  SIGNAL Delay9_out1_2                    : std_logic;
  SIGNAL qam_mod_out2_3                   : std_logic;
  SIGNAL qam_mod_out2_4                   : std_logic;
  SIGNAL Delay9_bypass_reg                : std_logic;  -- ufix1
  SIGNAL out_new_re                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL out_new_im                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL constellation_scrambler_out2     : std_logic;
  SIGNAL out_new_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_im_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_re_2                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_im_2                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_2                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_2                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_re_3                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_im_3                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_re_4                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_im_4                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay5_bypass_reg_re             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay5_bypass_reg_im             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_3                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_3                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_4                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_4                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_5                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_5                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_6                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_7                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_6                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_7                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_8                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_8                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_9                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_9                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_10                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_10                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay131_bypass_reg_re           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay131_bypass_reg_im           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_11                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_11                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_12                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_12                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_im                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_im_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_re_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_re_2                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_im_2                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_13                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_13                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_re_14                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL valid_new_im_14                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_bypass_reg_re            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_bypass_reg_im            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_re_3                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_im_3                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_last_value_im       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_last_value_im_1     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_bypass_re           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_bypass_im           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_bypass_re_1         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_bypass_im_1         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_bypass_bypass_reg_re    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_bypass_bypass_reg_im    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_last_value_re       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_last_value_re_1     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL t3_bypass_reg_re                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL t3_bypass_reg_im                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_bypass_re_2         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay13_out1_bypass_im_2         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL ofdm_en_1                        : std_logic;
  SIGNAL constellation_scrambler_out2_1   : std_logic;
  SIGNAL constellation_scrambler_out2_2   : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay4_out1_1                    : std_logic;
  SIGNAL Delay4_out1_2                    : std_logic;
  SIGNAL constellation_scrambler_out2_3   : std_logic;
  SIGNAL constellation_scrambler_out2_4   : std_logic;
  SIGNAL Delay4_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay4_out1_3                    : std_logic;
  SIGNAL valid_new                        : std_logic;
  SIGNAL valid_new_1                      : std_logic;
  SIGNAL valid_new_2                      : std_logic;
  SIGNAL valid_new_3                      : std_logic;
  SIGNAL valid_new_4                      : std_logic;
  SIGNAL valid_new_5                      : std_logic;
  SIGNAL valid_new_6                      : std_logic;
  SIGNAL Delay12_bypass_reg               : std_logic;  -- ufix1
  SIGNAL valid_new_7                      : std_logic;
  SIGNAL valid_new_8                      : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay12_out1_1                   : std_logic;
  SIGNAL Delay12_out1_2                   : std_logic;
  SIGNAL valid_new_9                      : std_logic;
  SIGNAL valid_new_10                     : std_logic;
  SIGNAL Delay121_bypass_reg              : std_logic;  -- ufix1
  SIGNAL Delay12_out1_3                   : std_logic;
  SIGNAL Delay12_out1_bypass              : std_logic;
  SIGNAL Delay12_out1_bypass_1            : std_logic;
  SIGNAL valid_out_bypass_bypass_reg      : std_logic;  -- ufix1
  SIGNAL Delay12_out1_last_value          : std_logic;
  SIGNAL Delay12_out1_last_value_1        : std_logic;
  SIGNAL t4_bypass_reg                    : std_logic;  -- ufix1
  SIGNAL Delay12_out1_bypass_2            : std_logic;
  SIGNAL ready_out_10                     : std_logic;
  SIGNAL ready_out_11                     : std_logic;
  SIGNAL ready_out_12                     : std_logic;
  SIGNAL ready_out_13                     : std_logic;
  SIGNAL ready_out_14                     : std_logic;
  SIGNAL ready_out_15                     : std_logic;
  SIGNAL ready_out_16                     : std_logic;
  SIGNAL cp_len_1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cp_len_2                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cp_len_3                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cp_len_4                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_bypass_reg                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_bypass_reg               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay11_out1_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_4                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_5                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_6                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_7                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_8                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_9                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_bypass_reg                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay11_out1_10                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_11                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_12                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_13                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_14                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_15                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_16                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay31_bypass_reg               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay11_out1_17                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_18                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_19                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay11_out1_20                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay32_bypass_reg               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_bypass_reg                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay6_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_7                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_8                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_9                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_bypass_reg               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay6_out1_10                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_11                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_out1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_out1_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_out1_2                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_12                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay6_out1_13                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay141_bypass_reg              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay14_out1_bypass              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay14_out1_last_value          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay9_out1_3                    : std_logic;
  SIGNAL Delay9_out1_bypass               : std_logic;
  SIGNAL Delay9_out1_bypass_1             : std_logic;
  SIGNAL valid_scrambler_bypass_bypass_reg : std_logic;  -- ufix1
  SIGNAL Delay9_out1_last_value           : std_logic;
  SIGNAL Delay9_out1_last_value_1         : std_logic;
  SIGNAL t_bypass_reg                     : std_logic;  -- ufix1
  SIGNAL Delay9_out1_bypass_2             : std_logic;
  SIGNAL init_1                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_2                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1                       : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_1                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_2                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_3                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_4                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_bypass_reg                 : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay_out1_3                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_4                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_out1                      : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_out1_1                    : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_out1_2                    : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_5                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_6                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_bypass_reg                : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay8_out1_3                    : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_out1_bypass               : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_out1_bypass_1             : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_out_bypass_bypass_reg       : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay8_out1_last_value           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay8_out1_last_value_1         : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL t1_bypass_reg                    : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay8_out1_bypass_2             : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL new_rsvd_1                       : std_logic;
  SIGNAL new_rsvd_2                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL new_rsvd_3                       : std_logic;
  SIGNAL new_rsvd_4                       : std_logic;
  SIGNAL Delay1_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay1_out1_3                    : std_logic;
  SIGNAL Delay1_out1_4                    : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay7_out1_1                    : std_logic;
  SIGNAL Delay7_out1_2                    : std_logic;
  SIGNAL Delay1_out1_5                    : std_logic;
  SIGNAL Delay1_out1_6                    : std_logic;
  SIGNAL Delay7_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay7_out1_3                    : std_logic;
  SIGNAL Delay7_out1_bypass               : std_logic;
  SIGNAL Delay7_out1_bypass_1             : std_logic;
  SIGNAL new_out_bypass_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay7_out1_last_value           : std_logic;
  SIGNAL Delay7_out1_last_value_1         : std_logic;
  SIGNAL t2_bypass_reg                    : std_logic;  -- ufix1
  SIGNAL Delay7_out1_bypass_2             : std_logic;

BEGIN
  u_qam_mod : full_ofdm_modulator_ip_src_qam_mod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              data_in => data_in,  -- ufix12
              valid_in => valid_in,
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              ready_out => ready_out,
              data_out_re => qam_mod_out1_re,  -- sfix12_En10
              data_out_im => qam_mod_out1_im,  -- sfix12_En10
              valid_out => qam_mod_out2
              );

  u_constellation_scrambler : full_ofdm_modulator_ip_src_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              data_in_re => std_logic_vector(Delay10_out1_re),  -- sfix12_En10
              data_in_im => std_logic_vector(Delay10_out1_im),  -- sfix12_En10
              valid_in => Delay9_out1,
              s1_in => s1_in,
              s2_in => s2_in,
              ready_out => ready_out,
              data_out_re => out_new_re,  -- sfix12_En10
              data_out_im => out_new_im,  -- sfix12_En10
              valid_out => constellation_scrambler_out2
              );

  ready_out <= Enable;

  ready_out_1 <= ready_out;

  ready_out_2 <= ready_out;

  rd_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_3 <= '0';
      ELSIF enb = '1' THEN
        ready_out_3 <= ready_out_2;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  ready_out_4 <= ready_out;

  rd_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_5 <= '0';
      ELSIF enb = '1' THEN
        ready_out_5 <= ready_out_4;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  ready_out_6 <= ready_out;

  rd_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_7 <= '0';
      ELSIF enb = '1' THEN
        ready_out_7 <= ready_out_6;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  ready_out_8 <= ready_out;

  rd_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_9 <= '0';
      ELSIF enb = '1' THEN
        ready_out_9 <= ready_out_8;
      END IF;
    END IF;
  END PROCESS rd_15_process;


  qam_mod_out1_re_1 <= signed(qam_mod_out1_re);

  qam_mod_out1_im_1 <= signed(qam_mod_out1_im);

  rd_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        qam_mod_out1_re_2 <= to_signed(16#000#, 12);
        qam_mod_out1_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        qam_mod_out1_re_2 <= qam_mod_out1_re_1;
        qam_mod_out1_im_2 <= qam_mod_out1_im_1;
      END IF;
    END IF;
  END PROCESS rd_13_process;


  Delay10_out1_im_1 <= Delay10_out1_im;

  Delay10_out1_re_1 <= Delay10_out1_re;

  rd_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1_re_2 <= to_signed(16#000#, 12);
        Delay10_out1_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay10_out1_re_2 <= Delay10_out1_re_1;
        Delay10_out1_im_2 <= Delay10_out1_im_1;
      END IF;
    END IF;
  END PROCESS rd_14_process;


  
  qam_mod_out1_re_3 <= Delay10_out1_re_2 WHEN ready_out_9 = '0' ELSE
      qam_mod_out1_re_2;
  
  qam_mod_out1_im_3 <= Delay10_out1_im_2 WHEN ready_out_9 = '0' ELSE
      qam_mod_out1_im_2;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        qam_mod_out1_re_4 <= to_signed(16#000#, 12);
        qam_mod_out1_im_4 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        qam_mod_out1_re_4 <= qam_mod_out1_re_3;
        qam_mod_out1_im_4 <= qam_mod_out1_im_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_bypass_reg_re <= to_signed(16#000#, 12);
        Delay10_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay10_bypass_reg_im <= qam_mod_out1_im_4;
        Delay10_bypass_reg_re <= qam_mod_out1_re_4;
      END IF;
    END IF;
  END PROCESS Delay10_bypass_process;

  
  Delay10_out1_re <= qam_mod_out1_re_4 WHEN enb_1_2_1 = '1' ELSE
      Delay10_bypass_reg_re;
  
  Delay10_out1_im <= qam_mod_out1_im_4 WHEN enb_1_2_1 = '1' ELSE
      Delay10_bypass_reg_im;

  qam_mod_out2_1 <= qam_mod_out2;

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        qam_mod_out2_2 <= '0';
      ELSIF enb = '1' THEN
        qam_mod_out2_2 <= qam_mod_out2_1;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  Delay9_out1_1 <= Delay9_out1;

  rd_111_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1_2 <= Delay9_out1_1;
      END IF;
    END IF;
  END PROCESS rd_111_process;


  
  qam_mod_out2_3 <= Delay9_out1_2 WHEN ready_out_9 = '0' ELSE
      qam_mod_out2_2;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        qam_mod_out2_4 <= '0';
      ELSIF enb = '1' THEN
        qam_mod_out2_4 <= qam_mod_out2_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay9_bypass_reg <= qam_mod_out2_4;
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;

  
  Delay9_out1 <= qam_mod_out2_4 WHEN enb_1_2_1 = '1' ELSE
      Delay9_bypass_reg;

  out_new_re_1 <= signed(out_new_re);

  out_new_im_1 <= signed(out_new_im);

  rd_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        out_new_re_2 <= to_signed(16#000#, 12);
        out_new_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        out_new_re_2 <= out_new_re_1;
        out_new_im_2 <= out_new_im_1;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  valid_new_im_1 <= valid_new_im;

  valid_new_re_1 <= valid_new_re;

  rd_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_re_2 <= to_signed(16#000#, 12);
        valid_new_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        valid_new_re_2 <= valid_new_re_1;
        valid_new_im_2 <= valid_new_im_1;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  
  out_new_re_3 <= valid_new_re_2 WHEN ready_out_7 = '0' ELSE
      out_new_re_2;
  
  out_new_im_3 <= valid_new_im_2 WHEN ready_out_7 = '0' ELSE
      out_new_im_2;

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        out_new_re_4 <= to_signed(16#000#, 12);
        out_new_im_4 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        out_new_re_4 <= out_new_re_3;
        out_new_im_4 <= out_new_im_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_bypass_reg_re <= to_signed(16#000#, 12);
        Delay5_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay5_bypass_reg_im <= out_new_im_4;
        Delay5_bypass_reg_re <= out_new_re_4;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  valid_new_re <= out_new_re_4 WHEN enb_1_2_1 = '1' ELSE
      Delay5_bypass_reg_re;
  
  valid_new_im <= out_new_im_4 WHEN enb_1_2_1 = '1' ELSE
      Delay5_bypass_reg_im;

  valid_new_re_3 <= valid_new_re;

  valid_new_re_4 <= valid_new_re_3;

  valid_new_im_3 <= valid_new_im;

  valid_new_im_4 <= valid_new_im_3;

  rd_101_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_re_5 <= to_signed(16#000#, 12);
        valid_new_im_5 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        valid_new_re_5 <= valid_new_re_4;
        valid_new_im_5 <= valid_new_im_4;
      END IF;
    END IF;
  END PROCESS rd_101_process;


  valid_new_im_7 <= valid_new_im_6;

  valid_new_re_7 <= valid_new_re_6;

  rd_112_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_re_8 <= to_signed(16#000#, 12);
        valid_new_im_8 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        valid_new_re_8 <= valid_new_re_7;
        valid_new_im_8 <= valid_new_im_7;
      END IF;
    END IF;
  END PROCESS rd_112_process;


  
  valid_new_re_9 <= valid_new_re_8 WHEN ready_out_5 = '0' ELSE
      valid_new_re_5;
  
  valid_new_im_9 <= valid_new_im_8 WHEN ready_out_5 = '0' ELSE
      valid_new_im_5;

  crp_out_delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_re_10 <= to_signed(16#000#, 12);
        valid_new_im_10 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        valid_new_re_10 <= valid_new_re_9;
        valid_new_im_10 <= valid_new_im_9;
      END IF;
    END IF;
  END PROCESS crp_out_delay17_process;


  Delay131_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay131_bypass_reg_re <= to_signed(16#000#, 12);
        Delay131_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay131_bypass_reg_im <= valid_new_im_10;
        Delay131_bypass_reg_re <= valid_new_re_10;
      END IF;
    END IF;
  END PROCESS Delay131_bypass_process;

  
  valid_new_re_6 <= valid_new_re_10 WHEN enb_1_2_1 = '1' ELSE
      Delay131_bypass_reg_re;
  
  valid_new_im_6 <= valid_new_im_10 WHEN enb_1_2_1 = '1' ELSE
      Delay131_bypass_reg_im;

  valid_new_re_11 <= valid_new_re_6;

  valid_new_im_11 <= valid_new_im_6;

  rd_06_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_re_12 <= to_signed(16#000#, 12);
        valid_new_im_12 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        valid_new_re_12 <= valid_new_re_11;
        valid_new_im_12 <= valid_new_im_11;
      END IF;
    END IF;
  END PROCESS rd_06_process;


  Delay13_out1_im_1 <= Delay13_out1_im;

  Delay13_out1_re_1 <= Delay13_out1_re;

  rd_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1_re_2 <= to_signed(16#000#, 12);
        Delay13_out1_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay13_out1_re_2 <= Delay13_out1_re_1;
        Delay13_out1_im_2 <= Delay13_out1_im_1;
      END IF;
    END IF;
  END PROCESS rd_27_process;


  
  valid_new_re_13 <= Delay13_out1_re_2 WHEN ready_out_3 = '0' ELSE
      valid_new_re_12;
  
  valid_new_im_13 <= Delay13_out1_im_2 WHEN ready_out_3 = '0' ELSE
      valid_new_im_12;

  crp_out_delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_re_14 <= to_signed(16#000#, 12);
        valid_new_im_14 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        valid_new_re_14 <= valid_new_re_13;
        valid_new_im_14 <= valid_new_im_13;
      END IF;
    END IF;
  END PROCESS crp_out_delay20_process;


  Delay13_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_bypass_reg_re <= to_signed(16#000#, 12);
        Delay13_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay13_bypass_reg_im <= valid_new_im_14;
        Delay13_bypass_reg_re <= valid_new_re_14;
      END IF;
    END IF;
  END PROCESS Delay13_bypass_process;

  
  Delay13_out1_re <= valid_new_re_14 WHEN enb_1_2_1 = '1' ELSE
      Delay13_bypass_reg_re;
  
  Delay13_out1_im <= valid_new_im_14 WHEN enb_1_2_1 = '1' ELSE
      Delay13_bypass_reg_im;

  Delay13_out1_re_3 <= Delay13_out1_re;

  Delay13_out1_im_3 <= Delay13_out1_im;

  Delay13_out1_last_value_im_1 <= Delay13_out1_last_value_im;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1_bypass_re_1 <= to_signed(16#000#, 12);
        Delay13_out1_bypass_im_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay13_out1_bypass_re_1 <= Delay13_out1_bypass_re;
        Delay13_out1_bypass_im_1 <= Delay13_out1_bypass_im;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  data_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_bypass_bypass_reg_re <= to_signed(16#000#, 12);
        data_out_bypass_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        data_out_bypass_bypass_reg_im <= Delay13_out1_bypass_im_1;
        data_out_bypass_bypass_reg_re <= Delay13_out1_bypass_re_1;
      END IF;
    END IF;
  END PROCESS data_out_bypass_bypass_process;

  
  Delay13_out1_last_value_re <= Delay13_out1_bypass_re_1 WHEN enb_1_2_1 = '1' ELSE
      data_out_bypass_bypass_reg_re;
  
  Delay13_out1_last_value_im <= Delay13_out1_bypass_im_1 WHEN enb_1_2_1 = '1' ELSE
      data_out_bypass_bypass_reg_im;

  Delay13_out1_last_value_re_1 <= Delay13_out1_last_value_re;

  
  Delay13_out1_bypass_re <= Delay13_out1_last_value_re_1 WHEN ready_out_1 = '0' ELSE
      Delay13_out1_re_3;
  
  Delay13_out1_bypass_im <= Delay13_out1_last_value_im_1 WHEN ready_out_1 = '0' ELSE
      Delay13_out1_im_3;

  t3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t3_bypass_reg_re <= to_signed(16#000#, 12);
        t3_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        t3_bypass_reg_im <= Delay13_out1_bypass_im;
        t3_bypass_reg_re <= Delay13_out1_bypass_re;
      END IF;
    END IF;
  END PROCESS t3_bypass_process;

  
  Delay13_out1_bypass_re_2 <= Delay13_out1_bypass_re WHEN enb_1_2_1 = '1' ELSE
      t3_bypass_reg_re;
  
  Delay13_out1_bypass_im_2 <= Delay13_out1_bypass_im WHEN enb_1_2_1 = '1' ELSE
      t3_bypass_reg_im;

  data_out_re <= std_logic_vector(Delay13_out1_bypass_re_2);

  data_out_im <= std_logic_vector(Delay13_out1_bypass_im_2);

  ofdm_en_1 <= ofdm_en;

  constellation_scrambler_out2_1 <= constellation_scrambler_out2;

  rd_04_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        constellation_scrambler_out2_2 <= '0';
      ELSIF enb = '1' THEN
        constellation_scrambler_out2_2 <= constellation_scrambler_out2_1;
      END IF;
    END IF;
  END PROCESS rd_04_process;


  Delay4_out1_1 <= Delay4_out1;

  rd_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS rd_25_process;


  
  constellation_scrambler_out2_3 <= Delay4_out1_2 WHEN ready_out_7 = '0' ELSE
      constellation_scrambler_out2_2;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        constellation_scrambler_out2_4 <= '0';
      ELSIF enb = '1' THEN
        constellation_scrambler_out2_4 <= constellation_scrambler_out2_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay4_bypass_reg <= constellation_scrambler_out2_4;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  Delay4_out1 <= constellation_scrambler_out2_4 WHEN enb_1_2_1 = '1' ELSE
      Delay4_bypass_reg;

  Delay4_out1_3 <= Delay4_out1;

  valid_new <= ofdm_en_1 AND Delay4_out1_3;

  rd_141_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_1 <= '0';
      ELSIF enb = '1' THEN
        valid_new_1 <= valid_new;
      END IF;
    END IF;
  END PROCESS rd_141_process;


  valid_new_3 <= valid_new_2;

  rd_151_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_4 <= '0';
      ELSIF enb = '1' THEN
        valid_new_4 <= valid_new_3;
      END IF;
    END IF;
  END PROCESS rd_151_process;


  
  valid_new_5 <= valid_new_4 WHEN ready_out_5 = '0' ELSE
      valid_new_1;

  crp_out_delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_6 <= '0';
      ELSIF enb = '1' THEN
        valid_new_6 <= valid_new_5;
      END IF;
    END IF;
  END PROCESS crp_out_delay19_process;


  Delay12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay12_bypass_reg <= valid_new_6;
      END IF;
    END IF;
  END PROCESS Delay12_bypass_process;

  
  valid_new_2 <= valid_new_6 WHEN enb_1_2_1 = '1' ELSE
      Delay12_bypass_reg;

  valid_new_7 <= valid_new_2;

  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_8 <= '0';
      ELSIF enb = '1' THEN
        valid_new_8 <= valid_new_7;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  Delay12_out1_1 <= Delay12_out1;

  rd_102_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= Delay12_out1_1;
      END IF;
    END IF;
  END PROCESS rd_102_process;


  
  valid_new_9 <= Delay12_out1_2 WHEN ready_out_3 = '0' ELSE
      valid_new_8;

  crp_out_delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_10 <= '0';
      ELSIF enb = '1' THEN
        valid_new_10 <= valid_new_9;
      END IF;
    END IF;
  END PROCESS crp_out_delay24_process;


  Delay121_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay121_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay121_bypass_reg <= valid_new_10;
      END IF;
    END IF;
  END PROCESS Delay121_bypass_process;

  
  Delay12_out1 <= valid_new_10 WHEN enb_1_2_1 = '1' ELSE
      Delay121_bypass_reg;

  Delay12_out1_3 <= Delay12_out1;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1_bypass_1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_bypass_1 <= Delay12_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  valid_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_out_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        valid_out_bypass_bypass_reg <= Delay12_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS valid_out_bypass_bypass_process;

  
  Delay12_out1_last_value <= Delay12_out1_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      valid_out_bypass_bypass_reg;

  Delay12_out1_last_value_1 <= Delay12_out1_last_value;

  
  Delay12_out1_bypass <= Delay12_out1_last_value_1 WHEN ready_out_1 = '0' ELSE
      Delay12_out1_3;

  t4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t4_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t4_bypass_reg <= Delay12_out1_bypass;
      END IF;
    END IF;
  END PROCESS t4_bypass_process;

  
  Delay12_out1_bypass_2 <= Delay12_out1_bypass WHEN enb_1_2_1 = '1' ELSE
      t4_bypass_reg;

  ready_out_10 <= ready_out;

  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_11 <= '0';
      ELSIF enb = '1' THEN
        ready_out_11 <= ready_out_10;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  ready_out_12 <= ready_out;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_13 <= '0';
      ELSIF enb = '1' THEN
        ready_out_13 <= ready_out_12;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  ready_out_14 <= ready_out;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_15 <= '0';
      ELSIF enb = '1' THEN
        ready_out_15 <= ready_out_14;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_16 <= '0';
      ELSIF enb = '1' THEN
        ready_out_16 <= ready_out_1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  cp_len_1 <= unsigned(cp_len);

  rd_71_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        cp_len_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        cp_len_2 <= cp_len_1;
      END IF;
    END IF;
  END PROCESS rd_71_process;


  Delay2_out1_1 <= Delay2_out1;

  rd_81_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS rd_81_process;


  
  cp_len_3 <= Delay2_out1_2 WHEN ready_out_7 = '0' ELSE
      cp_len_2;

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        cp_len_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        cp_len_4 <= cp_len_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_reg <= cp_len_4;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= cp_len_4 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay2_out1_3 <= Delay2_out1;

  rd_72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_4 <= Delay2_out1_3;
      END IF;
    END IF;
  END PROCESS rd_72_process;


  Delay11_out1_1 <= Delay11_out1;

  rd_82_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= Delay11_out1_1;
      END IF;
    END IF;
  END PROCESS rd_82_process;


  
  Delay2_out1_5 <= Delay11_out1_2 WHEN ready_out_5 = '0' ELSE
      Delay2_out1_4;

  crp_out_delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_6 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_6 <= Delay2_out1_5;
      END IF;
    END IF;
  END PROCESS crp_out_delay16_process;


  Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay11_bypass_reg <= Delay2_out1_6;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_process;

  
  Delay11_out1 <= Delay2_out1_6 WHEN enb_1_2_1 = '1' ELSE
      Delay11_bypass_reg;

  Delay11_out1_3 <= Delay11_out1;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_4 <= Delay11_out1_3;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Delay11_out1_6 <= Delay11_out1_5;

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_7 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_7 <= Delay11_out1_6;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  
  Delay11_out1_8 <= Delay11_out1_7 WHEN ready_out_16 = '0' ELSE
      Delay11_out1_4;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_9 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_9 <= Delay11_out1_8;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Delay11_out1_9;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay11_out1_5 <= Delay11_out1_9 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay11_out1_10 <= Delay11_out1_5;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_11 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_11 <= Delay11_out1_10;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  Delay11_out1_13 <= Delay11_out1_12;

  rd_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_14 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_14 <= Delay11_out1_13;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  
  Delay11_out1_15 <= Delay11_out1_14 WHEN ready_out_15 = '0' ELSE
      Delay11_out1_11;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_16 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_16 <= Delay11_out1_15;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay31_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay31_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay31_bypass_reg <= Delay11_out1_16;
      END IF;
    END IF;
  END PROCESS Delay31_bypass_process;

  
  Delay11_out1_12 <= Delay11_out1_16 WHEN enb_1_2_1 = '1' ELSE
      Delay31_bypass_reg;

  Delay11_out1_17 <= Delay11_out1_12;

  rd_01_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_18 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_18 <= Delay11_out1_17;
      END IF;
    END IF;
  END PROCESS rd_01_process;


  Delay3_out1_1 <= Delay3_out1;

  rd_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  
  Delay11_out1_19 <= Delay3_out1_2 WHEN ready_out_13 = '0' ELSE
      Delay11_out1_18;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_20 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay11_out1_20 <= Delay11_out1_19;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay32_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay32_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay32_bypass_reg <= Delay11_out1_20;
      END IF;
    END IF;
  END PROCESS Delay32_bypass_process;

  
  Delay3_out1 <= Delay11_out1_20 WHEN enb_1_2_1 = '1' ELSE
      Delay32_bypass_reg;

  Delay3_out1_3 <= Delay3_out1;

  rd_02_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_4 <= Delay3_out1_3;
      END IF;
    END IF;
  END PROCESS rd_02_process;


  Delay6_out1_1 <= Delay6_out1;

  rd_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_2 <= Delay6_out1_1;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  
  Delay3_out1_5 <= Delay6_out1_2 WHEN ready_out_11 = '0' ELSE
      Delay3_out1_4;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_6 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_6 <= Delay3_out1_5;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay6_bypass_reg <= Delay3_out1_6;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;

  
  Delay6_out1 <= Delay3_out1_6 WHEN enb_1_2_1 = '1' ELSE
      Delay6_bypass_reg;

  Delay6_out1_3 <= Delay6_out1;

  rd_03_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_4 <= Delay6_out1_3;
      END IF;
    END IF;
  END PROCESS rd_03_process;


  Delay6_out1_6 <= Delay6_out1_5;

  rd_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_7 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_7 <= Delay6_out1_6;
      END IF;
    END IF;
  END PROCESS rd_24_process;


  
  Delay6_out1_8 <= Delay6_out1_7 WHEN ready_out_9 = '0' ELSE
      Delay6_out1_4;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_9 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_9 <= Delay6_out1_8;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay14_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay14_bypass_reg <= Delay6_out1_9;
      END IF;
    END IF;
  END PROCESS Delay14_bypass_process;

  
  Delay6_out1_5 <= Delay6_out1_9 WHEN enb_1_2_1 = '1' ELSE
      Delay14_bypass_reg;

  Delay6_out1_10 <= Delay6_out1_5;

  rd_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_11 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_11 <= Delay6_out1_10;
      END IF;
    END IF;
  END PROCESS rd_44_process;


  Delay14_out1_1 <= Delay14_out1;

  rd_53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay14_out1_2 <= Delay14_out1_1;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  
  Delay6_out1_12 <= Delay14_out1_2 WHEN ready_out_3 = '0' ELSE
      Delay6_out1_11;

  crp_out_delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_13 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay6_out1_13 <= Delay6_out1_12;
      END IF;
    END IF;
  END PROCESS crp_out_delay21_process;


  Delay141_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay141_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay141_bypass_reg <= Delay6_out1_13;
      END IF;
    END IF;
  END PROCESS Delay141_bypass_process;

  
  Delay14_out1 <= Delay6_out1_13 WHEN enb_1_2_1 = '1' ELSE
      Delay141_bypass_reg;

  cp_len_out_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1_last_value <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        Delay14_out1_last_value <= Delay14_out1_bypass;
      END IF;
    END IF;
  END PROCESS cp_len_out_bypass_process;


  
  Delay14_out1_bypass <= Delay14_out1_last_value WHEN ready_out = '0' ELSE
      Delay14_out1;

  cp_len_out <= std_logic_vector(Delay14_out1_bypass);

  Delay9_out1_3 <= Delay9_out1;

  crp_out_delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1_bypass_1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1_bypass_1 <= Delay9_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay18_process;


  valid_scrambler_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_scrambler_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        valid_scrambler_bypass_bypass_reg <= Delay9_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS valid_scrambler_bypass_bypass_process;

  
  Delay9_out1_last_value <= Delay9_out1_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      valid_scrambler_bypass_bypass_reg;

  Delay9_out1_last_value_1 <= Delay9_out1_last_value;

  
  Delay9_out1_bypass <= Delay9_out1_last_value_1 WHEN ready_out_4 = '0' ELSE
      Delay9_out1_3;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t_bypass_reg <= Delay9_out1_bypass;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Delay9_out1_bypass_2 <= Delay9_out1_bypass WHEN enb_1_2_1 = '1' ELSE
      t_bypass_reg;

  init_1 <= init;

  rd_05_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        init_2 <= init_1;
      END IF;
    END IF;
  END PROCESS rd_05_process;


  Delay_out1_1 <= Delay_out1;

  rd_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_out1_2 <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS rd_26_process;


  
  init_3 <= Delay_out1_2 WHEN ready_out_5 = '0' ELSE
      init_2;

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_4 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        init_4 <= init_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg <= init_4;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= init_4 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg;

  Delay_out1_3 <= Delay_out1;

  rd_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_4 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_out1_4 <= Delay_out1_3;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  Delay8_out1_1 <= Delay8_out1;

  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay8_out1_2 <= Delay8_out1_1;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  
  Delay_out1_5 <= Delay8_out1_2 WHEN ready_out_9 = '0' ELSE
      Delay_out1_4;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_6 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_out1_6 <= Delay_out1_5;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        Delay8_bypass_reg <= Delay_out1_6;
      END IF;
    END IF;
  END PROCESS Delay8_bypass_process;

  
  Delay8_out1 <= Delay_out1_6 WHEN enb_1_2_1 = '1' ELSE
      Delay8_bypass_reg;

  Delay8_out1_3 <= Delay8_out1;

  crp_out_delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_bypass_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay8_out1_bypass_1 <= Delay8_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay22_process;


  init_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_out_bypass_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        init_out_bypass_bypass_reg <= Delay8_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS init_out_bypass_bypass_process;

  
  Delay8_out1_last_value <= Delay8_out1_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      init_out_bypass_bypass_reg;

  Delay8_out1_last_value_1 <= Delay8_out1_last_value;

  
  Delay8_out1_bypass <= Delay8_out1_last_value_1 WHEN ready_out_2 = '0' ELSE
      Delay8_out1_3;

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t1_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        t1_bypass_reg <= Delay8_out1_bypass;
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Delay8_out1_bypass_2 <= Delay8_out1_bypass WHEN enb_1_2_1 = '1' ELSE
      t1_bypass_reg;

  new_rsvd_1 <= new_rsvd;

  rd_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_rsvd_2 <= '0';
      ELSIF enb = '1' THEN
        new_rsvd_2 <= new_rsvd_1;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  Delay1_out1_1 <= Delay1_out1;

  rd_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS rd_52_process;


  
  new_rsvd_3 <= Delay1_out1_2 WHEN ready_out_5 = '0' ELSE
      new_rsvd_2;

  crp_out_delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_rsvd_4 <= '0';
      ELSIF enb = '1' THEN
        new_rsvd_4 <= new_rsvd_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay15_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg <= new_rsvd_4;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= new_rsvd_4 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg;

  Delay1_out1_3 <= Delay1_out1;

  rd_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_4 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_4 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  Delay7_out1_1 <= Delay7_out1;

  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1_2 <= Delay7_out1_1;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  
  Delay1_out1_5 <= Delay7_out1_2 WHEN ready_out_9 = '0' ELSE
      Delay1_out1_4;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_6 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_6 <= Delay1_out1_5;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay7_bypass_reg <= Delay1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  Delay7_out1 <= Delay1_out1_6 WHEN enb_1_2_1 = '1' ELSE
      Delay7_bypass_reg;

  Delay7_out1_3 <= Delay7_out1;

  crp_out_delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_bypass_1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1_bypass_1 <= Delay7_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay23_process;


  new_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_out_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        new_out_bypass_bypass_reg <= Delay7_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS new_out_bypass_bypass_process;

  
  Delay7_out1_last_value <= Delay7_out1_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      new_out_bypass_bypass_reg;

  Delay7_out1_last_value_1 <= Delay7_out1_last_value;

  
  Delay7_out1_bypass <= Delay7_out1_last_value_1 WHEN ready_out_2 = '0' ELSE
      Delay7_out1_3;

  t2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t2_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t2_bypass_reg <= Delay7_out1_bypass;
      END IF;
    END IF;
  END PROCESS t2_bypass_process;

  
  Delay7_out1_bypass_2 <= Delay7_out1_bypass WHEN enb_1_2_1 = '1' ELSE
      t2_bypass_reg;

  valid_out <= Delay12_out1_bypass_2;

  valid_scrambler <= Delay9_out1_bypass_2;

  init_out <= Delay8_out1_bypass_2;

  new_out <= Delay7_out1_bypass_2;

END rtl;

