-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_RADIX22FFT_CTRL1_8.vhd
-- Created: 2024-09-01 00:44:14
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_RADIX22FFT_CTRL1_8
-- Source Path: HDLModulatorFull/full_ofdm_modulator/ofdm_modulator/OFDM Modulator/dsphdl.IFFT/RADIX22FFT_CTRL1_8
-- Hierarchy Level: 4
-- Model version: 1.36
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_RADIX22FFT_CTRL1_8 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        dout_7_1_vld                      :   IN    std_logic;
        dinXTwdl_8_1_vld                  :   IN    std_logic;
        rd_8_Addr                         :   OUT   std_logic;
        rd_8_Enb                          :   OUT   std_logic;
        proc_8_enb                        :   OUT   std_logic;
        multiply_8_J                      :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_RADIX22FFT_CTRL1_8;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_RADIX22FFT_CTRL1_8 IS

  -- Signals
  SIGNAL SDFController_wrState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg         : std_logic;  -- ufix1
  SIGNAL SDFController_multjState         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_wrState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdState_next       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL SDFController_rdAddr_reg_next    : std_logic;  -- ufix1
  SIGNAL SDFController_multjState_next    : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  -- SDFController
  SDFController_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        SDFController_rdAddr_reg <= '0';
        SDFController_wrState <= to_unsigned(16#0#, 2);
        SDFController_rdState <= to_unsigned(16#0#, 2);
        SDFController_multjState <= to_unsigned(16#0#, 2);
      ELSIF enb_1_2_0 = '1' THEN
        SDFController_wrState <= SDFController_wrState_next;
        SDFController_rdState <= SDFController_rdState_next;
        SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
        SDFController_multjState <= SDFController_multjState_next;
      END IF;
    END IF;
  END PROCESS SDFController_process;

  SDFController_output : PROCESS (SDFController_multjState, SDFController_rdAddr_reg, SDFController_rdState,
       SDFController_wrState, dinXTwdl_8_1_vld, dout_7_1_vld)
  BEGIN
    SDFController_rdState_next <= SDFController_rdState;
    SDFController_rdAddr_reg_next <= SDFController_rdAddr_reg;
    SDFController_multjState_next <= SDFController_multjState;
    CASE SDFController_multjState IS
      WHEN "00" =>
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_8_J <= '0';
        IF SDFController_rdState = to_unsigned(16#1#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        multiply_8_J <= '0';
        IF SDFController_rdState = to_unsigned(16#0#, 2) THEN 
          SDFController_multjState_next <= to_unsigned(16#2#, 2);
        END IF;
      WHEN "10" =>
        multiply_8_J <= '0';
        SDFController_multjState_next <= to_unsigned(16#3#, 2);
      WHEN "11" =>
        multiply_8_J <= '1';
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
      WHEN OTHERS => 
        SDFController_multjState_next <= to_unsigned(16#0#, 2);
        multiply_8_J <= '0';
    END CASE;
    CASE SDFController_rdState IS
      WHEN "00" =>
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_8_Enb <= '0';
        IF (SDFController_wrState = to_unsigned(16#3#, 2)) AND dout_7_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#1#, 2);
          rd_8_Enb <= dinXTwdl_8_1_vld;
        END IF;
      WHEN "01" =>
        rd_8_Enb <= dinXTwdl_8_1_vld;
        IF dinXTwdl_8_1_vld = '1' THEN 
          SDFController_rdState_next <= to_unsigned(16#0#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_rdState_next <= to_unsigned(16#0#, 2);
        SDFController_rdAddr_reg_next <= '0';
        rd_8_Enb <= '0';
    END CASE;
    CASE SDFController_wrState IS
      WHEN "00" =>
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_8_enb <= '0';
        IF dout_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN "11" =>
        SDFController_wrState_next <= to_unsigned(16#3#, 2);
        proc_8_enb <= '0';
        IF dout_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#2#, 2);
          proc_8_enb <= '1';
        END IF;
      WHEN "10" =>
        proc_8_enb <= '0';
        SDFController_wrState_next <= to_unsigned(16#2#, 2);
        IF dout_7_1_vld = '1' THEN 
          SDFController_wrState_next <= to_unsigned(16#3#, 2);
        END IF;
      WHEN OTHERS => 
        SDFController_wrState_next <= to_unsigned(16#0#, 2);
        proc_8_enb <= '0';
    END CASE;
    rd_8_Addr <= SDFController_rdAddr_reg;
  END PROCESS SDFController_output;


END rtl;

