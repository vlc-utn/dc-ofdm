-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_lfsr_const_scrambler.vhd
-- Created: 2024-11-21 09:59:25
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_lfsr_const_scrambler
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/constellation_scrambler/lfsr_const_scrambler
-- Hierarchy Level: 3
-- Model version: 4.222
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_lfsr_const_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_symbol                   :   IN    std_logic;
        s1_out                            :   OUT   std_logic;
        s2_out                            :   OUT   std_logic
        );
END IEEE_8021513_TX_src_lfsr_const_scrambler;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_lfsr_const_scrambler IS

  -- Signals
  SIGNAL init_2                           : std_logic;
  SIGNAL init_4                           : std_logic;
  SIGNAL init_6                           : std_logic;
  SIGNAL init_8                           : std_logic;
  SIGNAL init_10                          : std_logic;
  SIGNAL init_12                          : std_logic;
  SIGNAL init_1                           : std_logic;
  SIGNAL init_3                           : std_logic;
  SIGNAL init_5                           : std_logic;
  SIGNAL init_7                           : std_logic;
  SIGNAL init_9                           : std_logic;
  SIGNAL init_11                          : std_logic;
  SIGNAL init_0                           : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL s1_1                             : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Switch4_out1                     : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Switch6_out1                     : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Switch8_out1                     : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Switch10_out1                    : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Switch12_out1                    : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL XOR3_out1                        : std_logic;
  SIGNAL XOR4_out1                        : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL XOR5_out1                        : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL s2                               : std_logic;
  SIGNAL s2_1                             : std_logic;
  SIGNAL Switch3_out1                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Switch5_out1                     : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Switch7_out1                     : std_logic;
  SIGNAL Switch9_out1                     : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Switch11_out1                    : std_logic;
  SIGNAL XOR_out1                         : std_logic;
  SIGNAL XOR1_out1                        : std_logic;
  SIGNAL XOR2_out1                        : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL s1_2                             : std_logic;
  SIGNAL s2_2                             : std_logic;

BEGIN
  init_2 <= init(2);

  init_4 <= init(4);

  init_6 <= init(6);

  init_8 <= init(8);

  init_10 <= init(10);

  init_12 <= init(12);

  init_1 <= init(1);

  init_3 <= init(3);

  init_5 <= init(5);

  init_7 <= init(7);

  init_9 <= init(9);

  init_11 <= init(11);

  init_0 <= init(0);

  s1_1 <= s1;

  
  Switch2_out1 <= s1_1 WHEN new_ofdm_symbol = '0' ELSE
      init_2;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay2_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  
  Switch4_out1 <= Delay2_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_4;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay4_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  
  Switch6_out1 <= Delay4_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_6;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay6_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch8_out1 <= Delay6_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_8;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay8_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  
  Switch10_out1 <= Delay8_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_10;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay10_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  
  Switch12_out1 <= Delay10_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_12;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay12_out1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  XOR3_out1 <= Delay12_out1 XOR Delay11_out1;

  XOR4_out1 <= XOR3_out1 XOR Delay10_out1;

  XOR5_out1 <= XOR4_out1 XOR Delay7_out1;

  
  Switch1_out1 <= XOR5_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s2 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        s2 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  s2_1 <= s2;

  
  Switch3_out1 <= s2_1 WHEN new_ofdm_symbol = '0' ELSE
      init_3;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay3_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch5_out1 <= Delay3_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_5;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay5_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  
  Switch7_out1 <= Delay5_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_7;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay7_out1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  
  Switch9_out1 <= Delay7_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_9;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay9_out1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  
  Switch11_out1 <= Delay9_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_11;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        Delay11_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  XOR_out1 <= Delay11_out1 XOR Delay10_out1;

  XOR1_out1 <= XOR_out1 XOR Delay9_out1;

  XOR2_out1 <= XOR1_out1 XOR Delay6_out1;

  
  Switch_out1 <= XOR2_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_0;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s1 <= '0';
      ELSIF enb_1_2_0 = '1' AND valid_in = '1' THEN
        s1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  s1_2 <= s1;

  s2_2 <= s2;

  s1_out <= s1_2;

  s2_out <= s2_2;

END rtl;

