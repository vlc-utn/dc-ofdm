-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_constellation_scrambler.vhd
-- Created: 2024-11-21 09:59:25
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_constellation_scrambler
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/constellation_scrambler
-- Hierarchy Level: 2
-- Model version: 4.222
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_constellation_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_symbol                   :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic
        );
END IEEE_8021513_TX_src_constellation_scrambler;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_constellation_scrambler IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_lfsr_const_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_ofdm_symbol                 :   IN    std_logic;
          s1_out                          :   OUT   std_logic;
          s2_out                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_rotate
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          s1                              :   IN    std_logic;
          s2                              :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_lfsr_const_scrambler
    USE ENTITY work.IEEE_8021513_TX_src_lfsr_const_scrambler(rtl);

  FOR ALL : IEEE_8021513_TX_src_rotate
    USE ENTITY work.IEEE_8021513_TX_src_rotate(rtl);

  -- Signals
  SIGNAL en                               : std_logic;
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl                     : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL data_in_re_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_1_2_0_gated_3                : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_1_2_0_gated_4                : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL lfsr_const_scrambler_out1        : std_logic;
  SIGNAL lfsr_const_scrambler_out2        : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_1_2_0_gated_5                : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL enb_1_2_0_gated_6                : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL data_out_re_1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_im_1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rotate_out2                      : std_logic;
  SIGNAL data_out_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_out_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL enb_1_2_0_gated_7                : std_logic;
  SIGNAL data_out_re_tmp                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_out_im_tmp                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL enb_1_2_0_gated_8                : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_lfsr_const_scrambler : IEEE_8021513_TX_src_lfsr_const_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              valid_in => Logical_Operator_out1,
              init => init,  -- boolean [13]
              new_ofdm_symbol => new_ofdm_symbol,
              s1_out => lfsr_const_scrambler_out1,
              s2_out => lfsr_const_scrambler_out2
              );

  u_rotate : IEEE_8021513_TX_src_rotate
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => std_logic_vector(Delay_out1_re),  -- sfix16_En14
              data_in_im => std_logic_vector(Delay_out1_im),  -- sfix16_En14
              valid_in => Delay1_out1,
              s1 => Delay4_out1,
              s2 => Delay5_out1,
              data_out_re => data_out_re_1,  -- sfix16_En14
              data_out_im => data_out_im_1,  -- sfix16_En14
              valid_out => rotate_out2
              );

  en <= valid_in;

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  stateControl <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_1 <= stateControl;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  enb_1_2_0_gated <= stateControl_1 AND enb_1_2_0;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_1 <= to_signed(16#0000#, 16);
        data_in_im_1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0_gated = '1' THEN
        data_in_re_1 <= data_in_re_signed;
        data_in_im_1 <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  stateControl_3 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_4 <= stateControl_3;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enb_1_2_0_gated_1 <= stateControl_4 AND enb_1_2_0;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re <= to_signed(16#0000#, 16);
        Delay_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay_out1_re <= data_in_re_1;
        Delay_out1_im <= data_in_im_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  stateControl_5 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_6 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_6 <= stateControl_5;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  enb_1_2_0_gated_2 <= stateControl_6 AND enb_1_2_0;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay8_out1 <= en;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  stateControl_7 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_8 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_8 <= stateControl_7;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  enb_1_2_0_gated_3 <= stateControl_8 AND enb_1_2_0;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0_gated_3 = '1' THEN
        Delay1_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  stateControl_9 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_10 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_10 <= stateControl_9;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  enb_1_2_0_gated_4 <= stateControl_10 AND enb_1_2_0;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_2_0_gated_4 = '1' THEN
        Delay6_out1 <= en;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Logical_Operator_out1 <= en OR Delay6_out1;

  stateControl_11 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_12 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_12 <= stateControl_11;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  enb_1_2_0_gated_5 <= stateControl_12 AND enb_1_2_0;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_2_0_gated_5 = '1' THEN
        Delay4_out1 <= lfsr_const_scrambler_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  stateControl_13 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_14 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_14 <= stateControl_13;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  enb_1_2_0_gated_6 <= stateControl_14 AND enb_1_2_0;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_2_0_gated_6 = '1' THEN
        Delay5_out1 <= lfsr_const_scrambler_out2;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  stateControl_15 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_16 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_16 <= stateControl_15;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  enb_1_2_0_gated_7 <= stateControl_16 AND enb_1_2_0;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_re_tmp <= to_signed(16#0000#, 16);
        data_out_im_tmp <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0_gated_7 = '1' THEN
        data_out_re_tmp <= data_out_re_signed;
        data_out_im_tmp <= data_out_im_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  data_out_re <= std_logic_vector(data_out_re_tmp);

  data_out_im <= std_logic_vector(data_out_im_tmp);

  stateControl_17 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_18 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_18 <= stateControl_17;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  enb_1_2_0_gated_8 <= stateControl_18 AND enb_1_2_0;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0_gated_8 = '1' THEN
        Delay3_out1 <= rotate_out2;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  valid_out <= Delay3_out1;

END rtl;

