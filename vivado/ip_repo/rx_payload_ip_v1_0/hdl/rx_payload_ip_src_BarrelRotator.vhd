-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxPayload/rx_payload_ip_src_BarrelRotator.vhd
-- Created: 2024-10-03 13:09:50
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_payload_ip_src_BarrelRotator
-- Source Path: HDLRxPayload/rx_payload_full/reduced_ldpc_rx/Hc_12S_B80/DecoderCore/BarrelRotator
-- Hierarchy Level: 4
-- Model version: 1.67
-- 
-- Barrel Rotator Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_payload_ip_src_rx_payload_full_pac.ALL;

ENTITY rx_payload_ip_src_BarrelRotator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    vector_of_std_logic_vector6(0 TO 79);  -- sfix6_En1 [80]
        shift                             :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
        shiftData                         :   OUT   vector_of_std_logic_vector6(0 TO 79)  -- sfix6_En1 [80]
        );
END rx_payload_ip_src_BarrelRotator;


ARCHITECTURE rtl OF rx_payload_ip_src_BarrelRotator IS

  -- Signals
  SIGNAL shift_unsigned                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL vShift_7                         : std_logic;  -- ufix1
  SIGNAL vShiftReg_7                      : std_logic;  -- ufix1
  SIGNAL vShift_6                         : std_logic;  -- ufix1
  SIGNAL vShiftReg_6                      : std_logic;  -- ufix1
  SIGNAL vShift_5                         : std_logic;  -- ufix1
  SIGNAL vShiftReg_5                      : std_logic;  -- ufix1
  SIGNAL vShift_4                         : std_logic;  -- ufix1
  SIGNAL vShift_3                         : std_logic;  -- ufix1
  SIGNAL vShift_2                         : std_logic;  -- ufix1
  SIGNAL vShift_1                         : std_logic;  -- ufix1
  SIGNAL data_0                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_1                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_2                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_3                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_4                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_5                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_6                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_7                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_8                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_9                           : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_10                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_11                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_12                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_13                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_14                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_15                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_1                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_16                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_17                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_18                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_19                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_20                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_21                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_22                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_23                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_24                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_25                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_26                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_27                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_28                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_29                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_30                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_31                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_17                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_32                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_33                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_34                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_35                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_36                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_37                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_38                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_39                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_40                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_41                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_42                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_43                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_44                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_45                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_46                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_47                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_33                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_48                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_49                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_50                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_51                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_52                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_53                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_54                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_55                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_56                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_57                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_58                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_59                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_60                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_61                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_62                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_63                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_49                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_64                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_65                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_66                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_67                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_68                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_69                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_70                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_71                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_72                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_73                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_74                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_75                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_76                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_77                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_78                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL data_79                          : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_65                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_1                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_2                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_18                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_34                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_50                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage1_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_66                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_2                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_3                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_19                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_35                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_51                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_67                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_3                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_4                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_20                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_36                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_52                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage2_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_68                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_4                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_5                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_21                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_37                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_53                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_69                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_5                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_6                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_22                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_38                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_54                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_70                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_6                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_7                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_23                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_39                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_55                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_71                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_7                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_8                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_24                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_40                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_56                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage3_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_72                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_8                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_9                 : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_25                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_41                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_57                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_73                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_9                    : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_10                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_26                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_42                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_58                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_74                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_10                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_11                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_27                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_43                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_59                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_75                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_11                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_12                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_28                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_44                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_60                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_76                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_12                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_13                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_29                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_45                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_61                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_77                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_13                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_14                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_30                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_46                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_62                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_78                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_14                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_15                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_31                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_47                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_63                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_79                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_15                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_16                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_32                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_48                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_64                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage4Reg_80                : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_16                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_17                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_18                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_19                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_20                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_21                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_22                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_23                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_24                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_25                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_26                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_27                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_28                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_29                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_30                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_31                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage5_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_32                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_33                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_34                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_35                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_36                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_37                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_38                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_39                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_40                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_41                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_42                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_43                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_44                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_45                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_46                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_47                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_48                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_49                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_50                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_51                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_52                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_53                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_54                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_55                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_56                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_57                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_58                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_59                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_60                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_61                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_62                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_63                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage6_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_64                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_65                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_66                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_67                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_68                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_69                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_70                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_71                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_72                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_73                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_74                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_75                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_76                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_77                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_78                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_79                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL dout_stage7_80                   : signed(5 DOWNTO 0);  -- sfix6_En1
  SIGNAL shiftData_tmp                    : vector_of_signed6(0 TO 79);  -- sfix6_En1 [80]

BEGIN
  shift_unsigned <= unsigned(shift);

  vShift_7 <= shift_unsigned(6);

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vShiftReg_7 <= '0';
      ELSIF enb = '1' THEN
        vShiftReg_7 <= vShift_7;
      END IF;
    END IF;
  END PROCESS c_process;


  vShift_6 <= shift_unsigned(5);

  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vShiftReg_6 <= '0';
      ELSIF enb = '1' THEN
        vShiftReg_6 <= vShift_6;
      END IF;
    END IF;
  END PROCESS c_1_process;


  vShift_5 <= shift_unsigned(4);

  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vShiftReg_5 <= '0';
      ELSIF enb = '1' THEN
        vShiftReg_5 <= vShift_5;
      END IF;
    END IF;
  END PROCESS c_2_process;


  vShift_4 <= shift_unsigned(3);

  vShift_3 <= shift_unsigned(2);

  vShift_2 <= shift_unsigned(1);

  vShift_1 <= shift_unsigned(0);

  data_0 <= signed(data(0));

  data_1 <= signed(data(1));

  
  dout_stage1_1 <= data_0 WHEN vShift_1 = '0' ELSE
      data_1;

  data_2 <= signed(data(2));

  data_3 <= signed(data(3));

  
  dout_stage1_3 <= data_2 WHEN vShift_1 = '0' ELSE
      data_3;

  
  dout_stage2_1 <= dout_stage1_1 WHEN vShift_2 = '0' ELSE
      dout_stage1_3;

  data_4 <= signed(data(4));

  data_5 <= signed(data(5));

  
  dout_stage1_5 <= data_4 WHEN vShift_1 = '0' ELSE
      data_5;

  data_6 <= signed(data(6));

  data_7 <= signed(data(7));

  
  dout_stage1_7 <= data_6 WHEN vShift_1 = '0' ELSE
      data_7;

  
  dout_stage2_5 <= dout_stage1_5 WHEN vShift_2 = '0' ELSE
      dout_stage1_7;

  
  dout_stage3_1 <= dout_stage2_1 WHEN vShift_3 = '0' ELSE
      dout_stage2_5;

  data_8 <= signed(data(8));

  data_9 <= signed(data(9));

  
  dout_stage1_9 <= data_8 WHEN vShift_1 = '0' ELSE
      data_9;

  data_10 <= signed(data(10));

  data_11 <= signed(data(11));

  
  dout_stage1_11 <= data_10 WHEN vShift_1 = '0' ELSE
      data_11;

  
  dout_stage2_9 <= dout_stage1_9 WHEN vShift_2 = '0' ELSE
      dout_stage1_11;

  data_12 <= signed(data(12));

  data_13 <= signed(data(13));

  
  dout_stage1_13 <= data_12 WHEN vShift_1 = '0' ELSE
      data_13;

  data_14 <= signed(data(14));

  data_15 <= signed(data(15));

  
  dout_stage1_15 <= data_14 WHEN vShift_1 = '0' ELSE
      data_15;

  
  dout_stage2_13 <= dout_stage1_13 WHEN vShift_2 = '0' ELSE
      dout_stage1_15;

  
  dout_stage3_9 <= dout_stage2_9 WHEN vShift_3 = '0' ELSE
      dout_stage2_13;

  
  dout_stage4_1 <= dout_stage3_1 WHEN vShift_4 = '0' ELSE
      dout_stage3_9;

  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_1 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_1 <= dout_stage4_1;
      END IF;
    END IF;
  END PROCESS c_3_process;


  data_16 <= signed(data(16));

  data_17 <= signed(data(17));

  
  dout_stage1_17 <= data_16 WHEN vShift_1 = '0' ELSE
      data_17;

  data_18 <= signed(data(18));

  data_19 <= signed(data(19));

  
  dout_stage1_19 <= data_18 WHEN vShift_1 = '0' ELSE
      data_19;

  
  dout_stage2_17 <= dout_stage1_17 WHEN vShift_2 = '0' ELSE
      dout_stage1_19;

  data_20 <= signed(data(20));

  data_21 <= signed(data(21));

  
  dout_stage1_21 <= data_20 WHEN vShift_1 = '0' ELSE
      data_21;

  data_22 <= signed(data(22));

  data_23 <= signed(data(23));

  
  dout_stage1_23 <= data_22 WHEN vShift_1 = '0' ELSE
      data_23;

  
  dout_stage2_21 <= dout_stage1_21 WHEN vShift_2 = '0' ELSE
      dout_stage1_23;

  
  dout_stage3_17 <= dout_stage2_17 WHEN vShift_3 = '0' ELSE
      dout_stage2_21;

  data_24 <= signed(data(24));

  data_25 <= signed(data(25));

  
  dout_stage1_25 <= data_24 WHEN vShift_1 = '0' ELSE
      data_25;

  data_26 <= signed(data(26));

  data_27 <= signed(data(27));

  
  dout_stage1_27 <= data_26 WHEN vShift_1 = '0' ELSE
      data_27;

  
  dout_stage2_25 <= dout_stage1_25 WHEN vShift_2 = '0' ELSE
      dout_stage1_27;

  data_28 <= signed(data(28));

  data_29 <= signed(data(29));

  
  dout_stage1_29 <= data_28 WHEN vShift_1 = '0' ELSE
      data_29;

  data_30 <= signed(data(30));

  data_31 <= signed(data(31));

  
  dout_stage1_31 <= data_30 WHEN vShift_1 = '0' ELSE
      data_31;

  
  dout_stage2_29 <= dout_stage1_29 WHEN vShift_2 = '0' ELSE
      dout_stage1_31;

  
  dout_stage3_25 <= dout_stage2_25 WHEN vShift_3 = '0' ELSE
      dout_stage2_29;

  
  dout_stage4_17 <= dout_stage3_17 WHEN vShift_4 = '0' ELSE
      dout_stage3_25;

  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_17 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_17 <= dout_stage4_17;
      END IF;
    END IF;
  END PROCESS c_4_process;


  
  dout_stage5_1 <= dout_stage4Reg_1 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_17;

  data_32 <= signed(data(32));

  data_33 <= signed(data(33));

  
  dout_stage1_33 <= data_32 WHEN vShift_1 = '0' ELSE
      data_33;

  data_34 <= signed(data(34));

  data_35 <= signed(data(35));

  
  dout_stage1_35 <= data_34 WHEN vShift_1 = '0' ELSE
      data_35;

  
  dout_stage2_33 <= dout_stage1_33 WHEN vShift_2 = '0' ELSE
      dout_stage1_35;

  data_36 <= signed(data(36));

  data_37 <= signed(data(37));

  
  dout_stage1_37 <= data_36 WHEN vShift_1 = '0' ELSE
      data_37;

  data_38 <= signed(data(38));

  data_39 <= signed(data(39));

  
  dout_stage1_39 <= data_38 WHEN vShift_1 = '0' ELSE
      data_39;

  
  dout_stage2_37 <= dout_stage1_37 WHEN vShift_2 = '0' ELSE
      dout_stage1_39;

  
  dout_stage3_33 <= dout_stage2_33 WHEN vShift_3 = '0' ELSE
      dout_stage2_37;

  data_40 <= signed(data(40));

  data_41 <= signed(data(41));

  
  dout_stage1_41 <= data_40 WHEN vShift_1 = '0' ELSE
      data_41;

  data_42 <= signed(data(42));

  data_43 <= signed(data(43));

  
  dout_stage1_43 <= data_42 WHEN vShift_1 = '0' ELSE
      data_43;

  
  dout_stage2_41 <= dout_stage1_41 WHEN vShift_2 = '0' ELSE
      dout_stage1_43;

  data_44 <= signed(data(44));

  data_45 <= signed(data(45));

  
  dout_stage1_45 <= data_44 WHEN vShift_1 = '0' ELSE
      data_45;

  data_46 <= signed(data(46));

  data_47 <= signed(data(47));

  
  dout_stage1_47 <= data_46 WHEN vShift_1 = '0' ELSE
      data_47;

  
  dout_stage2_45 <= dout_stage1_45 WHEN vShift_2 = '0' ELSE
      dout_stage1_47;

  
  dout_stage3_41 <= dout_stage2_41 WHEN vShift_3 = '0' ELSE
      dout_stage2_45;

  
  dout_stage4_33 <= dout_stage3_33 WHEN vShift_4 = '0' ELSE
      dout_stage3_41;

  c_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_33 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_33 <= dout_stage4_33;
      END IF;
    END IF;
  END PROCESS c_5_process;


  data_48 <= signed(data(48));

  data_49 <= signed(data(49));

  
  dout_stage1_49 <= data_48 WHEN vShift_1 = '0' ELSE
      data_49;

  data_50 <= signed(data(50));

  data_51 <= signed(data(51));

  
  dout_stage1_51 <= data_50 WHEN vShift_1 = '0' ELSE
      data_51;

  
  dout_stage2_49 <= dout_stage1_49 WHEN vShift_2 = '0' ELSE
      dout_stage1_51;

  data_52 <= signed(data(52));

  data_53 <= signed(data(53));

  
  dout_stage1_53 <= data_52 WHEN vShift_1 = '0' ELSE
      data_53;

  data_54 <= signed(data(54));

  data_55 <= signed(data(55));

  
  dout_stage1_55 <= data_54 WHEN vShift_1 = '0' ELSE
      data_55;

  
  dout_stage2_53 <= dout_stage1_53 WHEN vShift_2 = '0' ELSE
      dout_stage1_55;

  
  dout_stage3_49 <= dout_stage2_49 WHEN vShift_3 = '0' ELSE
      dout_stage2_53;

  data_56 <= signed(data(56));

  data_57 <= signed(data(57));

  
  dout_stage1_57 <= data_56 WHEN vShift_1 = '0' ELSE
      data_57;

  data_58 <= signed(data(58));

  data_59 <= signed(data(59));

  
  dout_stage1_59 <= data_58 WHEN vShift_1 = '0' ELSE
      data_59;

  
  dout_stage2_57 <= dout_stage1_57 WHEN vShift_2 = '0' ELSE
      dout_stage1_59;

  data_60 <= signed(data(60));

  data_61 <= signed(data(61));

  
  dout_stage1_61 <= data_60 WHEN vShift_1 = '0' ELSE
      data_61;

  data_62 <= signed(data(62));

  data_63 <= signed(data(63));

  
  dout_stage1_63 <= data_62 WHEN vShift_1 = '0' ELSE
      data_63;

  
  dout_stage2_61 <= dout_stage1_61 WHEN vShift_2 = '0' ELSE
      dout_stage1_63;

  
  dout_stage3_57 <= dout_stage2_57 WHEN vShift_3 = '0' ELSE
      dout_stage2_61;

  
  dout_stage4_49 <= dout_stage3_49 WHEN vShift_4 = '0' ELSE
      dout_stage3_57;

  c_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_49 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_49 <= dout_stage4_49;
      END IF;
    END IF;
  END PROCESS c_6_process;


  
  dout_stage5_33 <= dout_stage4Reg_33 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_49;

  
  dout_stage6_1 <= dout_stage5_1 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_33;

  data_64 <= signed(data(64));

  data_65 <= signed(data(65));

  
  dout_stage1_65 <= data_64 WHEN vShift_1 = '0' ELSE
      data_65;

  data_66 <= signed(data(66));

  data_67 <= signed(data(67));

  
  dout_stage1_67 <= data_66 WHEN vShift_1 = '0' ELSE
      data_67;

  
  dout_stage2_65 <= dout_stage1_65 WHEN vShift_2 = '0' ELSE
      dout_stage1_67;

  data_68 <= signed(data(68));

  data_69 <= signed(data(69));

  
  dout_stage1_69 <= data_68 WHEN vShift_1 = '0' ELSE
      data_69;

  data_70 <= signed(data(70));

  data_71 <= signed(data(71));

  
  dout_stage1_71 <= data_70 WHEN vShift_1 = '0' ELSE
      data_71;

  
  dout_stage2_69 <= dout_stage1_69 WHEN vShift_2 = '0' ELSE
      dout_stage1_71;

  
  dout_stage3_65 <= dout_stage2_65 WHEN vShift_3 = '0' ELSE
      dout_stage2_69;

  data_72 <= signed(data(72));

  data_73 <= signed(data(73));

  
  dout_stage1_73 <= data_72 WHEN vShift_1 = '0' ELSE
      data_73;

  data_74 <= signed(data(74));

  data_75 <= signed(data(75));

  
  dout_stage1_75 <= data_74 WHEN vShift_1 = '0' ELSE
      data_75;

  
  dout_stage2_73 <= dout_stage1_73 WHEN vShift_2 = '0' ELSE
      dout_stage1_75;

  data_76 <= signed(data(76));

  data_77 <= signed(data(77));

  
  dout_stage1_77 <= data_76 WHEN vShift_1 = '0' ELSE
      data_77;

  data_78 <= signed(data(78));

  data_79 <= signed(data(79));

  
  dout_stage1_79 <= data_78 WHEN vShift_1 = '0' ELSE
      data_79;

  
  dout_stage2_77 <= dout_stage1_77 WHEN vShift_2 = '0' ELSE
      dout_stage1_79;

  
  dout_stage3_73 <= dout_stage2_73 WHEN vShift_3 = '0' ELSE
      dout_stage2_77;

  
  dout_stage4_65 <= dout_stage3_65 WHEN vShift_4 = '0' ELSE
      dout_stage3_73;

  c_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_65 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_65 <= dout_stage4_65;
      END IF;
    END IF;
  END PROCESS c_7_process;


  
  dout_stage5_65 <= dout_stage4Reg_65 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_1;

  
  dout_stage5_17 <= dout_stage4Reg_17 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_33;

  
  dout_stage6_65 <= dout_stage5_65 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_17;

  
  dout_stage7_1 <= dout_stage6_1 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_65;

  
  dout_stage1_2 <= data_1 WHEN vShift_1 = '0' ELSE
      data_2;

  
  dout_stage1_4 <= data_3 WHEN vShift_1 = '0' ELSE
      data_4;

  
  dout_stage2_2 <= dout_stage1_2 WHEN vShift_2 = '0' ELSE
      dout_stage1_4;

  
  dout_stage1_6 <= data_5 WHEN vShift_1 = '0' ELSE
      data_6;

  
  dout_stage1_8 <= data_7 WHEN vShift_1 = '0' ELSE
      data_8;

  
  dout_stage2_6 <= dout_stage1_6 WHEN vShift_2 = '0' ELSE
      dout_stage1_8;

  
  dout_stage3_2 <= dout_stage2_2 WHEN vShift_3 = '0' ELSE
      dout_stage2_6;

  
  dout_stage1_10 <= data_9 WHEN vShift_1 = '0' ELSE
      data_10;

  
  dout_stage1_12 <= data_11 WHEN vShift_1 = '0' ELSE
      data_12;

  
  dout_stage2_10 <= dout_stage1_10 WHEN vShift_2 = '0' ELSE
      dout_stage1_12;

  
  dout_stage1_14 <= data_13 WHEN vShift_1 = '0' ELSE
      data_14;

  
  dout_stage1_16 <= data_15 WHEN vShift_1 = '0' ELSE
      data_16;

  
  dout_stage2_14 <= dout_stage1_14 WHEN vShift_2 = '0' ELSE
      dout_stage1_16;

  
  dout_stage3_10 <= dout_stage2_10 WHEN vShift_3 = '0' ELSE
      dout_stage2_14;

  
  dout_stage4_2 <= dout_stage3_2 WHEN vShift_4 = '0' ELSE
      dout_stage3_10;

  c_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_2 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_2 <= dout_stage4_2;
      END IF;
    END IF;
  END PROCESS c_8_process;


  
  dout_stage1_18 <= data_17 WHEN vShift_1 = '0' ELSE
      data_18;

  
  dout_stage1_20 <= data_19 WHEN vShift_1 = '0' ELSE
      data_20;

  
  dout_stage2_18 <= dout_stage1_18 WHEN vShift_2 = '0' ELSE
      dout_stage1_20;

  
  dout_stage1_22 <= data_21 WHEN vShift_1 = '0' ELSE
      data_22;

  
  dout_stage1_24 <= data_23 WHEN vShift_1 = '0' ELSE
      data_24;

  
  dout_stage2_22 <= dout_stage1_22 WHEN vShift_2 = '0' ELSE
      dout_stage1_24;

  
  dout_stage3_18 <= dout_stage2_18 WHEN vShift_3 = '0' ELSE
      dout_stage2_22;

  
  dout_stage1_26 <= data_25 WHEN vShift_1 = '0' ELSE
      data_26;

  
  dout_stage1_28 <= data_27 WHEN vShift_1 = '0' ELSE
      data_28;

  
  dout_stage2_26 <= dout_stage1_26 WHEN vShift_2 = '0' ELSE
      dout_stage1_28;

  
  dout_stage1_30 <= data_29 WHEN vShift_1 = '0' ELSE
      data_30;

  
  dout_stage1_32 <= data_31 WHEN vShift_1 = '0' ELSE
      data_32;

  
  dout_stage2_30 <= dout_stage1_30 WHEN vShift_2 = '0' ELSE
      dout_stage1_32;

  
  dout_stage3_26 <= dout_stage2_26 WHEN vShift_3 = '0' ELSE
      dout_stage2_30;

  
  dout_stage4_18 <= dout_stage3_18 WHEN vShift_4 = '0' ELSE
      dout_stage3_26;

  c_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_18 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_18 <= dout_stage4_18;
      END IF;
    END IF;
  END PROCESS c_9_process;


  
  dout_stage5_2 <= dout_stage4Reg_2 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_18;

  
  dout_stage1_34 <= data_33 WHEN vShift_1 = '0' ELSE
      data_34;

  
  dout_stage1_36 <= data_35 WHEN vShift_1 = '0' ELSE
      data_36;

  
  dout_stage2_34 <= dout_stage1_34 WHEN vShift_2 = '0' ELSE
      dout_stage1_36;

  
  dout_stage1_38 <= data_37 WHEN vShift_1 = '0' ELSE
      data_38;

  
  dout_stage1_40 <= data_39 WHEN vShift_1 = '0' ELSE
      data_40;

  
  dout_stage2_38 <= dout_stage1_38 WHEN vShift_2 = '0' ELSE
      dout_stage1_40;

  
  dout_stage3_34 <= dout_stage2_34 WHEN vShift_3 = '0' ELSE
      dout_stage2_38;

  
  dout_stage1_42 <= data_41 WHEN vShift_1 = '0' ELSE
      data_42;

  
  dout_stage1_44 <= data_43 WHEN vShift_1 = '0' ELSE
      data_44;

  
  dout_stage2_42 <= dout_stage1_42 WHEN vShift_2 = '0' ELSE
      dout_stage1_44;

  
  dout_stage1_46 <= data_45 WHEN vShift_1 = '0' ELSE
      data_46;

  
  dout_stage1_48 <= data_47 WHEN vShift_1 = '0' ELSE
      data_48;

  
  dout_stage2_46 <= dout_stage1_46 WHEN vShift_2 = '0' ELSE
      dout_stage1_48;

  
  dout_stage3_42 <= dout_stage2_42 WHEN vShift_3 = '0' ELSE
      dout_stage2_46;

  
  dout_stage4_34 <= dout_stage3_34 WHEN vShift_4 = '0' ELSE
      dout_stage3_42;

  c_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_34 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_34 <= dout_stage4_34;
      END IF;
    END IF;
  END PROCESS c_10_process;


  
  dout_stage1_50 <= data_49 WHEN vShift_1 = '0' ELSE
      data_50;

  
  dout_stage1_52 <= data_51 WHEN vShift_1 = '0' ELSE
      data_52;

  
  dout_stage2_50 <= dout_stage1_50 WHEN vShift_2 = '0' ELSE
      dout_stage1_52;

  
  dout_stage1_54 <= data_53 WHEN vShift_1 = '0' ELSE
      data_54;

  
  dout_stage1_56 <= data_55 WHEN vShift_1 = '0' ELSE
      data_56;

  
  dout_stage2_54 <= dout_stage1_54 WHEN vShift_2 = '0' ELSE
      dout_stage1_56;

  
  dout_stage3_50 <= dout_stage2_50 WHEN vShift_3 = '0' ELSE
      dout_stage2_54;

  
  dout_stage1_58 <= data_57 WHEN vShift_1 = '0' ELSE
      data_58;

  
  dout_stage1_60 <= data_59 WHEN vShift_1 = '0' ELSE
      data_60;

  
  dout_stage2_58 <= dout_stage1_58 WHEN vShift_2 = '0' ELSE
      dout_stage1_60;

  
  dout_stage1_62 <= data_61 WHEN vShift_1 = '0' ELSE
      data_62;

  
  dout_stage1_64 <= data_63 WHEN vShift_1 = '0' ELSE
      data_64;

  
  dout_stage2_62 <= dout_stage1_62 WHEN vShift_2 = '0' ELSE
      dout_stage1_64;

  
  dout_stage3_58 <= dout_stage2_58 WHEN vShift_3 = '0' ELSE
      dout_stage2_62;

  
  dout_stage4_50 <= dout_stage3_50 WHEN vShift_4 = '0' ELSE
      dout_stage3_58;

  c_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_50 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_50 <= dout_stage4_50;
      END IF;
    END IF;
  END PROCESS c_11_process;


  
  dout_stage5_34 <= dout_stage4Reg_34 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_50;

  
  dout_stage6_2 <= dout_stage5_2 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_34;

  
  dout_stage1_66 <= data_65 WHEN vShift_1 = '0' ELSE
      data_66;

  
  dout_stage1_68 <= data_67 WHEN vShift_1 = '0' ELSE
      data_68;

  
  dout_stage2_66 <= dout_stage1_66 WHEN vShift_2 = '0' ELSE
      dout_stage1_68;

  
  dout_stage1_70 <= data_69 WHEN vShift_1 = '0' ELSE
      data_70;

  
  dout_stage1_72 <= data_71 WHEN vShift_1 = '0' ELSE
      data_72;

  
  dout_stage2_70 <= dout_stage1_70 WHEN vShift_2 = '0' ELSE
      dout_stage1_72;

  
  dout_stage3_66 <= dout_stage2_66 WHEN vShift_3 = '0' ELSE
      dout_stage2_70;

  
  dout_stage1_74 <= data_73 WHEN vShift_1 = '0' ELSE
      data_74;

  
  dout_stage1_76 <= data_75 WHEN vShift_1 = '0' ELSE
      data_76;

  
  dout_stage2_74 <= dout_stage1_74 WHEN vShift_2 = '0' ELSE
      dout_stage1_76;

  
  dout_stage1_78 <= data_77 WHEN vShift_1 = '0' ELSE
      data_78;

  
  dout_stage1_80 <= data_79 WHEN vShift_1 = '0' ELSE
      data_0;

  
  dout_stage2_78 <= dout_stage1_78 WHEN vShift_2 = '0' ELSE
      dout_stage1_80;

  
  dout_stage3_74 <= dout_stage2_74 WHEN vShift_3 = '0' ELSE
      dout_stage2_78;

  
  dout_stage4_66 <= dout_stage3_66 WHEN vShift_4 = '0' ELSE
      dout_stage3_74;

  c_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_66 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_66 <= dout_stage4_66;
      END IF;
    END IF;
  END PROCESS c_12_process;


  
  dout_stage5_66 <= dout_stage4Reg_66 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_2;

  
  dout_stage5_18 <= dout_stage4Reg_18 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_34;

  
  dout_stage6_66 <= dout_stage5_66 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_18;

  
  dout_stage7_2 <= dout_stage6_2 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_66;

  
  dout_stage2_3 <= dout_stage1_3 WHEN vShift_2 = '0' ELSE
      dout_stage1_5;

  
  dout_stage2_7 <= dout_stage1_7 WHEN vShift_2 = '0' ELSE
      dout_stage1_9;

  
  dout_stage3_3 <= dout_stage2_3 WHEN vShift_3 = '0' ELSE
      dout_stage2_7;

  
  dout_stage2_11 <= dout_stage1_11 WHEN vShift_2 = '0' ELSE
      dout_stage1_13;

  
  dout_stage2_15 <= dout_stage1_15 WHEN vShift_2 = '0' ELSE
      dout_stage1_17;

  
  dout_stage3_11 <= dout_stage2_11 WHEN vShift_3 = '0' ELSE
      dout_stage2_15;

  
  dout_stage4_3 <= dout_stage3_3 WHEN vShift_4 = '0' ELSE
      dout_stage3_11;

  c_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_3 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_3 <= dout_stage4_3;
      END IF;
    END IF;
  END PROCESS c_13_process;


  
  dout_stage2_19 <= dout_stage1_19 WHEN vShift_2 = '0' ELSE
      dout_stage1_21;

  
  dout_stage2_23 <= dout_stage1_23 WHEN vShift_2 = '0' ELSE
      dout_stage1_25;

  
  dout_stage3_19 <= dout_stage2_19 WHEN vShift_3 = '0' ELSE
      dout_stage2_23;

  
  dout_stage2_27 <= dout_stage1_27 WHEN vShift_2 = '0' ELSE
      dout_stage1_29;

  
  dout_stage2_31 <= dout_stage1_31 WHEN vShift_2 = '0' ELSE
      dout_stage1_33;

  
  dout_stage3_27 <= dout_stage2_27 WHEN vShift_3 = '0' ELSE
      dout_stage2_31;

  
  dout_stage4_19 <= dout_stage3_19 WHEN vShift_4 = '0' ELSE
      dout_stage3_27;

  c_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_19 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_19 <= dout_stage4_19;
      END IF;
    END IF;
  END PROCESS c_14_process;


  
  dout_stage5_3 <= dout_stage4Reg_3 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_19;

  
  dout_stage2_35 <= dout_stage1_35 WHEN vShift_2 = '0' ELSE
      dout_stage1_37;

  
  dout_stage2_39 <= dout_stage1_39 WHEN vShift_2 = '0' ELSE
      dout_stage1_41;

  
  dout_stage3_35 <= dout_stage2_35 WHEN vShift_3 = '0' ELSE
      dout_stage2_39;

  
  dout_stage2_43 <= dout_stage1_43 WHEN vShift_2 = '0' ELSE
      dout_stage1_45;

  
  dout_stage2_47 <= dout_stage1_47 WHEN vShift_2 = '0' ELSE
      dout_stage1_49;

  
  dout_stage3_43 <= dout_stage2_43 WHEN vShift_3 = '0' ELSE
      dout_stage2_47;

  
  dout_stage4_35 <= dout_stage3_35 WHEN vShift_4 = '0' ELSE
      dout_stage3_43;

  c_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_35 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_35 <= dout_stage4_35;
      END IF;
    END IF;
  END PROCESS c_15_process;


  
  dout_stage2_51 <= dout_stage1_51 WHEN vShift_2 = '0' ELSE
      dout_stage1_53;

  
  dout_stage2_55 <= dout_stage1_55 WHEN vShift_2 = '0' ELSE
      dout_stage1_57;

  
  dout_stage3_51 <= dout_stage2_51 WHEN vShift_3 = '0' ELSE
      dout_stage2_55;

  
  dout_stage2_59 <= dout_stage1_59 WHEN vShift_2 = '0' ELSE
      dout_stage1_61;

  
  dout_stage2_63 <= dout_stage1_63 WHEN vShift_2 = '0' ELSE
      dout_stage1_65;

  
  dout_stage3_59 <= dout_stage2_59 WHEN vShift_3 = '0' ELSE
      dout_stage2_63;

  
  dout_stage4_51 <= dout_stage3_51 WHEN vShift_4 = '0' ELSE
      dout_stage3_59;

  c_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_51 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_51 <= dout_stage4_51;
      END IF;
    END IF;
  END PROCESS c_16_process;


  
  dout_stage5_35 <= dout_stage4Reg_35 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_51;

  
  dout_stage6_3 <= dout_stage5_3 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_35;

  
  dout_stage2_67 <= dout_stage1_67 WHEN vShift_2 = '0' ELSE
      dout_stage1_69;

  
  dout_stage2_71 <= dout_stage1_71 WHEN vShift_2 = '0' ELSE
      dout_stage1_73;

  
  dout_stage3_67 <= dout_stage2_67 WHEN vShift_3 = '0' ELSE
      dout_stage2_71;

  
  dout_stage2_75 <= dout_stage1_75 WHEN vShift_2 = '0' ELSE
      dout_stage1_77;

  
  dout_stage2_79 <= dout_stage1_79 WHEN vShift_2 = '0' ELSE
      dout_stage1_1;

  
  dout_stage3_75 <= dout_stage2_75 WHEN vShift_3 = '0' ELSE
      dout_stage2_79;

  
  dout_stage4_67 <= dout_stage3_67 WHEN vShift_4 = '0' ELSE
      dout_stage3_75;

  c_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_67 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_67 <= dout_stage4_67;
      END IF;
    END IF;
  END PROCESS c_17_process;


  
  dout_stage5_67 <= dout_stage4Reg_67 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_3;

  
  dout_stage5_19 <= dout_stage4Reg_19 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_35;

  
  dout_stage6_67 <= dout_stage5_67 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_19;

  
  dout_stage7_3 <= dout_stage6_3 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_67;

  
  dout_stage2_4 <= dout_stage1_4 WHEN vShift_2 = '0' ELSE
      dout_stage1_6;

  
  dout_stage2_8 <= dout_stage1_8 WHEN vShift_2 = '0' ELSE
      dout_stage1_10;

  
  dout_stage3_4 <= dout_stage2_4 WHEN vShift_3 = '0' ELSE
      dout_stage2_8;

  
  dout_stage2_12 <= dout_stage1_12 WHEN vShift_2 = '0' ELSE
      dout_stage1_14;

  
  dout_stage2_16 <= dout_stage1_16 WHEN vShift_2 = '0' ELSE
      dout_stage1_18;

  
  dout_stage3_12 <= dout_stage2_12 WHEN vShift_3 = '0' ELSE
      dout_stage2_16;

  
  dout_stage4_4 <= dout_stage3_4 WHEN vShift_4 = '0' ELSE
      dout_stage3_12;

  c_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_4 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_4 <= dout_stage4_4;
      END IF;
    END IF;
  END PROCESS c_18_process;


  
  dout_stage2_20 <= dout_stage1_20 WHEN vShift_2 = '0' ELSE
      dout_stage1_22;

  
  dout_stage2_24 <= dout_stage1_24 WHEN vShift_2 = '0' ELSE
      dout_stage1_26;

  
  dout_stage3_20 <= dout_stage2_20 WHEN vShift_3 = '0' ELSE
      dout_stage2_24;

  
  dout_stage2_28 <= dout_stage1_28 WHEN vShift_2 = '0' ELSE
      dout_stage1_30;

  
  dout_stage2_32 <= dout_stage1_32 WHEN vShift_2 = '0' ELSE
      dout_stage1_34;

  
  dout_stage3_28 <= dout_stage2_28 WHEN vShift_3 = '0' ELSE
      dout_stage2_32;

  
  dout_stage4_20 <= dout_stage3_20 WHEN vShift_4 = '0' ELSE
      dout_stage3_28;

  c_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_20 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_20 <= dout_stage4_20;
      END IF;
    END IF;
  END PROCESS c_19_process;


  
  dout_stage5_4 <= dout_stage4Reg_4 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_20;

  
  dout_stage2_36 <= dout_stage1_36 WHEN vShift_2 = '0' ELSE
      dout_stage1_38;

  
  dout_stage2_40 <= dout_stage1_40 WHEN vShift_2 = '0' ELSE
      dout_stage1_42;

  
  dout_stage3_36 <= dout_stage2_36 WHEN vShift_3 = '0' ELSE
      dout_stage2_40;

  
  dout_stage2_44 <= dout_stage1_44 WHEN vShift_2 = '0' ELSE
      dout_stage1_46;

  
  dout_stage2_48 <= dout_stage1_48 WHEN vShift_2 = '0' ELSE
      dout_stage1_50;

  
  dout_stage3_44 <= dout_stage2_44 WHEN vShift_3 = '0' ELSE
      dout_stage2_48;

  
  dout_stage4_36 <= dout_stage3_36 WHEN vShift_4 = '0' ELSE
      dout_stage3_44;

  c_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_36 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_36 <= dout_stage4_36;
      END IF;
    END IF;
  END PROCESS c_20_process;


  
  dout_stage2_52 <= dout_stage1_52 WHEN vShift_2 = '0' ELSE
      dout_stage1_54;

  
  dout_stage2_56 <= dout_stage1_56 WHEN vShift_2 = '0' ELSE
      dout_stage1_58;

  
  dout_stage3_52 <= dout_stage2_52 WHEN vShift_3 = '0' ELSE
      dout_stage2_56;

  
  dout_stage2_60 <= dout_stage1_60 WHEN vShift_2 = '0' ELSE
      dout_stage1_62;

  
  dout_stage2_64 <= dout_stage1_64 WHEN vShift_2 = '0' ELSE
      dout_stage1_66;

  
  dout_stage3_60 <= dout_stage2_60 WHEN vShift_3 = '0' ELSE
      dout_stage2_64;

  
  dout_stage4_52 <= dout_stage3_52 WHEN vShift_4 = '0' ELSE
      dout_stage3_60;

  c_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_52 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_52 <= dout_stage4_52;
      END IF;
    END IF;
  END PROCESS c_21_process;


  
  dout_stage5_36 <= dout_stage4Reg_36 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_52;

  
  dout_stage6_4 <= dout_stage5_4 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_36;

  
  dout_stage2_68 <= dout_stage1_68 WHEN vShift_2 = '0' ELSE
      dout_stage1_70;

  
  dout_stage2_72 <= dout_stage1_72 WHEN vShift_2 = '0' ELSE
      dout_stage1_74;

  
  dout_stage3_68 <= dout_stage2_68 WHEN vShift_3 = '0' ELSE
      dout_stage2_72;

  
  dout_stage2_76 <= dout_stage1_76 WHEN vShift_2 = '0' ELSE
      dout_stage1_78;

  
  dout_stage2_80 <= dout_stage1_80 WHEN vShift_2 = '0' ELSE
      dout_stage1_2;

  
  dout_stage3_76 <= dout_stage2_76 WHEN vShift_3 = '0' ELSE
      dout_stage2_80;

  
  dout_stage4_68 <= dout_stage3_68 WHEN vShift_4 = '0' ELSE
      dout_stage3_76;

  c_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_68 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_68 <= dout_stage4_68;
      END IF;
    END IF;
  END PROCESS c_22_process;


  
  dout_stage5_68 <= dout_stage4Reg_68 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_4;

  
  dout_stage5_20 <= dout_stage4Reg_20 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_36;

  
  dout_stage6_68 <= dout_stage5_68 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_20;

  
  dout_stage7_4 <= dout_stage6_4 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_68;

  
  dout_stage3_5 <= dout_stage2_5 WHEN vShift_3 = '0' ELSE
      dout_stage2_9;

  
  dout_stage3_13 <= dout_stage2_13 WHEN vShift_3 = '0' ELSE
      dout_stage2_17;

  
  dout_stage4_5 <= dout_stage3_5 WHEN vShift_4 = '0' ELSE
      dout_stage3_13;

  c_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_5 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_5 <= dout_stage4_5;
      END IF;
    END IF;
  END PROCESS c_23_process;


  
  dout_stage3_21 <= dout_stage2_21 WHEN vShift_3 = '0' ELSE
      dout_stage2_25;

  
  dout_stage3_29 <= dout_stage2_29 WHEN vShift_3 = '0' ELSE
      dout_stage2_33;

  
  dout_stage4_21 <= dout_stage3_21 WHEN vShift_4 = '0' ELSE
      dout_stage3_29;

  c_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_21 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_21 <= dout_stage4_21;
      END IF;
    END IF;
  END PROCESS c_24_process;


  
  dout_stage5_5 <= dout_stage4Reg_5 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_21;

  
  dout_stage3_37 <= dout_stage2_37 WHEN vShift_3 = '0' ELSE
      dout_stage2_41;

  
  dout_stage3_45 <= dout_stage2_45 WHEN vShift_3 = '0' ELSE
      dout_stage2_49;

  
  dout_stage4_37 <= dout_stage3_37 WHEN vShift_4 = '0' ELSE
      dout_stage3_45;

  c_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_37 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_37 <= dout_stage4_37;
      END IF;
    END IF;
  END PROCESS c_25_process;


  
  dout_stage3_53 <= dout_stage2_53 WHEN vShift_3 = '0' ELSE
      dout_stage2_57;

  
  dout_stage3_61 <= dout_stage2_61 WHEN vShift_3 = '0' ELSE
      dout_stage2_65;

  
  dout_stage4_53 <= dout_stage3_53 WHEN vShift_4 = '0' ELSE
      dout_stage3_61;

  c_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_53 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_53 <= dout_stage4_53;
      END IF;
    END IF;
  END PROCESS c_26_process;


  
  dout_stage5_37 <= dout_stage4Reg_37 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_53;

  
  dout_stage6_5 <= dout_stage5_5 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_37;

  
  dout_stage3_69 <= dout_stage2_69 WHEN vShift_3 = '0' ELSE
      dout_stage2_73;

  
  dout_stage3_77 <= dout_stage2_77 WHEN vShift_3 = '0' ELSE
      dout_stage2_1;

  
  dout_stage4_69 <= dout_stage3_69 WHEN vShift_4 = '0' ELSE
      dout_stage3_77;

  c_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_69 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_69 <= dout_stage4_69;
      END IF;
    END IF;
  END PROCESS c_27_process;


  
  dout_stage5_69 <= dout_stage4Reg_69 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_5;

  
  dout_stage5_21 <= dout_stage4Reg_21 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_37;

  
  dout_stage6_69 <= dout_stage5_69 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_21;

  
  dout_stage7_5 <= dout_stage6_5 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_69;

  
  dout_stage3_6 <= dout_stage2_6 WHEN vShift_3 = '0' ELSE
      dout_stage2_10;

  
  dout_stage3_14 <= dout_stage2_14 WHEN vShift_3 = '0' ELSE
      dout_stage2_18;

  
  dout_stage4_6 <= dout_stage3_6 WHEN vShift_4 = '0' ELSE
      dout_stage3_14;

  c_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_6 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_6 <= dout_stage4_6;
      END IF;
    END IF;
  END PROCESS c_28_process;


  
  dout_stage3_22 <= dout_stage2_22 WHEN vShift_3 = '0' ELSE
      dout_stage2_26;

  
  dout_stage3_30 <= dout_stage2_30 WHEN vShift_3 = '0' ELSE
      dout_stage2_34;

  
  dout_stage4_22 <= dout_stage3_22 WHEN vShift_4 = '0' ELSE
      dout_stage3_30;

  c_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_22 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_22 <= dout_stage4_22;
      END IF;
    END IF;
  END PROCESS c_29_process;


  
  dout_stage5_6 <= dout_stage4Reg_6 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_22;

  
  dout_stage3_38 <= dout_stage2_38 WHEN vShift_3 = '0' ELSE
      dout_stage2_42;

  
  dout_stage3_46 <= dout_stage2_46 WHEN vShift_3 = '0' ELSE
      dout_stage2_50;

  
  dout_stage4_38 <= dout_stage3_38 WHEN vShift_4 = '0' ELSE
      dout_stage3_46;

  c_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_38 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_38 <= dout_stage4_38;
      END IF;
    END IF;
  END PROCESS c_30_process;


  
  dout_stage3_54 <= dout_stage2_54 WHEN vShift_3 = '0' ELSE
      dout_stage2_58;

  
  dout_stage3_62 <= dout_stage2_62 WHEN vShift_3 = '0' ELSE
      dout_stage2_66;

  
  dout_stage4_54 <= dout_stage3_54 WHEN vShift_4 = '0' ELSE
      dout_stage3_62;

  c_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_54 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_54 <= dout_stage4_54;
      END IF;
    END IF;
  END PROCESS c_31_process;


  
  dout_stage5_38 <= dout_stage4Reg_38 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_54;

  
  dout_stage6_6 <= dout_stage5_6 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_38;

  
  dout_stage3_70 <= dout_stage2_70 WHEN vShift_3 = '0' ELSE
      dout_stage2_74;

  
  dout_stage3_78 <= dout_stage2_78 WHEN vShift_3 = '0' ELSE
      dout_stage2_2;

  
  dout_stage4_70 <= dout_stage3_70 WHEN vShift_4 = '0' ELSE
      dout_stage3_78;

  c_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_70 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_70 <= dout_stage4_70;
      END IF;
    END IF;
  END PROCESS c_32_process;


  
  dout_stage5_70 <= dout_stage4Reg_70 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_6;

  
  dout_stage5_22 <= dout_stage4Reg_22 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_38;

  
  dout_stage6_70 <= dout_stage5_70 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_22;

  
  dout_stage7_6 <= dout_stage6_6 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_70;

  
  dout_stage3_7 <= dout_stage2_7 WHEN vShift_3 = '0' ELSE
      dout_stage2_11;

  
  dout_stage3_15 <= dout_stage2_15 WHEN vShift_3 = '0' ELSE
      dout_stage2_19;

  
  dout_stage4_7 <= dout_stage3_7 WHEN vShift_4 = '0' ELSE
      dout_stage3_15;

  c_33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_7 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_7 <= dout_stage4_7;
      END IF;
    END IF;
  END PROCESS c_33_process;


  
  dout_stage3_23 <= dout_stage2_23 WHEN vShift_3 = '0' ELSE
      dout_stage2_27;

  
  dout_stage3_31 <= dout_stage2_31 WHEN vShift_3 = '0' ELSE
      dout_stage2_35;

  
  dout_stage4_23 <= dout_stage3_23 WHEN vShift_4 = '0' ELSE
      dout_stage3_31;

  c_34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_23 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_23 <= dout_stage4_23;
      END IF;
    END IF;
  END PROCESS c_34_process;


  
  dout_stage5_7 <= dout_stage4Reg_7 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_23;

  
  dout_stage3_39 <= dout_stage2_39 WHEN vShift_3 = '0' ELSE
      dout_stage2_43;

  
  dout_stage3_47 <= dout_stage2_47 WHEN vShift_3 = '0' ELSE
      dout_stage2_51;

  
  dout_stage4_39 <= dout_stage3_39 WHEN vShift_4 = '0' ELSE
      dout_stage3_47;

  c_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_39 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_39 <= dout_stage4_39;
      END IF;
    END IF;
  END PROCESS c_35_process;


  
  dout_stage3_55 <= dout_stage2_55 WHEN vShift_3 = '0' ELSE
      dout_stage2_59;

  
  dout_stage3_63 <= dout_stage2_63 WHEN vShift_3 = '0' ELSE
      dout_stage2_67;

  
  dout_stage4_55 <= dout_stage3_55 WHEN vShift_4 = '0' ELSE
      dout_stage3_63;

  c_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_55 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_55 <= dout_stage4_55;
      END IF;
    END IF;
  END PROCESS c_36_process;


  
  dout_stage5_39 <= dout_stage4Reg_39 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_55;

  
  dout_stage6_7 <= dout_stage5_7 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_39;

  
  dout_stage3_71 <= dout_stage2_71 WHEN vShift_3 = '0' ELSE
      dout_stage2_75;

  
  dout_stage3_79 <= dout_stage2_79 WHEN vShift_3 = '0' ELSE
      dout_stage2_3;

  
  dout_stage4_71 <= dout_stage3_71 WHEN vShift_4 = '0' ELSE
      dout_stage3_79;

  c_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_71 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_71 <= dout_stage4_71;
      END IF;
    END IF;
  END PROCESS c_37_process;


  
  dout_stage5_71 <= dout_stage4Reg_71 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_7;

  
  dout_stage5_23 <= dout_stage4Reg_23 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_39;

  
  dout_stage6_71 <= dout_stage5_71 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_23;

  
  dout_stage7_7 <= dout_stage6_7 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_71;

  
  dout_stage3_8 <= dout_stage2_8 WHEN vShift_3 = '0' ELSE
      dout_stage2_12;

  
  dout_stage3_16 <= dout_stage2_16 WHEN vShift_3 = '0' ELSE
      dout_stage2_20;

  
  dout_stage4_8 <= dout_stage3_8 WHEN vShift_4 = '0' ELSE
      dout_stage3_16;

  c_38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_8 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_8 <= dout_stage4_8;
      END IF;
    END IF;
  END PROCESS c_38_process;


  
  dout_stage3_24 <= dout_stage2_24 WHEN vShift_3 = '0' ELSE
      dout_stage2_28;

  
  dout_stage3_32 <= dout_stage2_32 WHEN vShift_3 = '0' ELSE
      dout_stage2_36;

  
  dout_stage4_24 <= dout_stage3_24 WHEN vShift_4 = '0' ELSE
      dout_stage3_32;

  c_39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_24 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_24 <= dout_stage4_24;
      END IF;
    END IF;
  END PROCESS c_39_process;


  
  dout_stage5_8 <= dout_stage4Reg_8 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_24;

  
  dout_stage3_40 <= dout_stage2_40 WHEN vShift_3 = '0' ELSE
      dout_stage2_44;

  
  dout_stage3_48 <= dout_stage2_48 WHEN vShift_3 = '0' ELSE
      dout_stage2_52;

  
  dout_stage4_40 <= dout_stage3_40 WHEN vShift_4 = '0' ELSE
      dout_stage3_48;

  c_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_40 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_40 <= dout_stage4_40;
      END IF;
    END IF;
  END PROCESS c_40_process;


  
  dout_stage3_56 <= dout_stage2_56 WHEN vShift_3 = '0' ELSE
      dout_stage2_60;

  
  dout_stage3_64 <= dout_stage2_64 WHEN vShift_3 = '0' ELSE
      dout_stage2_68;

  
  dout_stage4_56 <= dout_stage3_56 WHEN vShift_4 = '0' ELSE
      dout_stage3_64;

  c_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_56 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_56 <= dout_stage4_56;
      END IF;
    END IF;
  END PROCESS c_41_process;


  
  dout_stage5_40 <= dout_stage4Reg_40 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_56;

  
  dout_stage6_8 <= dout_stage5_8 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_40;

  
  dout_stage3_72 <= dout_stage2_72 WHEN vShift_3 = '0' ELSE
      dout_stage2_76;

  
  dout_stage3_80 <= dout_stage2_80 WHEN vShift_3 = '0' ELSE
      dout_stage2_4;

  
  dout_stage4_72 <= dout_stage3_72 WHEN vShift_4 = '0' ELSE
      dout_stage3_80;

  c_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_72 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_72 <= dout_stage4_72;
      END IF;
    END IF;
  END PROCESS c_42_process;


  
  dout_stage5_72 <= dout_stage4Reg_72 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_8;

  
  dout_stage5_24 <= dout_stage4Reg_24 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_40;

  
  dout_stage6_72 <= dout_stage5_72 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_24;

  
  dout_stage7_8 <= dout_stage6_8 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_72;

  
  dout_stage4_9 <= dout_stage3_9 WHEN vShift_4 = '0' ELSE
      dout_stage3_17;

  c_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_9 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_9 <= dout_stage4_9;
      END IF;
    END IF;
  END PROCESS c_43_process;


  
  dout_stage4_25 <= dout_stage3_25 WHEN vShift_4 = '0' ELSE
      dout_stage3_33;

  c_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_25 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_25 <= dout_stage4_25;
      END IF;
    END IF;
  END PROCESS c_44_process;


  
  dout_stage5_9 <= dout_stage4Reg_9 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_25;

  
  dout_stage4_41 <= dout_stage3_41 WHEN vShift_4 = '0' ELSE
      dout_stage3_49;

  c_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_41 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_41 <= dout_stage4_41;
      END IF;
    END IF;
  END PROCESS c_45_process;


  
  dout_stage4_57 <= dout_stage3_57 WHEN vShift_4 = '0' ELSE
      dout_stage3_65;

  c_46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_57 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_57 <= dout_stage4_57;
      END IF;
    END IF;
  END PROCESS c_46_process;


  
  dout_stage5_41 <= dout_stage4Reg_41 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_57;

  
  dout_stage6_9 <= dout_stage5_9 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_41;

  
  dout_stage4_73 <= dout_stage3_73 WHEN vShift_4 = '0' ELSE
      dout_stage3_1;

  c_47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_73 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_73 <= dout_stage4_73;
      END IF;
    END IF;
  END PROCESS c_47_process;


  
  dout_stage5_73 <= dout_stage4Reg_73 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_9;

  
  dout_stage5_25 <= dout_stage4Reg_25 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_41;

  
  dout_stage6_73 <= dout_stage5_73 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_25;

  
  dout_stage7_9 <= dout_stage6_9 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_73;

  
  dout_stage4_10 <= dout_stage3_10 WHEN vShift_4 = '0' ELSE
      dout_stage3_18;

  c_48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_10 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_10 <= dout_stage4_10;
      END IF;
    END IF;
  END PROCESS c_48_process;


  
  dout_stage4_26 <= dout_stage3_26 WHEN vShift_4 = '0' ELSE
      dout_stage3_34;

  c_49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_26 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_26 <= dout_stage4_26;
      END IF;
    END IF;
  END PROCESS c_49_process;


  
  dout_stage5_10 <= dout_stage4Reg_10 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_26;

  
  dout_stage4_42 <= dout_stage3_42 WHEN vShift_4 = '0' ELSE
      dout_stage3_50;

  c_50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_42 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_42 <= dout_stage4_42;
      END IF;
    END IF;
  END PROCESS c_50_process;


  
  dout_stage4_58 <= dout_stage3_58 WHEN vShift_4 = '0' ELSE
      dout_stage3_66;

  c_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_58 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_58 <= dout_stage4_58;
      END IF;
    END IF;
  END PROCESS c_51_process;


  
  dout_stage5_42 <= dout_stage4Reg_42 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_58;

  
  dout_stage6_10 <= dout_stage5_10 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_42;

  
  dout_stage4_74 <= dout_stage3_74 WHEN vShift_4 = '0' ELSE
      dout_stage3_2;

  c_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_74 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_74 <= dout_stage4_74;
      END IF;
    END IF;
  END PROCESS c_52_process;


  
  dout_stage5_74 <= dout_stage4Reg_74 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_10;

  
  dout_stage5_26 <= dout_stage4Reg_26 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_42;

  
  dout_stage6_74 <= dout_stage5_74 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_26;

  
  dout_stage7_10 <= dout_stage6_10 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_74;

  
  dout_stage4_11 <= dout_stage3_11 WHEN vShift_4 = '0' ELSE
      dout_stage3_19;

  c_53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_11 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_11 <= dout_stage4_11;
      END IF;
    END IF;
  END PROCESS c_53_process;


  
  dout_stage4_27 <= dout_stage3_27 WHEN vShift_4 = '0' ELSE
      dout_stage3_35;

  c_54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_27 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_27 <= dout_stage4_27;
      END IF;
    END IF;
  END PROCESS c_54_process;


  
  dout_stage5_11 <= dout_stage4Reg_11 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_27;

  
  dout_stage4_43 <= dout_stage3_43 WHEN vShift_4 = '0' ELSE
      dout_stage3_51;

  c_55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_43 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_43 <= dout_stage4_43;
      END IF;
    END IF;
  END PROCESS c_55_process;


  
  dout_stage4_59 <= dout_stage3_59 WHEN vShift_4 = '0' ELSE
      dout_stage3_67;

  c_56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_59 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_59 <= dout_stage4_59;
      END IF;
    END IF;
  END PROCESS c_56_process;


  
  dout_stage5_43 <= dout_stage4Reg_43 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_59;

  
  dout_stage6_11 <= dout_stage5_11 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_43;

  
  dout_stage4_75 <= dout_stage3_75 WHEN vShift_4 = '0' ELSE
      dout_stage3_3;

  c_57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_75 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_75 <= dout_stage4_75;
      END IF;
    END IF;
  END PROCESS c_57_process;


  
  dout_stage5_75 <= dout_stage4Reg_75 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_11;

  
  dout_stage5_27 <= dout_stage4Reg_27 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_43;

  
  dout_stage6_75 <= dout_stage5_75 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_27;

  
  dout_stage7_11 <= dout_stage6_11 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_75;

  
  dout_stage4_12 <= dout_stage3_12 WHEN vShift_4 = '0' ELSE
      dout_stage3_20;

  c_58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_12 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_12 <= dout_stage4_12;
      END IF;
    END IF;
  END PROCESS c_58_process;


  
  dout_stage4_28 <= dout_stage3_28 WHEN vShift_4 = '0' ELSE
      dout_stage3_36;

  c_59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_28 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_28 <= dout_stage4_28;
      END IF;
    END IF;
  END PROCESS c_59_process;


  
  dout_stage5_12 <= dout_stage4Reg_12 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_28;

  
  dout_stage4_44 <= dout_stage3_44 WHEN vShift_4 = '0' ELSE
      dout_stage3_52;

  c_60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_44 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_44 <= dout_stage4_44;
      END IF;
    END IF;
  END PROCESS c_60_process;


  
  dout_stage4_60 <= dout_stage3_60 WHEN vShift_4 = '0' ELSE
      dout_stage3_68;

  c_61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_60 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_60 <= dout_stage4_60;
      END IF;
    END IF;
  END PROCESS c_61_process;


  
  dout_stage5_44 <= dout_stage4Reg_44 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_60;

  
  dout_stage6_12 <= dout_stage5_12 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_44;

  
  dout_stage4_76 <= dout_stage3_76 WHEN vShift_4 = '0' ELSE
      dout_stage3_4;

  c_62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_76 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_76 <= dout_stage4_76;
      END IF;
    END IF;
  END PROCESS c_62_process;


  
  dout_stage5_76 <= dout_stage4Reg_76 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_12;

  
  dout_stage5_28 <= dout_stage4Reg_28 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_44;

  
  dout_stage6_76 <= dout_stage5_76 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_28;

  
  dout_stage7_12 <= dout_stage6_12 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_76;

  
  dout_stage4_13 <= dout_stage3_13 WHEN vShift_4 = '0' ELSE
      dout_stage3_21;

  c_63_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_13 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_13 <= dout_stage4_13;
      END IF;
    END IF;
  END PROCESS c_63_process;


  
  dout_stage4_29 <= dout_stage3_29 WHEN vShift_4 = '0' ELSE
      dout_stage3_37;

  c_64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_29 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_29 <= dout_stage4_29;
      END IF;
    END IF;
  END PROCESS c_64_process;


  
  dout_stage5_13 <= dout_stage4Reg_13 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_29;

  
  dout_stage4_45 <= dout_stage3_45 WHEN vShift_4 = '0' ELSE
      dout_stage3_53;

  c_65_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_45 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_45 <= dout_stage4_45;
      END IF;
    END IF;
  END PROCESS c_65_process;


  
  dout_stage4_61 <= dout_stage3_61 WHEN vShift_4 = '0' ELSE
      dout_stage3_69;

  c_66_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_61 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_61 <= dout_stage4_61;
      END IF;
    END IF;
  END PROCESS c_66_process;


  
  dout_stage5_45 <= dout_stage4Reg_45 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_61;

  
  dout_stage6_13 <= dout_stage5_13 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_45;

  
  dout_stage4_77 <= dout_stage3_77 WHEN vShift_4 = '0' ELSE
      dout_stage3_5;

  c_67_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_77 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_77 <= dout_stage4_77;
      END IF;
    END IF;
  END PROCESS c_67_process;


  
  dout_stage5_77 <= dout_stage4Reg_77 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_13;

  
  dout_stage5_29 <= dout_stage4Reg_29 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_45;

  
  dout_stage6_77 <= dout_stage5_77 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_29;

  
  dout_stage7_13 <= dout_stage6_13 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_77;

  
  dout_stage4_14 <= dout_stage3_14 WHEN vShift_4 = '0' ELSE
      dout_stage3_22;

  c_68_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_14 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_14 <= dout_stage4_14;
      END IF;
    END IF;
  END PROCESS c_68_process;


  
  dout_stage4_30 <= dout_stage3_30 WHEN vShift_4 = '0' ELSE
      dout_stage3_38;

  c_69_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_30 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_30 <= dout_stage4_30;
      END IF;
    END IF;
  END PROCESS c_69_process;


  
  dout_stage5_14 <= dout_stage4Reg_14 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_30;

  
  dout_stage4_46 <= dout_stage3_46 WHEN vShift_4 = '0' ELSE
      dout_stage3_54;

  c_70_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_46 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_46 <= dout_stage4_46;
      END IF;
    END IF;
  END PROCESS c_70_process;


  
  dout_stage4_62 <= dout_stage3_62 WHEN vShift_4 = '0' ELSE
      dout_stage3_70;

  c_71_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_62 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_62 <= dout_stage4_62;
      END IF;
    END IF;
  END PROCESS c_71_process;


  
  dout_stage5_46 <= dout_stage4Reg_46 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_62;

  
  dout_stage6_14 <= dout_stage5_14 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_46;

  
  dout_stage4_78 <= dout_stage3_78 WHEN vShift_4 = '0' ELSE
      dout_stage3_6;

  c_72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_78 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_78 <= dout_stage4_78;
      END IF;
    END IF;
  END PROCESS c_72_process;


  
  dout_stage5_78 <= dout_stage4Reg_78 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_14;

  
  dout_stage5_30 <= dout_stage4Reg_30 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_46;

  
  dout_stage6_78 <= dout_stage5_78 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_30;

  
  dout_stage7_14 <= dout_stage6_14 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_78;

  
  dout_stage4_15 <= dout_stage3_15 WHEN vShift_4 = '0' ELSE
      dout_stage3_23;

  c_73_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_15 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_15 <= dout_stage4_15;
      END IF;
    END IF;
  END PROCESS c_73_process;


  
  dout_stage4_31 <= dout_stage3_31 WHEN vShift_4 = '0' ELSE
      dout_stage3_39;

  c_74_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_31 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_31 <= dout_stage4_31;
      END IF;
    END IF;
  END PROCESS c_74_process;


  
  dout_stage5_15 <= dout_stage4Reg_15 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_31;

  
  dout_stage4_47 <= dout_stage3_47 WHEN vShift_4 = '0' ELSE
      dout_stage3_55;

  c_75_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_47 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_47 <= dout_stage4_47;
      END IF;
    END IF;
  END PROCESS c_75_process;


  
  dout_stage4_63 <= dout_stage3_63 WHEN vShift_4 = '0' ELSE
      dout_stage3_71;

  c_76_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_63 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_63 <= dout_stage4_63;
      END IF;
    END IF;
  END PROCESS c_76_process;


  
  dout_stage5_47 <= dout_stage4Reg_47 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_63;

  
  dout_stage6_15 <= dout_stage5_15 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_47;

  
  dout_stage4_79 <= dout_stage3_79 WHEN vShift_4 = '0' ELSE
      dout_stage3_7;

  c_77_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_79 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_79 <= dout_stage4_79;
      END IF;
    END IF;
  END PROCESS c_77_process;


  
  dout_stage5_79 <= dout_stage4Reg_79 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_15;

  
  dout_stage5_31 <= dout_stage4Reg_31 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_47;

  
  dout_stage6_79 <= dout_stage5_79 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_31;

  
  dout_stage7_15 <= dout_stage6_15 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_79;

  
  dout_stage4_16 <= dout_stage3_16 WHEN vShift_4 = '0' ELSE
      dout_stage3_24;

  c_78_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_16 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_16 <= dout_stage4_16;
      END IF;
    END IF;
  END PROCESS c_78_process;


  
  dout_stage4_32 <= dout_stage3_32 WHEN vShift_4 = '0' ELSE
      dout_stage3_40;

  c_79_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_32 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_32 <= dout_stage4_32;
      END IF;
    END IF;
  END PROCESS c_79_process;


  
  dout_stage5_16 <= dout_stage4Reg_16 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_32;

  
  dout_stage4_48 <= dout_stage3_48 WHEN vShift_4 = '0' ELSE
      dout_stage3_56;

  c_80_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_48 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_48 <= dout_stage4_48;
      END IF;
    END IF;
  END PROCESS c_80_process;


  
  dout_stage4_64 <= dout_stage3_64 WHEN vShift_4 = '0' ELSE
      dout_stage3_72;

  c_81_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_64 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_64 <= dout_stage4_64;
      END IF;
    END IF;
  END PROCESS c_81_process;


  
  dout_stage5_48 <= dout_stage4Reg_48 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_64;

  
  dout_stage6_16 <= dout_stage5_16 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_48;

  
  dout_stage4_80 <= dout_stage3_80 WHEN vShift_4 = '0' ELSE
      dout_stage3_8;

  c_82_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_80 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_80 <= dout_stage4_80;
      END IF;
    END IF;
  END PROCESS c_82_process;


  
  dout_stage5_80 <= dout_stage4Reg_80 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_16;

  
  dout_stage5_32 <= dout_stage4Reg_32 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_48;

  
  dout_stage6_80 <= dout_stage5_80 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_32;

  
  dout_stage7_16 <= dout_stage6_16 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_80;

  
  dout_stage5_49 <= dout_stage4Reg_49 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_65;

  
  dout_stage6_17 <= dout_stage5_17 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_49;

  
  dout_stage7_17 <= dout_stage6_17 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_1;

  
  dout_stage5_50 <= dout_stage4Reg_50 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_66;

  
  dout_stage6_18 <= dout_stage5_18 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_50;

  
  dout_stage7_18 <= dout_stage6_18 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_2;

  
  dout_stage5_51 <= dout_stage4Reg_51 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_67;

  
  dout_stage6_19 <= dout_stage5_19 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_51;

  
  dout_stage7_19 <= dout_stage6_19 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_3;

  
  dout_stage5_52 <= dout_stage4Reg_52 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_68;

  
  dout_stage6_20 <= dout_stage5_20 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_52;

  
  dout_stage7_20 <= dout_stage6_20 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_4;

  
  dout_stage5_53 <= dout_stage4Reg_53 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_69;

  
  dout_stage6_21 <= dout_stage5_21 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_53;

  
  dout_stage7_21 <= dout_stage6_21 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_5;

  
  dout_stage5_54 <= dout_stage4Reg_54 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_70;

  
  dout_stage6_22 <= dout_stage5_22 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_54;

  
  dout_stage7_22 <= dout_stage6_22 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_6;

  
  dout_stage5_55 <= dout_stage4Reg_55 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_71;

  
  dout_stage6_23 <= dout_stage5_23 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_55;

  
  dout_stage7_23 <= dout_stage6_23 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_7;

  
  dout_stage5_56 <= dout_stage4Reg_56 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_72;

  
  dout_stage6_24 <= dout_stage5_24 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_56;

  
  dout_stage7_24 <= dout_stage6_24 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_8;

  
  dout_stage5_57 <= dout_stage4Reg_57 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_73;

  
  dout_stage6_25 <= dout_stage5_25 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_57;

  
  dout_stage7_25 <= dout_stage6_25 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_9;

  
  dout_stage5_58 <= dout_stage4Reg_58 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_74;

  
  dout_stage6_26 <= dout_stage5_26 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_58;

  
  dout_stage7_26 <= dout_stage6_26 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_10;

  
  dout_stage5_59 <= dout_stage4Reg_59 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_75;

  
  dout_stage6_27 <= dout_stage5_27 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_59;

  
  dout_stage7_27 <= dout_stage6_27 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_11;

  
  dout_stage5_60 <= dout_stage4Reg_60 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_76;

  
  dout_stage6_28 <= dout_stage5_28 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_60;

  
  dout_stage7_28 <= dout_stage6_28 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_12;

  
  dout_stage5_61 <= dout_stage4Reg_61 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_77;

  
  dout_stage6_29 <= dout_stage5_29 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_61;

  
  dout_stage7_29 <= dout_stage6_29 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_13;

  
  dout_stage5_62 <= dout_stage4Reg_62 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_78;

  
  dout_stage6_30 <= dout_stage5_30 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_62;

  
  dout_stage7_30 <= dout_stage6_30 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_14;

  
  dout_stage5_63 <= dout_stage4Reg_63 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_79;

  
  dout_stage6_31 <= dout_stage5_31 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_63;

  
  dout_stage7_31 <= dout_stage6_31 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_15;

  
  dout_stage5_64 <= dout_stage4Reg_64 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_80;

  
  dout_stage6_32 <= dout_stage5_32 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_64;

  
  dout_stage7_32 <= dout_stage6_32 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_16;

  
  dout_stage6_33 <= dout_stage5_33 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_65;

  
  dout_stage7_33 <= dout_stage6_33 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_17;

  
  dout_stage6_34 <= dout_stage5_34 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_66;

  
  dout_stage7_34 <= dout_stage6_34 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_18;

  
  dout_stage6_35 <= dout_stage5_35 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_67;

  
  dout_stage7_35 <= dout_stage6_35 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_19;

  
  dout_stage6_36 <= dout_stage5_36 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_68;

  
  dout_stage7_36 <= dout_stage6_36 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_20;

  
  dout_stage6_37 <= dout_stage5_37 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_69;

  
  dout_stage7_37 <= dout_stage6_37 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_21;

  
  dout_stage6_38 <= dout_stage5_38 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_70;

  
  dout_stage7_38 <= dout_stage6_38 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_22;

  
  dout_stage6_39 <= dout_stage5_39 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_71;

  
  dout_stage7_39 <= dout_stage6_39 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_23;

  
  dout_stage6_40 <= dout_stage5_40 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_72;

  
  dout_stage7_40 <= dout_stage6_40 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_24;

  
  dout_stage6_41 <= dout_stage5_41 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_73;

  
  dout_stage7_41 <= dout_stage6_41 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_25;

  
  dout_stage6_42 <= dout_stage5_42 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_74;

  
  dout_stage7_42 <= dout_stage6_42 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_26;

  
  dout_stage6_43 <= dout_stage5_43 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_75;

  
  dout_stage7_43 <= dout_stage6_43 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_27;

  
  dout_stage6_44 <= dout_stage5_44 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_76;

  
  dout_stage7_44 <= dout_stage6_44 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_28;

  
  dout_stage6_45 <= dout_stage5_45 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_77;

  
  dout_stage7_45 <= dout_stage6_45 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_29;

  
  dout_stage6_46 <= dout_stage5_46 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_78;

  
  dout_stage7_46 <= dout_stage6_46 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_30;

  
  dout_stage6_47 <= dout_stage5_47 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_79;

  
  dout_stage7_47 <= dout_stage6_47 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_31;

  
  dout_stage6_48 <= dout_stage5_48 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_80;

  
  dout_stage7_48 <= dout_stage6_48 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_32;

  
  dout_stage6_49 <= dout_stage5_49 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_1;

  
  dout_stage7_49 <= dout_stage6_49 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_33;

  
  dout_stage6_50 <= dout_stage5_50 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_2;

  
  dout_stage7_50 <= dout_stage6_50 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_34;

  
  dout_stage6_51 <= dout_stage5_51 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_3;

  
  dout_stage7_51 <= dout_stage6_51 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_35;

  
  dout_stage6_52 <= dout_stage5_52 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_4;

  
  dout_stage7_52 <= dout_stage6_52 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_36;

  
  dout_stage6_53 <= dout_stage5_53 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_5;

  
  dout_stage7_53 <= dout_stage6_53 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_37;

  
  dout_stage6_54 <= dout_stage5_54 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_6;

  
  dout_stage7_54 <= dout_stage6_54 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_38;

  
  dout_stage6_55 <= dout_stage5_55 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_7;

  
  dout_stage7_55 <= dout_stage6_55 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_39;

  
  dout_stage6_56 <= dout_stage5_56 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_8;

  
  dout_stage7_56 <= dout_stage6_56 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_40;

  
  dout_stage6_57 <= dout_stage5_57 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_9;

  
  dout_stage7_57 <= dout_stage6_57 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_41;

  
  dout_stage6_58 <= dout_stage5_58 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_10;

  
  dout_stage7_58 <= dout_stage6_58 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_42;

  
  dout_stage6_59 <= dout_stage5_59 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_11;

  
  dout_stage7_59 <= dout_stage6_59 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_43;

  
  dout_stage6_60 <= dout_stage5_60 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_12;

  
  dout_stage7_60 <= dout_stage6_60 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_44;

  
  dout_stage6_61 <= dout_stage5_61 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_13;

  
  dout_stage7_61 <= dout_stage6_61 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_45;

  
  dout_stage6_62 <= dout_stage5_62 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_14;

  
  dout_stage7_62 <= dout_stage6_62 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_46;

  
  dout_stage6_63 <= dout_stage5_63 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_15;

  
  dout_stage7_63 <= dout_stage6_63 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_47;

  
  dout_stage6_64 <= dout_stage5_64 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_16;

  
  dout_stage7_64 <= dout_stage6_64 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_48;

  
  dout_stage7_65 <= dout_stage6_65 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_49;

  
  dout_stage7_66 <= dout_stage6_66 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_50;

  
  dout_stage7_67 <= dout_stage6_67 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_51;

  
  dout_stage7_68 <= dout_stage6_68 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_52;

  
  dout_stage7_69 <= dout_stage6_69 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_53;

  
  dout_stage7_70 <= dout_stage6_70 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_54;

  
  dout_stage7_71 <= dout_stage6_71 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_55;

  
  dout_stage7_72 <= dout_stage6_72 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_56;

  
  dout_stage7_73 <= dout_stage6_73 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_57;

  
  dout_stage7_74 <= dout_stage6_74 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_58;

  
  dout_stage7_75 <= dout_stage6_75 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_59;

  
  dout_stage7_76 <= dout_stage6_76 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_60;

  
  dout_stage7_77 <= dout_stage6_77 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_61;

  
  dout_stage7_78 <= dout_stage6_78 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_62;

  
  dout_stage7_79 <= dout_stage6_79 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_63;

  
  dout_stage7_80 <= dout_stage6_80 WHEN vShiftReg_7 = '0' ELSE
      dout_stage6_64;

  shiftData_tmp(0) <= dout_stage7_1;
  shiftData_tmp(1) <= dout_stage7_2;
  shiftData_tmp(2) <= dout_stage7_3;
  shiftData_tmp(3) <= dout_stage7_4;
  shiftData_tmp(4) <= dout_stage7_5;
  shiftData_tmp(5) <= dout_stage7_6;
  shiftData_tmp(6) <= dout_stage7_7;
  shiftData_tmp(7) <= dout_stage7_8;
  shiftData_tmp(8) <= dout_stage7_9;
  shiftData_tmp(9) <= dout_stage7_10;
  shiftData_tmp(10) <= dout_stage7_11;
  shiftData_tmp(11) <= dout_stage7_12;
  shiftData_tmp(12) <= dout_stage7_13;
  shiftData_tmp(13) <= dout_stage7_14;
  shiftData_tmp(14) <= dout_stage7_15;
  shiftData_tmp(15) <= dout_stage7_16;
  shiftData_tmp(16) <= dout_stage7_17;
  shiftData_tmp(17) <= dout_stage7_18;
  shiftData_tmp(18) <= dout_stage7_19;
  shiftData_tmp(19) <= dout_stage7_20;
  shiftData_tmp(20) <= dout_stage7_21;
  shiftData_tmp(21) <= dout_stage7_22;
  shiftData_tmp(22) <= dout_stage7_23;
  shiftData_tmp(23) <= dout_stage7_24;
  shiftData_tmp(24) <= dout_stage7_25;
  shiftData_tmp(25) <= dout_stage7_26;
  shiftData_tmp(26) <= dout_stage7_27;
  shiftData_tmp(27) <= dout_stage7_28;
  shiftData_tmp(28) <= dout_stage7_29;
  shiftData_tmp(29) <= dout_stage7_30;
  shiftData_tmp(30) <= dout_stage7_31;
  shiftData_tmp(31) <= dout_stage7_32;
  shiftData_tmp(32) <= dout_stage7_33;
  shiftData_tmp(33) <= dout_stage7_34;
  shiftData_tmp(34) <= dout_stage7_35;
  shiftData_tmp(35) <= dout_stage7_36;
  shiftData_tmp(36) <= dout_stage7_37;
  shiftData_tmp(37) <= dout_stage7_38;
  shiftData_tmp(38) <= dout_stage7_39;
  shiftData_tmp(39) <= dout_stage7_40;
  shiftData_tmp(40) <= dout_stage7_41;
  shiftData_tmp(41) <= dout_stage7_42;
  shiftData_tmp(42) <= dout_stage7_43;
  shiftData_tmp(43) <= dout_stage7_44;
  shiftData_tmp(44) <= dout_stage7_45;
  shiftData_tmp(45) <= dout_stage7_46;
  shiftData_tmp(46) <= dout_stage7_47;
  shiftData_tmp(47) <= dout_stage7_48;
  shiftData_tmp(48) <= dout_stage7_49;
  shiftData_tmp(49) <= dout_stage7_50;
  shiftData_tmp(50) <= dout_stage7_51;
  shiftData_tmp(51) <= dout_stage7_52;
  shiftData_tmp(52) <= dout_stage7_53;
  shiftData_tmp(53) <= dout_stage7_54;
  shiftData_tmp(54) <= dout_stage7_55;
  shiftData_tmp(55) <= dout_stage7_56;
  shiftData_tmp(56) <= dout_stage7_57;
  shiftData_tmp(57) <= dout_stage7_58;
  shiftData_tmp(58) <= dout_stage7_59;
  shiftData_tmp(59) <= dout_stage7_60;
  shiftData_tmp(60) <= dout_stage7_61;
  shiftData_tmp(61) <= dout_stage7_62;
  shiftData_tmp(62) <= dout_stage7_63;
  shiftData_tmp(63) <= dout_stage7_64;
  shiftData_tmp(64) <= dout_stage7_65;
  shiftData_tmp(65) <= dout_stage7_66;
  shiftData_tmp(66) <= dout_stage7_67;
  shiftData_tmp(67) <= dout_stage7_68;
  shiftData_tmp(68) <= dout_stage7_69;
  shiftData_tmp(69) <= dout_stage7_70;
  shiftData_tmp(70) <= dout_stage7_71;
  shiftData_tmp(71) <= dout_stage7_72;
  shiftData_tmp(72) <= dout_stage7_73;
  shiftData_tmp(73) <= dout_stage7_74;
  shiftData_tmp(74) <= dout_stage7_75;
  shiftData_tmp(75) <= dout_stage7_76;
  shiftData_tmp(76) <= dout_stage7_77;
  shiftData_tmp(77) <= dout_stage7_78;
  shiftData_tmp(78) <= dout_stage7_79;
  shiftData_tmp(79) <= dout_stage7_80;

  outputgen: FOR k IN 0 TO 79 GENERATE
    shiftData(k) <= std_logic_vector(shiftData_tmp(k));
  END GENERATE;

END rtl;

