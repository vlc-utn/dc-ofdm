-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_OFDM_Modulator.vhd
-- Created: 2024-11-13 11:48:23
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_OFDM_Modulator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator/OFDM Modulator
-- Hierarchy Level: 3
-- Model version: 4.212
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_TX_src_full_tx_pac.ALL;

ENTITY IEEE_8021513_TX_src_OFDM_Modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid                             :   IN    std_logic;
        FFTLen                            :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        CPLen                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        numLgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        numRgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        reset                             :   IN    std_logic;
        data_re_1                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_im_1                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_1                           :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END IEEE_8021513_TX_src_OFDM_Modulator;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_OFDM_Modulator IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_symbolFormation
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_4                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_5                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_6                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_7                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargout_4                     :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_samplesRepetitionMod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_4                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_5                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          varargout_4                     :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_dsphdl_IFFT
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          startOut                        :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_DownSamplerMod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_4                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_HDLFFTShiftMod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_4                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_CPAddition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_symbolFormation
    USE ENTITY work.IEEE_8021513_TX_src_symbolFormation(rtl);

  FOR ALL : IEEE_8021513_TX_src_samplesRepetitionMod
    USE ENTITY work.IEEE_8021513_TX_src_samplesRepetitionMod(rtl);

  FOR ALL : IEEE_8021513_TX_src_dsphdl_IFFT
    USE ENTITY work.IEEE_8021513_TX_src_dsphdl_IFFT(rtl);

  FOR ALL : IEEE_8021513_TX_src_DownSamplerMod
    USE ENTITY work.IEEE_8021513_TX_src_DownSamplerMod(rtl);

  FOR ALL : IEEE_8021513_TX_src_HDLFFTShiftMod
    USE ENTITY work.IEEE_8021513_TX_src_HDLFFTShiftMod(rtl);

  FOR ALL : IEEE_8021513_TX_src_CPAddition
    USE ENTITY work.IEEE_8021513_TX_src_CPAddition(rtl);

  -- Signals
  SIGNAL out_rsvd                         : std_logic;
  SIGNAL out_rsvd_1                       : std_logic;
  SIGNAL obj_readyLowFlag                 : std_logic;
  SIGNAL obj_readyLowFlag_1               : std_logic;
  SIGNAL out_rsvd_2                       : std_logic;
  SIGNAL out_rsvd_3                       : std_logic;
  SIGNAL obj_readyLowCount                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLowCount_1              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_validInHighCount             : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_sampleInputs                 : std_logic;
  SIGNAL obj_sampleInputs_1               : std_logic;
  SIGNAL out_rsvd_4                       : std_logic;
  SIGNAL out_rsvd_5                       : std_logic;
  SIGNAL obj_CPLengthReg                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL CPLen_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL tmp                              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_FFTLengthReg                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL FFTLen_unsigned                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_1                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_insertDC                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numLgScReg                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL numLgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_2                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numRgScReg                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL numRgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_3                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLowFlag_2               : std_logic;
  SIGNAL out_rsvd_6                       : std_logic;
  SIGNAL out_rsvd_7                       : std_logic;
  SIGNAL obj_validInHighFlag              : std_logic;
  SIGNAL obj_validInHighFlag_1            : std_logic;
  SIGNAL out_rsvd_8                       : std_logic;
  SIGNAL out_rsvd_9                       : std_logic;
  SIGNAL obj_validInHighCount_1           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_validInHighFlag_2            : std_logic;
  SIGNAL out_rsvd_10                      : std_logic;
  SIGNAL out_rsvd_11                      : std_logic;
  SIGNAL obj_readyOut                     : std_logic;
  SIGNAL obj_readyOut_1                   : std_logic;
  SIGNAL obj_readyOut_2                   : std_logic;
  SIGNAL obj_readyOut_3                   : std_logic;
  SIGNAL obj_delayedReady                 : std_logic;
  SIGNAL out_rsvd_12                      : std_logic;
  SIGNAL out_rsvd_13                      : std_logic;
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : std_logic;
  SIGNAL tmp_6                            : std_logic;
  SIGNAL tmp_7                            : std_logic;
  SIGNAL obj_validInHighCount_2           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_8                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_9                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_10                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_11                           : std_logic;
  SIGNAL tmp_12                           : std_logic;
  SIGNAL tmp_13                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_14                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numRgScReg_1                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_15                           : std_logic;
  SIGNAL tmp_16                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_17                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numLgScReg_1                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_18                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_19                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_FFTLengthReg_1               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numDataSc                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_20                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_21                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_CPLengthReg_1                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_22                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_23                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_24                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_25                           : std_logic;
  SIGNAL tmp_26                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_27                           : std_logic;
  SIGNAL obj_sampleInputs_2               : std_logic;
  SIGNAL tmp_28                           : std_logic;
  SIGNAL tmp_29                           : std_logic;
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : std_logic;
  SIGNAL obj_maxFFTPlusCP                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLow                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLowCount_2              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_32                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_33                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_34                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_35                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_36                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_37                           : std_logic;
  SIGNAL tmp_38                           : std_logic;
  SIGNAL tmp_39                           : std_logic;
  SIGNAL tmp_40                           : std_logic;
  SIGNAL tmp_41                           : std_logic;
  SIGNAL tmp_42                           : std_logic;
  SIGNAL obj_readyLowFlag_3               : std_logic;
  SIGNAL obj_validInHighFlag_3            : std_logic;
  SIGNAL s                                : std_logic;
  SIGNAL tmp_43                           : std_logic;
  SIGNAL tmp_44                           : std_logic;
  SIGNAL tmp_45                           : std_logic;
  SIGNAL tmp_46                           : std_logic;
  SIGNAL tmp_47                           : std_logic;
  SIGNAL tmp_48                           : std_logic;
  SIGNAL tmp_49                           : std_logic;
  SIGNAL tmp_50                           : std_logic;
  SIGNAL tmp_51                           : std_logic;
  SIGNAL tmp_52                           : std_logic;
  SIGNAL tmp_53                           : std_logic;
  SIGNAL tmp_54                           : std_logic;
  SIGNAL obj_delayedReady_1               : std_logic;
  SIGNAL s_1                              : std_logic;
  SIGNAL varargout_1_re                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2                      : std_logic;
  SIGNAL varargout_3                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL varargout_4                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL varargout_1_re_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_1                    : std_logic;
  SIGNAL varargout_3_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_4_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_1_re_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_2                    : std_logic;
  SIGNAL varargout_3_2                    : std_logic;
  SIGNAL tmp_55                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_3_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_fftInFFTDelayBal             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel                              : std_logic;
  SIGNAL obj_countReg                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_countReg_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_countReg_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_56                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL s_2                              : std_logic;
  SIGNAL tmp_57                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_58                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_59                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL s_3                              : std_logic;
  SIGNAL sel_1                            : std_logic;
  SIGNAL out_rsvd_14                      : std_logic;
  SIGNAL sel_2                            : std_logic;
  SIGNAL sel_2_1                          : std_logic;
  SIGNAL obj_index                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index_2                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_60                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL s_4                              : std_logic;
  SIGNAL tmp_61                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_62                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_63                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_64                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_65                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_66                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_FFTReg                       : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_67                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_FFTReg_1                     : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_5                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_index1                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index1_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index1_2                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_68                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL s_6                              : std_logic;
  SIGNAL tmp_69                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_70                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_71                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_72                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_FFTRegDelay                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_FFTRegDelay_1                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_73                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_74                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_75                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_76                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_77                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_cpInFFTDelayBal              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel_3                            : std_logic;
  SIGNAL sel_4                            : std_logic;
  SIGNAL out_rsvd_15                      : std_logic;
  SIGNAL sel_2_2                          : std_logic;
  SIGNAL sel_2_3                          : std_logic;
  SIGNAL tmp_78                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_79                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_cpReg                        : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_80                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_cpReg_1                      : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_7                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_81                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_cpRegDelay                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_cpRegDelay_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_82                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_83                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_84                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_85                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_3                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_3                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_3                    : std_logic;
  SIGNAL varargout_3_3                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_2                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_4                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_4                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_4                    : std_logic;
  SIGNAL varargout_3_4                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_3                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_5                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_5                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_5                    : std_logic;
  SIGNAL varargout_1_re_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL varargout_1_im_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_dataOut_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_dataOut_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_re                           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_im                           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_dataOut_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_dataOut_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_validOut                     : std_logic;
  SIGNAL tmp_86                           : std_logic;
  SIGNAL obj_validOut_1                   : std_logic;
  SIGNAL obj_numDataSc_1                  : std_logic;
  SIGNAL tmp_87                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLast                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_88                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_89                           : std_logic;
  SIGNAL obj_readyFlag                    : std_logic;
  SIGNAL obj_readyLow_1                   : std_logic;
  SIGNAL obj_readyFlag_1                  : std_logic;
  SIGNAL obj_readyFlag_2                  : std_logic;
  SIGNAL tmp_90                           : std_logic;
  SIGNAL obj_readyFlag_3                  : std_logic;
  SIGNAL s_8                              : std_logic;
  SIGNAL obj_readyFlag_4                  : std_logic;
  SIGNAL tmp_91                           : std_logic;
  SIGNAL tmp_92                           : std_logic;
  SIGNAL tmp_93                           : std_logic;
  SIGNAL tmp_94                           : std_logic;
  SIGNAL obj_triggerReady                 : std_logic;
  SIGNAL obj_triggerReady_1               : std_logic;
  SIGNAL obj_triggerReady_2               : std_logic;
  SIGNAL obj_triggerReady_3               : std_logic;
  SIGNAL tmp_95                           : std_logic;
  SIGNAL tmp_96                           : std_logic;
  SIGNAL tmp_97                           : std_logic;
  SIGNAL tmp_98                           : std_logic;
  SIGNAL obj_readyOut_4                   : std_logic;
  SIGNAL tmp_99                           : std_logic;
  SIGNAL obj_readyOut_5                   : std_logic;
  SIGNAL varargout_3_5                    : std_logic;
  SIGNAL tmp_100                          : std_logic;
  SIGNAL varargout_3_6                    : std_logic;
  SIGNAL tmp_101                          : std_logic;

BEGIN
  u_symbolFormation : IEEE_8021513_TX_src_symbolFormation
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => data_re,  -- sfix16_En14
              varargin_1_im => data_im,  -- sfix16_En14
              varargin_2 => tmp_30,
              varargin_3 => std_logic_vector(tmp_18),  -- ufix14
              varargin_4 => std_logic_vector(tmp_20),  -- ufix14
              varargin_5 => std_logic_vector(tmp_16),  -- ufix14
              varargin_6 => std_logic_vector(tmp_13),  -- ufix14
              varargin_7 => reset,
              varargout_1_re => varargout_1_re,  -- sfix16_En14
              varargout_1_im => varargout_1_im,  -- sfix16_En14
              varargout_2 => varargout_2,
              varargout_3 => varargout_3,  -- ufix14
              varargout_4 => varargout_4  -- ufix14
              );

  u_samplesRepetitionMod : IEEE_8021513_TX_src_samplesRepetitionMod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re,  -- sfix16_En14
              varargin_1_im => varargout_1_im,  -- sfix16_En14
              varargin_2 => varargout_2,
              varargin_3 => varargout_3,  -- ufix14
              varargin_4 => varargout_4,  -- ufix14
              varargin_5 => reset,
              varargout_1_re => varargout_1_re_1,  -- sfix16_En14
              varargout_1_im => varargout_1_im_1,  -- sfix16_En14
              varargout_2 => varargout_2_1,
              varargout_3 => varargout_3_1,  -- ufix9
              varargout_4 => varargout_4_1  -- ufix9
              );

  u_dsphdl_IFFT : IEEE_8021513_TX_src_dsphdl_IFFT
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              dataIn_re => varargout_1_re_1,  -- sfix16_En14
              dataIn_im => varargout_1_im_1,  -- sfix16_En14
              validIn => varargout_2_1,
              syncReset => reset,
              dataOut_re => varargout_1_re_2,  -- sfix16_En14
              dataOut_im => varargout_1_im_2,  -- sfix16_En14
              startOut => varargout_2_2,
              validOut => varargout_3_2
              );

  u_DownSamplerMod : IEEE_8021513_TX_src_DownSamplerMod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_2,  -- sfix16_En14
              varargin_1_im => varargout_1_im_2,  -- sfix16_En14
              varargin_2 => varargout_3_2,
              varargin_3 => std_logic_vector(tmp_76),  -- ufix10
              varargin_4 => std_logic_vector(tmp_85),  -- ufix10
              varargin_5 => reset,
              varargout_1_re => varargout_1_re_3,  -- sfix16_En14
              varargout_1_im => varargout_1_im_3,  -- sfix16_En14
              varargout_2 => varargout_2_3,
              varargout_3 => varargout_3_3,  -- ufix10
              varargout_4 => varargout_4_2  -- ufix10
              );

  u_HDLFFTShiftMod : IEEE_8021513_TX_src_HDLFFTShiftMod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_3,  -- sfix16_En14
              varargin_1_im => varargout_1_im_3,  -- sfix16_En14
              varargin_2 => varargout_2_3,
              varargin_3 => varargout_3_3,  -- ufix10
              varargin_4 => varargout_4_2,  -- ufix10
              varargin_5 => reset,
              varargout_1_re => varargout_1_re_4,  -- sfix16_En14
              varargout_1_im => varargout_1_im_4,  -- sfix16_En14
              varargout_2 => varargout_2_4,
              varargout_3 => varargout_3_4,  -- ufix10
              varargout_4 => varargout_4_3  -- ufix10
              );

  u_CPAddition : IEEE_8021513_TX_src_CPAddition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_4,  -- sfix16_En14
              varargin_1_im => varargout_1_im_4,  -- sfix16_En14
              varargin_2 => varargout_2_4,
              varargin_3 => varargout_3_4,  -- ufix10
              varargin_4 => varargout_4_3,  -- ufix10
              varargin_5 => reset,
              varargout_1_re => varargout_1_re_5,  -- sfix16_En14
              varargout_1_im => varargout_1_im_5,  -- sfix16_En14
              varargout_2 => varargout_2_5
              );

  out_rsvd <= '0';

  out_rsvd_1 <= '1';

  obj_readyLowFlag <= '0';

  obj_readyLowFlag_1 <= '0';

  out_rsvd_2 <= '0';

  out_rsvd_3 <= '1';

  obj_readyLowCount <= to_unsigned(16#0000#, 14);

  obj_readyLowCount_1 <= to_unsigned(16#0000#, 14);

  obj_validInHighCount <= to_unsigned(16#0000#, 14);

  obj_sampleInputs <= '1';

  obj_sampleInputs_1 <= '1';

  out_rsvd_4 <= '0';

  out_rsvd_5 <= '1';

  obj_CPLengthReg <= to_unsigned(16#0010#, 14);

  CPLen_unsigned <= unsigned(CPLen);

  tmp <= resize(CPLen_unsigned, 14);

  obj_FFTLengthReg <= to_unsigned(16#0040#, 14);

  FFTLen_unsigned <= unsigned(FFTLen);

  tmp_1 <= resize(FFTLen_unsigned, 14);

  obj_insertDC <= to_unsigned(16#0000#, 14);

  obj_numLgScReg <= to_unsigned(16#0006#, 14);

  numLgSc_unsigned <= unsigned(numLgSc);

  tmp_2 <= resize(numLgSc_unsigned, 14);

  obj_numRgScReg <= to_unsigned(16#0005#, 14);

  numRgSc_unsigned <= unsigned(numRgSc);

  tmp_3 <= resize(numRgSc_unsigned, 14);

  obj_readyLowFlag_2 <= '1';

  out_rsvd_6 <= '0';

  out_rsvd_7 <= '1';

  obj_validInHighFlag <= '0';

  obj_validInHighFlag_1 <= '0';

  out_rsvd_8 <= '0';

  out_rsvd_9 <= '1';

  obj_validInHighCount_1 <= to_unsigned(16#0000#, 14);

  obj_validInHighFlag_2 <= '1';

  out_rsvd_10 <= '0';

  out_rsvd_11 <= '1';

  obj_readyOut <= '1';

  obj_readyOut_1 <= '1';

  obj_readyOut_2 <= '0';

  obj_readyOut_3 <= '1';

  obj_delayedReady <= '1';

  out_rsvd_12 <= '0';

  out_rsvd_13 <= '1';

  
  tmp_5 <= obj_readyOut WHEN tmp_4 = '0' ELSE
      obj_readyOut_1;

  
  tmp_7 <= tmp_5 WHEN tmp_6 = '0' ELSE
      obj_readyOut_2;

  tmp_8 <= obj_validInHighCount_2 + to_unsigned(16#0001#, 14);

  
  tmp_10 <= tmp_9 WHEN reset = '0' ELSE
      obj_validInHighCount_1;

  obj_validInHighCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validInHighCount_2 <= to_unsigned(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_validInHighCount_2 <= tmp_10;
      END IF;
    END IF;
  END PROCESS obj_validInHighCount_reg_process;


  
  tmp_12 <= tmp_11 WHEN tmp_4 = '0' ELSE
      obj_validInHighFlag;

  
  tmp_14 <= tmp_13 WHEN reset = '0' ELSE
      obj_numRgScReg;

  obj_numRgScReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_numRgScReg_1 <= to_unsigned(16#0005#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_numRgScReg_1 <= tmp_14;
      END IF;
    END IF;
  END PROCESS obj_numRgScReg_reg_process;


  
  tmp_13 <= obj_numRgScReg_1 WHEN tmp_15 = '0' ELSE
      tmp_3;

  
  tmp_17 <= tmp_16 WHEN reset = '0' ELSE
      obj_numLgScReg;

  obj_numLgScReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_numLgScReg_1 <= to_unsigned(16#0006#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_numLgScReg_1 <= tmp_17;
      END IF;
    END IF;
  END PROCESS obj_numLgScReg_reg_process;


  
  tmp_16 <= obj_numLgScReg_1 WHEN tmp_15 = '0' ELSE
      tmp_2;

  
  tmp_19 <= tmp_18 WHEN reset = '0' ELSE
      obj_FFTLengthReg;

  obj_FFTLengthReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTLengthReg_1 <= to_unsigned(16#0040#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTLengthReg_1 <= tmp_19;
      END IF;
    END IF;
  END PROCESS obj_FFTLengthReg_reg_process;


  
  tmp_18 <= obj_FFTLengthReg_1 WHEN tmp_15 = '0' ELSE
      tmp_1;

  obj_numDataSc <= tmp_18 - (obj_insertDC + (tmp_16 + tmp_13));

  
  tmp_21 <= tmp_20 WHEN reset = '0' ELSE
      obj_CPLengthReg;

  obj_CPLengthReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_CPLengthReg_1 <= to_unsigned(16#0010#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_CPLengthReg_1 <= tmp_21;
      END IF;
    END IF;
  END PROCESS obj_CPLengthReg_reg_process;


  
  tmp_23 <= tmp_22 WHEN tmp_4 = '0' ELSE
      obj_validInHighCount;

  
  tmp_24 <= tmp_23 WHEN tmp_6 = '0' ELSE
      tmp_22;

  
  tmp_9 <= tmp_24 WHEN tmp_25 = '0' ELSE
      tmp_22;

  
  tmp_27 <= '1' WHEN (tmp_9 = to_unsigned(16#0000#, 14)) AND (tmp_26 = to_unsigned(16#0000#, 14)) ELSE
      '0';

  
  tmp_28 <= obj_sampleInputs_2 WHEN tmp_27 = '0' ELSE
      obj_sampleInputs;

  
  tmp_29 <= tmp_28 WHEN reset = '0' ELSE
      obj_sampleInputs_1;

  obj_sampleInputs_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_sampleInputs_2 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_sampleInputs_2 <= tmp_29;
      END IF;
    END IF;
  END PROCESS obj_sampleInputs_reg_process;


  tmp_31 <= tmp_30 AND obj_sampleInputs_2;

  
  tmp_15 <= out_rsvd_4 WHEN tmp_31 = '0' ELSE
      out_rsvd_5;

  
  tmp_20 <= obj_CPLengthReg_1 WHEN tmp_15 = '0' ELSE
      tmp;

  obj_maxFFTPlusCP <= tmp_20 + to_unsigned(16#0100#, 14);

  obj_readyLow <= obj_maxFFTPlusCP - obj_numDataSc;

  tmp_32 <= obj_readyLowCount_2 + to_unsigned(16#0001#, 14);

  
  tmp_34 <= tmp_33 WHEN tmp_4 = '0' ELSE
      obj_readyLowCount;

  
  tmp_35 <= tmp_34 WHEN tmp_6 = '0' ELSE
      tmp_33;

  
  tmp_26 <= tmp_35 WHEN tmp_25 = '0' ELSE
      tmp_33;

  
  tmp_36 <= tmp_26 WHEN reset = '0' ELSE
      obj_readyLowCount_1;

  obj_readyLowCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyLowCount_2 <= to_unsigned(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyLowCount_2 <= tmp_36;
      END IF;
    END IF;
  END PROCESS obj_readyLowCount_reg_process;


  tmp_38 <= tmp_11 AND tmp_37;

  
  tmp_4 <= out_rsvd WHEN tmp_38 = '0' ELSE
      out_rsvd_1;

  
  tmp_39 <= tmp_37 WHEN tmp_4 = '0' ELSE
      obj_readyLowFlag;

  
  tmp_40 <= tmp_39 WHEN tmp_6 = '0' ELSE
      tmp_37;

  
  tmp_41 <= tmp_40 WHEN tmp_25 = '0' ELSE
      tmp_37;

  
  tmp_42 <= tmp_41 WHEN reset = '0' ELSE
      obj_readyLowFlag_1;

  obj_readyLowFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyLowFlag_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyLowFlag_3 <= tmp_42;
      END IF;
    END IF;
  END PROCESS obj_readyLowFlag_reg_process;


  s <= obj_validInHighFlag_3 AND ( NOT obj_readyLowFlag_3);

  
  tmp_43 <= out_rsvd_2 WHEN s = '0' ELSE
      out_rsvd_3;

  
  tmp_33 <= obj_readyLowCount_2 WHEN tmp_43 = '0' ELSE
      tmp_32;

  
  tmp_44 <= '1' WHEN tmp_33 = obj_readyLow ELSE
      '0';

  
  tmp_37 <= obj_readyLowFlag_3 WHEN tmp_44 = '0' ELSE
      obj_readyLowFlag_2;

  tmp_45 <= tmp_11 AND ( NOT tmp_37);

  
  tmp_6 <= out_rsvd_6 WHEN tmp_45 = '0' ELSE
      out_rsvd_7;

  
  tmp_46 <= tmp_12 WHEN tmp_6 = '0' ELSE
      tmp_11;

  
  tmp_47 <= tmp_46 WHEN tmp_25 = '0' ELSE
      tmp_11;

  
  tmp_48 <= tmp_47 WHEN reset = '0' ELSE
      obj_validInHighFlag_1;

  obj_validInHighFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validInHighFlag_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validInHighFlag_3 <= tmp_48;
      END IF;
    END IF;
  END PROCESS obj_validInHighFlag_reg_process;


  tmp_49 <= tmp_30 AND ( NOT obj_validInHighFlag_3);

  
  tmp_50 <= out_rsvd_8 WHEN tmp_49 = '0' ELSE
      out_rsvd_9;

  
  tmp_22 <= obj_validInHighCount_2 WHEN tmp_50 = '0' ELSE
      tmp_8;

  
  tmp_51 <= '1' WHEN tmp_22 = obj_numDataSc ELSE
      '0';

  
  tmp_11 <= obj_validInHighFlag_3 WHEN tmp_51 = '0' ELSE
      obj_validInHighFlag_2;

  tmp_52 <= ( NOT tmp_11) AND ( NOT tmp_37);

  
  tmp_25 <= out_rsvd_10 WHEN tmp_52 = '0' ELSE
      out_rsvd_11;

  
  tmp_53 <= tmp_7 WHEN tmp_25 = '0' ELSE
      obj_readyOut_3;

  
  tmp_54 <= tmp_53 WHEN reset = '0' ELSE
      obj_delayedReady;

  obj_delayedReady_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_delayedReady_1 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_delayedReady_1 <= tmp_54;
      END IF;
    END IF;
  END PROCESS obj_delayedReady_reg_process;


  s_1 <= obj_delayedReady_1 AND valid;

  
  tmp_30 <= out_rsvd_12 WHEN s_1 = '0' ELSE
      out_rsvd_13;

  tmp_55 <= to_unsigned(16#040#, 10);

  varargout_3_unsigned <= unsigned(varargout_3_1);

  obj_fftInFFTDelayBal <= resize(varargout_3_unsigned, 10);

  sel <= '0';

  obj_countReg <= to_unsigned(16#000#, 10);

  obj_countReg_1 <= to_unsigned(16#000#, 10);

  tmp_56 <= obj_countReg_2 + to_unsigned(16#001#, 10);

  
  s_2 <= '1' WHEN obj_countReg_2 = to_unsigned(16#0FF#, 10) ELSE
      '0';

  
  tmp_57 <= tmp_56 WHEN s_2 = '0' ELSE
      obj_countReg;

  
  tmp_58 <= obj_countReg_2 WHEN varargout_2_1 = '0' ELSE
      tmp_57;

  
  tmp_59 <= tmp_58 WHEN reset = '0' ELSE
      obj_countReg_1;

  obj_countReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_countReg_2 <= to_unsigned(16#000#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_countReg_2 <= tmp_59;
      END IF;
    END IF;
  END PROCESS obj_countReg_reg_process;


  
  s_3 <= '1' WHEN obj_countReg_2 = to_unsigned(16#000#, 10) ELSE
      '0';

  sel_1 <= '0';

  out_rsvd_14 <= '1';

  
  sel_2 <= sel_1 WHEN s_3 = '0' ELSE
      out_rsvd_14;

  
  sel_2_1 <= sel WHEN varargout_2_1 = '0' ELSE
      sel_2;

  obj_index <= to_unsigned(16#00#, 7);

  obj_index_1 <= to_unsigned(16#00#, 7);

  tmp_60 <= obj_index_2 + to_unsigned(16#01#, 7);

  
  s_4 <= '1' WHEN obj_index_2 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_61 <= tmp_60 WHEN s_4 = '0' ELSE
      obj_index;

  
  tmp_62 <= obj_index_2 WHEN s_3 = '0' ELSE
      tmp_61;

  
  tmp_63 <= obj_index_2 WHEN varargout_2_1 = '0' ELSE
      tmp_62;

  
  tmp_64 <= tmp_63 WHEN reset = '0' ELSE
      obj_index_1;

  obj_index_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index_2 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        obj_index_2 <= tmp_64;
      END IF;
    END IF;
  END PROCESS obj_index_reg_process;


  tmp_65 <= signed(resize(obj_index_2, 32));

  obj_FFTReg <= (OTHERS => tmp_55);

  
  tmp_67 <= tmp_66 WHEN reset = '0' ELSE
      obj_FFTReg;

  obj_FFTReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTReg_1 <= (OTHERS => to_unsigned(16#040#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTReg_1 <= tmp_67;
      END IF;
    END IF;
  END PROCESS obj_FFTReg_reg_process;


  p129_output : PROCESS (obj_FFTReg_1, obj_fftInFFTDelayBal, sel_2_1, tmp_65)
  BEGIN
    s_5 <= obj_FFTReg_1;
    IF sel_2_1 = '1' THEN 
      s_5(to_integer(tmp_65)) <= obj_fftInFFTDelayBal;
    END IF;
  END PROCESS p129_output;


  
  tmp_66 <= s_5 WHEN varargout_2_1 = '0' ELSE
      s_5;

  obj_index1 <= to_unsigned(16#00#, 7);

  obj_index1_1 <= to_unsigned(16#00#, 7);

  tmp_68 <= obj_index1_2 + to_unsigned(16#01#, 7);

  
  s_6 <= '1' WHEN obj_index1_2 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_69 <= tmp_68 WHEN s_6 = '0' ELSE
      obj_index1;

  
  tmp_70 <= obj_index1_2 WHEN varargout_2_2 = '0' ELSE
      tmp_69;

  
  tmp_71 <= tmp_70 WHEN reset = '0' ELSE
      obj_index1_1;

  obj_index1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index1_2 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        obj_index1_2 <= tmp_71;
      END IF;
    END IF;
  END PROCESS obj_index1_reg_process;


  tmp_72 <= tmp_66(to_integer(obj_index1_2));

  obj_FFTRegDelay <= to_unsigned(16#040#, 10);

  
  tmp_73 <= obj_FFTRegDelay_1 WHEN varargout_2_2 = '0' ELSE
      tmp_72;

  
  tmp_74 <= tmp_73 WHEN reset = '0' ELSE
      obj_FFTRegDelay;

  obj_FFTRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTRegDelay_1 <= to_unsigned(16#040#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTRegDelay_1 <= tmp_74;
      END IF;
    END IF;
  END PROCESS obj_FFTRegDelay_reg_process;


  tmp_75 <= tmp_66(to_integer(obj_index1_2));

  
  tmp_76 <= obj_FFTRegDelay_1 WHEN varargout_2_2 = '0' ELSE
      tmp_75;

  tmp_77 <= to_unsigned(16#010#, 10);

  varargout_4_unsigned <= unsigned(varargout_4_1);

  obj_cpInFFTDelayBal <= resize(varargout_4_unsigned, 10);

  sel_3 <= '0';

  sel_4 <= '0';

  out_rsvd_15 <= '1';

  
  sel_2_2 <= sel_4 WHEN s_3 = '0' ELSE
      out_rsvd_15;

  
  sel_2_3 <= sel_3 WHEN varargout_2_1 = '0' ELSE
      sel_2_2;

  tmp_78 <= signed(resize(obj_index_2, 32));

  obj_cpReg <= (OTHERS => tmp_77);

  
  tmp_80 <= tmp_79 WHEN reset = '0' ELSE
      obj_cpReg;

  obj_cpReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_cpReg_1 <= (OTHERS => to_unsigned(16#010#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_cpReg_1 <= tmp_80;
      END IF;
    END IF;
  END PROCESS obj_cpReg_reg_process;


  p133_output : PROCESS (obj_cpInFFTDelayBal, obj_cpReg_1, sel_2_3, tmp_78)
  BEGIN
    s_7 <= obj_cpReg_1;
    IF sel_2_3 = '1' THEN 
      s_7(to_integer(tmp_78)) <= obj_cpInFFTDelayBal;
    END IF;
  END PROCESS p133_output;


  
  tmp_79 <= s_7 WHEN varargout_2_1 = '0' ELSE
      s_7;

  tmp_81 <= tmp_79(to_integer(obj_index1_2));

  obj_cpRegDelay <= to_unsigned(16#010#, 10);

  
  tmp_82 <= obj_cpRegDelay_1 WHEN varargout_2_2 = '0' ELSE
      tmp_81;

  
  tmp_83 <= tmp_82 WHEN reset = '0' ELSE
      obj_cpRegDelay;

  obj_cpRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_cpRegDelay_1 <= to_unsigned(16#010#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_cpRegDelay_1 <= tmp_83;
      END IF;
    END IF;
  END PROCESS obj_cpRegDelay_reg_process;


  tmp_84 <= tmp_79(to_integer(obj_index1_2));

  
  tmp_85 <= obj_cpRegDelay_1 WHEN varargout_2_2 = '0' ELSE
      tmp_84;

  varargout_1_re_signed <= signed(varargout_1_re_5);

  varargout_1_im_signed <= signed(varargout_1_im_5);

  obj_dataOut_re <= to_signed(16#0000#, 16);
  obj_dataOut_im <= to_signed(16#0000#, 16);

  
  tmp_re <= varargout_1_re_signed WHEN reset = '0' ELSE
      obj_dataOut_re;
  
  tmp_im <= varargout_1_im_signed WHEN reset = '0' ELSE
      obj_dataOut_im;

  obj_dataOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataOut_re_1 <= to_signed(16#0000#, 16);
        obj_dataOut_im_1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        obj_dataOut_re_1 <= tmp_re;
        obj_dataOut_im_1 <= tmp_im;
      END IF;
    END IF;
  END PROCESS obj_dataOut_reg_process;


  obj_validOut <= '0';

  
  tmp_86 <= varargout_2_5 WHEN reset = '0' ELSE
      obj_validOut;

  obj_validOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validOut_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validOut_1 <= tmp_86;
      END IF;
    END IF;
  END PROCESS obj_validOut_reg_process;


  
  obj_numDataSc_1 <= '1' WHEN obj_numDataSc = to_unsigned(16#0001#, 14) ELSE
      '0';

  tmp_87 <= obj_numDataSc - to_unsigned(16#0001#, 14);

  obj_readyLast <= to_unsigned(16#0001#, 14);

  
  tmp_88 <= tmp_87 WHEN obj_numDataSc_1 = '0' ELSE
      obj_readyLast;

  
  tmp_89 <= '1' WHEN tmp_22 = tmp_88 ELSE
      '0';

  obj_readyFlag <= '0';

  
  obj_readyLow_1 <= '1' WHEN obj_readyLow /= to_unsigned(16#0000#, 14) ELSE
      '0';

  obj_readyFlag_1 <= '0';

  obj_readyFlag_2 <= '1';

  
  tmp_90 <= obj_readyFlag_1 WHEN obj_readyLow_1 = '0' ELSE
      obj_readyFlag_2;

  obj_readyFlag_3 <= '0';

  
  tmp_91 <= obj_readyFlag_4 WHEN s_8 = '0' ELSE
      obj_readyFlag;

  
  tmp_92 <= tmp_91 WHEN tmp_89 = '0' ELSE
      tmp_90;

  
  tmp_93 <= tmp_92 WHEN reset = '0' ELSE
      obj_readyFlag_3;

  obj_readyFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyFlag_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyFlag_4 <= tmp_93;
      END IF;
    END IF;
  END PROCESS obj_readyFlag_reg_process;


  s_8 <= obj_readyFlag_4 AND valid;

  
  tmp_94 <= '1' WHEN resize(tmp_33, 15) = (resize(obj_readyLow, 15) - to_unsigned(16#0001#, 15)) ELSE
      '0';

  obj_triggerReady <= '0';

  obj_triggerReady_1 <= '1';

  obj_triggerReady_2 <= '0';

  
  tmp_95 <= obj_triggerReady_3 WHEN obj_triggerReady_3 = '0' ELSE
      obj_triggerReady;

  
  tmp_96 <= tmp_95 WHEN s_8 = '0' ELSE
      obj_triggerReady_3;

  
  tmp_97 <= tmp_96 WHEN tmp_94 = '0' ELSE
      obj_triggerReady_1;

  
  tmp_98 <= tmp_97 WHEN reset = '0' ELSE
      obj_triggerReady_2;

  obj_triggerReady_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_triggerReady_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_triggerReady_3 <= tmp_98;
      END IF;
    END IF;
  END PROCESS obj_triggerReady_reg_process;


  obj_readyOut_4 <= '1';

  
  tmp_99 <= tmp_53 WHEN reset = '0' ELSE
      obj_readyOut_4;

  obj_readyOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyOut_5 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyOut_5 <= tmp_99;
      END IF;
    END IF;
  END PROCESS obj_readyOut_reg_process;


  varargout_3_5 <= '1';

  
  tmp_100 <= obj_readyOut_5 WHEN obj_triggerReady_3 = '0' ELSE
      varargout_3_5;

  varargout_3_6 <= '0';

  
  tmp_101 <= tmp_100 WHEN s_8 = '0' ELSE
      varargout_3_6;

  data_re_1 <= std_logic_vector(obj_dataOut_re_1);

  data_im_1 <= std_logic_vector(obj_dataOut_im_1);

  valid_1 <= obj_validOut_1;

  ready <= tmp_101;

END rtl;

