-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_full_ofdm_modulator.vhd
-- Created: 2024-11-13 11:48:23
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_full_ofdm_modulator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator
-- Hierarchy Level: 1
-- Model version: 4.212
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_full_ofdm_modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_sym                      :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        rst                               :   IN    std_logic;
        data_out                          :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END IEEE_8021513_TX_src_full_ofdm_modulator;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_full_ofdm_modulator IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_qam_mod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_ofdm_symbol                 :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_ofdm_modulator_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          rst                             :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_HDL_FIFO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          In_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          Out_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Out_im                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Empty                           :   OUT   std_logic;
          Full                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          data_out_im                     :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_frequency_upshift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          data_in_im                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          valid_in                        :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_ofdm_ready_truncate
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          next_frame                      :   IN    std_logic;
          new_psdu                        :   IN    std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_qam_mod
    USE ENTITY work.IEEE_8021513_TX_src_qam_mod(rtl);

  FOR ALL : IEEE_8021513_TX_src_constellation_scrambler
    USE ENTITY work.IEEE_8021513_TX_src_constellation_scrambler(rtl);

  FOR ALL : IEEE_8021513_TX_src_ofdm_modulator_block
    USE ENTITY work.IEEE_8021513_TX_src_ofdm_modulator_block(rtl);

  FOR ALL : IEEE_8021513_TX_src_HDL_FIFO
    USE ENTITY work.IEEE_8021513_TX_src_HDL_FIFO(rtl);

  FOR ALL : IEEE_8021513_TX_src_interpolator
    USE ENTITY work.IEEE_8021513_TX_src_interpolator(rtl);

  FOR ALL : IEEE_8021513_TX_src_frequency_upshift
    USE ENTITY work.IEEE_8021513_TX_src_frequency_upshift(rtl);

  FOR ALL : IEEE_8021513_TX_src_ofdm_ready_truncate
    USE ENTITY work.IEEE_8021513_TX_src_ofdm_ready_truncate(rtl);

  -- Signals
  SIGNAL data_in_unsigned                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL stateControl                     : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL Delay11_out1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL real_valid                       : std_logic;
  SIGNAL Delay9_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_mod_out1_re                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL qam_mod_out1_im                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL qam_mod_out2                     : std_logic;
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL enb_1_2_0_gated_3                : std_logic;
  SIGNAL Delay8_out1                      : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_1_2_0_gated_4                : std_logic;
  SIGNAL Delay_out1                       : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_1_2_0_gated_5                : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL enb_1_2_0_gated_6                : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL out_new_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL out_new_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_new                        : std_logic;
  SIGNAL cp_len_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL enb_1_2_0_gated_7                : std_logic;
  SIGNAL Delay6_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL enb_1_2_0_gated_8                : std_logic;
  SIGNAL fifo_rst                         : std_logic;
  SIGNAL ofdm_modulator_out1_re           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out1_im           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out2              : std_logic;
  SIGNAL ready_out                        : std_logic;
  SIGNAL stateControl_19                  : std_logic;
  SIGNAL stateControl_20                  : std_logic;
  SIGNAL enb_1_2_0_gated_9                : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL fifo_out_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL fifo_out_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL fifo_empty                       : std_logic;
  SIGNAL HDL_FIFO_out3                    : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL stateControl_21                  : std_logic;
  SIGNAL stateControl_22                  : std_logic;
  SIGNAL enb_1_2_0_gated_10               : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL fifo_out_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL fifo_out_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL interpolator_out1_re             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL interpolator_out1_im             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL interpolator_out2                : std_logic;
  SIGNAL Repeat_out1                      : std_logic;
  SIGNAL frequency_upshift_out1           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL frequency_upshift_out2           : std_logic;

BEGIN
  u_qam_mod : IEEE_8021513_TX_src_qam_mod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => std_logic_vector(Delay11_out1),  -- ufix2
              valid_in => real_valid,
              bits_per_subcarrier => std_logic_vector(Delay9_out1),  -- ufix4
              data_out_re => qam_mod_out1_re,  -- sfix16_En14
              data_out_im => qam_mod_out1_im,  -- sfix16_En14
              valid_out => qam_mod_out2
              );

  u_constellation_scrambler : IEEE_8021513_TX_src_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => qam_mod_out1_re,  -- sfix16_En14
              data_in_im => qam_mod_out1_im,  -- sfix16_En14
              valid_in => qam_mod_out2,
              init => Delay_out1,  -- boolean [13]
              new_ofdm_symbol => Delay1_out1,
              data_out_re => out_new_re,  -- sfix16_En14
              data_out_im => out_new_im,  -- sfix16_En14
              valid_out => valid_new
              );

  u_ofdm_modulator : IEEE_8021513_TX_src_ofdm_modulator_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => out_new_re,  -- sfix16_En14
              data_in_im => out_new_im,  -- sfix16_En14
              valid_in => valid_new,
              cp_len => std_logic_vector(Delay6_out1),  -- uint8
              rst => fifo_rst,
              data_out_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_out_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_out => ofdm_modulator_out2,
              ready => ready_out
              );

  u_HDL_FIFO : IEEE_8021513_TX_src_HDL_FIFO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_re => ofdm_modulator_out1_re,  -- sfix16_En14
              In_im => ofdm_modulator_out1_im,  -- sfix16_En14
              Push => ofdm_modulator_out2,
              Pop => Switch_out1,
              rst => fifo_rst,
              Out_re => fifo_out_re,  -- sfix16_En14
              Out_im => fifo_out_im,  -- sfix16_En14
              Empty => fifo_empty,
              Full => HDL_FIFO_out3
              );

  u_interpolator : IEEE_8021513_TX_src_interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in_re => std_logic_vector(Switch1_out1_re),  -- sfix16_En14
              data_in_im => std_logic_vector(Switch1_out1_im),  -- sfix16_En14
              valid_in => Delay4_out1,
              data_out_re => interpolator_out1_re,  -- sfix20_En16
              data_out_im => interpolator_out1_im,  -- sfix20_En16
              valid_out => interpolator_out2
              );

  u_frequency_upshift : IEEE_8021513_TX_src_frequency_upshift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in_re => interpolator_out1_re,  -- sfix20_En16
              data_in_im => interpolator_out1_im,  -- sfix20_En16
              valid_in => interpolator_out2,
              reset => Repeat_out1,
              data_out => frequency_upshift_out1,  -- sfix14_En13
              valid_out => frequency_upshift_out2
              );

  u_ofdm_ready_truncate : IEEE_8021513_TX_src_ofdm_ready_truncate
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              next_frame => ready_out,
              new_psdu => fifo_rst,
              ready => ready
              );

  data_in_unsigned <= unsigned(data_in);

  stateControl <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_1 <= stateControl;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  enb_1_2_0_gated <= stateControl_1 AND enb_1_2_0;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= to_unsigned(16#0#, 2);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay11_out1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  stateControl_2 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_3 <= stateControl_2;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  enb_1_2_0_gated_1 <= stateControl_3 AND enb_1_2_0;

  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  stateControl_4 <= '1';

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_5 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_5 <= stateControl_4;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  enb_1_2_0_gated_2 <= stateControl_5 AND enb_1_2_0;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        real_valid <= '0';
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        real_valid <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay9_out1 <= bits_per_subcarrier_unsigned;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  stateControl_6 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_7 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_7 <= stateControl_6;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  enb_1_2_0_gated_3 <= stateControl_7 AND enb_1_2_0;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated_3 = '1' THEN
        Delay8_out1 <= init;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  stateControl_9 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_10 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_10 <= stateControl_9;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enb_1_2_0_gated_4 <= stateControl_10 AND enb_1_2_0;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated_4 = '1' THEN
        Delay_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  stateControl_11 <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_12 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_12 <= stateControl_11;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  enb_1_2_0_gated_5 <= stateControl_12 AND enb_1_2_0;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_1_2_0_gated_5 = '1' THEN
        Delay7_out1 <= new_ofdm_sym;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  stateControl_13 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_14 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_14 <= stateControl_13;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  enb_1_2_0_gated_6 <= stateControl_14 AND enb_1_2_0;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0_gated_6 = '1' THEN
        Delay1_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  cp_len_unsigned <= unsigned(cp_len);

  stateControl_15 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_16 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_16 <= stateControl_15;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  enb_1_2_0_gated_7 <= stateControl_16 AND enb_1_2_0;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0_gated_7 = '1' THEN
        Delay6_out1 <= cp_len_unsigned;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  stateControl_17 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_18 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_18 <= stateControl_17;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  enb_1_2_0_gated_8 <= stateControl_18 AND enb_1_2_0;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        fifo_rst <= '0';
      ELSIF enb_1_2_0_gated_8 = '1' THEN
        fifo_rst <= rst;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  stateControl_19 <= '1';

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_20 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_20 <= stateControl_19;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  enb_1_2_0_gated_9 <= stateControl_20 AND enb_1_2_0;

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb_1_2_0_gated_9 = '1' THEN
        Unit_Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Logical_Operator1_out1 <= HDL_FIFO_out3 OR fifo_empty;

  
  Switch_out1 <= Unit_Delay_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      HDL_FIFO_out3;

  stateControl_21 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_22 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_22 <= stateControl_21;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  enb_1_2_0_gated_10 <= stateControl_22 AND enb_1_2_0;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_2_0_gated_10 = '1' THEN
        Delay4_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Constant_out1 <= to_signed(16#0000#, 16);

  fifo_out_re_signed <= signed(fifo_out_re);

  fifo_out_im_signed <= signed(fifo_out_im);

  
  Switch1_out1_re <= Constant_out1 WHEN Delay4_out1 = '0' ELSE
      fifo_out_re_signed;
  
  Switch1_out1_im <= Constant_out1 WHEN Delay4_out1 = '0' ELSE
      fifo_out_im_signed;

  Repeat_out1 <= fifo_rst;

  data_out <= frequency_upshift_out1;

  valid_out <= frequency_upshift_out2;

END rtl;

