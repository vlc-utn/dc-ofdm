-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_interpolator.vhd
-- Created: 2024-11-13 11:48:22
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_interpolator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/interpolator
-- Hierarchy Level: 2
-- Model version: 4.212
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_TX_src_full_tx_pac.ALL;

ENTITY IEEE_8021513_TX_src_interpolator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
        data_out_im                       :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
        valid_out                         :   OUT   std_logic
        );
END IEEE_8021513_TX_src_interpolator;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_interpolator IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_FIR_Interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          dataOut_im                      :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_falling_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_FIR_Interpolator
    USE ENTITY work.IEEE_8021513_TX_src_FIR_Interpolator(rtl);

  FOR ALL : IEEE_8021513_TX_src_falling_edge_detector_block
    USE ENTITY work.IEEE_8021513_TX_src_falling_edge_detector_block(rtl);

  -- Signals
  SIGNAL Upsample_muxsel                  : std_logic;  -- ufix1
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl                     : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL Delay5_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay5_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_zero_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_zero_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample1_muxsel                 : std_logic;  -- ufix1
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(25 DOWNTO 0);  -- ufix1 [26]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Upsample1_zero                   : std_logic;
  SIGNAL Upsample1_out1                   : std_logic;
  SIGNAL FIR_Interpolator_out1_re         : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL FIR_Interpolator_out1_im         : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL FIR_Interpolator_out2            : std_logic;
  SIGNAL FIR_Interpolator_out1_re_signed  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL FIR_Interpolator_out1_im_signed  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay9_out1_re                   : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL Delay9_out1_im                   : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL delayMatch13_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay6_out1_re                   : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL Delay6_out1_im                   : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay11_out1_re                  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL Delay11_out1_im                  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay17_reg_re                   : vector_of_signed20(0 TO 25);  -- sfix20_En16 [26]
  SIGNAL Delay17_reg_im                   : vector_of_signed20(0 TO 25);  -- sfix20_En16 [26]
  SIGNAL Delay17_out1_re                  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL Delay17_out1_im                  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL Delay4_out1_re                   : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL Delay4_out1_im                   : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(25 DOWNTO 0);  -- ufix1 [26]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_19                  : std_logic;
  SIGNAL enb_gated_6                      : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL stateControl_20                  : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_21                  : std_logic;
  SIGNAL enb_gated_7                      : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL stateControl_22                  : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_23                  : std_logic;
  SIGNAL enb_gated_8                      : std_logic;
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL stateControl_24                  : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_25                  : std_logic;
  SIGNAL enb_gated_9                      : std_logic;
  SIGNAL b                                : std_logic;
  SIGNAL stateControl_26                  : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_27                  : std_logic;
  SIGNAL enb_gated_10                     : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_reset                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL zero_1                           : std_logic;
  SIGNAL stateControl_28                  : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_29                  : std_logic;
  SIGNAL enb_gated_11                     : std_logic;
  SIGNAL stateControl_30                  : std_logic;
  SIGNAL delayMatch17_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_31                  : std_logic;
  SIGNAL enb_gated_12                     : std_logic;
  SIGNAL count_enable                     : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL range_hit                        : std_logic;
  SIGNAL count_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_3                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_hit                        : std_logic;
  SIGNAL HDL_Counter_out2                 : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL stateControl_32                  : std_logic;
  SIGNAL delayMatch8_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_33                  : std_logic;
  SIGNAL enb_gated_13                     : std_logic;
  SIGNAL Delay16_reg                      : std_logic_vector(25 DOWNTO 0);  -- ufix1 [26]
  SIGNAL Delay16_out1                     : std_logic;
  SIGNAL Delay18_out1                     : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL stateControl_35                  : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_36                  : std_logic;
  SIGNAL enb_gated_14                     : std_logic;
  SIGNAL Delay_out1                       : std_logic;

BEGIN
  u_FIR_Interpolator : IEEE_8021513_TX_src_FIR_Interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => std_logic_vector(Upsample_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Upsample_out1_im),  -- sfix16_En14
              validIn => Upsample1_out1,
              dataOut_re => FIR_Interpolator_out1_re,  -- sfix20_En16
              dataOut_im => FIR_Interpolator_out1_im,  -- sfix20_En16
              validOut => FIR_Interpolator_out2
              );

  u_falling_edge_detector : IEEE_8021513_TX_src_falling_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              in_rsvd => Delay8_out1,
              out_rsvd => b
              );

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  Upsample_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Upsample_muxsel <= '1';
      ELSIF enb = '1' THEN
        Upsample_muxsel <=  NOT Upsample_muxsel;
      END IF;
    END IF;
  END PROCESS Upsample_cnt_process;


  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  stateControl <= '1';

  delayMatch12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_1 <= stateControl;
      END IF;
    END IF;
  END PROCESS delayMatch12_process;


  enb_1_2_0_gated <= stateControl_1 AND enb_1_2_0;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay5_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay5_reg_im(0) <= data_in_im_signed;
        Delay5_reg_im(1) <= Delay5_reg_im(0);
        Delay5_reg_re(0) <= data_in_re_signed;
        Delay5_reg_re(1) <= Delay5_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1_re <= Delay5_reg_re(1);
  Delay5_out1_im <= Delay5_reg_im(1);

  Upsample_zero_re <= to_signed(16#0000#, 16);
  Upsample_zero_im <= to_signed(16#0000#, 16);

  -- Upsample: Upsample by 2, Sample offset 0 
  
  Upsample_out1_re <= Delay5_out1_re WHEN Upsample_muxsel = '1' ELSE
      Upsample_zero_re;
  
  Upsample_out1_im <= Delay5_out1_im WHEN Upsample_muxsel = '1' ELSE
      Upsample_zero_im;

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  Upsample1_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Upsample1_muxsel <= '1';
      ELSIF enb = '1' THEN
        Upsample1_muxsel <=  NOT Upsample1_muxsel;
      END IF;
    END IF;
  END PROCESS Upsample1_cnt_process;


  stateControl_2 <= '1';

  delayMatch10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_3 <= stateControl_2;
      END IF;
    END IF;
  END PROCESS delayMatch10_process;


  enb_1_2_0_gated_1 <= stateControl_3 AND enb_1_2_0;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay3_reg(0) <= valid_in;
        Delay3_reg(25 DOWNTO 1) <= Delay3_reg(24 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(25);

  Logical_Operator_out1 <= valid_in OR Delay3_out1;

  stateControl_4 <= '1';

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_5 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_5 <= stateControl_4;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  enb_1_2_0_gated_2 <= stateControl_5 AND enb_1_2_0;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay2_reg(0) <= Logical_Operator_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Upsample1_zero <= '0';

  -- Upsample1: Upsample by 2, Sample offset 0 
  
  Upsample1_out1 <= Delay2_out1 WHEN Upsample1_muxsel = '1' ELSE
      Upsample1_zero;

  FIR_Interpolator_out1_re_signed <= signed(FIR_Interpolator_out1_re);

  FIR_Interpolator_out1_im_signed <= signed(FIR_Interpolator_out1_im);

  stateControl_6 <= '1';

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch16_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch16_reg(0) <= stateControl_6;
        delayMatch16_reg(1) <= delayMatch16_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  stateControl_7 <= delayMatch16_reg(1);

  enb_gated <= stateControl_7 AND enb;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1_re <= to_signed(16#00000#, 20);
        Delay9_out1_im <= to_signed(16#00000#, 20);
      ELSIF enb_gated = '1' THEN
        Delay9_out1_re <= FIR_Interpolator_out1_re_signed;
        Delay9_out1_im <= FIR_Interpolator_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  stateControl_8 <= '1';

  delayMatch13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch13_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch13_reg(0) <= stateControl_8;
        delayMatch13_reg(1) <= delayMatch13_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  stateControl_9 <= delayMatch13_reg(1);

  enb_gated_1 <= stateControl_9 AND enb;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_re <= to_signed(16#00000#, 20);
        Delay6_out1_im <= to_signed(16#00000#, 20);
      ELSIF enb_gated_1 = '1' THEN
        Delay6_out1_re <= Delay9_out1_re;
        Delay6_out1_im <= Delay9_out1_im;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  stateControl_10 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_10;
        delayMatch3_reg(1) <= delayMatch3_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_11 <= delayMatch3_reg(1);

  enb_gated_2 <= stateControl_11 AND enb;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_re <= to_signed(16#00000#, 20);
        Delay11_out1_im <= to_signed(16#00000#, 20);
      ELSIF enb_gated_2 = '1' THEN
        Delay11_out1_re <= Delay6_out1_re;
        Delay11_out1_im <= Delay6_out1_im;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  stateControl_12 <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch7_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= stateControl_12;
        delayMatch7_reg(1) <= delayMatch7_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  stateControl_13 <= delayMatch7_reg(1);

  enb_gated_3 <= stateControl_13 AND enb;

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay17_reg_re <= (OTHERS => to_signed(16#00000#, 20));
        Delay17_reg_im <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb_gated_3 = '1' THEN
        Delay17_reg_im(0) <= Delay11_out1_im;
        Delay17_reg_im(1 TO 25) <= Delay17_reg_im(0 TO 24);
        Delay17_reg_re(0) <= Delay11_out1_re;
        Delay17_reg_re(1 TO 25) <= Delay17_reg_re(0 TO 24);
      END IF;
    END IF;
  END PROCESS Delay17_process;

  Delay17_out1_re <= Delay17_reg_re(25);
  Delay17_out1_im <= Delay17_reg_im(25);

  stateControl_14 <= '1';

  delayMatch11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch11_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch11_reg(0) <= stateControl_14;
        delayMatch11_reg(1) <= delayMatch11_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  stateControl_15 <= delayMatch11_reg(1);

  enb_gated_4 <= stateControl_15 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_re <= to_signed(16#00000#, 20);
        Delay4_out1_im <= to_signed(16#00000#, 20);
      ELSIF enb_gated_4 = '1' THEN
        Delay4_out1_re <= Delay17_out1_re;
        Delay4_out1_im <= Delay17_out1_im;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  data_out_re <= std_logic_vector(Delay4_out1_re);

  data_out_im <= std_logic_vector(Delay4_out1_im);

  stateControl_16 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_16;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_17 <= delayMatch1_reg(1);

  enb_gated_5 <= stateControl_17 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_gated_5 = '1' THEN
        Delay1_reg(0) <= FIR_Interpolator_out2;
        Delay1_reg(25 DOWNTO 1) <= Delay1_reg(24 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(25);

  Logical_Operator1_out1 <= FIR_Interpolator_out2 AND Delay1_out1;

  stateControl_18 <= '1';

  delayMatch15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch15_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch15_reg(0) <= stateControl_18;
        delayMatch15_reg(1) <= delayMatch15_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  stateControl_19 <= delayMatch15_reg(1);

  enb_gated_6 <= stateControl_19 AND enb;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb_gated_6 = '1' THEN
        Delay8_out1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  stateControl_20 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= stateControl_20;
        delayMatch4_reg(1) <= delayMatch4_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_21 <= delayMatch4_reg(1);

  enb_gated_7 <= stateControl_21 AND enb;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb_gated_7 = '1' THEN
        Delay14_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  stateControl_22 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= stateControl_22;
        delayMatch5_reg(1) <= delayMatch5_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  stateControl_23 <= delayMatch5_reg(1);

  enb_gated_8 <= stateControl_23 AND enb;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_out1 <= '0';
      ELSIF enb_gated_8 = '1' THEN
        Delay15_out1 <= Delay14_out1;
      END IF;
    END IF;
  END PROCESS Delay15_process;


  stateControl_24 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= stateControl_24;
        delayMatch6_reg(1) <= delayMatch6_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_25 <= delayMatch6_reg(1);

  enb_gated_9 <= stateControl_25 AND enb;

  stateControl_26 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_26;
        delayMatch2_reg(1) <= delayMatch2_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_27 <= delayMatch2_reg(1);

  enb_gated_10 <= stateControl_27 AND enb;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb_gated_10 = '1' THEN
        Delay10_out1 <= b;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 25
  count_step <= to_unsigned(16#01#, 8);

  count_from <= to_unsigned(16#00#, 8);

  count_reset <= to_unsigned(16#00#, 8);

  zero_1 <= '0';

  stateControl_28 <= '1';

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch14_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch14_reg(0) <= stateControl_28;
        delayMatch14_reg(1) <= delayMatch14_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  stateControl_29 <= delayMatch14_reg(1);

  enb_gated_11 <= stateControl_29 AND enb;

  stateControl_30 <= '1';

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch17_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch17_reg(0) <= stateControl_30;
        delayMatch17_reg(1) <= delayMatch17_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  stateControl_31 <= delayMatch17_reg(1);

  enb_gated_12 <= stateControl_31 AND enb;

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb_gated_12 = '1' THEN
        Unit_Delay_out1 <= count_enable;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  range_hit <= '1' WHEN count > to_unsigned(16#FE#, 8) ELSE
      '0';

  count_1 <= count + count_step;

  
  count_value <= count_1 WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_2 <= count WHEN count_enable = '0' ELSE
      count_value;

  
  count_3 <= count_2 WHEN Delay10_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        count <= count_3;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  need_to_wrap <= '1' WHEN count = to_unsigned(16#19#, 8) ELSE
      '0';

  count_hit <= need_to_wrap OR range_hit;

  
  HDL_Counter_out2 <= count_hit WHEN Delay10_out1 = '0' ELSE
      zero_1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_gated_11 = '1' THEN
        Delay7_out1 <= HDL_Counter_out2;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Logical_Operator4_out1 <= Delay10_out1 OR Delay7_out1;

  
  count_enable <= Unit_Delay_out1 WHEN Logical_Operator4_out1 = '0' ELSE
      Delay10_out1;

  stateControl_32 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch8_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch8_reg(0) <= stateControl_32;
        delayMatch8_reg(1) <= delayMatch8_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  stateControl_33 <= delayMatch8_reg(1);

  enb_gated_13 <= stateControl_33 AND enb;

  Delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay16_reg <= (OTHERS => '0');
      ELSIF enb_gated_9 = '1' THEN
        Delay16_reg(0) <= Delay15_out1;
        Delay16_reg(25 DOWNTO 1) <= Delay16_reg(24 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay16_process;

  Delay16_out1 <= Delay16_reg(25);

  Delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay18_out1 <= '0';
      ELSIF enb_gated_13 = '1' THEN
        Delay18_out1 <= count_enable;
      END IF;
    END IF;
  END PROCESS Delay18_process;


  Logical_Operator3_out1 <=  NOT Delay18_out1;

  Logical_Operator2_out1 <= Delay16_out1 AND Logical_Operator3_out1;

  stateControl_35 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_35;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_36 <= delayMatch_reg(1);

  enb_gated_14 <= stateControl_36 AND enb;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_gated_14 = '1' THEN
        Delay_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  valid_out <= Delay_out1;

END rtl;

