-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_constellation_descrambler.vhd
-- Created: 2024-11-23 11:22:01
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_constellation_descrambler
-- Source Path: HDLRx/full_rx/rx_demodulator_full/constellation_descrambler
-- Hierarchy Level: 2
-- Model version: 1.147
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_RX_src_constellation_descrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        data_in_im                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        data_out_re                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        data_out_im                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        valid_out                         :   OUT   std_logic
        );
END IEEE_8021513_RX_src_constellation_descrambler;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_constellation_descrambler IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_rising_edge_detector_block3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_lfsr_const_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_ofdm_symbol                 :   IN    std_logic;
          s1_out                          :   OUT   std_logic;
          s2_out                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_rotate_90
    PORT( data_in_re                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          data_in_im                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          valid_in                        :   IN    std_logic;
          s1                              :   IN    std_logic;
          s2                              :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          data_out_im                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_rising_edge_detector_block3
    USE ENTITY work.IEEE_8021513_RX_src_rising_edge_detector_block3(rtl);

  FOR ALL : IEEE_8021513_RX_src_lfsr_const_scrambler
    USE ENTITY work.IEEE_8021513_RX_src_lfsr_const_scrambler(rtl);

  FOR ALL : IEEE_8021513_RX_src_rotate_90
    USE ENTITY work.IEEE_8021513_RX_src_rotate_90(rtl);

  -- Signals
  SIGNAL en                               : std_logic;
  SIGNAL data_in_re_signed                : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_in_im_signed                : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_in_re_1                     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_in_im_1                     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay_out1_re                    : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay_out1_im                    : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL lfsr_const_scrambler_out1        : std_logic;
  SIGNAL lfsr_const_scrambler_out2        : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL data_out_re_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL data_out_im_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL rotate_90_out2                   : std_logic;
  SIGNAL data_out_re_signed               : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_im_signed               : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_re_tmp                  : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_im_tmp                  : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_rising_edge_detector : IEEE_8021513_RX_src_rising_edge_detector_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_rsvd => en,
              Out_rsvd => rising_edge_detector_out1
              );

  u_lfsr_const_scrambler : IEEE_8021513_RX_src_lfsr_const_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              valid_in => en,
              init => init,  -- boolean [13]
              new_ofdm_symbol => rising_edge_detector_out1,
              s1_out => lfsr_const_scrambler_out1,
              s2_out => lfsr_const_scrambler_out2
              );

  u_rotate_90 : IEEE_8021513_RX_src_rotate_90
    PORT MAP( data_in_re => std_logic_vector(Delay_out1_re),  -- sfix18_En12
              data_in_im => std_logic_vector(Delay_out1_im),  -- sfix18_En12
              valid_in => Delay1_out1,
              s1 => Delay4_out1,
              s2 => Delay5_out1,
              data_out_re => data_out_re_1,  -- sfix18_En12
              data_out_im => data_out_im_1,  -- sfix18_En12
              valid_out => rotate_90_out2
              );

  en <= valid_in;

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_1 <= to_signed(16#00000#, 18);
        data_in_im_1 <= to_signed(16#00000#, 18);
      ELSIF enb_1_2_0 = '1' THEN
        data_in_re_1 <= data_in_re_signed;
        data_in_im_1 <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re <= to_signed(16#00000#, 18);
        Delay_out1_im <= to_signed(16#00000#, 18);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1_re <= data_in_re_1;
        Delay_out1_im <= data_in_im_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1 <= en;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_out1 <= lfsr_const_scrambler_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay5_out1 <= lfsr_const_scrambler_out2;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_re_tmp <= to_signed(16#00000#, 18);
        data_out_im_tmp <= to_signed(16#00000#, 18);
      ELSIF enb_1_2_0 = '1' THEN
        data_out_re_tmp <= data_out_re_signed;
        data_out_im_tmp <= data_out_im_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  data_out_re <= std_logic_vector(data_out_re_tmp);

  data_out_im <= std_logic_vector(data_out_im_tmp);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= rotate_90_out2;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  valid_out <= Delay3_out1;

END rtl;

