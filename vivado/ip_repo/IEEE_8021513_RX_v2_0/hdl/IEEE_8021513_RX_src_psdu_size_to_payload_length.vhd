-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_psdu_size_to_payload_length.vhd
-- Created: 2024-11-23 11:22:02
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_psdu_size_to_payload_length
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_separator/psdu_size_to_payload_length
-- Hierarchy Level: 3
-- Model version: 1.147
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_RX_src_full_rx_pac.ALL;

ENTITY IEEE_8021513_RX_src_psdu_size_to_payload_length IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        psdu_size                         :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
        payload_len_in_ofdm_symbols       :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END IEEE_8021513_RX_src_psdu_size_to_payload_length;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_psdu_size_to_payload_length IS

  -- Signals
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay1_reg                       : vector_of_unsigned4(0 TO 1);  -- ufix4 [2]
  SIGNAL Delay1_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion1_out1_23    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_22    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_21    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_20    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_19    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_18    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_17    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_16    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_15    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_14    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_13    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_12    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_11    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_10    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_9     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_8     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_7     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_6     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_5     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_4     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_3     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_2     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_0     : std_logic;  -- ufix1
  SIGNAL y                                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Shift_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay_reg                        : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL Delay_out1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Shift3_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Shift5_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Multiport_Switch_out1            : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Data_Type_Conversion_out1        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Delay3_reg                       : vector_of_unsigned17(0 TO 1);  -- ufix17 [2]
  SIGNAL Delay3_out1                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Constant_out1                    : unsigned(23 DOWNTO 0);  -- ufix24_En24
  SIGNAL ceil_and_multiply_mul_temp       : unsigned(40 DOWNTO 0);  -- ufix41_En24
  SIGNAL ceil_and_multiply_out1           : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay2_reg                       : vector_of_unsigned16(0 TO 1);  -- ufix16 [2]
  SIGNAL Delay2_out1                      : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  -- Get length of the payload expressed in OFDM Symbols:
  -- 
  -- bitsInPsdu = psduSize * 8 * fecRate [bits/payload]
  -- bitsInOFDMSymbol = numDataCarriers * bitsPerSubcarrier [bits/OFDM]
  -- 
  -- payloadLenInOFDMSymbols = ceil( bitsInPsdu / bitsInOFDMSymbol ) [OFDM/payload]

  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => to_unsigned(16#0#, 4));
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg(0) <= bits_per_subcarrier_unsigned;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Data_Type_Conversion1_out1_23 <= psdu_size(23);

  Data_Type_Conversion1_out1_22 <= psdu_size(22);

  Data_Type_Conversion1_out1_21 <= psdu_size(21);

  Data_Type_Conversion1_out1_20 <= psdu_size(20);

  Data_Type_Conversion1_out1_19 <= psdu_size(19);

  Data_Type_Conversion1_out1_18 <= psdu_size(18);

  Data_Type_Conversion1_out1_17 <= psdu_size(17);

  Data_Type_Conversion1_out1_16 <= psdu_size(16);

  Data_Type_Conversion1_out1_15 <= psdu_size(15);

  Data_Type_Conversion1_out1_14 <= psdu_size(14);

  Data_Type_Conversion1_out1_13 <= psdu_size(13);

  Data_Type_Conversion1_out1_12 <= psdu_size(12);

  Data_Type_Conversion1_out1_11 <= psdu_size(11);

  Data_Type_Conversion1_out1_10 <= psdu_size(10);

  Data_Type_Conversion1_out1_9 <= psdu_size(9);

  Data_Type_Conversion1_out1_8 <= psdu_size(8);

  Data_Type_Conversion1_out1_7 <= psdu_size(7);

  Data_Type_Conversion1_out1_6 <= psdu_size(6);

  Data_Type_Conversion1_out1_5 <= psdu_size(5);

  Data_Type_Conversion1_out1_4 <= psdu_size(4);

  Data_Type_Conversion1_out1_3 <= psdu_size(3);

  Data_Type_Conversion1_out1_2 <= psdu_size(2);

  Data_Type_Conversion1_out1_1 <= psdu_size(1);

  Data_Type_Conversion1_out1_0 <= psdu_size(0);

  y <= unsigned'(Data_Type_Conversion1_out1_23 & Data_Type_Conversion1_out1_22 & Data_Type_Conversion1_out1_21 & Data_Type_Conversion1_out1_20 & Data_Type_Conversion1_out1_19 & Data_Type_Conversion1_out1_18 & Data_Type_Conversion1_out1_17 & Data_Type_Conversion1_out1_16 & Data_Type_Conversion1_out1_15 & Data_Type_Conversion1_out1_14 & Data_Type_Conversion1_out1_13 & Data_Type_Conversion1_out1_12 & Data_Type_Conversion1_out1_11 & Data_Type_Conversion1_out1_10 & Data_Type_Conversion1_out1_9 & Data_Type_Conversion1_out1_8 & Data_Type_Conversion1_out1_7 & Data_Type_Conversion1_out1_6 & Data_Type_Conversion1_out1_5 & Data_Type_Conversion1_out1_4 & Data_Type_Conversion1_out1_3 & Data_Type_Conversion1_out1_2 & Data_Type_Conversion1_out1_1 & Data_Type_Conversion1_out1_0);

  Bit_Shift_out1 <= y sll 4;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => to_unsigned(16#000000#, 24));
      ELSIF enb_1_2_0 = '1' THEN
        Delay_reg(0) <= Bit_Shift_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  Bit_Shift3_out1 <= SHIFT_RIGHT(Delay_out1, 1);

  Bit_Shift5_out1 <= SHIFT_RIGHT(Delay_out1, 4);

  
  Multiport_Switch_out1 <= Delay_out1 WHEN Delay1_out1 = to_unsigned(16#0#, 4) ELSE
      Delay_out1 WHEN Delay1_out1 = to_unsigned(16#1#, 4) ELSE
      Bit_Shift3_out1 WHEN Delay1_out1 = to_unsigned(16#2#, 4) ELSE
      Bit_Shift3_out1 WHEN Delay1_out1 = to_unsigned(16#3#, 4) ELSE
      Bit_Shift5_out1;

  Data_Type_Conversion_out1 <= Multiport_Switch_out1(16 DOWNTO 0);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => to_unsigned(16#00000#, 17));
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_reg(0) <= Data_Type_Conversion_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Constant_out1 <= to_unsigned(16#01767E#, 24);

  ceil_and_multiply_mul_temp <= Delay3_out1 * Constant_out1;
  ceil_and_multiply_out1 <= ceil_and_multiply_mul_temp(39 DOWNTO 24) + ('0' & (ceil_and_multiply_mul_temp(23) OR ceil_and_multiply_mul_temp(22) OR ceil_and_multiply_mul_temp(21) OR ceil_and_multiply_mul_temp(20) OR ceil_and_multiply_mul_temp(19) OR ceil_and_multiply_mul_temp(18) OR ceil_and_multiply_mul_temp(17) OR ceil_and_multiply_mul_temp(16) OR ceil_and_multiply_mul_temp(15) OR ceil_and_multiply_mul_temp(14) OR ceil_and_multiply_mul_temp(13) OR ceil_and_multiply_mul_temp(12) OR ceil_and_multiply_mul_temp(11) OR ceil_and_multiply_mul_temp(10) OR ceil_and_multiply_mul_temp(9) OR ceil_and_multiply_mul_temp(8) OR ceil_and_multiply_mul_temp(7) OR ceil_and_multiply_mul_temp(6) OR ceil_and_multiply_mul_temp(5) OR ceil_and_multiply_mul_temp(4) OR ceil_and_multiply_mul_temp(3) OR ceil_and_multiply_mul_temp(2) OR ceil_and_multiply_mul_temp(1) OR ceil_and_multiply_mul_temp(0)));

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => to_unsigned(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_reg(0) <= ceil_and_multiply_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  payload_len_in_ofdm_symbols <= std_logic_vector(Delay2_out1);

END rtl;

