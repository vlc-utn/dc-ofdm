-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_find_peak.vhd
-- Created: 2024-11-23 11:22:02
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_find_peak
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/find_peak
-- Hierarchy Level: 3
-- Model version: 1.147
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_RX_src_find_peak IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        M_in                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        peak_sync                         :   OUT   std_logic
        );
END IEEE_8021513_RX_src_find_peak;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_find_peak IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_Compare_To_Constant_block1
    PORT( u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3
    USE ENTITY work.IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3(rtl);

  FOR ALL : IEEE_8021513_RX_src_Compare_To_Constant_block1
    USE ENTITY work.IEEE_8021513_RX_src_Compare_To_Constant_block1(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL mergedInput                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedDelay_regin                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedDelay_waddr                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_regout               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedDelay_regout_unsigned      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL mergedOutput                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL realOutput                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL slicedInput_1                    : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL imagOutput                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL count_step                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_from                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_reset                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL zero_1                           : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL M_in_signed                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL peak_i_1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL count_step_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_from_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_reset_1                    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL zero_3                           : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL range_hit                        : std_logic;
  SIGNAL count                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL en                               : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL peak_found                       : std_logic;
  SIGNAL peak_found_1                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Switch3_out1                     : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL count_1                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rst_counter                      : std_logic;
  SIGNAL count_2                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_hit                        : std_logic;
  SIGNAL peak_i                           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Unit_Delay_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL peak_found_2                     : std_logic;
  SIGNAL new_peak                         : std_logic;
  SIGNAL OR1_out1                         : std_logic;
  SIGNAL peak_found_3                     : std_logic;
  SIGNAL Unit_Delay2_out1                 : std_logic;
  SIGNAL peak_found_4                     : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL range_hit_1                      : std_logic;
  SIGNAL count_3                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_4                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL peak_found_5                     : std_logic;
  SIGNAL count_5                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_hit_1                      : std_logic;
  SIGNAL HDL_Counter_out2                 : std_logic;
  SIGNAL HDL_Counter1_out2                : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL OR2_out1                         : std_logic;

BEGIN
  -- If a peak was found, then a new peak shouldn't appear for at least the duration of the preamble

  u_ShiftRegisterRAM : IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              dout => mergedDelay_regout
              );

  u_Compare_To_Constant : IEEE_8021513_RX_src_Compare_To_Constant_block1
    PORT MAP( u => M_in,  -- sfix16_En14
              y => Compare_To_Constant_out1
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_re <= to_signed(16#0000#, 16);
        Delay4_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_out1_re <= data_in_re_signed;
        Delay4_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  mergedInput <= unsigned(Delay4_out1_re) & unsigned(Delay4_out1_im);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_regin <= to_unsigned(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 124
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#7C#, 7) THEN 
          mergedDelay_waddr <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 124
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#01#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#7C#, 7) THEN 
          mergedDelay_raddr <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedOutput <= to_unsigned(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput <= mergedOutput(31 DOWNTO 16);

  realOutput <= signed(slicedInput);

  data_out_re <= std_logic_vector(realOutput);

  slicedInput_1 <= mergedOutput(15 DOWNTO 0);

  imagOutput <= signed(slicedInput_1);

  data_out_im <= std_logic_vector(imagOutput);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3584
  count_step <= to_unsigned(16#001#, 12);

  count_from <= to_unsigned(16#000#, 12);

  count_reset <= to_unsigned(16#000#, 12);

  zero_1 <= '0';

  Constant_out1 <= to_signed(16#0000#, 16);

  M_in_signed <= signed(M_in);

  
  peak_i_1 <= Constant_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      M_in_signed;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1 <= peak_i_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 127
  count_step_1 <= to_unsigned(16#01#, 7);

  count_from_1 <= to_unsigned(16#00#, 7);

  count_reset_1 <= to_unsigned(16#00#, 7);

  zero_3 <= '0';

  
  range_hit <= '1' WHEN HDL_Counter_out1 > to_unsigned(16#7E#, 7) ELSE
      '0';

  count <= HDL_Counter_out1 + count_step_1;

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from_1;

  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Unit_Delay1_out1 <= en;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  peak_found_1 <= peak_found;

  OR_out1 <= Switch3_out1 OR (peak_found_1 OR Delay3_out1);

  
  en <= Unit_Delay1_out1 WHEN OR_out1 = '0' ELSE
      Delay3_out1;

  
  count_1 <= HDL_Counter_out1 WHEN en = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN rst_counter = '0' ELSE
      count_reset_1;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#7F#, 7) ELSE
      '0';

  count_hit <= need_to_wrap OR range_hit;

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Unit_Delay_out1 <= peak_i;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  peak_found_2 <= peak_found;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= new_peak;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  OR1_out1 <= Delay3_out1 OR peak_found_2;

  
  peak_i <= Unit_Delay_out1 WHEN OR1_out1 = '0' ELSE
      Delay_out1;

  
  new_peak <= '1' WHEN Delay2_out1 > peak_i ELSE
      '0';

  peak_found_3 <= peak_found;

  Unit_Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay2_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Unit_Delay2_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  peak_found_4 <= peak_found;

  
  range_hit_1 <= '1' WHEN HDL_Counter1_out1 > to_unsigned(16#FFE#, 12) ELSE
      '0';

  count_3 <= HDL_Counter1_out1 + count_step;

  
  count_value_1 <= count_3 WHEN need_to_wrap_1 = '0' ELSE
      count_from;

  
  count_4 <= HDL_Counter1_out1 WHEN Switch3_out1 = '0' ELSE
      count_value_1;

  
  count_5 <= count_4 WHEN peak_found_5 = '0' ELSE
      count_reset;

  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter1_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        HDL_Counter1_out1 <= count_5;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  need_to_wrap_1 <= '1' WHEN HDL_Counter1_out1 = to_unsigned(16#E00#, 12) ELSE
      '0';

  count_hit_1 <= need_to_wrap_1 OR range_hit_1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        peak_found <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        peak_found <= HDL_Counter_out2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  peak_found_5 <= peak_found;

  
  HDL_Counter1_out2 <= count_hit_1 WHEN peak_found_5 = '0' ELSE
      zero_1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay6_out1 <= HDL_Counter1_out2;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  OR2_out1 <= Delay6_out1 OR peak_found_4;

  
  Switch3_out1 <= Unit_Delay2_out1 WHEN OR2_out1 = '0' ELSE
      peak_found_3;

  rst_counter <= Switch3_out1 OR new_peak;

  
  HDL_Counter_out2 <= count_hit WHEN rst_counter = '0' ELSE
      zero_3;

  peak_sync <= HDL_Counter_out2;

END rtl;

