-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_h_rx_full.vhd
-- Created: 2024-11-23 11:22:01
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_h_rx_full
-- Source Path: HDLRx/full_rx/h_rx_full
-- Hierarchy Level: 1
-- Model version: 1.147
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_RX_src_h_rx_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        start_in                          :   IN    std_logic;
        ldpc_in                           :   IN    std_logic;
        ldpc_ctrl_in_start                :   IN    std_logic;
        ldpc_ctrl_in_end                  :   IN    std_logic;
        ldpc_ctrl_in_valid                :   IN    std_logic;
        psdu_size                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
        msg_duration                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
        block_size                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
        fec_rate                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        rep_number                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        concat_factor                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        scrambler_init                    :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
        bat_id                            :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
        cp_id                             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_spacing                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_number                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        end_rsvd                          :   OUT   std_logic;
        err                               :   OUT   std_logic;
        ldpc_out                          :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        ldpc_ctrl_out_start               :   OUT   std_logic;
        ldpc_ctrl_out_end                 :   OUT   std_logic;
        ldpc_ctrl_out_valid               :   OUT   std_logic
        );
END IEEE_8021513_RX_src_h_rx_full;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_h_rx_full IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_h_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_h_crc_rx
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic;
          err                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_h_separate
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          enb_1_8_1                       :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          psdu_size                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          msg_duration                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
          block_size                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
          fec_rate                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          rep_number                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          concat_factor                   :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          scrambler_init                  :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          bat_id                          :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
          cp_id                           :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_spacing                    :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_number                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          end_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_h_remove_repetition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          start_in                        :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_h_scrambler
    USE ENTITY work.IEEE_8021513_RX_src_h_scrambler(rtl);

  FOR ALL : IEEE_8021513_RX_src_h_crc_rx
    USE ENTITY work.IEEE_8021513_RX_src_h_crc_rx(rtl);

  FOR ALL : IEEE_8021513_RX_src_h_separate
    USE ENTITY work.IEEE_8021513_RX_src_h_separate(rtl);

  FOR ALL : IEEE_8021513_RX_src_h_remove_repetition
    USE ENTITY work.IEEE_8021513_RX_src_h_remove_repetition(rtl);

  -- Signals
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_out1_start                : std_logic;
  SIGNAL Delay3_out1_end                  : std_logic;
  SIGNAL Delay3_out1_valid                : std_logic;
  SIGNAL h_scrambler_out1                 : std_logic;
  SIGNAL h_scrambler_out2_start           : std_logic;
  SIGNAL h_scrambler_out2_end             : std_logic;
  SIGNAL h_scrambler_out2_valid           : std_logic;
  SIGNAL h_crc_rx_out1                    : std_logic;
  SIGNAL h_crc_rx_out2_start              : std_logic;
  SIGNAL h_crc_rx_out2_valid              : std_logic;
  SIGNAL h_crc_rx_out3                    : std_logic;
  SIGNAL h_separate_out1                  : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL h_separate_out2                  : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL h_separate_out3                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL h_separate_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out7                  : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL h_separate_out8                  : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL h_separate_out9                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out10                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out11                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out12                 : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Rate_Transition_out1             : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL h_remove_repetition_out1         : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL h_remove_repetition_out2_start   : std_logic;
  SIGNAL h_remove_repetition_out2_end     : std_logic;
  SIGNAL h_remove_repetition_out2_valid   : std_logic;

BEGIN
  u_h_scrambler : IEEE_8021513_RX_src_h_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => Delay2_out1,
              ctrl_in_start => Delay3_out1_start,
              ctrl_in_end => Delay3_out1_end,
              ctrl_in_valid => Delay3_out1_valid,
              data_out => h_scrambler_out1,
              ctrl_out_start => h_scrambler_out2_start,
              ctrl_out_end => h_scrambler_out2_end,
              ctrl_out_valid => h_scrambler_out2_valid
              );

  u_h_crc_rx : IEEE_8021513_RX_src_h_crc_rx
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => h_scrambler_out1,
              ctrl_in_start => h_scrambler_out2_start,
              ctrl_in_end => h_scrambler_out2_end,
              ctrl_in_valid => h_scrambler_out2_valid,
              data_out => h_crc_rx_out1,
              ctrl_out_start => h_crc_rx_out2_start,
              ctrl_out_valid => h_crc_rx_out2_valid,
              err => h_crc_rx_out3
              );

  u_h_separate : IEEE_8021513_RX_src_h_separate
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1,
              data_in => h_crc_rx_out1,
              ctrl_in_start => h_crc_rx_out2_start,
              ctrl_in_valid => h_crc_rx_out2_valid,
              psdu_size => h_separate_out1,  -- ufix1 [24]
              msg_duration => h_separate_out2,  -- ufix1 [16]
              block_size => h_separate_out3,  -- ufix1 [2]
              fec_rate => h_separate_out4,  -- ufix1 [3]
              rep_number => h_separate_out5,  -- ufix1 [3]
              concat_factor => h_separate_out6,  -- ufix1 [3]
              scrambler_init => h_separate_out7,  -- ufix1 [4]
              bat_id => h_separate_out8,  -- ufix1 [5]
              cp_id => h_separate_out9,  -- ufix1 [3]
              mimo_spacing => h_separate_out10,  -- ufix1 [3]
              mimo_number => h_separate_out11,  -- ufix1 [3]
              end_rsvd => h_separate_out12
              );

  u_h_remove_repetition : IEEE_8021513_RX_src_h_remove_repetition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => data_in,  -- sfix4_En1
              start_in => start_in,
              data_out => h_remove_repetition_out1,  -- sfix4_En1
              ctrl_out_start => h_remove_repetition_out2_start,
              ctrl_out_end => h_remove_repetition_out2_end,
              ctrl_out_valid => h_remove_repetition_out2_valid
              );

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= ldpc_in;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_start <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_start <= ldpc_ctrl_in_start;
      END IF;
    END IF;
  END PROCESS c_process;


  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_end <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_end <= ldpc_ctrl_in_end;
      END IF;
    END IF;
  END PROCESS c_1_process;


  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_valid <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_valid <= ldpc_ctrl_in_valid;
      END IF;
    END IF;
  END PROCESS c_2_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Delay5_out1 <= h_separate_out12;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Rate_Transition_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1 <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Rate_Transition_out1 <= h_crc_rx_out3;
      END IF;
    END IF;
  END PROCESS Rate_Transition_output_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Delay4_out1 <= Rate_Transition_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  psdu_size <= h_separate_out1;

  msg_duration <= h_separate_out2;

  block_size <= h_separate_out3;

  fec_rate <= h_separate_out4;

  rep_number <= h_separate_out5;

  concat_factor <= h_separate_out6;

  scrambler_init <= h_separate_out7;

  bat_id <= h_separate_out8;

  cp_id <= h_separate_out9;

  mimo_spacing <= h_separate_out10;

  mimo_number <= h_separate_out11;

  end_rsvd <= Delay5_out1;

  err <= Delay4_out1;

  ldpc_out <= h_remove_repetition_out1;

  ldpc_ctrl_out_start <= h_remove_repetition_out2_start;

  ldpc_ctrl_out_end <= h_remove_repetition_out2_end;

  ldpc_ctrl_out_valid <= h_remove_repetition_out2_valid;

END rtl;

