-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip.vhd
-- Created: 2024-06-30 19:39:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip
-- Source Path: full_tx_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TDATA           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        AXI4_Stream_Slave_TVALID          :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TLAST           :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Stream_Slave_TREADY          :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END full_tx_ip;


ARCHITECTURE rtl OF full_tx_ip IS

  -- Component Declarations
  COMPONENT full_tx_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_axi_lite
    PORT( AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          IPCORE_CLK                      :   IN    std_logic;
          IPCORE_RESET                    :   IN    std_logic;  -- ufix1
          IPCORE_GLOBAL_RESET             :   IN    std_logic;
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_reg0                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reg1                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reg2                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reg3                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT full_tx_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          new_frame_in                    :   IN    std_logic;  -- ufix1
          reg0                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg2                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          valid_in                        :   IN    std_logic;  -- ufix1
          last_frame                      :   IN    std_logic;  -- ufix1
          ce_out_0                        :   OUT   std_logic;  -- ufix1
          ce_out_1                        :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;  -- ufix1
          ready                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT full_tx_ip_axi4_stream_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Slave_TDATA         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          AXI4_Stream_Slave_TVALID        :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TLAST         :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          AXI4_Stream_Slave_TREADY        :   OUT   std_logic;  -- ufix1
          user_data                       :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          user_valid                      :   OUT   std_logic;  -- ufix1
          user_TLAST                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT fpga_data_capture
    PORT( clk                             :   IN    std_logic;  -- ufix1
          data_out                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   IN    std_logic;  -- ufix1
          clk_enable_1                    :   IN    std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_reset_sync
    USE ENTITY work.full_tx_ip_reset_sync(rtl);

  FOR ALL : full_tx_ip_axi_lite
    USE ENTITY work.full_tx_ip_axi_lite(rtl);

  FOR ALL : full_tx_ip_dut
    USE ENTITY work.full_tx_ip_dut(rtl);

  FOR ALL : full_tx_ip_axi4_stream_slave
    USE ENTITY work.full_tx_ip_axi4_stream_slave(rtl);

  FOR ALL : fpga_data_capture
    USE ENTITY work.fpga_data_capture(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_reg0                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg2                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg3                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL new_frame_in_sig                 : std_logic;  -- ufix1
  SIGNAL top_user_data                    : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_user_TLAST                   : std_logic;  -- ufix1
  SIGNAL ce_out_0_sig                     : std_logic;  -- ufix1
  SIGNAL ce_out_1_sig                     : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL ready_sig                        : std_logic;  -- ufix1

BEGIN
  u_full_tx_ip_reset_sync_inst : full_tx_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset_x
              );

  u_full_tx_ip_axi_lite_inst : full_tx_ip_axi_lite
    PORT MAP( AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              IPCORE_CLK => IPCORE_CLK,
              IPCORE_RESET => reset_cm,  -- ufix1
              IPCORE_GLOBAL_RESET => reset_x,
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_reg0 => write_reg0,  -- ufix32
              write_reg1 => write_reg1,  -- ufix32
              write_reg2 => write_reg2,  -- ufix32
              write_reg3 => write_reg3,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_full_tx_ip_dut_inst : full_tx_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => write_axi_enable,  -- ufix1
              new_frame_in => new_frame_in_sig,  -- ufix1
              reg0 => write_reg0,  -- ufix32
              reg1 => write_reg1,  -- ufix32
              reg2 => write_reg2,  -- ufix32
              reg3 => write_reg3,  -- ufix32
              data_in => top_user_data,  -- ufix8
              valid_in => top_user_valid,  -- ufix1
              last_frame => top_user_TLAST,  -- ufix1
              ce_out_0 => ce_out_0_sig,  -- ufix1
              ce_out_1 => ce_out_1_sig,  -- ufix1
              data_out => data_out_sig,  -- sfix16_En14
              valid_out => valid_out_sig,  -- ufix1
              ready => ready_sig  -- ufix1
              );

  u_full_tx_ip_axi4_stream_slave_inst : full_tx_ip_axi4_stream_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              enb => const_1_1,
              AXI4_Stream_Slave_TDATA => AXI4_Stream_Slave_TDATA,  -- ufix8
              AXI4_Stream_Slave_TVALID => AXI4_Stream_Slave_TVALID,  -- ufix1
              AXI4_Stream_Slave_TLAST => AXI4_Stream_Slave_TLAST,  -- ufix1
              user_ready => ready_sig,  -- ufix1
              AXI4_Stream_Slave_TREADY => AXI4_Stream_Slave_TREADY,  -- ufix1
              user_data => top_user_data,  -- ufix8
              user_valid => top_user_valid,  -- ufix1
              user_TLAST => top_user_TLAST  -- ufix1
              );

  u_full_tx_ip_fpga_data_capture : fpga_data_capture
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              data_out => data_out_sig,  -- sfix16_En14
              valid_out => valid_out_sig,  -- ufix1
              clk_enable_1 => write_axi_enable  -- ufix1
              );

  reset_cm <=  NOT IPCORE_RESETN;

  ip_timestamp <= unsigned'(X"8F6D40F3");

  reset_before_sync <= reset_cm OR reset_internal;

  const_1_1 <= '1';

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

