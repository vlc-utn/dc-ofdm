-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_full_ofdm_modulator.vhd
-- Created: 2024-06-30 19:38:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_full_ofdm_modulator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator
-- Hierarchy Level: 1
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_full_ofdm_modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_sym                      :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_out                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END full_tx_ip_src_full_ofdm_modulator;


ARCHITECTURE rtl OF full_tx_ip_src_full_ofdm_modulator IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_sync_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          new_ofdm_symbol                 :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          valid_in                        :   IN    std_logic;
          s1                              :   OUT   std_logic;
          s2                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_enabled_qam_and_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_rsvd                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          s2_in                           :   IN    std_logic;
          s1_in                           :   IN    std_logic;
          Enable                          :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          cp_len_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_scrambler                 :   OUT   std_logic;
          init_out                        :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_ofdm_modulator_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_rising_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_frequency_upshift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_sync_constellation_scrambler
    USE ENTITY work.full_tx_ip_src_sync_constellation_scrambler(rtl);

  FOR ALL : full_tx_ip_src_enabled_qam_and_scrambler
    USE ENTITY work.full_tx_ip_src_enabled_qam_and_scrambler(rtl);

  FOR ALL : full_tx_ip_src_ofdm_modulator_block
    USE ENTITY work.full_tx_ip_src_ofdm_modulator_block(rtl);

  FOR ALL : full_tx_ip_src_interpolator
    USE ENTITY work.full_tx_ip_src_interpolator(rtl);

  FOR ALL : full_tx_ip_src_rising_edge_detector_block
    USE ENTITY work.full_tx_ip_src_rising_edge_detector_block(rtl);

  FOR ALL : full_tx_ip_src_frequency_upshift
    USE ENTITY work.full_tx_ip_src_frequency_upshift(rtl);

  -- Signals
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL ready_out                        : std_logic;
  SIGNAL enabled_qam_and_scrambler_out2   : std_logic;
  SIGNAL valid_new                        : std_logic;
  SIGNAL ofdm_modulator_out3              : std_logic;
  SIGNAL enabled_qam_and_scrambler_out4   : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL enabled_qam_and_scrambler_out6   : std_logic;
  SIGNAL enabled_qam_and_scrambler_out5   : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL sync_constellation_scrambler_out1 : std_logic;
  SIGNAL sync_constellation_scrambler_out2 : std_logic;
  SIGNAL out_new_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL out_new_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL enabled_qam_and_scrambler_out3   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ofdm_modulator_out1_re           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out1_im           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out2              : std_logic;
  SIGNAL interpolator_out1_re             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL interpolator_out1_im             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL interpolator_out2                : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL frequency_upshift_out1           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL frequency_upshift_out2           : std_logic;

BEGIN
  u_sync_constellation_scrambler : full_tx_ip_src_sync_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              new_ofdm_symbol => enabled_qam_and_scrambler_out6,
              init => enabled_qam_and_scrambler_out5,  -- boolean [13]
              valid_in => Logical_Operator_out1,
              s1 => sync_constellation_scrambler_out1,
              s2 => sync_constellation_scrambler_out2
              );

  u_enabled_qam_and_scrambler : full_tx_ip_src_enabled_qam_and_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => data_in,  -- ufix12
              valid_in => valid_in,
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              init => init,  -- boolean [13]
              new_rsvd => new_ofdm_sym,
              cp_len => cp_len,  -- uint8
              s2_in => sync_constellation_scrambler_out2,
              s1_in => sync_constellation_scrambler_out1,
              Enable => ready_out,
              data_out_re => out_new_re,  -- sfix16_En14
              data_out_im => out_new_im,  -- sfix16_En14
              valid_out => enabled_qam_and_scrambler_out2,
              cp_len_out => enabled_qam_and_scrambler_out3,  -- uint8
              valid_scrambler => enabled_qam_and_scrambler_out4,
              init_out => enabled_qam_and_scrambler_out5,  -- boolean [13]
              new_out => enabled_qam_and_scrambler_out6
              );

  u_ofdm_modulator : full_tx_ip_src_ofdm_modulator_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => out_new_re,  -- sfix16_En14
              data_in_im => out_new_im,  -- sfix16_En14
              valid_in => valid_new,
              cp_len => enabled_qam_and_scrambler_out3,  -- uint8
              data_out_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_out_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_out => ofdm_modulator_out2,
              ready => ofdm_modulator_out3
              );

  u_interpolator : full_tx_ip_src_interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_in_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_in => ofdm_modulator_out2,
              data_out_re => interpolator_out1_re,  -- sfix16_En14
              data_out_im => interpolator_out1_im,  -- sfix16_En14
              valid_out => interpolator_out2
              );

  u_rising_edge_detector : full_tx_ip_src_rising_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => interpolator_out2,
              Out_rsvd => rising_edge_detector_out1
              );

  u_frequency_upshift : full_tx_ip_src_frequency_upshift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in_re => interpolator_out1_re,  -- sfix16_En14
              data_in_im => interpolator_out1_im,  -- sfix16_En14
              valid_in => interpolator_out2,
              reset => rising_edge_detector_out1,
              data_out => frequency_upshift_out1,  -- sfix16_En14
              valid_out => frequency_upshift_out2
              );

  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(2 DOWNTO 1) <= delayMatch_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(2);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  valid_new <= ready_out AND enabled_qam_and_scrambler_out2;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        ready_out <= ofdm_modulator_out3;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator_out1 <= enabled_qam_and_scrambler_out4 AND ofdm_modulator_out3;

  data_out <= frequency_upshift_out1;

  valid_out <= frequency_upshift_out2;

  ready <= ready_out;

END rtl;

