-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_write_frame_to_ram.vhd
-- Created: 2024-06-30 19:38:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_write_frame_to_ram
-- Source Path: HDLTx/full_tx/write_frame_to_ram
-- Hierarchy Level: 1
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_write_frame_to_ram IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        preamble                          :   IN    std_logic;
        preamble_valid                    :   IN    std_logic;
        channel                           :   IN    std_logic;
        channel_valid                     :   IN    std_logic;
        header                            :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        header_valid                      :   IN    std_logic;
        payload                           :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        payload_valid                     :   IN    std_logic;
        payload_len                       :   IN    std_logic_vector(28 DOWNTO 0);  -- ufix29
        write_data                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        wr_addr                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        we                                :   OUT   std_logic;
        end_rsvd                          :   OUT   std_logic;
        ram_size                          :   OUT   std_logic_vector(37 DOWNTO 0)  -- ufix38
        );
END full_tx_ip_src_write_frame_to_ram;


ARCHITECTURE rtl OF full_tx_ip_src_write_frame_to_ram IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_ram_formatting
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          channel_valid                   :   IN    std_logic;
          header_valid                    :   IN    std_logic;
          payload_valid                   :   IN    std_logic;
          preamble                        :   IN    std_logic;
          channel                         :   IN    std_logic;
          header                          :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          payload                         :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          Out1                            :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_ram_formatting
    USE ENTITY work.full_tx_ip_src_ram_formatting(rtl);

  -- Signals
  SIGNAL ram_formatting_out1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Constant43_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant73_out1                  : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL payload_len_unsigned             : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Delay8_out1                      : unsigned(36 DOWNTO 0);  -- ufix37
  SIGNAL Add1_out1                        : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL Delay9_out1                      : unsigned(37 DOWNTO 0);  -- ufix38
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL preamble_valid_1                 : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL channel_valid_1                  : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL header_valid_1                   : std_logic;
  SIGNAL we_1                             : std_logic;
  SIGNAL count_step                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_reset                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL wr_addr_1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL count_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL wr_addr_tmp                      : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  u_ram_formatting : full_tx_ip_src_ram_formatting
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              channel_valid => channel_valid,
              header_valid => header_valid,
              payload_valid => payload_valid,
              preamble => preamble,
              channel => channel,
              header => header,  -- boolean [2]
              payload => payload,  -- boolean [2]
              Out1 => ram_formatting_out1  -- ufix12
              );

  Constant43_out1 <= to_unsigned(16#F5#, 8);

  Constant73_out1 <= to_unsigned(16#1044#, 13);

  payload_len_unsigned <= unsigned(payload_len);

  Delay8_out1 <= Constant43_out1 * payload_len_unsigned;

  Add1_out1 <= resize(Constant73_out1, 38) + resize(Delay8_out1, 38);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_unsigned(1, 38);
      ELSIF enb_1_2_0 = '1' THEN
        Delay9_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  stateControl_1 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch3_reg(0) <= stateControl_1;
        delayMatch3_reg(2 DOWNTO 1) <= delayMatch3_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_2 <= delayMatch3_reg(2);

  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= preamble_valid;
        delayMatch_reg(2 DOWNTO 1) <= delayMatch_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  preamble_valid_1 <= delayMatch_reg(2);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= channel_valid;
        delayMatch1_reg(2 DOWNTO 1) <= delayMatch1_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  channel_valid_1 <= delayMatch1_reg(2);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch2_reg(0) <= header_valid;
        delayMatch2_reg(2 DOWNTO 1) <= delayMatch2_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  header_valid_1 <= delayMatch2_reg(2);

  we_1 <= payload_valid OR (header_valid_1 OR (preamble_valid_1 OR channel_valid_1));

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#0001#, 16);

  count_reset <= to_unsigned(16#0000#, 16);

  stateControl_3 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch4_reg(0) <= stateControl_3;
        delayMatch4_reg(2 DOWNTO 1) <= delayMatch4_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_4 <= delayMatch4_reg(2);

  enb_1_2_0_gated_1 <= stateControl_4 AND enb_1_2_0;

  count <= wr_addr_1 + count_step;

  
  count_1 <= wr_addr_1 WHEN we_1 = '0' ELSE
      count;

  
  Relational_Operator_out1 <= '1' WHEN Delay9_out1 = resize(wr_addr_1, 38) ELSE
      '0';

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay3_out1 <= Relational_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  count_2 <= count_1 WHEN Delay3_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wr_addr_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        wr_addr_1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  wr_addr_tmp <= wr_addr_1;

  wr_addr <= std_logic_vector(wr_addr_tmp);

  ram_size <= std_logic_vector(Delay9_out1);

  write_data <= ram_formatting_out1;

  we <= we_1;

  end_rsvd <= Delay3_out1;

END rtl;

