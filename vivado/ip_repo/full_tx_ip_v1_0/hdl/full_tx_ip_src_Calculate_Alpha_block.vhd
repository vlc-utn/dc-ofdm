-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_Calculate_Alpha_block.vhd
-- Created: 2024-06-30 19:38:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_Calculate_Alpha_block
-- Source Path: HDLTx/full_tx/payload_full/reduced_ldpc/Hc_12S-B80/Calculate Alpha
-- Hierarchy Level: 4
-- Model version: 4.75
-- 
-- Calculate Alpha
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_tx_ip_src_full_tx_pac.ALL;

ENTITY full_tx_ip_src_Calculate_Alpha_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
        reset                             :   IN    std_logic;  -- ufix1
        encEnable                         :   IN    std_logic;  -- ufix1
        alpha                             :   OUT   std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
        alphaValid                        :   OUT   std_logic;  -- ufix1
        alphaAddr                         :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        columnVal                         :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix5
        parity1                           :   OUT   std_logic_vector(79 DOWNTO 0)  -- ufix1 [80]
        );
END full_tx_ip_src_Calculate_Alpha_block;


ARCHITECTURE rtl OF full_tx_ip_src_Calculate_Alpha_block IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_BarrelRotator_block
    PORT( data                            :   IN    std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
          shift                           :   IN    std_logic_vector(6 DOWNTO 0);  -- ufix7
          shiftData                       :   OUT   std_logic_vector(79 DOWNTO 0)  -- ufix1 [80]
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic;  -- ufix1
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_BarrelRotator_block
    USE ENTITY work.full_tx_ip_src_BarrelRotator_block(rtl);

  FOR ALL : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    USE ENTITY work.full_tx_ip_src_SimpleDualPortRAM_singlebit_block(rtl);

  -- Constants
  CONSTANT alphaController_data           : vector_of_signed8(0 TO 11) := 
    (to_signed(16#06#, 8), to_signed(16#07#, 8), to_signed(16#07#, 8), to_signed(16#06#, 8), to_signed(16#06#, 8),
     to_signed(16#06#, 8), to_signed(16#06#, 8), to_signed(16#06#, 8), to_signed(16#07#, 8), to_signed(16#06#, 8),
     to_signed(16#07#, 8), to_signed(16#06#, 8));  -- int8 [12]
  CONSTANT alphacontroller_data_0         : vector_of_signed8(0 TO 12) := 
    (to_signed(16#01#, 8), to_signed(16#02#, 8), to_signed(16#03#, 8), to_signed(16#04#, 8), to_signed(16#05#, 8),
     to_signed(16#06#, 8), to_signed(16#07#, 8), to_signed(16#08#, 8), to_signed(16#09#, 8), to_signed(16#0A#, 8),
     to_signed(16#0B#, 8), to_signed(16#0C#, 8), to_signed(16#01#, 8));  -- int8 [13]
  CONSTANT Shift_LUT_data                 : vector_of_unsigned7(0 TO 83) := 
    (to_unsigned(16#1B#, 7), to_unsigned(16#00#, 7), to_unsigned(16#29#, 7), to_unsigned(16#10#, 7),
     to_unsigned(16#2D#, 7), to_unsigned(16#3F#, 7), to_unsigned(16#2A#, 7), to_unsigned(16#4E#, 7),
     to_unsigned(16#1D#, 7), to_unsigned(16#16#, 7), to_unsigned(16#23#, 7), to_unsigned(16#2E#, 7),
     to_unsigned(16#37#, 7), to_unsigned(16#01#, 7), to_unsigned(16#2C#, 7), to_unsigned(16#4D#, 7),
     to_unsigned(16#1B#, 7), to_unsigned(16#37#, 7), to_unsigned(16#15#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#09#, 7), to_unsigned(16#48#, 7), to_unsigned(16#0D#, 7), to_unsigned(16#1C#, 7),
     to_unsigned(16#13#, 7), to_unsigned(16#46#, 7), to_unsigned(16#3B#, 7), to_unsigned(16#05#, 7),
     to_unsigned(16#2E#, 7), to_unsigned(16#30#, 7), to_unsigned(16#3A#, 7), to_unsigned(16#07#, 7),
     to_unsigned(16#25#, 7), to_unsigned(16#2F#, 7), to_unsigned(16#23#, 7), to_unsigned(16#26#, 7),
     to_unsigned(16#1E#, 7), to_unsigned(16#2F#, 7), to_unsigned(16#3C#, 7), to_unsigned(16#30#, 7),
     to_unsigned(16#13#, 7), to_unsigned(16#1A#, 7), to_unsigned(16#29#, 7), to_unsigned(16#34#, 7),
     to_unsigned(16#23#, 7), to_unsigned(16#00#, 7), to_unsigned(16#46#, 7), to_unsigned(16#08#, 7),
     to_unsigned(16#0A#, 7), to_unsigned(16#3E#, 7), to_unsigned(16#19#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#15#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#0A#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7),
     to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7), to_unsigned(16#00#, 7));  -- ufix7 [84]
  CONSTANT Column_LUT_data                : vector_of_unsigned5(0 TO 83) := 
    (to_unsigned(16#01#, 5), to_unsigned(16#03#, 5), to_unsigned(16#03#, 5), to_unsigned(16#01#, 5),
     to_unsigned(16#04#, 5), to_unsigned(16#03#, 5), to_unsigned(16#04#, 5), to_unsigned(16#05#, 5),
     to_unsigned(16#02#, 5), to_unsigned(16#03#, 5), to_unsigned(16#01#, 5), to_unsigned(16#02#, 5),
     to_unsigned(16#05#, 5), to_unsigned(16#05#, 5), to_unsigned(16#07#, 5), to_unsigned(16#02#, 5),
     to_unsigned(16#06#, 5), to_unsigned(16#07#, 5), to_unsigned(16#06#, 5), to_unsigned(16#06#, 5),
     to_unsigned(16#03#, 5), to_unsigned(16#04#, 5), to_unsigned(16#06#, 5), to_unsigned(16#03#, 5),
     to_unsigned(16#06#, 5), to_unsigned(16#07#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#06#, 5),
     to_unsigned(16#08#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#08#, 5), to_unsigned(16#08#, 5),
     to_unsigned(16#07#, 5), to_unsigned(16#07#, 5), to_unsigned(16#08#, 5), to_unsigned(16#07#, 5),
     to_unsigned(16#08#, 5), to_unsigned(16#09#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#08#, 5),
     to_unsigned(16#09#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#09#, 5),
     to_unsigned(16#0B#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0A#, 5), to_unsigned(16#0B#, 5),
     to_unsigned(16#0D#, 5), to_unsigned(16#0B#, 5), to_unsigned(16#0C#, 5), to_unsigned(16#10#, 5),
     to_unsigned(16#11#, 5), to_unsigned(16#12#, 5), to_unsigned(16#13#, 5), to_unsigned(16#14#, 5),
     to_unsigned(16#0C#, 5), to_unsigned(16#16#, 5), to_unsigned(16#0D#, 5), to_unsigned(16#0D#, 5),
     to_unsigned(16#0E#, 5), to_unsigned(16#0E#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#11#, 5),
     to_unsigned(16#12#, 5), to_unsigned(16#13#, 5), to_unsigned(16#14#, 5), to_unsigned(16#15#, 5),
     to_unsigned(16#15#, 5), to_unsigned(16#17#, 5), to_unsigned(16#17#, 5), to_unsigned(16#18#, 5),
     to_unsigned(16#00#, 5), to_unsigned(16#0F#, 5), to_unsigned(16#10#, 5), to_unsigned(16#00#, 5),
     to_unsigned(16#00#, 5), to_unsigned(16#00#, 5), to_unsigned(16#00#, 5), to_unsigned(16#00#, 5),
     to_unsigned(16#16#, 5), to_unsigned(16#00#, 5), to_unsigned(16#18#, 5), to_unsigned(16#00#, 5));  -- ufix5 [84]

  -- Signals
  SIGNAL alphaController_countLayer       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaController_layerDone        : std_logic;
  SIGNAL alphaController_idxCount         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alphaController_xIdx             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaController_yIdx             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alphaController_encEnb           : std_logic;
  SIGNAL alphaController_alphaEnb         : std_logic;
  SIGNAL alphaController_alphaDone        : std_logic;
  SIGNAL alphaController_rdCount          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaController_countLayer_next  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaController_layerDone_next   : std_logic;
  SIGNAL alphaController_idxCount_next    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alphaController_xIdx_next        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaController_yIdx_next        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL alphaController_encEnb_next      : std_logic;
  SIGNAL alphaController_alphaEnb_next    : std_logic;
  SIGNAL alphaController_alphaDone_next   : std_logic;
  SIGNAL alphaController_rdCount_next     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL countLayer                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL xIndex                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL yIndex                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL layerDone                        : std_logic;  -- ufix1
  SIGNAL rdValid                          : std_logic;  -- ufix1
  SIGNAL rdAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL aValid                           : std_logic;  -- ufix1
  SIGNAL rdvalid_register_reg             : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rdValidReg                       : std_logic;  -- ufix1
  SIGNAL rdValidReg1                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL zeroData                         : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL const1                           : std_logic;  -- ufix1
  SIGNAL alpha_sub_cast                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL xIdx                             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alpha_sub_cast_1                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL yIdx                             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Shift_LUT_add_cast               : signed(31 DOWNTO 0);  -- int32
  SIGNAL Shift_LUT_cast                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Shift_LUT_mul_temp               : signed(37 DOWNTO 0);  -- sfix38
  SIGNAL sVal                             : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rdData                           : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL shift_register_reg               : vector_of_unsigned7(0 TO 2);  -- ufix7 [3]
  SIGNAL shiftVal                         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL sData                            : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL sDataReg                         : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL sDataTmp                         : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL shiftData                        : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL shiftData_0                      : std_logic;  -- ufix1
  SIGNAL layerdone_register_reg           : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL layerDoneReg                     : std_logic;  -- ufix1
  SIGNAL encEnb_neg                       : std_logic;  -- ufix1
  SIGNAL encEnbNegReg                     : std_logic;  -- ufix1
  SIGNAL encEnbTmp                        : std_logic;  -- ufix1
  SIGNAL encenb_tmp_register_reg          : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL encEnbTmp1                       : std_logic;  -- ufix1
  SIGNAL wrEnb                            : std_logic;  -- ufix1
  SIGNAL wrEnbReg                         : std_logic;  -- ufix1
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL const1Reg                        : std_logic;  -- ufix1
  SIGNAL shiftData_1                      : std_logic;  -- ufix1
  SIGNAL shiftData_2                      : std_logic;  -- ufix1
  SIGNAL shiftData_3                      : std_logic;  -- ufix1
  SIGNAL shiftData_4                      : std_logic;  -- ufix1
  SIGNAL shiftData_5                      : std_logic;  -- ufix1
  SIGNAL shiftData_6                      : std_logic;  -- ufix1
  SIGNAL shiftData_7                      : std_logic;  -- ufix1
  SIGNAL shiftData_8                      : std_logic;  -- ufix1
  SIGNAL shiftData_9                      : std_logic;  -- ufix1
  SIGNAL shiftData_10                     : std_logic;  -- ufix1
  SIGNAL shiftData_11                     : std_logic;  -- ufix1
  SIGNAL shiftData_12                     : std_logic;  -- ufix1
  SIGNAL shiftData_13                     : std_logic;  -- ufix1
  SIGNAL shiftData_14                     : std_logic;  -- ufix1
  SIGNAL shiftData_15                     : std_logic;  -- ufix1
  SIGNAL shiftData_16                     : std_logic;  -- ufix1
  SIGNAL shiftData_17                     : std_logic;  -- ufix1
  SIGNAL shiftData_18                     : std_logic;  -- ufix1
  SIGNAL shiftData_19                     : std_logic;  -- ufix1
  SIGNAL shiftData_20                     : std_logic;  -- ufix1
  SIGNAL shiftData_21                     : std_logic;  -- ufix1
  SIGNAL shiftData_22                     : std_logic;  -- ufix1
  SIGNAL shiftData_23                     : std_logic;  -- ufix1
  SIGNAL shiftData_24                     : std_logic;  -- ufix1
  SIGNAL shiftData_25                     : std_logic;  -- ufix1
  SIGNAL shiftData_26                     : std_logic;  -- ufix1
  SIGNAL shiftData_27                     : std_logic;  -- ufix1
  SIGNAL shiftData_28                     : std_logic;  -- ufix1
  SIGNAL shiftData_29                     : std_logic;  -- ufix1
  SIGNAL shiftData_30                     : std_logic;  -- ufix1
  SIGNAL shiftData_31                     : std_logic;  -- ufix1
  SIGNAL shiftData_32                     : std_logic;  -- ufix1
  SIGNAL shiftData_33                     : std_logic;  -- ufix1
  SIGNAL shiftData_34                     : std_logic;  -- ufix1
  SIGNAL shiftData_35                     : std_logic;  -- ufix1
  SIGNAL shiftData_36                     : std_logic;  -- ufix1
  SIGNAL shiftData_37                     : std_logic;  -- ufix1
  SIGNAL shiftData_38                     : std_logic;  -- ufix1
  SIGNAL shiftData_39                     : std_logic;  -- ufix1
  SIGNAL shiftData_40                     : std_logic;  -- ufix1
  SIGNAL shiftData_41                     : std_logic;  -- ufix1
  SIGNAL shiftData_42                     : std_logic;  -- ufix1
  SIGNAL shiftData_43                     : std_logic;  -- ufix1
  SIGNAL shiftData_44                     : std_logic;  -- ufix1
  SIGNAL shiftData_45                     : std_logic;  -- ufix1
  SIGNAL shiftData_46                     : std_logic;  -- ufix1
  SIGNAL shiftData_47                     : std_logic;  -- ufix1
  SIGNAL shiftData_48                     : std_logic;  -- ufix1
  SIGNAL shiftData_49                     : std_logic;  -- ufix1
  SIGNAL shiftData_50                     : std_logic;  -- ufix1
  SIGNAL shiftData_51                     : std_logic;  -- ufix1
  SIGNAL shiftData_52                     : std_logic;  -- ufix1
  SIGNAL shiftData_53                     : std_logic;  -- ufix1
  SIGNAL shiftData_54                     : std_logic;  -- ufix1
  SIGNAL shiftData_55                     : std_logic;  -- ufix1
  SIGNAL shiftData_56                     : std_logic;  -- ufix1
  SIGNAL shiftData_57                     : std_logic;  -- ufix1
  SIGNAL shiftData_58                     : std_logic;  -- ufix1
  SIGNAL shiftData_59                     : std_logic;  -- ufix1
  SIGNAL shiftData_60                     : std_logic;  -- ufix1
  SIGNAL shiftData_61                     : std_logic;  -- ufix1
  SIGNAL shiftData_62                     : std_logic;  -- ufix1
  SIGNAL shiftData_63                     : std_logic;  -- ufix1
  SIGNAL shiftData_64                     : std_logic;  -- ufix1
  SIGNAL shiftData_65                     : std_logic;  -- ufix1
  SIGNAL shiftData_66                     : std_logic;  -- ufix1
  SIGNAL shiftData_67                     : std_logic;  -- ufix1
  SIGNAL shiftData_68                     : std_logic;  -- ufix1
  SIGNAL shiftData_69                     : std_logic;  -- ufix1
  SIGNAL shiftData_70                     : std_logic;  -- ufix1
  SIGNAL shiftData_71                     : std_logic;  -- ufix1
  SIGNAL shiftData_72                     : std_logic;  -- ufix1
  SIGNAL shiftData_73                     : std_logic;  -- ufix1
  SIGNAL shiftData_74                     : std_logic;  -- ufix1
  SIGNAL shiftData_75                     : std_logic;  -- ufix1
  SIGNAL shiftData_76                     : std_logic;  -- ufix1
  SIGNAL shiftData_77                     : std_logic;  -- ufix1
  SIGNAL shiftData_78                     : std_logic;  -- ufix1
  SIGNAL shiftData_79                     : std_logic;  -- ufix1
  SIGNAL switchData                       : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL switchData_79                    : std_logic;  -- ufix1
  SIGNAL shiftData_79_1                   : std_logic;  -- ufix1
  SIGNAL switchData_78                    : std_logic;  -- ufix1
  SIGNAL shiftData_78_1                   : std_logic;  -- ufix1
  SIGNAL switchData_77                    : std_logic;  -- ufix1
  SIGNAL shiftData_77_1                   : std_logic;  -- ufix1
  SIGNAL switchData_76                    : std_logic;  -- ufix1
  SIGNAL shiftData_76_1                   : std_logic;  -- ufix1
  SIGNAL switchData_75                    : std_logic;  -- ufix1
  SIGNAL shiftData_75_1                   : std_logic;  -- ufix1
  SIGNAL switchData_74                    : std_logic;  -- ufix1
  SIGNAL shiftData_74_1                   : std_logic;  -- ufix1
  SIGNAL switchData_73                    : std_logic;  -- ufix1
  SIGNAL shiftData_73_1                   : std_logic;  -- ufix1
  SIGNAL switchData_72                    : std_logic;  -- ufix1
  SIGNAL shiftData_72_1                   : std_logic;  -- ufix1
  SIGNAL switchData_71                    : std_logic;  -- ufix1
  SIGNAL shiftData_71_1                   : std_logic;  -- ufix1
  SIGNAL switchData_70                    : std_logic;  -- ufix1
  SIGNAL shiftData_70_1                   : std_logic;  -- ufix1
  SIGNAL switchData_69                    : std_logic;  -- ufix1
  SIGNAL shiftData_69_1                   : std_logic;  -- ufix1
  SIGNAL switchData_68                    : std_logic;  -- ufix1
  SIGNAL shiftData_68_1                   : std_logic;  -- ufix1
  SIGNAL switchData_67                    : std_logic;  -- ufix1
  SIGNAL shiftData_67_1                   : std_logic;  -- ufix1
  SIGNAL switchData_66                    : std_logic;  -- ufix1
  SIGNAL shiftData_66_1                   : std_logic;  -- ufix1
  SIGNAL switchData_65                    : std_logic;  -- ufix1
  SIGNAL shiftData_65_1                   : std_logic;  -- ufix1
  SIGNAL switchData_64                    : std_logic;  -- ufix1
  SIGNAL shiftData_64_1                   : std_logic;  -- ufix1
  SIGNAL switchData_63                    : std_logic;  -- ufix1
  SIGNAL shiftData_63_1                   : std_logic;  -- ufix1
  SIGNAL switchData_62                    : std_logic;  -- ufix1
  SIGNAL shiftData_62_1                   : std_logic;  -- ufix1
  SIGNAL switchData_61                    : std_logic;  -- ufix1
  SIGNAL shiftData_61_1                   : std_logic;  -- ufix1
  SIGNAL switchData_60                    : std_logic;  -- ufix1
  SIGNAL shiftData_60_1                   : std_logic;  -- ufix1
  SIGNAL switchData_59                    : std_logic;  -- ufix1
  SIGNAL shiftData_59_1                   : std_logic;  -- ufix1
  SIGNAL switchData_58                    : std_logic;  -- ufix1
  SIGNAL shiftData_58_1                   : std_logic;  -- ufix1
  SIGNAL switchData_57                    : std_logic;  -- ufix1
  SIGNAL shiftData_57_1                   : std_logic;  -- ufix1
  SIGNAL switchData_56                    : std_logic;  -- ufix1
  SIGNAL shiftData_56_1                   : std_logic;  -- ufix1
  SIGNAL switchData_55                    : std_logic;  -- ufix1
  SIGNAL shiftData_55_1                   : std_logic;  -- ufix1
  SIGNAL switchData_54                    : std_logic;  -- ufix1
  SIGNAL shiftData_54_1                   : std_logic;  -- ufix1
  SIGNAL switchData_53                    : std_logic;  -- ufix1
  SIGNAL shiftData_53_1                   : std_logic;  -- ufix1
  SIGNAL switchData_52                    : std_logic;  -- ufix1
  SIGNAL shiftData_52_1                   : std_logic;  -- ufix1
  SIGNAL switchData_51                    : std_logic;  -- ufix1
  SIGNAL shiftData_51_1                   : std_logic;  -- ufix1
  SIGNAL switchData_50                    : std_logic;  -- ufix1
  SIGNAL shiftData_50_1                   : std_logic;  -- ufix1
  SIGNAL switchData_49                    : std_logic;  -- ufix1
  SIGNAL shiftData_49_1                   : std_logic;  -- ufix1
  SIGNAL switchData_48                    : std_logic;  -- ufix1
  SIGNAL shiftData_48_1                   : std_logic;  -- ufix1
  SIGNAL switchData_47                    : std_logic;  -- ufix1
  SIGNAL shiftData_47_1                   : std_logic;  -- ufix1
  SIGNAL switchData_46                    : std_logic;  -- ufix1
  SIGNAL shiftData_46_1                   : std_logic;  -- ufix1
  SIGNAL switchData_45                    : std_logic;  -- ufix1
  SIGNAL shiftData_45_1                   : std_logic;  -- ufix1
  SIGNAL switchData_44                    : std_logic;  -- ufix1
  SIGNAL shiftData_44_1                   : std_logic;  -- ufix1
  SIGNAL switchData_43                    : std_logic;  -- ufix1
  SIGNAL shiftData_43_1                   : std_logic;  -- ufix1
  SIGNAL switchData_42                    : std_logic;  -- ufix1
  SIGNAL shiftData_42_1                   : std_logic;  -- ufix1
  SIGNAL switchData_41                    : std_logic;  -- ufix1
  SIGNAL shiftData_41_1                   : std_logic;  -- ufix1
  SIGNAL switchData_40                    : std_logic;  -- ufix1
  SIGNAL shiftData_40_1                   : std_logic;  -- ufix1
  SIGNAL switchData_39                    : std_logic;  -- ufix1
  SIGNAL shiftData_39_1                   : std_logic;  -- ufix1
  SIGNAL switchData_38                    : std_logic;  -- ufix1
  SIGNAL shiftData_38_1                   : std_logic;  -- ufix1
  SIGNAL switchData_37                    : std_logic;  -- ufix1
  SIGNAL shiftData_37_1                   : std_logic;  -- ufix1
  SIGNAL switchData_36                    : std_logic;  -- ufix1
  SIGNAL shiftData_36_1                   : std_logic;  -- ufix1
  SIGNAL switchData_35                    : std_logic;  -- ufix1
  SIGNAL shiftData_35_1                   : std_logic;  -- ufix1
  SIGNAL switchData_34                    : std_logic;  -- ufix1
  SIGNAL shiftData_34_1                   : std_logic;  -- ufix1
  SIGNAL switchData_33                    : std_logic;  -- ufix1
  SIGNAL shiftData_33_1                   : std_logic;  -- ufix1
  SIGNAL switchData_32                    : std_logic;  -- ufix1
  SIGNAL shiftData_32_1                   : std_logic;  -- ufix1
  SIGNAL switchData_31                    : std_logic;  -- ufix1
  SIGNAL shiftData_31_1                   : std_logic;  -- ufix1
  SIGNAL switchData_30                    : std_logic;  -- ufix1
  SIGNAL shiftData_30_1                   : std_logic;  -- ufix1
  SIGNAL switchData_29                    : std_logic;  -- ufix1
  SIGNAL shiftData_29_1                   : std_logic;  -- ufix1
  SIGNAL switchData_28                    : std_logic;  -- ufix1
  SIGNAL shiftData_28_1                   : std_logic;  -- ufix1
  SIGNAL switchData_27                    : std_logic;  -- ufix1
  SIGNAL shiftData_27_1                   : std_logic;  -- ufix1
  SIGNAL switchData_26                    : std_logic;  -- ufix1
  SIGNAL shiftData_26_1                   : std_logic;  -- ufix1
  SIGNAL switchData_25                    : std_logic;  -- ufix1
  SIGNAL shiftData_25_1                   : std_logic;  -- ufix1
  SIGNAL switchData_24                    : std_logic;  -- ufix1
  SIGNAL shiftData_24_1                   : std_logic;  -- ufix1
  SIGNAL switchData_23                    : std_logic;  -- ufix1
  SIGNAL shiftData_23_1                   : std_logic;  -- ufix1
  SIGNAL switchData_22                    : std_logic;  -- ufix1
  SIGNAL shiftData_22_1                   : std_logic;  -- ufix1
  SIGNAL switchData_21                    : std_logic;  -- ufix1
  SIGNAL shiftData_21_1                   : std_logic;  -- ufix1
  SIGNAL switchData_20                    : std_logic;  -- ufix1
  SIGNAL shiftData_20_1                   : std_logic;  -- ufix1
  SIGNAL switchData_19                    : std_logic;  -- ufix1
  SIGNAL shiftData_19_1                   : std_logic;  -- ufix1
  SIGNAL switchData_18                    : std_logic;  -- ufix1
  SIGNAL shiftData_18_1                   : std_logic;  -- ufix1
  SIGNAL switchData_17                    : std_logic;  -- ufix1
  SIGNAL shiftData_17_1                   : std_logic;  -- ufix1
  SIGNAL switchData_16                    : std_logic;  -- ufix1
  SIGNAL shiftData_16_1                   : std_logic;  -- ufix1
  SIGNAL switchData_15                    : std_logic;  -- ufix1
  SIGNAL shiftData_15_1                   : std_logic;  -- ufix1
  SIGNAL switchData_14                    : std_logic;  -- ufix1
  SIGNAL shiftData_14_1                   : std_logic;  -- ufix1
  SIGNAL switchData_13                    : std_logic;  -- ufix1
  SIGNAL shiftData_13_1                   : std_logic;  -- ufix1
  SIGNAL switchData_12                    : std_logic;  -- ufix1
  SIGNAL shiftData_12_1                   : std_logic;  -- ufix1
  SIGNAL switchData_11                    : std_logic;  -- ufix1
  SIGNAL shiftData_11_1                   : std_logic;  -- ufix1
  SIGNAL switchData_10                    : std_logic;  -- ufix1
  SIGNAL shiftData_10_1                   : std_logic;  -- ufix1
  SIGNAL switchData_9                     : std_logic;  -- ufix1
  SIGNAL shiftData_9_1                    : std_logic;  -- ufix1
  SIGNAL switchData_8                     : std_logic;  -- ufix1
  SIGNAL shiftData_8_1                    : std_logic;  -- ufix1
  SIGNAL switchData_7                     : std_logic;  -- ufix1
  SIGNAL shiftData_7_1                    : std_logic;  -- ufix1
  SIGNAL switchData_6                     : std_logic;  -- ufix1
  SIGNAL shiftData_6_1                    : std_logic;  -- ufix1
  SIGNAL switchData_5                     : std_logic;  -- ufix1
  SIGNAL shiftData_5_1                    : std_logic;  -- ufix1
  SIGNAL switchData_4                     : std_logic;  -- ufix1
  SIGNAL shiftData_4_1                    : std_logic;  -- ufix1
  SIGNAL switchData_3                     : std_logic;  -- ufix1
  SIGNAL shiftData_3_1                    : std_logic;  -- ufix1
  SIGNAL switchData_2                     : std_logic;  -- ufix1
  SIGNAL shiftData_2_1                    : std_logic;  -- ufix1
  SIGNAL switchData_1                     : std_logic;  -- ufix1
  SIGNAL shiftData_1_1                    : std_logic;  -- ufix1
  SIGNAL xorData                          : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL alpha_switch_delay               : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL xorDataReg                       : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL switchData_0                     : std_logic;  -- ufix1
  SIGNAL shiftData_0_1                    : std_logic;  -- ufix1
  SIGNAL wrData                           : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL wraddr_register_reg              : vector_of_unsigned4(0 TO 5);  -- ufix4 [6]
  SIGNAL wrAddr                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL rdaddr_register_reg              : vector_of_unsigned4(0 TO 4);  -- ufix4 [5]
  SIGNAL rdAddrReg                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL alphaTmp                         : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL alphavalid_register_reg          : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL alphaAddr_tmp                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Column_LUT_add_cast              : signed(31 DOWNTO 0);  -- int32
  SIGNAL Column_LUT_cast                  : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL Column_LUT_mul_temp              : signed(37 DOWNTO 0);  -- sfix38
  SIGNAL cVal                             : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL columnVal_tmp                    : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL shiftData_0_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_1_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_2_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_3_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_4_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_5_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_6_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_7_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_8_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_9_2                    : std_logic;  -- ufix1
  SIGNAL shiftData_10_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_11_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_12_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_13_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_14_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_15_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_16_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_17_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_18_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_19_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_20_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_21_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_22_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_23_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_24_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_25_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_26_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_27_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_28_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_29_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_30_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_31_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_32_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_33_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_34_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_35_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_36_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_37_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_38_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_39_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_40_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_41_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_42_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_43_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_44_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_45_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_46_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_47_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_48_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_49_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_50_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_51_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_52_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_53_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_54_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_55_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_56_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_57_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_58_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_59_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_60_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_61_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_62_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_63_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_64_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_65_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_66_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_67_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_68_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_69_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_70_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_71_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_72_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_73_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_74_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_75_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_76_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_77_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_78_2                   : std_logic;  -- ufix1
  SIGNAL shiftData_79_2                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg                 : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL xorDataParityReg_79              : std_logic;  -- ufix1
  SIGNAL shiftData_79_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_78              : std_logic;  -- ufix1
  SIGNAL shiftData_78_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_77              : std_logic;  -- ufix1
  SIGNAL shiftData_77_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_76              : std_logic;  -- ufix1
  SIGNAL shiftData_76_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_75              : std_logic;  -- ufix1
  SIGNAL shiftData_75_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_74              : std_logic;  -- ufix1
  SIGNAL shiftData_74_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_73              : std_logic;  -- ufix1
  SIGNAL shiftData_73_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_72              : std_logic;  -- ufix1
  SIGNAL shiftData_72_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_71              : std_logic;  -- ufix1
  SIGNAL shiftData_71_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_70              : std_logic;  -- ufix1
  SIGNAL shiftData_70_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_69              : std_logic;  -- ufix1
  SIGNAL shiftData_69_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_68              : std_logic;  -- ufix1
  SIGNAL shiftData_68_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_67              : std_logic;  -- ufix1
  SIGNAL shiftData_67_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_66              : std_logic;  -- ufix1
  SIGNAL shiftData_66_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_65              : std_logic;  -- ufix1
  SIGNAL shiftData_65_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_64              : std_logic;  -- ufix1
  SIGNAL shiftData_64_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_63              : std_logic;  -- ufix1
  SIGNAL shiftData_63_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_62              : std_logic;  -- ufix1
  SIGNAL shiftData_62_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_61              : std_logic;  -- ufix1
  SIGNAL shiftData_61_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_60              : std_logic;  -- ufix1
  SIGNAL shiftData_60_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_59              : std_logic;  -- ufix1
  SIGNAL shiftData_59_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_58              : std_logic;  -- ufix1
  SIGNAL shiftData_58_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_57              : std_logic;  -- ufix1
  SIGNAL shiftData_57_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_56              : std_logic;  -- ufix1
  SIGNAL shiftData_56_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_55              : std_logic;  -- ufix1
  SIGNAL shiftData_55_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_54              : std_logic;  -- ufix1
  SIGNAL shiftData_54_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_53              : std_logic;  -- ufix1
  SIGNAL shiftData_53_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_52              : std_logic;  -- ufix1
  SIGNAL shiftData_52_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_51              : std_logic;  -- ufix1
  SIGNAL shiftData_51_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_50              : std_logic;  -- ufix1
  SIGNAL shiftData_50_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_49              : std_logic;  -- ufix1
  SIGNAL shiftData_49_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_48              : std_logic;  -- ufix1
  SIGNAL shiftData_48_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_47              : std_logic;  -- ufix1
  SIGNAL shiftData_47_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_46              : std_logic;  -- ufix1
  SIGNAL shiftData_46_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_45              : std_logic;  -- ufix1
  SIGNAL shiftData_45_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_44              : std_logic;  -- ufix1
  SIGNAL shiftData_44_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_43              : std_logic;  -- ufix1
  SIGNAL shiftData_43_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_42              : std_logic;  -- ufix1
  SIGNAL shiftData_42_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_41              : std_logic;  -- ufix1
  SIGNAL shiftData_41_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_40              : std_logic;  -- ufix1
  SIGNAL shiftData_40_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_39              : std_logic;  -- ufix1
  SIGNAL shiftData_39_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_38              : std_logic;  -- ufix1
  SIGNAL shiftData_38_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_37              : std_logic;  -- ufix1
  SIGNAL shiftData_37_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_36              : std_logic;  -- ufix1
  SIGNAL shiftData_36_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_35              : std_logic;  -- ufix1
  SIGNAL shiftData_35_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_34              : std_logic;  -- ufix1
  SIGNAL shiftData_34_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_33              : std_logic;  -- ufix1
  SIGNAL shiftData_33_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_32              : std_logic;  -- ufix1
  SIGNAL shiftData_32_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_31              : std_logic;  -- ufix1
  SIGNAL shiftData_31_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_30              : std_logic;  -- ufix1
  SIGNAL shiftData_30_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_29              : std_logic;  -- ufix1
  SIGNAL shiftData_29_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_28              : std_logic;  -- ufix1
  SIGNAL shiftData_28_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_27              : std_logic;  -- ufix1
  SIGNAL shiftData_27_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_26              : std_logic;  -- ufix1
  SIGNAL shiftData_26_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_25              : std_logic;  -- ufix1
  SIGNAL shiftData_25_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_24              : std_logic;  -- ufix1
  SIGNAL shiftData_24_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_23              : std_logic;  -- ufix1
  SIGNAL shiftData_23_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_22              : std_logic;  -- ufix1
  SIGNAL shiftData_22_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_21              : std_logic;  -- ufix1
  SIGNAL shiftData_21_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_20              : std_logic;  -- ufix1
  SIGNAL shiftData_20_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_19              : std_logic;  -- ufix1
  SIGNAL shiftData_19_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_18              : std_logic;  -- ufix1
  SIGNAL shiftData_18_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_17              : std_logic;  -- ufix1
  SIGNAL shiftData_17_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_16              : std_logic;  -- ufix1
  SIGNAL shiftData_16_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_15              : std_logic;  -- ufix1
  SIGNAL shiftData_15_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_14              : std_logic;  -- ufix1
  SIGNAL shiftData_14_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_13              : std_logic;  -- ufix1
  SIGNAL shiftData_13_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_12              : std_logic;  -- ufix1
  SIGNAL shiftData_12_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_11              : std_logic;  -- ufix1
  SIGNAL shiftData_11_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_10              : std_logic;  -- ufix1
  SIGNAL shiftData_10_3                   : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_9               : std_logic;  -- ufix1
  SIGNAL shiftData_9_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_8               : std_logic;  -- ufix1
  SIGNAL shiftData_8_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_7               : std_logic;  -- ufix1
  SIGNAL shiftData_7_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_6               : std_logic;  -- ufix1
  SIGNAL shiftData_6_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_5               : std_logic;  -- ufix1
  SIGNAL shiftData_5_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_4               : std_logic;  -- ufix1
  SIGNAL shiftData_4_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_3               : std_logic;  -- ufix1
  SIGNAL shiftData_3_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_2               : std_logic;  -- ufix1
  SIGNAL shiftData_2_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParityReg_1               : std_logic;  -- ufix1
  SIGNAL shiftData_1_3                    : std_logic;  -- ufix1
  SIGNAL xorDataParity1                   : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL alpha_switch_delay_1             : std_logic_vector(79 DOWNTO 0);  -- ufix1 [80]
  SIGNAL xorDataParityReg_0               : std_logic;  -- ufix1
  SIGNAL shiftData_0_3                    : std_logic;  -- ufix1

BEGIN
  u_Barrel_Rotator_Unit : full_tx_ip_src_BarrelRotator_block
    PORT MAP( data => rdData,  -- ufix1 [80]
              shift => std_logic_vector(shiftVal),  -- ufix7
              shiftData => sData  -- ufix1 [80]
              );

  u_Alpha_RAM_singlebit_bank0 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(0),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(0)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank1 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(1),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(1)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank2 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(2),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(2)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank3 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(3),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(3)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank4 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(4),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(4)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank5 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(5),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(5)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank6 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(6),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(6)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank7 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(7),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(7)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank8 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(8),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(8)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank9 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(9),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(9)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank10 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(10),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(10)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank11 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(11),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(11)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank12 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(12),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(12)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank13 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(13),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(13)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank14 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(14),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(14)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank15 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(15),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(15)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank16 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(16),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(16)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank17 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(17),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(17)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank18 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(18),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(18)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank19 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(19),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(19)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank20 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(20),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(20)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank21 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(21),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(21)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank22 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(22),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(22)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank23 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(23),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(23)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank24 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(24),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(24)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank25 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(25),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(25)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank26 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(26),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(26)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank27 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(27),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(27)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank28 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(28),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(28)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank29 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(29),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(29)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank30 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(30),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(30)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank31 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(31),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(31)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank32 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(32),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(32)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank33 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(33),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(33)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank34 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(34),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(34)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank35 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(35),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(35)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank36 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(36),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(36)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank37 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(37),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(37)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank38 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(38),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(38)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank39 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(39),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(39)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank40 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(40),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(40)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank41 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(41),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(41)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank42 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(42),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(42)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank43 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(43),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(43)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank44 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(44),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(44)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank45 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(45),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(45)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank46 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(46),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(46)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank47 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(47),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(47)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank48 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(48),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(48)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank49 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(49),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(49)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank50 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(50),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(50)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank51 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(51),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(51)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank52 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(52),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(52)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank53 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(53),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(53)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank54 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(54),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(54)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank55 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(55),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(55)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank56 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(56),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(56)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank57 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(57),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(57)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank58 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(58),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(58)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank59 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(59),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(59)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank60 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(60),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(60)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank61 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(61),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(61)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank62 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(62),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(62)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank63 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(63),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(63)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank64 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(64),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(64)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank65 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(65),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(65)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank66 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(66),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(66)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank67 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(67),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(67)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank68 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(68),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(68)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank69 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(69),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(69)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank70 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(70),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(70)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank71 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(71),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(71)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank72 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(72),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(72)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank73 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(73),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(73)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank74 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(74),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(74)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank75 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(75),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(75)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank76 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(76),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(76)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank77 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(77),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(77)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank78 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(78),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(78)  -- ufix1
              );

  u_Alpha_RAM_singlebit_bank79 : full_tx_ip_src_SimpleDualPortRAM_singlebit_block
    GENERIC MAP( AddrWidth => 4,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => wrData(79),  -- ufix1
              wr_addr => std_logic_vector(wrAddr),
              wr_en => wrEnbReg,  -- ufix1
              rd_addr => std_logic_vector(rdAddrReg),
              dout => alphaTmp(79)  -- ufix1
              );

  alphaController_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alphaController_countLayer <= to_unsigned(16#1#, 4);
        alphaController_layerDone <= '0';
        alphaController_idxCount <= to_unsigned(16#01#, 5);
        alphaController_encEnb <= '0';
        alphaController_xIdx <= to_unsigned(16#1#, 4);
        alphaController_yIdx <= to_unsigned(16#01#, 5);
        alphaController_alphaEnb <= '0';
        alphaController_alphaDone <= '0';
        alphaController_rdCount <= to_unsigned(16#1#, 4);
      ELSIF enb = '1' THEN
        alphaController_countLayer <= alphaController_countLayer_next;
        alphaController_layerDone <= alphaController_layerDone_next;
        alphaController_idxCount <= alphaController_idxCount_next;
        alphaController_xIdx <= alphaController_xIdx_next;
        alphaController_yIdx <= alphaController_yIdx_next;
        alphaController_encEnb <= alphaController_encEnb_next;
        alphaController_alphaEnb <= alphaController_alphaEnb_next;
        alphaController_alphaDone <= alphaController_alphaDone_next;
        alphaController_rdCount <= alphaController_rdCount_next;
      END IF;
    END IF;
  END PROCESS alphaController_process;

  alphaController_output : PROCESS (alphaController_alphaDone, alphaController_alphaEnb,
       alphaController_countLayer, alphaController_encEnb,
       alphaController_idxCount, alphaController_layerDone,
       alphaController_rdCount, alphaController_xIdx, alphaController_yIdx,
       encEnable, reset)
    VARIABLE countIdx : unsigned(4 DOWNTO 0);
    VARIABLE countLayer_temp : unsigned(3 DOWNTO 0);
    VARIABLE idxCount_temp : unsigned(4 DOWNTO 0);
    VARIABLE encEnb_temp : std_logic;
    VARIABLE alphaDone_temp : std_logic;
    VARIABLE sub_cast : signed(31 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(31 DOWNTO 0);
  BEGIN
    countLayer_temp := alphaController_countLayer;
    idxCount_temp := alphaController_idxCount;
    encEnb_temp := alphaController_encEnb;
    alphaDone_temp := alphaController_alphaDone;
    alphaController_layerDone_next <= alphaController_layerDone;
    alphaController_rdCount_next <= alphaController_rdCount;
    sub_cast := signed(resize(alphaController_countLayer, 32));
    countIdx := unsigned(alphaController_data(to_integer(sub_cast - 1))(4 DOWNTO 0));
    IF reset /= '0' THEN 
      countLayer_temp := to_unsigned(16#1#, 4);
      encEnb_temp := '1';
      alphaController_layerDone_next <= '0';
      idxCount_temp := to_unsigned(16#01#, 5);
      alphaDone_temp := '0';
    ELSIF alphaController_alphaEnb = '1' THEN 
      IF alphaController_idxCount = countIdx THEN 
        IF alphaController_countLayer = to_unsigned(16#C#, 4) THEN 
          countLayer_temp := to_unsigned(16#1#, 4);
          alphaController_layerDone_next <= '1';
          idxCount_temp := to_unsigned(16#01#, 5);
          encEnb_temp := '0';
          alphaDone_temp := '1';
        ELSE 
          countLayer_temp := alphaController_countLayer + to_unsigned(16#1#, 4);
          alphaController_layerDone_next <= '1';
          idxCount_temp := to_unsigned(16#01#, 5);
          alphaDone_temp := '0';
        END IF;
      ELSE 
        idxCount_temp := alphaController_idxCount + to_unsigned(16#01#, 5);
        alphaController_layerDone_next <= '0';
        alphaDone_temp := '0';
      END IF;
    END IF;
    alphaController_xIdx_next <= countLayer_temp;
    alphaController_yIdx_next <= idxCount_temp;
    IF reset /= '0' THEN 
      alphaController_alphaEnb_next <= '0';
    ELSE 
      alphaController_alphaEnb_next <= encEnable AND encEnb_temp;
    END IF;
    IF reset /= '0' THEN 
      alphaController_rdCount_next <= to_unsigned(16#1#, 4);
      alphaDone_temp := '0';
    ELSIF alphaDone_temp = '1' THEN 
      IF alphaController_rdCount = to_unsigned(16#D#, 4) THEN 
        alphaDone_temp := '0';
      ELSE 
        alphaController_rdCount_next <= alphaController_rdCount + to_unsigned(16#1#, 4);
      END IF;
    END IF;
    countLayer <= alphaController_countLayer;
    xIndex <= alphaController_xIdx;
    yIndex <= alphaController_yIdx;
    layerDone <= alphaController_layerDone;
    rdValid <= alphaController_alphaEnb;
    sub_cast_0 := signed(resize(alphaController_rdCount, 32));
    rdAddr <= unsigned(alphacontroller_data_0(to_integer(sub_cast_0 - 1))(3 DOWNTO 0));
    aValid <= alphaController_alphaDone;
    alphaController_countLayer_next <= countLayer_temp;
    alphaController_idxCount_next <= idxCount_temp;
    alphaController_encEnb_next <= encEnb_temp;
    alphaController_alphaDone_next <= alphaDone_temp;
  END PROCESS alphaController_output;


  rdvalid_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdvalid_register_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rdvalid_register_reg(0) <= rdValid;
        rdvalid_register_reg(2 DOWNTO 1) <= rdvalid_register_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rdvalid_register_process;

  rdValidReg <= rdvalid_register_reg(2);

  rdValid_register_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdValidReg1 <= '0';
      ELSIF enb = '1' THEN
        rdValidReg1 <= rdValidReg;
      END IF;
    END IF;
  END PROCESS rdValid_register_1_process;


  
  switch_compare_1 <= '1' WHEN rdValidReg1 > '0' ELSE
      '0';

  zeroData <= (OTHERS => '0');

  const1 <= '1';

  alpha_sub_cast <= '0' & '0' & '0' & const1;
  xIdx <= xIndex - alpha_sub_cast;

  alpha_sub_cast_1 <= '0' & '0' & '0' & '0' & const1;
  yIdx <= yIndex - alpha_sub_cast_1;

  Shift_LUT_add_cast <= signed(resize(xIdx, 32));
  Shift_LUT_cast <= signed(resize(yIdx, 6));
  Shift_LUT_mul_temp <= Shift_LUT_cast * to_signed(16#0000000C#, 32);
  sVal <= Shift_LUT_data(to_integer(Shift_LUT_add_cast + resize(Shift_LUT_mul_temp, 32)));

  data_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdData <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rdData <= data;
      END IF;
    END IF;
  END PROCESS data_register_process;


  shift_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        shift_register_reg <= (OTHERS => to_unsigned(16#00#, 7));
      ELSIF enb = '1' THEN
        shift_register_reg(0) <= sVal;
        shift_register_reg(1 TO 2) <= shift_register_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS shift_register_process;

  shiftVal <= shift_register_reg(2);

  shift_register_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sDataReg <= (OTHERS => '0');
      ELSIF enb = '1' AND rdValidReg = '1' THEN
        sDataReg <= sData;
      END IF;
    END IF;
  END PROCESS shift_register_1_process;


  
  sDataTmp <= zeroData WHEN switch_compare_1 = '0' ELSE
      sDataReg;

  shift_register_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        shiftData <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        shiftData <= sDataTmp;
      END IF;
    END IF;
  END PROCESS shift_register_2_process;


  shiftData_0 <= shiftData(0);

  layerdone_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        layerdone_register_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        layerdone_register_reg(0) <= layerDone;
        layerdone_register_reg(3 DOWNTO 1) <= layerdone_register_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS layerdone_register_process;

  layerDoneReg <= layerdone_register_reg(3);

  encEnb_neg <=  NOT encEnable;

  encenb_reg_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        encEnbNegReg <= '0';
      ELSIF enb = '1' THEN
        encEnbNegReg <= encEnb_neg;
      END IF;
    END IF;
  END PROCESS encenb_reg_register_process;


  encEnbTmp <= encEnbNegReg AND encEnable;

  encenb_tmp_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        encenb_tmp_register_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        encenb_tmp_register_reg(0) <= encEnbTmp;
        encenb_tmp_register_reg(4 DOWNTO 1) <= encenb_tmp_register_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS encenb_tmp_register_process;

  encEnbTmp1 <= encenb_tmp_register_reg(4);

  wrEnb <= layerDoneReg OR encEnbTmp1;

  wrenb_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wrEnbReg <= '0';
      ELSIF enb = '1' THEN
        wrEnbReg <= wrEnb;
      END IF;
    END IF;
  END PROCESS wrenb_register_process;


  
  switch_compare_1_1 <= '1' WHEN wrEnbReg > '0' ELSE
      '0';

  const_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        const1Reg <= '0';
      ELSIF enb = '1' THEN
        const1Reg <= const1;
      END IF;
    END IF;
  END PROCESS const_register_process;


  shiftData_1 <= shiftData(1);

  shiftData_2 <= shiftData(2);

  shiftData_3 <= shiftData(3);

  shiftData_4 <= shiftData(4);

  shiftData_5 <= shiftData(5);

  shiftData_6 <= shiftData(6);

  shiftData_7 <= shiftData(7);

  shiftData_8 <= shiftData(8);

  shiftData_9 <= shiftData(9);

  shiftData_10 <= shiftData(10);

  shiftData_11 <= shiftData(11);

  shiftData_12 <= shiftData(12);

  shiftData_13 <= shiftData(13);

  shiftData_14 <= shiftData(14);

  shiftData_15 <= shiftData(15);

  shiftData_16 <= shiftData(16);

  shiftData_17 <= shiftData(17);

  shiftData_18 <= shiftData(18);

  shiftData_19 <= shiftData(19);

  shiftData_20 <= shiftData(20);

  shiftData_21 <= shiftData(21);

  shiftData_22 <= shiftData(22);

  shiftData_23 <= shiftData(23);

  shiftData_24 <= shiftData(24);

  shiftData_25 <= shiftData(25);

  shiftData_26 <= shiftData(26);

  shiftData_27 <= shiftData(27);

  shiftData_28 <= shiftData(28);

  shiftData_29 <= shiftData(29);

  shiftData_30 <= shiftData(30);

  shiftData_31 <= shiftData(31);

  shiftData_32 <= shiftData(32);

  shiftData_33 <= shiftData(33);

  shiftData_34 <= shiftData(34);

  shiftData_35 <= shiftData(35);

  shiftData_36 <= shiftData(36);

  shiftData_37 <= shiftData(37);

  shiftData_38 <= shiftData(38);

  shiftData_39 <= shiftData(39);

  shiftData_40 <= shiftData(40);

  shiftData_41 <= shiftData(41);

  shiftData_42 <= shiftData(42);

  shiftData_43 <= shiftData(43);

  shiftData_44 <= shiftData(44);

  shiftData_45 <= shiftData(45);

  shiftData_46 <= shiftData(46);

  shiftData_47 <= shiftData(47);

  shiftData_48 <= shiftData(48);

  shiftData_49 <= shiftData(49);

  shiftData_50 <= shiftData(50);

  shiftData_51 <= shiftData(51);

  shiftData_52 <= shiftData(52);

  shiftData_53 <= shiftData(53);

  shiftData_54 <= shiftData(54);

  shiftData_55 <= shiftData(55);

  shiftData_56 <= shiftData(56);

  shiftData_57 <= shiftData(57);

  shiftData_58 <= shiftData(58);

  shiftData_59 <= shiftData(59);

  shiftData_60 <= shiftData(60);

  shiftData_61 <= shiftData(61);

  shiftData_62 <= shiftData(62);

  shiftData_63 <= shiftData(63);

  shiftData_64 <= shiftData(64);

  shiftData_65 <= shiftData(65);

  shiftData_66 <= shiftData(66);

  shiftData_67 <= shiftData(67);

  shiftData_68 <= shiftData(68);

  shiftData_69 <= shiftData(69);

  shiftData_70 <= shiftData(70);

  shiftData_71 <= shiftData(71);

  shiftData_72 <= shiftData(72);

  shiftData_73 <= shiftData(73);

  shiftData_74 <= shiftData(74);

  shiftData_75 <= shiftData(75);

  shiftData_76 <= shiftData(76);

  shiftData_77 <= shiftData(77);

  shiftData_78 <= shiftData(78);

  shiftData_79 <= shiftData(79);

  switchData_79 <= switchData(79);

  shiftData_79_1 <= shiftData_79 XOR switchData_79;

  switchData_78 <= switchData(78);

  shiftData_78_1 <= shiftData_78 XOR switchData_78;

  switchData_77 <= switchData(77);

  shiftData_77_1 <= shiftData_77 XOR switchData_77;

  switchData_76 <= switchData(76);

  shiftData_76_1 <= shiftData_76 XOR switchData_76;

  switchData_75 <= switchData(75);

  shiftData_75_1 <= shiftData_75 XOR switchData_75;

  switchData_74 <= switchData(74);

  shiftData_74_1 <= shiftData_74 XOR switchData_74;

  switchData_73 <= switchData(73);

  shiftData_73_1 <= shiftData_73 XOR switchData_73;

  switchData_72 <= switchData(72);

  shiftData_72_1 <= shiftData_72 XOR switchData_72;

  switchData_71 <= switchData(71);

  shiftData_71_1 <= shiftData_71 XOR switchData_71;

  switchData_70 <= switchData(70);

  shiftData_70_1 <= shiftData_70 XOR switchData_70;

  switchData_69 <= switchData(69);

  shiftData_69_1 <= shiftData_69 XOR switchData_69;

  switchData_68 <= switchData(68);

  shiftData_68_1 <= shiftData_68 XOR switchData_68;

  switchData_67 <= switchData(67);

  shiftData_67_1 <= shiftData_67 XOR switchData_67;

  switchData_66 <= switchData(66);

  shiftData_66_1 <= shiftData_66 XOR switchData_66;

  switchData_65 <= switchData(65);

  shiftData_65_1 <= shiftData_65 XOR switchData_65;

  switchData_64 <= switchData(64);

  shiftData_64_1 <= shiftData_64 XOR switchData_64;

  switchData_63 <= switchData(63);

  shiftData_63_1 <= shiftData_63 XOR switchData_63;

  switchData_62 <= switchData(62);

  shiftData_62_1 <= shiftData_62 XOR switchData_62;

  switchData_61 <= switchData(61);

  shiftData_61_1 <= shiftData_61 XOR switchData_61;

  switchData_60 <= switchData(60);

  shiftData_60_1 <= shiftData_60 XOR switchData_60;

  switchData_59 <= switchData(59);

  shiftData_59_1 <= shiftData_59 XOR switchData_59;

  switchData_58 <= switchData(58);

  shiftData_58_1 <= shiftData_58 XOR switchData_58;

  switchData_57 <= switchData(57);

  shiftData_57_1 <= shiftData_57 XOR switchData_57;

  switchData_56 <= switchData(56);

  shiftData_56_1 <= shiftData_56 XOR switchData_56;

  switchData_55 <= switchData(55);

  shiftData_55_1 <= shiftData_55 XOR switchData_55;

  switchData_54 <= switchData(54);

  shiftData_54_1 <= shiftData_54 XOR switchData_54;

  switchData_53 <= switchData(53);

  shiftData_53_1 <= shiftData_53 XOR switchData_53;

  switchData_52 <= switchData(52);

  shiftData_52_1 <= shiftData_52 XOR switchData_52;

  switchData_51 <= switchData(51);

  shiftData_51_1 <= shiftData_51 XOR switchData_51;

  switchData_50 <= switchData(50);

  shiftData_50_1 <= shiftData_50 XOR switchData_50;

  switchData_49 <= switchData(49);

  shiftData_49_1 <= shiftData_49 XOR switchData_49;

  switchData_48 <= switchData(48);

  shiftData_48_1 <= shiftData_48 XOR switchData_48;

  switchData_47 <= switchData(47);

  shiftData_47_1 <= shiftData_47 XOR switchData_47;

  switchData_46 <= switchData(46);

  shiftData_46_1 <= shiftData_46 XOR switchData_46;

  switchData_45 <= switchData(45);

  shiftData_45_1 <= shiftData_45 XOR switchData_45;

  switchData_44 <= switchData(44);

  shiftData_44_1 <= shiftData_44 XOR switchData_44;

  switchData_43 <= switchData(43);

  shiftData_43_1 <= shiftData_43 XOR switchData_43;

  switchData_42 <= switchData(42);

  shiftData_42_1 <= shiftData_42 XOR switchData_42;

  switchData_41 <= switchData(41);

  shiftData_41_1 <= shiftData_41 XOR switchData_41;

  switchData_40 <= switchData(40);

  shiftData_40_1 <= shiftData_40 XOR switchData_40;

  switchData_39 <= switchData(39);

  shiftData_39_1 <= shiftData_39 XOR switchData_39;

  switchData_38 <= switchData(38);

  shiftData_38_1 <= shiftData_38 XOR switchData_38;

  switchData_37 <= switchData(37);

  shiftData_37_1 <= shiftData_37 XOR switchData_37;

  switchData_36 <= switchData(36);

  shiftData_36_1 <= shiftData_36 XOR switchData_36;

  switchData_35 <= switchData(35);

  shiftData_35_1 <= shiftData_35 XOR switchData_35;

  switchData_34 <= switchData(34);

  shiftData_34_1 <= shiftData_34 XOR switchData_34;

  switchData_33 <= switchData(33);

  shiftData_33_1 <= shiftData_33 XOR switchData_33;

  switchData_32 <= switchData(32);

  shiftData_32_1 <= shiftData_32 XOR switchData_32;

  switchData_31 <= switchData(31);

  shiftData_31_1 <= shiftData_31 XOR switchData_31;

  switchData_30 <= switchData(30);

  shiftData_30_1 <= shiftData_30 XOR switchData_30;

  switchData_29 <= switchData(29);

  shiftData_29_1 <= shiftData_29 XOR switchData_29;

  switchData_28 <= switchData(28);

  shiftData_28_1 <= shiftData_28 XOR switchData_28;

  switchData_27 <= switchData(27);

  shiftData_27_1 <= shiftData_27 XOR switchData_27;

  switchData_26 <= switchData(26);

  shiftData_26_1 <= shiftData_26 XOR switchData_26;

  switchData_25 <= switchData(25);

  shiftData_25_1 <= shiftData_25 XOR switchData_25;

  switchData_24 <= switchData(24);

  shiftData_24_1 <= shiftData_24 XOR switchData_24;

  switchData_23 <= switchData(23);

  shiftData_23_1 <= shiftData_23 XOR switchData_23;

  switchData_22 <= switchData(22);

  shiftData_22_1 <= shiftData_22 XOR switchData_22;

  switchData_21 <= switchData(21);

  shiftData_21_1 <= shiftData_21 XOR switchData_21;

  switchData_20 <= switchData(20);

  shiftData_20_1 <= shiftData_20 XOR switchData_20;

  switchData_19 <= switchData(19);

  shiftData_19_1 <= shiftData_19 XOR switchData_19;

  switchData_18 <= switchData(18);

  shiftData_18_1 <= shiftData_18 XOR switchData_18;

  switchData_17 <= switchData(17);

  shiftData_17_1 <= shiftData_17 XOR switchData_17;

  switchData_16 <= switchData(16);

  shiftData_16_1 <= shiftData_16 XOR switchData_16;

  switchData_15 <= switchData(15);

  shiftData_15_1 <= shiftData_15 XOR switchData_15;

  switchData_14 <= switchData(14);

  shiftData_14_1 <= shiftData_14 XOR switchData_14;

  switchData_13 <= switchData(13);

  shiftData_13_1 <= shiftData_13 XOR switchData_13;

  switchData_12 <= switchData(12);

  shiftData_12_1 <= shiftData_12 XOR switchData_12;

  switchData_11 <= switchData(11);

  shiftData_11_1 <= shiftData_11 XOR switchData_11;

  switchData_10 <= switchData(10);

  shiftData_10_1 <= shiftData_10 XOR switchData_10;

  switchData_9 <= switchData(9);

  shiftData_9_1 <= shiftData_9 XOR switchData_9;

  switchData_8 <= switchData(8);

  shiftData_8_1 <= shiftData_8 XOR switchData_8;

  switchData_7 <= switchData(7);

  shiftData_7_1 <= shiftData_7 XOR switchData_7;

  switchData_6 <= switchData(6);

  shiftData_6_1 <= shiftData_6 XOR switchData_6;

  switchData_5 <= switchData(5);

  shiftData_5_1 <= shiftData_5 XOR switchData_5;

  switchData_4 <= switchData(4);

  shiftData_4_1 <= shiftData_4 XOR switchData_4;

  switchData_3 <= switchData(3);

  shiftData_3_1 <= shiftData_3 XOR switchData_3;

  switchData_2 <= switchData(2);

  shiftData_2_1 <= shiftData_2 XOR switchData_2;

  switchData_1 <= switchData(1);

  shiftData_1_1 <= shiftData_1 XOR switchData_1;

  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alpha_switch_delay <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF reset = '1' THEN
          alpha_switch_delay <= (OTHERS => '0');
        ELSIF const1Reg = '1' THEN
          alpha_switch_delay <= xorData;
        END IF;
      END IF;
    END IF;
  END PROCESS c_2_process;

  
  xorDataReg <= (OTHERS => '0') WHEN reset = '1' ELSE
      alpha_switch_delay;

  
  switchData <= xorDataReg WHEN switch_compare_1_1 = '0' ELSE
      zeroData;

  switchData_0 <= switchData(0);

  shiftData_0_1 <= shiftData_0 XOR switchData_0;

  xorData(0) <= shiftData_0_1;
  xorData(1) <= shiftData_1_1;
  xorData(2) <= shiftData_2_1;
  xorData(3) <= shiftData_3_1;
  xorData(4) <= shiftData_4_1;
  xorData(5) <= shiftData_5_1;
  xorData(6) <= shiftData_6_1;
  xorData(7) <= shiftData_7_1;
  xorData(8) <= shiftData_8_1;
  xorData(9) <= shiftData_9_1;
  xorData(10) <= shiftData_10_1;
  xorData(11) <= shiftData_11_1;
  xorData(12) <= shiftData_12_1;
  xorData(13) <= shiftData_13_1;
  xorData(14) <= shiftData_14_1;
  xorData(15) <= shiftData_15_1;
  xorData(16) <= shiftData_16_1;
  xorData(17) <= shiftData_17_1;
  xorData(18) <= shiftData_18_1;
  xorData(19) <= shiftData_19_1;
  xorData(20) <= shiftData_20_1;
  xorData(21) <= shiftData_21_1;
  xorData(22) <= shiftData_22_1;
  xorData(23) <= shiftData_23_1;
  xorData(24) <= shiftData_24_1;
  xorData(25) <= shiftData_25_1;
  xorData(26) <= shiftData_26_1;
  xorData(27) <= shiftData_27_1;
  xorData(28) <= shiftData_28_1;
  xorData(29) <= shiftData_29_1;
  xorData(30) <= shiftData_30_1;
  xorData(31) <= shiftData_31_1;
  xorData(32) <= shiftData_32_1;
  xorData(33) <= shiftData_33_1;
  xorData(34) <= shiftData_34_1;
  xorData(35) <= shiftData_35_1;
  xorData(36) <= shiftData_36_1;
  xorData(37) <= shiftData_37_1;
  xorData(38) <= shiftData_38_1;
  xorData(39) <= shiftData_39_1;
  xorData(40) <= shiftData_40_1;
  xorData(41) <= shiftData_41_1;
  xorData(42) <= shiftData_42_1;
  xorData(43) <= shiftData_43_1;
  xorData(44) <= shiftData_44_1;
  xorData(45) <= shiftData_45_1;
  xorData(46) <= shiftData_46_1;
  xorData(47) <= shiftData_47_1;
  xorData(48) <= shiftData_48_1;
  xorData(49) <= shiftData_49_1;
  xorData(50) <= shiftData_50_1;
  xorData(51) <= shiftData_51_1;
  xorData(52) <= shiftData_52_1;
  xorData(53) <= shiftData_53_1;
  xorData(54) <= shiftData_54_1;
  xorData(55) <= shiftData_55_1;
  xorData(56) <= shiftData_56_1;
  xorData(57) <= shiftData_57_1;
  xorData(58) <= shiftData_58_1;
  xorData(59) <= shiftData_59_1;
  xorData(60) <= shiftData_60_1;
  xorData(61) <= shiftData_61_1;
  xorData(62) <= shiftData_62_1;
  xorData(63) <= shiftData_63_1;
  xorData(64) <= shiftData_64_1;
  xorData(65) <= shiftData_65_1;
  xorData(66) <= shiftData_66_1;
  xorData(67) <= shiftData_67_1;
  xorData(68) <= shiftData_68_1;
  xorData(69) <= shiftData_69_1;
  xorData(70) <= shiftData_70_1;
  xorData(71) <= shiftData_71_1;
  xorData(72) <= shiftData_72_1;
  xorData(73) <= shiftData_73_1;
  xorData(74) <= shiftData_74_1;
  xorData(75) <= shiftData_75_1;
  xorData(76) <= shiftData_76_1;
  xorData(77) <= shiftData_77_1;
  xorData(78) <= shiftData_78_1;
  xorData(79) <= shiftData_79_1;

  wrdata_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wrData <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        wrData <= xorData;
      END IF;
    END IF;
  END PROCESS wrdata_register_process;


  wraddr_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wraddr_register_reg <= (OTHERS => to_unsigned(16#0#, 4));
      ELSIF enb = '1' THEN
        wraddr_register_reg(0) <= countLayer;
        wraddr_register_reg(1 TO 5) <= wraddr_register_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS wraddr_register_process;

  wrAddr <= wraddr_register_reg(5);

  rdaddr_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdaddr_register_reg <= (OTHERS => to_unsigned(16#0#, 4));
      ELSIF enb = '1' THEN
        rdaddr_register_reg(0) <= rdAddr;
        rdaddr_register_reg(1 TO 4) <= rdaddr_register_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS rdaddr_register_process;

  rdAddrReg <= rdaddr_register_reg(4);


  alphavalid_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alphavalid_register_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        alphavalid_register_reg(0) <= aValid;
        alphavalid_register_reg(4 DOWNTO 1) <= alphavalid_register_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS alphavalid_register_process;

  alphaValid <= alphavalid_register_reg(4);

  alphaaddr_register_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alphaAddr_tmp <= to_unsigned(16#0#, 4);
      ELSIF enb = '1' THEN
        alphaAddr_tmp <= rdAddrReg;
      END IF;
    END IF;
  END PROCESS alphaaddr_register_process;


  alphaAddr <= std_logic_vector(alphaAddr_tmp);

  Column_LUT_add_cast <= signed(resize(xIdx, 32));
  Column_LUT_cast <= signed(resize(yIdx, 6));
  Column_LUT_mul_temp <= Column_LUT_cast * to_signed(16#0000000C#, 32);
  cVal <= Column_LUT_data(to_integer(Column_LUT_add_cast + resize(Column_LUT_mul_temp, 32)));

  column_value_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        columnVal_tmp <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        columnVal_tmp <= cVal;
      END IF;
    END IF;
  END PROCESS column_value_process;


  columnVal <= std_logic_vector(columnVal_tmp);

  shiftData_0_2 <= shiftData(0);

  shiftData_1_2 <= shiftData(1);

  shiftData_2_2 <= shiftData(2);

  shiftData_3_2 <= shiftData(3);

  shiftData_4_2 <= shiftData(4);

  shiftData_5_2 <= shiftData(5);

  shiftData_6_2 <= shiftData(6);

  shiftData_7_2 <= shiftData(7);

  shiftData_8_2 <= shiftData(8);

  shiftData_9_2 <= shiftData(9);

  shiftData_10_2 <= shiftData(10);

  shiftData_11_2 <= shiftData(11);

  shiftData_12_2 <= shiftData(12);

  shiftData_13_2 <= shiftData(13);

  shiftData_14_2 <= shiftData(14);

  shiftData_15_2 <= shiftData(15);

  shiftData_16_2 <= shiftData(16);

  shiftData_17_2 <= shiftData(17);

  shiftData_18_2 <= shiftData(18);

  shiftData_19_2 <= shiftData(19);

  shiftData_20_2 <= shiftData(20);

  shiftData_21_2 <= shiftData(21);

  shiftData_22_2 <= shiftData(22);

  shiftData_23_2 <= shiftData(23);

  shiftData_24_2 <= shiftData(24);

  shiftData_25_2 <= shiftData(25);

  shiftData_26_2 <= shiftData(26);

  shiftData_27_2 <= shiftData(27);

  shiftData_28_2 <= shiftData(28);

  shiftData_29_2 <= shiftData(29);

  shiftData_30_2 <= shiftData(30);

  shiftData_31_2 <= shiftData(31);

  shiftData_32_2 <= shiftData(32);

  shiftData_33_2 <= shiftData(33);

  shiftData_34_2 <= shiftData(34);

  shiftData_35_2 <= shiftData(35);

  shiftData_36_2 <= shiftData(36);

  shiftData_37_2 <= shiftData(37);

  shiftData_38_2 <= shiftData(38);

  shiftData_39_2 <= shiftData(39);

  shiftData_40_2 <= shiftData(40);

  shiftData_41_2 <= shiftData(41);

  shiftData_42_2 <= shiftData(42);

  shiftData_43_2 <= shiftData(43);

  shiftData_44_2 <= shiftData(44);

  shiftData_45_2 <= shiftData(45);

  shiftData_46_2 <= shiftData(46);

  shiftData_47_2 <= shiftData(47);

  shiftData_48_2 <= shiftData(48);

  shiftData_49_2 <= shiftData(49);

  shiftData_50_2 <= shiftData(50);

  shiftData_51_2 <= shiftData(51);

  shiftData_52_2 <= shiftData(52);

  shiftData_53_2 <= shiftData(53);

  shiftData_54_2 <= shiftData(54);

  shiftData_55_2 <= shiftData(55);

  shiftData_56_2 <= shiftData(56);

  shiftData_57_2 <= shiftData(57);

  shiftData_58_2 <= shiftData(58);

  shiftData_59_2 <= shiftData(59);

  shiftData_60_2 <= shiftData(60);

  shiftData_61_2 <= shiftData(61);

  shiftData_62_2 <= shiftData(62);

  shiftData_63_2 <= shiftData(63);

  shiftData_64_2 <= shiftData(64);

  shiftData_65_2 <= shiftData(65);

  shiftData_66_2 <= shiftData(66);

  shiftData_67_2 <= shiftData(67);

  shiftData_68_2 <= shiftData(68);

  shiftData_69_2 <= shiftData(69);

  shiftData_70_2 <= shiftData(70);

  shiftData_71_2 <= shiftData(71);

  shiftData_72_2 <= shiftData(72);

  shiftData_73_2 <= shiftData(73);

  shiftData_74_2 <= shiftData(74);

  shiftData_75_2 <= shiftData(75);

  shiftData_76_2 <= shiftData(76);

  shiftData_77_2 <= shiftData(77);

  shiftData_78_2 <= shiftData(78);

  shiftData_79_2 <= shiftData(79);

  xorDataParityReg_79 <= xorDataParityReg(79);

  shiftData_79_3 <= shiftData_79_2 XOR xorDataParityReg_79;

  xorDataParityReg_78 <= xorDataParityReg(78);

  shiftData_78_3 <= shiftData_78_2 XOR xorDataParityReg_78;

  xorDataParityReg_77 <= xorDataParityReg(77);

  shiftData_77_3 <= shiftData_77_2 XOR xorDataParityReg_77;

  xorDataParityReg_76 <= xorDataParityReg(76);

  shiftData_76_3 <= shiftData_76_2 XOR xorDataParityReg_76;

  xorDataParityReg_75 <= xorDataParityReg(75);

  shiftData_75_3 <= shiftData_75_2 XOR xorDataParityReg_75;

  xorDataParityReg_74 <= xorDataParityReg(74);

  shiftData_74_3 <= shiftData_74_2 XOR xorDataParityReg_74;

  xorDataParityReg_73 <= xorDataParityReg(73);

  shiftData_73_3 <= shiftData_73_2 XOR xorDataParityReg_73;

  xorDataParityReg_72 <= xorDataParityReg(72);

  shiftData_72_3 <= shiftData_72_2 XOR xorDataParityReg_72;

  xorDataParityReg_71 <= xorDataParityReg(71);

  shiftData_71_3 <= shiftData_71_2 XOR xorDataParityReg_71;

  xorDataParityReg_70 <= xorDataParityReg(70);

  shiftData_70_3 <= shiftData_70_2 XOR xorDataParityReg_70;

  xorDataParityReg_69 <= xorDataParityReg(69);

  shiftData_69_3 <= shiftData_69_2 XOR xorDataParityReg_69;

  xorDataParityReg_68 <= xorDataParityReg(68);

  shiftData_68_3 <= shiftData_68_2 XOR xorDataParityReg_68;

  xorDataParityReg_67 <= xorDataParityReg(67);

  shiftData_67_3 <= shiftData_67_2 XOR xorDataParityReg_67;

  xorDataParityReg_66 <= xorDataParityReg(66);

  shiftData_66_3 <= shiftData_66_2 XOR xorDataParityReg_66;

  xorDataParityReg_65 <= xorDataParityReg(65);

  shiftData_65_3 <= shiftData_65_2 XOR xorDataParityReg_65;

  xorDataParityReg_64 <= xorDataParityReg(64);

  shiftData_64_3 <= shiftData_64_2 XOR xorDataParityReg_64;

  xorDataParityReg_63 <= xorDataParityReg(63);

  shiftData_63_3 <= shiftData_63_2 XOR xorDataParityReg_63;

  xorDataParityReg_62 <= xorDataParityReg(62);

  shiftData_62_3 <= shiftData_62_2 XOR xorDataParityReg_62;

  xorDataParityReg_61 <= xorDataParityReg(61);

  shiftData_61_3 <= shiftData_61_2 XOR xorDataParityReg_61;

  xorDataParityReg_60 <= xorDataParityReg(60);

  shiftData_60_3 <= shiftData_60_2 XOR xorDataParityReg_60;

  xorDataParityReg_59 <= xorDataParityReg(59);

  shiftData_59_3 <= shiftData_59_2 XOR xorDataParityReg_59;

  xorDataParityReg_58 <= xorDataParityReg(58);

  shiftData_58_3 <= shiftData_58_2 XOR xorDataParityReg_58;

  xorDataParityReg_57 <= xorDataParityReg(57);

  shiftData_57_3 <= shiftData_57_2 XOR xorDataParityReg_57;

  xorDataParityReg_56 <= xorDataParityReg(56);

  shiftData_56_3 <= shiftData_56_2 XOR xorDataParityReg_56;

  xorDataParityReg_55 <= xorDataParityReg(55);

  shiftData_55_3 <= shiftData_55_2 XOR xorDataParityReg_55;

  xorDataParityReg_54 <= xorDataParityReg(54);

  shiftData_54_3 <= shiftData_54_2 XOR xorDataParityReg_54;

  xorDataParityReg_53 <= xorDataParityReg(53);

  shiftData_53_3 <= shiftData_53_2 XOR xorDataParityReg_53;

  xorDataParityReg_52 <= xorDataParityReg(52);

  shiftData_52_3 <= shiftData_52_2 XOR xorDataParityReg_52;

  xorDataParityReg_51 <= xorDataParityReg(51);

  shiftData_51_3 <= shiftData_51_2 XOR xorDataParityReg_51;

  xorDataParityReg_50 <= xorDataParityReg(50);

  shiftData_50_3 <= shiftData_50_2 XOR xorDataParityReg_50;

  xorDataParityReg_49 <= xorDataParityReg(49);

  shiftData_49_3 <= shiftData_49_2 XOR xorDataParityReg_49;

  xorDataParityReg_48 <= xorDataParityReg(48);

  shiftData_48_3 <= shiftData_48_2 XOR xorDataParityReg_48;

  xorDataParityReg_47 <= xorDataParityReg(47);

  shiftData_47_3 <= shiftData_47_2 XOR xorDataParityReg_47;

  xorDataParityReg_46 <= xorDataParityReg(46);

  shiftData_46_3 <= shiftData_46_2 XOR xorDataParityReg_46;

  xorDataParityReg_45 <= xorDataParityReg(45);

  shiftData_45_3 <= shiftData_45_2 XOR xorDataParityReg_45;

  xorDataParityReg_44 <= xorDataParityReg(44);

  shiftData_44_3 <= shiftData_44_2 XOR xorDataParityReg_44;

  xorDataParityReg_43 <= xorDataParityReg(43);

  shiftData_43_3 <= shiftData_43_2 XOR xorDataParityReg_43;

  xorDataParityReg_42 <= xorDataParityReg(42);

  shiftData_42_3 <= shiftData_42_2 XOR xorDataParityReg_42;

  xorDataParityReg_41 <= xorDataParityReg(41);

  shiftData_41_3 <= shiftData_41_2 XOR xorDataParityReg_41;

  xorDataParityReg_40 <= xorDataParityReg(40);

  shiftData_40_3 <= shiftData_40_2 XOR xorDataParityReg_40;

  xorDataParityReg_39 <= xorDataParityReg(39);

  shiftData_39_3 <= shiftData_39_2 XOR xorDataParityReg_39;

  xorDataParityReg_38 <= xorDataParityReg(38);

  shiftData_38_3 <= shiftData_38_2 XOR xorDataParityReg_38;

  xorDataParityReg_37 <= xorDataParityReg(37);

  shiftData_37_3 <= shiftData_37_2 XOR xorDataParityReg_37;

  xorDataParityReg_36 <= xorDataParityReg(36);

  shiftData_36_3 <= shiftData_36_2 XOR xorDataParityReg_36;

  xorDataParityReg_35 <= xorDataParityReg(35);

  shiftData_35_3 <= shiftData_35_2 XOR xorDataParityReg_35;

  xorDataParityReg_34 <= xorDataParityReg(34);

  shiftData_34_3 <= shiftData_34_2 XOR xorDataParityReg_34;

  xorDataParityReg_33 <= xorDataParityReg(33);

  shiftData_33_3 <= shiftData_33_2 XOR xorDataParityReg_33;

  xorDataParityReg_32 <= xorDataParityReg(32);

  shiftData_32_3 <= shiftData_32_2 XOR xorDataParityReg_32;

  xorDataParityReg_31 <= xorDataParityReg(31);

  shiftData_31_3 <= shiftData_31_2 XOR xorDataParityReg_31;

  xorDataParityReg_30 <= xorDataParityReg(30);

  shiftData_30_3 <= shiftData_30_2 XOR xorDataParityReg_30;

  xorDataParityReg_29 <= xorDataParityReg(29);

  shiftData_29_3 <= shiftData_29_2 XOR xorDataParityReg_29;

  xorDataParityReg_28 <= xorDataParityReg(28);

  shiftData_28_3 <= shiftData_28_2 XOR xorDataParityReg_28;

  xorDataParityReg_27 <= xorDataParityReg(27);

  shiftData_27_3 <= shiftData_27_2 XOR xorDataParityReg_27;

  xorDataParityReg_26 <= xorDataParityReg(26);

  shiftData_26_3 <= shiftData_26_2 XOR xorDataParityReg_26;

  xorDataParityReg_25 <= xorDataParityReg(25);

  shiftData_25_3 <= shiftData_25_2 XOR xorDataParityReg_25;

  xorDataParityReg_24 <= xorDataParityReg(24);

  shiftData_24_3 <= shiftData_24_2 XOR xorDataParityReg_24;

  xorDataParityReg_23 <= xorDataParityReg(23);

  shiftData_23_3 <= shiftData_23_2 XOR xorDataParityReg_23;

  xorDataParityReg_22 <= xorDataParityReg(22);

  shiftData_22_3 <= shiftData_22_2 XOR xorDataParityReg_22;

  xorDataParityReg_21 <= xorDataParityReg(21);

  shiftData_21_3 <= shiftData_21_2 XOR xorDataParityReg_21;

  xorDataParityReg_20 <= xorDataParityReg(20);

  shiftData_20_3 <= shiftData_20_2 XOR xorDataParityReg_20;

  xorDataParityReg_19 <= xorDataParityReg(19);

  shiftData_19_3 <= shiftData_19_2 XOR xorDataParityReg_19;

  xorDataParityReg_18 <= xorDataParityReg(18);

  shiftData_18_3 <= shiftData_18_2 XOR xorDataParityReg_18;

  xorDataParityReg_17 <= xorDataParityReg(17);

  shiftData_17_3 <= shiftData_17_2 XOR xorDataParityReg_17;

  xorDataParityReg_16 <= xorDataParityReg(16);

  shiftData_16_3 <= shiftData_16_2 XOR xorDataParityReg_16;

  xorDataParityReg_15 <= xorDataParityReg(15);

  shiftData_15_3 <= shiftData_15_2 XOR xorDataParityReg_15;

  xorDataParityReg_14 <= xorDataParityReg(14);

  shiftData_14_3 <= shiftData_14_2 XOR xorDataParityReg_14;

  xorDataParityReg_13 <= xorDataParityReg(13);

  shiftData_13_3 <= shiftData_13_2 XOR xorDataParityReg_13;

  xorDataParityReg_12 <= xorDataParityReg(12);

  shiftData_12_3 <= shiftData_12_2 XOR xorDataParityReg_12;

  xorDataParityReg_11 <= xorDataParityReg(11);

  shiftData_11_3 <= shiftData_11_2 XOR xorDataParityReg_11;

  xorDataParityReg_10 <= xorDataParityReg(10);

  shiftData_10_3 <= shiftData_10_2 XOR xorDataParityReg_10;

  xorDataParityReg_9 <= xorDataParityReg(9);

  shiftData_9_3 <= shiftData_9_2 XOR xorDataParityReg_9;

  xorDataParityReg_8 <= xorDataParityReg(8);

  shiftData_8_3 <= shiftData_8_2 XOR xorDataParityReg_8;

  xorDataParityReg_7 <= xorDataParityReg(7);

  shiftData_7_3 <= shiftData_7_2 XOR xorDataParityReg_7;

  xorDataParityReg_6 <= xorDataParityReg(6);

  shiftData_6_3 <= shiftData_6_2 XOR xorDataParityReg_6;

  xorDataParityReg_5 <= xorDataParityReg(5);

  shiftData_5_3 <= shiftData_5_2 XOR xorDataParityReg_5;

  xorDataParityReg_4 <= xorDataParityReg(4);

  shiftData_4_3 <= shiftData_4_2 XOR xorDataParityReg_4;

  xorDataParityReg_3 <= xorDataParityReg(3);

  shiftData_3_3 <= shiftData_3_2 XOR xorDataParityReg_3;

  xorDataParityReg_2 <= xorDataParityReg(2);

  shiftData_2_3 <= shiftData_2_2 XOR xorDataParityReg_2;

  xorDataParityReg_1 <= xorDataParityReg(1);

  shiftData_1_3 <= shiftData_1_2 XOR xorDataParityReg_1;

  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alpha_switch_delay_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF reset = '1' THEN
          alpha_switch_delay_1 <= (OTHERS => '0');
        ELSIF const1Reg = '1' THEN
          alpha_switch_delay_1 <= xorDataParity1;
        END IF;
      END IF;
    END IF;
  END PROCESS c_3_process;

  
  xorDataParityReg <= (OTHERS => '0') WHEN reset = '1' ELSE
      alpha_switch_delay_1;

  xorDataParityReg_0 <= xorDataParityReg(0);

  shiftData_0_3 <= shiftData_0_2 XOR xorDataParityReg_0;

  xorDataParity1(0) <= shiftData_0_3;
  xorDataParity1(1) <= shiftData_1_3;
  xorDataParity1(2) <= shiftData_2_3;
  xorDataParity1(3) <= shiftData_3_3;
  xorDataParity1(4) <= shiftData_4_3;
  xorDataParity1(5) <= shiftData_5_3;
  xorDataParity1(6) <= shiftData_6_3;
  xorDataParity1(7) <= shiftData_7_3;
  xorDataParity1(8) <= shiftData_8_3;
  xorDataParity1(9) <= shiftData_9_3;
  xorDataParity1(10) <= shiftData_10_3;
  xorDataParity1(11) <= shiftData_11_3;
  xorDataParity1(12) <= shiftData_12_3;
  xorDataParity1(13) <= shiftData_13_3;
  xorDataParity1(14) <= shiftData_14_3;
  xorDataParity1(15) <= shiftData_15_3;
  xorDataParity1(16) <= shiftData_16_3;
  xorDataParity1(17) <= shiftData_17_3;
  xorDataParity1(18) <= shiftData_18_3;
  xorDataParity1(19) <= shiftData_19_3;
  xorDataParity1(20) <= shiftData_20_3;
  xorDataParity1(21) <= shiftData_21_3;
  xorDataParity1(22) <= shiftData_22_3;
  xorDataParity1(23) <= shiftData_23_3;
  xorDataParity1(24) <= shiftData_24_3;
  xorDataParity1(25) <= shiftData_25_3;
  xorDataParity1(26) <= shiftData_26_3;
  xorDataParity1(27) <= shiftData_27_3;
  xorDataParity1(28) <= shiftData_28_3;
  xorDataParity1(29) <= shiftData_29_3;
  xorDataParity1(30) <= shiftData_30_3;
  xorDataParity1(31) <= shiftData_31_3;
  xorDataParity1(32) <= shiftData_32_3;
  xorDataParity1(33) <= shiftData_33_3;
  xorDataParity1(34) <= shiftData_34_3;
  xorDataParity1(35) <= shiftData_35_3;
  xorDataParity1(36) <= shiftData_36_3;
  xorDataParity1(37) <= shiftData_37_3;
  xorDataParity1(38) <= shiftData_38_3;
  xorDataParity1(39) <= shiftData_39_3;
  xorDataParity1(40) <= shiftData_40_3;
  xorDataParity1(41) <= shiftData_41_3;
  xorDataParity1(42) <= shiftData_42_3;
  xorDataParity1(43) <= shiftData_43_3;
  xorDataParity1(44) <= shiftData_44_3;
  xorDataParity1(45) <= shiftData_45_3;
  xorDataParity1(46) <= shiftData_46_3;
  xorDataParity1(47) <= shiftData_47_3;
  xorDataParity1(48) <= shiftData_48_3;
  xorDataParity1(49) <= shiftData_49_3;
  xorDataParity1(50) <= shiftData_50_3;
  xorDataParity1(51) <= shiftData_51_3;
  xorDataParity1(52) <= shiftData_52_3;
  xorDataParity1(53) <= shiftData_53_3;
  xorDataParity1(54) <= shiftData_54_3;
  xorDataParity1(55) <= shiftData_55_3;
  xorDataParity1(56) <= shiftData_56_3;
  xorDataParity1(57) <= shiftData_57_3;
  xorDataParity1(58) <= shiftData_58_3;
  xorDataParity1(59) <= shiftData_59_3;
  xorDataParity1(60) <= shiftData_60_3;
  xorDataParity1(61) <= shiftData_61_3;
  xorDataParity1(62) <= shiftData_62_3;
  xorDataParity1(63) <= shiftData_63_3;
  xorDataParity1(64) <= shiftData_64_3;
  xorDataParity1(65) <= shiftData_65_3;
  xorDataParity1(66) <= shiftData_66_3;
  xorDataParity1(67) <= shiftData_67_3;
  xorDataParity1(68) <= shiftData_68_3;
  xorDataParity1(69) <= shiftData_69_3;
  xorDataParity1(70) <= shiftData_70_3;
  xorDataParity1(71) <= shiftData_71_3;
  xorDataParity1(72) <= shiftData_72_3;
  xorDataParity1(73) <= shiftData_73_3;
  xorDataParity1(74) <= shiftData_74_3;
  xorDataParity1(75) <= shiftData_75_3;
  xorDataParity1(76) <= shiftData_76_3;
  xorDataParity1(77) <= shiftData_77_3;
  xorDataParity1(78) <= shiftData_78_3;
  xorDataParity1(79) <= shiftData_79_3;

  first_parity_value_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        parity1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        parity1 <= xorDataParity1;
      END IF;
    END IF;
  END PROCESS first_parity_value_process;


  alpha <= alphaTmp;

END rtl;

