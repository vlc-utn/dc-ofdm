-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_qam_mod.vhd
-- Created: 2024-06-30 19:38:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_qam_mod
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/enabled_qam_and_scrambler/qam_mod
-- Hierarchy Level: 3
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_tx_ip_src_full_tx_pac.ALL;

ENTITY full_tx_ip_src_qam_mod IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        ready_out                         :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic
        );
END full_tx_ip_src_qam_mod;


ARCHITECTURE rtl OF full_tx_ip_src_qam_mod IS

  -- Constants
  CONSTANT alpha_data                     : vector_of_signed16(0 TO 1) := 
    (to_signed(-16#4000#, 16), to_signed(16#4000#, 16));  -- sfix16 [2]
  CONSTANT alpha_table_data_re            : vector_of_signed16(0 TO 3) := 
    (to_signed(-16#2D41#, 16), to_signed(-16#2D41#, 16), to_signed(16#2D41#, 16), to_signed(16#2D41#, 16));  -- sfix16 [4]
  CONSTANT alpha_table_data_im            : vector_of_signed16(0 TO 3) := 
    (to_signed(16#2D41#, 16), to_signed(-16#2D41#, 16), to_signed(16#2D41#, 16), to_signed(-16#2D41#, 16));  -- sfix16 [4]
  CONSTANT alpha_table_data_re_2          : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#3CB7#, 16), to_signed(-16#3CB7#, 16), to_signed(-16#3CB7#, 16), to_signed(-16#3CB7#, 16),
     to_signed(-16#143D#, 16), to_signed(-16#143D#, 16), to_signed(-16#143D#, 16), to_signed(-16#143D#, 16),
     to_signed(16#3CB7#, 16), to_signed(16#3CB7#, 16), to_signed(16#3CB7#, 16), to_signed(16#3CB7#, 16),
     to_signed(16#143D#, 16), to_signed(16#143D#, 16), to_signed(16#143D#, 16), to_signed(16#143D#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im_2          : vector_of_signed16(0 TO 15) := 
    (to_signed(16#3CB7#, 16), to_signed(16#143D#, 16), to_signed(-16#3CB7#, 16), to_signed(-16#143D#, 16),
     to_signed(16#3CB7#, 16), to_signed(16#143D#, 16), to_signed(-16#3CB7#, 16), to_signed(-16#143D#, 16),
     to_signed(16#3CB7#, 16), to_signed(16#143D#, 16), to_signed(-16#3CB7#, 16), to_signed(-16#143D#, 16),
     to_signed(16#3CB7#, 16), to_signed(16#143D#, 16), to_signed(-16#3CB7#, 16), to_signed(-16#143D#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_re_4          : vector_of_signed16(0 TO 63) := 
    (to_signed(-16#4521#, 16), to_signed(-16#4521#, 16), to_signed(-16#4521#, 16), to_signed(-16#4521#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#4521#, 16), to_signed(-16#4521#, 16), to_signed(-16#4521#, 16),
     to_signed(-16#3161#, 16), to_signed(-16#3161#, 16), to_signed(-16#3161#, 16), to_signed(-16#3161#, 16),
     to_signed(-16#3161#, 16), to_signed(-16#3161#, 16), to_signed(-16#3161#, 16), to_signed(-16#3161#, 16),
     to_signed(-16#09E0#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09E0#, 16),
     to_signed(-16#09E0#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09E0#, 16), to_signed(-16#09E0#, 16),
     to_signed(-16#1DA0#, 16), to_signed(-16#1DA0#, 16), to_signed(-16#1DA0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(-16#1DA0#, 16), to_signed(-16#1DA0#, 16), to_signed(-16#1DA0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#4521#, 16), to_signed(16#4521#, 16), to_signed(16#4521#, 16),
     to_signed(16#4521#, 16), to_signed(16#4521#, 16), to_signed(16#4521#, 16), to_signed(16#4521#, 16),
     to_signed(16#3161#, 16), to_signed(16#3161#, 16), to_signed(16#3161#, 16), to_signed(16#3161#, 16),
     to_signed(16#3161#, 16), to_signed(16#3161#, 16), to_signed(16#3161#, 16), to_signed(16#3161#, 16),
     to_signed(16#09E0#, 16), to_signed(16#09E0#, 16), to_signed(16#09E0#, 16), to_signed(16#09E0#, 16),
     to_signed(16#09E0#, 16), to_signed(16#09E0#, 16), to_signed(16#09E0#, 16), to_signed(16#09E0#, 16),
     to_signed(16#1DA0#, 16), to_signed(16#1DA0#, 16), to_signed(16#1DA0#, 16), to_signed(16#1DA0#, 16),
     to_signed(16#1DA0#, 16), to_signed(16#1DA0#, 16), to_signed(16#1DA0#, 16), to_signed(16#1DA0#, 16));  -- sfix16 [64]
  CONSTANT alpha_table_data_im_4          : vector_of_signed16(0 TO 63) := 
    (to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16),
     to_signed(16#4521#, 16), to_signed(16#3161#, 16), to_signed(16#09E0#, 16), to_signed(16#1DA0#, 16),
     to_signed(-16#4521#, 16), to_signed(-16#3161#, 16), to_signed(-16#09E0#, 16), to_signed(-16#1DA0#, 16));  -- sfix16 [64]

  -- Signals
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant3_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_unsigned                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Constant5_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL alpha_cast                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL batID_0_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL batID_0_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Bit_Slice1_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL batID_1_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL batID_1_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant4_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Bit_Slice2_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL batID_8_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL batID_8_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant6_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant7_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Bit_Slice3_out1                  : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL batID_12_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL batID_12_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant8_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_re         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_im         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_re_1       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiport_Switch_out1_im_1       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL valid_in_1                       : std_logic;

BEGIN
  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  Constant3_out1 <= to_signed(16#0000#, 16);

  data_in_unsigned <= unsigned(data_in);

  Constant5_out1 <= to_signed(16#0000#, 16);

  Bit_Slice_out1 <= data_in_unsigned(0);

  alpha_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Bit_Slice_out1;
  batID_0_out1_re <= alpha_data(to_integer(alpha_cast));
  batID_0_out1_im <= to_signed(16#0000#, 16);

  Bit_Slice1_out1 <= data_in_unsigned(1 DOWNTO 0);

  batID_1_out1_re <= alpha_table_data_re(to_integer(Bit_Slice1_out1));
  batID_1_out1_im <= alpha_table_data_im(to_integer(Bit_Slice1_out1));

  Constant2_out1 <= to_signed(16#0000#, 16);

  Constant4_out1 <= to_signed(16#0000#, 16);

  Bit_Slice2_out1 <= data_in_unsigned(3 DOWNTO 0);

  batID_8_out1_re <= alpha_table_data_re_2(to_integer(Bit_Slice2_out1));
  batID_8_out1_im <= alpha_table_data_im_2(to_integer(Bit_Slice2_out1));

  Constant6_out1 <= to_signed(16#0000#, 16);

  Constant7_out1 <= to_signed(16#0000#, 16);

  Bit_Slice3_out1 <= data_in_unsigned(5 DOWNTO 0);

  batID_12_out1_re <= alpha_table_data_re_4(to_integer(Bit_Slice3_out1));
  batID_12_out1_im <= alpha_table_data_im_4(to_integer(Bit_Slice3_out1));

  Constant1_out1 <= to_signed(16#0000#, 16);

  Constant8_out1 <= to_signed(16#0000#, 16);

  
  Multiport_Switch_out1_re <= Constant3_out1 WHEN bits_per_subcarrier_unsigned = to_unsigned(16#0#, 4) ELSE
      batID_0_out1_re WHEN bits_per_subcarrier_unsigned = to_unsigned(16#1#, 4) ELSE
      batID_1_out1_re WHEN bits_per_subcarrier_unsigned = to_unsigned(16#2#, 4) ELSE
      Constant2_out1 WHEN bits_per_subcarrier_unsigned = to_unsigned(16#3#, 4) ELSE
      batID_8_out1_re WHEN bits_per_subcarrier_unsigned = to_unsigned(16#4#, 4) ELSE
      Constant6_out1 WHEN bits_per_subcarrier_unsigned = to_unsigned(16#5#, 4) ELSE
      batID_12_out1_re WHEN bits_per_subcarrier_unsigned = to_unsigned(16#6#, 4) ELSE
      Constant1_out1;
  
  Multiport_Switch_out1_im <= Constant5_out1 WHEN bits_per_subcarrier_unsigned = to_unsigned(16#0#, 4) ELSE
      batID_0_out1_im WHEN bits_per_subcarrier_unsigned = to_unsigned(16#1#, 4) ELSE
      batID_1_out1_im WHEN bits_per_subcarrier_unsigned = to_unsigned(16#2#, 4) ELSE
      Constant4_out1 WHEN bits_per_subcarrier_unsigned = to_unsigned(16#3#, 4) ELSE
      batID_8_out1_im WHEN bits_per_subcarrier_unsigned = to_unsigned(16#4#, 4) ELSE
      Constant7_out1 WHEN bits_per_subcarrier_unsigned = to_unsigned(16#5#, 4) ELSE
      batID_12_out1_im WHEN bits_per_subcarrier_unsigned = to_unsigned(16#6#, 4) ELSE
      Constant8_out1;

  
  Multiport_Switch_out1_re_1 <= Delay_out1_re WHEN ready_out = '0' ELSE
      Multiport_Switch_out1_re;
  
  Multiport_Switch_out1_im_1 <= Delay_out1_im WHEN ready_out = '0' ELSE
      Multiport_Switch_out1_im;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re <= to_signed(16#0000#, 16);
        Delay_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1_re <= Multiport_Switch_out1_re_1;
        Delay_out1_im <= Multiport_Switch_out1_im_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  data_out_re <= std_logic_vector(Delay_out1_re);

  data_out_im <= std_logic_vector(Delay_out1_im);

  
  valid_in_1 <= Delay1_out1 WHEN ready_out = '0' ELSE
      valid_in;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  valid_out <= Delay1_out1;

END rtl;

