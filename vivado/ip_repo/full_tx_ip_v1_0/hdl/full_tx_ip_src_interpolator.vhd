-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_interpolator.vhd
-- Created: 2024-06-30 19:38:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_interpolator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/interpolator
-- Hierarchy Level: 2
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_interpolator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic
        );
END full_tx_ip_src_interpolator;


ARCHITECTURE rtl OF full_tx_ip_src_interpolator IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_FIR_Interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_falling_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_FIR_Interpolator
    USE ENTITY work.full_tx_ip_src_FIR_Interpolator(rtl);

  FOR ALL : full_tx_ip_src_falling_edge_detector
    USE ENTITY work.full_tx_ip_src_falling_edge_detector(rtl);

  -- Signals
  SIGNAL Upsample_muxsel                  : std_logic;  -- ufix1
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_zero_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_zero_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Upsample1_muxsel                 : std_logic;  -- ufix1
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(31 DOWNTO 0);  -- ufix1 [32]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Upsample1_zero                   : std_logic;
  SIGNAL Upsample1_out1                   : std_logic;
  SIGNAL FIR_Interpolator_out1_re         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FIR_Interpolator_out1_im         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL FIR_Interpolator_out2            : std_logic;
  SIGNAL FIR_Interpolator_out1_re_signed  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL FIR_Interpolator_out1_im_signed  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(62 DOWNTO 0);  -- ufix1 [63]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL falling_edge_detector_out1       : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;

BEGIN
  u_FIR_Interpolator : full_tx_ip_src_FIR_Interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => std_logic_vector(Upsample_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Upsample_out1_im),  -- sfix16_En14
              validIn => Upsample1_out1,
              dataOut_re => FIR_Interpolator_out1_re,  -- sfix16_En14
              dataOut_im => FIR_Interpolator_out1_im,  -- sfix16_En14
              validOut => FIR_Interpolator_out2
              );

  u_falling_edge_detector : full_tx_ip_src_falling_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              in_rsvd => Logical_Operator1_out1,
              out_rsvd => falling_edge_detector_out1
              );

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  Upsample_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Upsample_muxsel <= '1';
      ELSIF enb = '1' THEN
        Upsample_muxsel <=  NOT Upsample_muxsel;
      END IF;
    END IF;
  END PROCESS Upsample_cnt_process;


  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Upsample_zero_re <= to_signed(16#0000#, 16);
  Upsample_zero_im <= to_signed(16#0000#, 16);

  -- Upsample: Upsample by 2, Sample offset 0 
  
  Upsample_out1_re <= data_in_re_signed WHEN Upsample_muxsel = '1' ELSE
      Upsample_zero_re;
  
  Upsample_out1_im <= data_in_im_signed WHEN Upsample_muxsel = '1' ELSE
      Upsample_zero_im;

  -- Free running, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  Upsample1_cnt_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Upsample1_muxsel <= '1';
      ELSIF enb = '1' THEN
        Upsample1_muxsel <=  NOT Upsample1_muxsel;
      END IF;
    END IF;
  END PROCESS Upsample1_cnt_process;


  stateControl <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch3_reg(0) <= stateControl;
        delayMatch3_reg(2 DOWNTO 1) <= delayMatch3_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_1 <= delayMatch3_reg(2);

  enb_1_2_0_gated <= stateControl_1 AND enb_1_2_0;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay3_reg(0) <= valid_in;
        Delay3_reg(31 DOWNTO 1) <= Delay3_reg(30 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(31);

  Logical_Operator_out1 <= valid_in OR Delay3_out1;

  Upsample1_zero <= '0';

  -- Upsample1: Upsample by 2, Sample offset 0 
  
  Upsample1_out1 <= Logical_Operator_out1 WHEN Upsample1_muxsel = '1' ELSE
      Upsample1_zero;

  FIR_Interpolator_out1_re_signed <= signed(FIR_Interpolator_out1_re);

  FIR_Interpolator_out1_im_signed <= signed(FIR_Interpolator_out1_im);

  stateControl_2 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_2;
        delayMatch2_reg(5 DOWNTO 1) <= delayMatch2_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_3 <= delayMatch2_reg(5);

  enb_gated <= stateControl_3 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_re <= to_signed(16#0000#, 16);
        Delay4_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_gated = '1' THEN
        Delay4_out1_re <= FIR_Interpolator_out1_re_signed;
        Delay4_out1_im <= FIR_Interpolator_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  data_out_re <= std_logic_vector(Delay4_out1_re);

  data_out_im <= std_logic_vector(Delay4_out1_im);

  stateControl_4 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_4;
        delayMatch1_reg(5 DOWNTO 1) <= delayMatch1_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_5 <= delayMatch1_reg(5);

  enb_gated_1 <= stateControl_5 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_gated_1 = '1' THEN
        Delay1_reg(0) <= FIR_Interpolator_out2;
        Delay1_reg(62 DOWNTO 1) <= Delay1_reg(61 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(62);

  Logical_Operator1_out1 <= FIR_Interpolator_out2 AND Delay1_out1;

  stateControl_7 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_7;
        delayMatch_reg(5 DOWNTO 1) <= delayMatch_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_8 <= delayMatch_reg(5);

  enb_gated_2 <= stateControl_8 AND enb;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_gated_2 = '1' THEN
        Delay_out1 <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Logical_Operator3_out1 <=  NOT falling_edge_detector_out1;

  Logical_Operator2_out1 <= Delay_out1 AND Logical_Operator3_out1;

  valid_out <= Logical_Operator2_out1;

END rtl;

