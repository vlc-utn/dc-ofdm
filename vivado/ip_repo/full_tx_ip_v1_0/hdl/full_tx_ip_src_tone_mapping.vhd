-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_tone_mapping.vhd
-- Created: 2024-06-30 19:38:39
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_tone_mapping
-- Source Path: HDLTx/full_tx/payload_full/tone_mapping
-- Hierarchy Level: 2
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_tx_ip_src_full_tx_pac.ALL;

ENTITY full_tx_ip_src_tone_mapping IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic;
        ctrl_in_end                       :   IN    std_logic;
        ctrl_in_valid                     :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        len_in_ofdm_symbols               :   IN    std_logic_vector(28 DOWNTO 0);  -- ufix29
        new_frame                         :   IN    std_logic;
        data_out                          :   OUT   std_logic;
        ctrl_out_valid                    :   OUT   std_logic
        );
END full_tx_ip_src_tone_mapping;


ARCHITECTURE rtl OF full_tx_ip_src_tone_mapping IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_Compare_To_Zero_block
    PORT( u                               :   IN    std_logic_vector(42 DOWNTO 0);  -- sfix43
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_Sample_Control_Bus_Creator_block4
    PORT( In3                             :   IN    std_logic;
          Out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_Compare_To_Zero_block
    USE ENTITY work.full_tx_ip_src_Compare_To_Zero_block(rtl);

  FOR ALL : full_tx_ip_src_Sample_Control_Bus_Creator_block4
    USE ENTITY work.full_tx_ip_src_Sample_Control_Bus_Creator_block4(rtl);

  -- Signals
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Product_out1                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay8_out1                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL reduced_reg                      : vector_of_unsigned12(0 TO 5);  -- ufix12 [6]
  SIGNAL Delay8_out1_1                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay8_out1_2                    : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL len_in_ofdm_symbols_unsigned     : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL Product1_out1                    : unsigned(40 DOWNTO 0);  -- ufix41
  SIGNAL Constant2_out1                   : unsigned(40 DOWNTO 0);  -- ufix41
  SIGNAL Subtract1_sub_cast               : signed(41 DOWNTO 0);  -- sfix42
  SIGNAL Subtract1_sub_cast_1             : signed(41 DOWNTO 0);  -- sfix42
  SIGNAL count_hit                        : signed(41 DOWNTO 0);  -- sfix42
  SIGNAL count_hit_1                      : signed(41 DOWNTO 0);  -- sfix42
  SIGNAL count_hit_2                      : signed(41 DOWNTO 0);  -- sfix42
  SIGNAL delayMatch5_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL new_frame_1                      : std_logic;
  SIGNAL Delay7_out1_valid                : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL reduced_reg_1                    : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay10_out1_1                   : std_logic;
  SIGNAL count_step                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_reset                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay7_out1_end                  : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL end_rsvd                         : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL Subtract_out1                    : signed(42 DOWNTO 0);  -- sfix43
  SIGNAL Relational_Operator_cast         : signed(42 DOWNTO 0);  -- sfix43
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL hold_end                         : std_logic;
  SIGNAL hold_end_1                       : std_logic;
  SIGNAL enable                           : std_logic;
  SIGNAL count_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_3                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Subtract_sub_cast                : signed(42 DOWNTO 0);  -- sfix43
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL hold_end_2                       : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL hold_end_4                       : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Sample_Control_Bus_Creator_out1_valid : std_logic;

BEGIN
  u_Compare_To_Zero : full_tx_ip_src_Compare_To_Zero_block
    PORT MAP( u => std_logic_vector(Subtract_out1),  -- sfix43
              y => Compare_To_Zero_out1
              );

  u_Sample_Control_Bus_Creator : full_tx_ip_src_Sample_Control_Bus_Creator_block4
    PORT MAP( In3 => Logical_Operator2_out1,
              Out1_valid => Sample_Control_Bus_Creator_out1_valid
              );

  Constant1_out1 <= to_unsigned(16#F5#, 8);

  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  Product_out1 <= Constant1_out1 * bits_per_subcarrier_unsigned;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay8_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg <= (OTHERS => to_unsigned(16#000#, 12));
      ELSIF enb = '1' THEN
        reduced_reg(0) <= Delay8_out1;
        reduced_reg(1 TO 5) <= reduced_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS reduced_process;

  Delay8_out1_1 <= reduced_reg(5);

  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_2 <= to_unsigned(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay8_out1_2 <= Delay8_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  len_in_ofdm_symbols_unsigned <= unsigned(len_in_ofdm_symbols);

  Product1_out1 <= Delay8_out1_2 * len_in_ofdm_symbols_unsigned;

  Constant2_out1 <= to_unsigned(1, 41);

  Subtract1_sub_cast <= signed(resize(Product1_out1, 42));
  Subtract1_sub_cast_1 <= signed(resize(Constant2_out1, 42));
  count_hit <= Subtract1_sub_cast - Subtract1_sub_cast_1;

  count_hit_1 <= count_hit;

  count_hit_2 <= count_hit_1;

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= new_frame;
        delayMatch5_reg(5 DOWNTO 1) <= delayMatch5_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  new_frame_1 <= delayMatch5_reg(5);

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_valid <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1_valid <= ctrl_in_valid;
      END IF;
    END IF;
  END PROCESS c_process;


  valid <= Delay7_out1_valid;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1 <= valid;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        reduced_reg_1(0) <= Delay10_out1;
        reduced_reg_1(5 DOWNTO 1) <= reduced_reg_1(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS reduced_2_process;

  Delay10_out1_1 <= reduced_reg_1(5);

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#0001#, 16);

  count_reset <= to_unsigned(16#0000#, 16);

  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_end <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1_end <= ctrl_in_end;
      END IF;
    END IF;
  END PROCESS c_1_process;


  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= Delay7_out1_end;
        delayMatch2_reg(5 DOWNTO 1) <= delayMatch2_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  end_rsvd <= delayMatch2_reg(5);

  stateControl_1 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_1;
        delayMatch1_reg(5 DOWNTO 1) <= delayMatch1_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_2 <= delayMatch1_reg(5);

  enb_gated <= stateControl_2 AND enb;

  stateControl_3 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= stateControl_3;
        delayMatch6_reg(5 DOWNTO 1) <= delayMatch6_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_4 <= delayMatch6_reg(5);

  enb_gated_1 <= stateControl_4 AND enb;

  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_out1 <= '0';
      ELSIF enb_gated = '1' THEN
        Unit_Delay1_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Relational_Operator_cast <= signed(resize(Delay8_out1_1, 43));
  
  Relational_Operator_out1 <= '1' WHEN Subtract_out1 <= Relational_Operator_cast ELSE
      '0';

  Logical_Operator_out1 <= end_rsvd AND Relational_Operator_out1;

  count_1 <= count + count_step;

  hold_end_1 <= hold_end;

  enable <= Delay10_out1_1 OR hold_end_1;

  
  count_2 <= count WHEN enable = '0' ELSE
      count_1;

  
  count_3 <= count_2 WHEN new_frame_1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        count <= count_3;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Subtract_sub_cast <= signed(resize(count, 43));
  Subtract_out1 <= resize(count_hit_2, 43) - Subtract_sub_cast;

  Logical_Operator5_out1 <= Compare_To_Zero_out1 AND hold_end;

  Logical_Operator6_out1 <= Logical_Operator5_out1 OR Logical_Operator_out1;

  
  Switch2_out1 <= Unit_Delay1_out1 WHEN Logical_Operator6_out1 = '0' ELSE
      Logical_Operator_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hold_end <= '0';
      ELSIF enb_gated_1 = '1' THEN
        hold_end <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  hold_end_2 <= hold_end;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= data_in;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= Delay6_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch7_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch7_reg(0) <= Delay_out1;
        delayMatch7_reg(4 DOWNTO 1) <= delayMatch7_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Delay_out1_1 <= delayMatch7_reg(4);

  Constant_out1 <= '0';

  
  Switch_out1 <= Delay_out1_1 WHEN hold_end_2 = '0' ELSE
      Constant_out1;

  hold_end_4 <= hold_end;

  Logical_Operator2_out1 <= Delay10_out1_1 OR hold_end_4;

  data_out <= Switch_out1;

  ctrl_out_valid <= Sample_Control_Bus_Creator_out1_valid;

END rtl;

