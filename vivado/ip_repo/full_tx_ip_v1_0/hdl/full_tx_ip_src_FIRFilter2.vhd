-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_FIRFilter2.vhd
-- Created: 2024-06-30 19:38:40
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_FIRFilter2
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/interpolator/FIR Interpolator/HDLTx/full_tx/full_ofdm_modulator/interpolator/FIR 
-- Interpolator/FIRFilter
-- Hierarchy Level: 4
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_FIRFilter2 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END full_tx_ip_src_FIRFilter2;


ARCHITECTURE rtl OF full_tx_ip_src_FIRFilter2 IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_FirRdyLogic_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinSwitch_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dinSwitch_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dinVldSwitch                    :   IN    std_logic;
          coeff_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coeff_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          haltProcess                     :   IN    std_logic;
          dinSM_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dinSM_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dinVldSM                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_Addressable_Delay_Line_block3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          wrEn                            :   IN    std_logic;
          rdAddr                          :   IN    std_logic;  -- ufix1
          delayLineEnd                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_FilterTapSystolic
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coeff                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          sumIn                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          sumOut                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_Addressable_Delay_Line_block4
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          wrEn                            :   IN    std_logic;
          rdAddr                          :   IN    std_logic;  -- ufix1
          delayLineEnd                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_FilterTapSystolic_block
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          coeff                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          sumIn                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          sumOut                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_FirRdyLogic_block
    USE ENTITY work.full_tx_ip_src_FirRdyLogic_block(rtl);

  FOR ALL : full_tx_ip_src_Addressable_Delay_Line_block3
    USE ENTITY work.full_tx_ip_src_Addressable_Delay_Line_block3(rtl);

  FOR ALL : full_tx_ip_src_FilterTapSystolic
    USE ENTITY work.full_tx_ip_src_FilterTapSystolic(rtl);

  FOR ALL : full_tx_ip_src_Addressable_Delay_Line_block4
    USE ENTITY work.full_tx_ip_src_Addressable_Delay_Line_block4(rtl);

  FOR ALL : full_tx_ip_src_FilterTapSystolic_block
    USE ENTITY work.full_tx_ip_src_FilterTapSystolic_block(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL coeff_re                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeff_im                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL haltProcess                      : std_logic;
  SIGNAL dinSM_re                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dinSM_im                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dinVldSM                         : std_logic;
  SIGNAL nextDelayLineRdAddrReverse       : std_logic;  -- ufix1
  SIGNAL rdCountReverse_1                 : std_logic;  -- ufix1
  SIGNAL nextDelayLineWrAddr              : std_logic;  -- ufix1
  SIGNAL wrCount_1                        : std_logic;  -- ufix1
  SIGNAL nextDelayLineRdAddr              : std_logic;  -- ufix1
  SIGNAL rdCount_1                        : std_logic;  -- ufix1
  SIGNAL nextSharingCount                 : std_logic;  -- ufix1
  SIGNAL sharingCount_1                   : std_logic;  -- ufix1
  SIGNAL delayLineValidInP                : std_logic;
  SIGNAL lastPhaseStrobe                  : std_logic;
  SIGNAL delayLineShiftEnP                : std_logic;
  SIGNAL delayLineShiftEn1_1              : std_logic;
  SIGNAL syncResetRst                     : std_logic;
  SIGNAL delayLineShiftEn2_1              : std_logic;
  SIGNAL delayLineShiftEn3_1              : std_logic;
  SIGNAL delayLineShiftEn4_1              : std_logic;
  SIGNAL delayLineShiftEn5_1              : std_logic;
  SIGNAL delayLineShiftEn6_1              : std_logic;
  SIGNAL delayLineShiftEn7_1              : std_logic;
  SIGNAL delayLineShiftEn8_1              : std_logic;
  SIGNAL delayLineShiftEn9_1              : std_logic;
  SIGNAL delayLineShiftEn10_1             : std_logic;
  SIGNAL delayLineShiftEn11_1             : std_logic;
  SIGNAL delayLineShiftEn12_1             : std_logic;
  SIGNAL delayLineShiftEn13_1             : std_logic;
  SIGNAL delayLineShiftEn14_1             : std_logic;
  SIGNAL delayLineShiftEn15_1             : std_logic;
  SIGNAL delayLineShiftEn16_1             : std_logic;
  SIGNAL delayLineShiftEn17_1             : std_logic;
  SIGNAL delayLineShiftEn18_1             : std_logic;
  SIGNAL delayLineShiftEn19_1             : std_logic;
  SIGNAL delayLineShiftEn20_1             : std_logic;
  SIGNAL delayLineShiftEn21_1             : std_logic;
  SIGNAL delayLineShiftEn22_1             : std_logic;
  SIGNAL delayLineShiftEn23_1             : std_logic;
  SIGNAL delayLineShiftEn24_1             : std_logic;
  SIGNAL delayLineShiftEn25_1             : std_logic;
  SIGNAL delayLineShiftEn26_1             : std_logic;
  SIGNAL delayLineShiftEn27_1             : std_logic;
  SIGNAL delayLineShiftEn28_1             : std_logic;
  SIGNAL delayLineShiftEn29_1             : std_logic;
  SIGNAL delayLineShiftEn30_1             : std_logic;
  SIGNAL delayLineShiftEn31_1             : std_logic;
  SIGNAL validOutLookahead_reg            : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL validOutLookahead_1              : std_logic;
  SIGNAL vldOut_1                         : std_logic;
  SIGNAL notValid                         : std_logic;
  SIGNAL rdAddr0_1                        : std_logic;  -- ufix1
  SIGNAL rdAddr1                          : std_logic;  -- ufix1
  SIGNAL rdAddr2                          : std_logic;  -- ufix1
  SIGNAL rdAddr3                          : std_logic;  -- ufix1
  SIGNAL rdAddr4                          : std_logic;  -- ufix1
  SIGNAL rdAddr5                          : std_logic;  -- ufix1
  SIGNAL rdAddr6                          : std_logic;  -- ufix1
  SIGNAL rdAddr7                          : std_logic;  -- ufix1
  SIGNAL rdAddr8                          : std_logic;  -- ufix1
  SIGNAL rdAddr9                          : std_logic;  -- ufix1
  SIGNAL rdAddr10                         : std_logic;  -- ufix1
  SIGNAL rdAddr11                         : std_logic;  -- ufix1
  SIGNAL rdAddr12                         : std_logic;  -- ufix1
  SIGNAL rdAddr13                         : std_logic;  -- ufix1
  SIGNAL rdAddr14                         : std_logic;  -- ufix1
  SIGNAL rdAddr15                         : std_logic;  -- ufix1
  SIGNAL rdAddr16                         : std_logic;  -- ufix1
  SIGNAL rdAddr17                         : std_logic;  -- ufix1
  SIGNAL rdAddr18                         : std_logic;  -- ufix1
  SIGNAL rdAddr19                         : std_logic;  -- ufix1
  SIGNAL rdAddr20                         : std_logic;  -- ufix1
  SIGNAL rdAddr21                         : std_logic;  -- ufix1
  SIGNAL rdAddr22                         : std_logic;  -- ufix1
  SIGNAL rdAddr23                         : std_logic;  -- ufix1
  SIGNAL rdAddr24                         : std_logic;  -- ufix1
  SIGNAL rdAddr25                         : std_logic;  -- ufix1
  SIGNAL rdAddr26                         : std_logic;  -- ufix1
  SIGNAL rdAddr27                         : std_logic;  -- ufix1
  SIGNAL rdAddr28                         : std_logic;  -- ufix1
  SIGNAL rdAddr29                         : std_logic;  -- ufix1
  SIGNAL rdAddr30                         : std_logic;  -- ufix1
  SIGNAL rdAddr31                         : std_logic;  -- ufix1
  SIGNAL rdAddrEndZero                    : std_logic;
  SIGNAL finalSumValidPipe_reg            : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL accumulate                       : std_logic;
  SIGNAL accDataOut                       : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayLineEnd0                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut0                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd0_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn1_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut1                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd1_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn2_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd2                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut2                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd2_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn3_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd3                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut3                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd3_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn4_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd4                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut4                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd4_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn5_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd5                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut5                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd5_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn6_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd6                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut6                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd6_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn7_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd7                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut7                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd7_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn8_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd8                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut8                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd8_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn9_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd9                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut9                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd9_signed             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn10_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd10                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut10               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd10_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn11_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd11                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut11               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd11_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn12_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd12                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut12               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd12_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn13_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd13                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut13               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd13_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn14_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd14                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut14               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd14_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn15_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd15                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut15               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd15_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn16_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd16                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut16               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd16_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn17_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd17                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut17               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd17_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn18_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd18                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut18               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd18_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn19_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd19                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut19               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd19_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn20_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd20                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut20               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd20_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn21_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd21                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut21               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd21_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn22_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd22                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut22               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd22_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn23_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd23                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut23               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd23_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn24_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd24                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut24               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd24_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn25_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd25                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut25               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd25_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn26_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd26                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut26               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd26_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn27_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd27                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut27               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd27_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn28_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd28                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut28               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd28_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn29_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd29                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut29               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd29_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn30_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd30                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut30               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd30_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn31_1              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableOut31                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd31deadOut            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut31               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL coeffTableRegP31_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut30                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP30_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut29                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP29_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut28                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP28_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut27                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP27_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut26                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP26_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut25                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP25_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut24                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP24_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut23                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP23_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut22                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP22_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut21                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP21_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut20                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP20_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut19                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP19_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut18                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP18_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut17                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP17_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut16                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP16_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut15                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP15_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut14                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP14_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut13                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP13_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut12                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP12_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut11                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP11_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut10                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP10_1               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut9                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP9_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut8                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP8_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut7                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP7_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut6                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP6_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut5                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP5_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut4                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP4_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut3                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP3_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP2_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP1_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut0                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP0_1                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL sumIn                            : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL sumOut                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_0                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_2                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_3                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_4                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_5                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_6                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_7                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_8                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_9                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_10                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_11                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_12                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_13                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_14                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_15                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_16                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_17                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_18                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_19                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_20                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_21                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_22                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_23                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_24                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_25                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_26                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_27                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_28                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_29                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_30                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_30_signed                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL sumOutReg_1                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL accDataOut_1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL accSwitchOut                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL accAdderOut                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL converterOut                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL validOutLookahead_reg_1          : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL validOutLookahead_3              : std_logic;
  SIGNAL rdAddrEndZero_1                  : std_logic;
  SIGNAL finalSumValidPipe_reg_1          : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL accumulate_1                     : std_logic;
  SIGNAL accDataOut_3                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL delayLineEnd0_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut0_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd0_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn1_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd1_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut1_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd1_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn2_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd2_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut2_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd2_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn3_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd3_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut3_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd3_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn4_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd4_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut4_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd4_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn5_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd5_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut5_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd5_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn6_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd6_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut6_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd6_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn7_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd7_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut7_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd7_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn8_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd8_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut8_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd8_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn9_3               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd9_1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut9_1              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd9_signed_1           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn10_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd10_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut10_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd10_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn11_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd11_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut11_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd11_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn12_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd12_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut12_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd12_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn13_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd13_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut13_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd13_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn14_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd14_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut14_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd14_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn15_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd15_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut15_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd15_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn16_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd16_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut16_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd16_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn17_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd17_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut17_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd17_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn18_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd18_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut18_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd18_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn19_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd19_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut19_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd19_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn20_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd20_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut20_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd20_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn21_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd21_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut21_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd21_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn22_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd22_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut22_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd22_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn23_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd23_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut23_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd23_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn24_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd24_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut24_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd24_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn25_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd25_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut25_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd25_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn26_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd26_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut26_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd26_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn27_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd27_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut27_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd27_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn28_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd28_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut28_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd28_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn29_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd29_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut29_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd29_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn30_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd30_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut30_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineEnd30_signed_1          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineDataIn31_3              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableOut31_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayLineEnd31deadOut_1          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL delayLineDataOut31_1             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL coeffTableRegP31_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut30_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP30_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut29_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP29_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut28_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP28_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut27_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP27_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut26_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP26_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut25_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP25_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut24_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP24_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut23_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP23_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut22_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP22_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut21_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP21_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut20_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP20_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut19_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP19_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut18_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP18_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut17_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP17_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut16_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP16_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut15_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP15_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut14_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP14_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut13_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP13_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut12_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP12_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut11_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP11_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut10_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP10_3               : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut9_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP9_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut8_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP8_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut7_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP7_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut6_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP6_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut5_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP5_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut4_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP4_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut3_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP3_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut2_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP2_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut1_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP1_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL coeffTableOut0_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coeffTableRegP0_3                : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL sumIn_1                          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL sumOut_31                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_0_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_2_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_3_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_4_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_5_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_6_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_7_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_8_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_9_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_10_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_11_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_12_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_13_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_14_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_15_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_16_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_17_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_18_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_19_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_20_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_21_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_22_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_23_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_24_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_25_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_26_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_27_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_28_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_29_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_30_1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL sumOut_30_signed_1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL sumOutReg_3                      : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL accDataOut_4                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL accSwitchOut_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL accAdderOut_1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL converterOut_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataZero                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataZero_dtc_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataZero_dtc_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_cmplxSW_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_cmplxSW_im                  : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_firRdyLogic : full_tx_ip_src_FirRdyLogic_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dinSwitch_re => dataIn_re,  -- sfix16_En14
              dinSwitch_im => dataIn_im,  -- sfix16_En14
              dinVldSwitch => validIn,
              coeff_re => std_logic_vector(coeff_re),  -- sfix16_En14
              coeff_im => std_logic_vector(coeff_im),  -- sfix16_En14
              haltProcess => haltProcess,
              dinSM_re => dinSM_re,  -- sfix16_En14
              dinSM_im => dinSM_im,  -- sfix16_En14
              dinVldSM => dinVldSM
              );

  u_delayLine0 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => dinSM_re,  -- sfix16_En14
              wrEn => delayLineValidInP,
              rdAddr => rdAddr0_1,  -- ufix1
              delayLineEnd => delayLineEnd0,  -- sfix16_En14
              dataOut => delayLineDataOut0  -- sfix16_En14
              );

  u_delayLine1 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn1_1),  -- sfix16_En14
              wrEn => delayLineShiftEn1_1,
              rdAddr => rdAddr1,  -- ufix1
              delayLineEnd => delayLineEnd1,  -- sfix16_En14
              dataOut => delayLineDataOut1  -- sfix16_En14
              );

  u_delayLine2 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn2_1),  -- sfix16_En14
              wrEn => delayLineShiftEn2_1,
              rdAddr => rdAddr2,  -- ufix1
              delayLineEnd => delayLineEnd2,  -- sfix16_En14
              dataOut => delayLineDataOut2  -- sfix16_En14
              );

  u_delayLine3 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn3_1),  -- sfix16_En14
              wrEn => delayLineShiftEn3_1,
              rdAddr => rdAddr3,  -- ufix1
              delayLineEnd => delayLineEnd3,  -- sfix16_En14
              dataOut => delayLineDataOut3  -- sfix16_En14
              );

  u_delayLine4 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn4_1),  -- sfix16_En14
              wrEn => delayLineShiftEn4_1,
              rdAddr => rdAddr4,  -- ufix1
              delayLineEnd => delayLineEnd4,  -- sfix16_En14
              dataOut => delayLineDataOut4  -- sfix16_En14
              );

  u_delayLine5 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn5_1),  -- sfix16_En14
              wrEn => delayLineShiftEn5_1,
              rdAddr => rdAddr5,  -- ufix1
              delayLineEnd => delayLineEnd5,  -- sfix16_En14
              dataOut => delayLineDataOut5  -- sfix16_En14
              );

  u_delayLine6 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn6_1),  -- sfix16_En14
              wrEn => delayLineShiftEn6_1,
              rdAddr => rdAddr6,  -- ufix1
              delayLineEnd => delayLineEnd6,  -- sfix16_En14
              dataOut => delayLineDataOut6  -- sfix16_En14
              );

  u_delayLine7 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn7_1),  -- sfix16_En14
              wrEn => delayLineShiftEn7_1,
              rdAddr => rdAddr7,  -- ufix1
              delayLineEnd => delayLineEnd7,  -- sfix16_En14
              dataOut => delayLineDataOut7  -- sfix16_En14
              );

  u_delayLine8 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn8_1),  -- sfix16_En14
              wrEn => delayLineShiftEn8_1,
              rdAddr => rdAddr8,  -- ufix1
              delayLineEnd => delayLineEnd8,  -- sfix16_En14
              dataOut => delayLineDataOut8  -- sfix16_En14
              );

  u_delayLine9 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn9_1),  -- sfix16_En14
              wrEn => delayLineShiftEn9_1,
              rdAddr => rdAddr9,  -- ufix1
              delayLineEnd => delayLineEnd9,  -- sfix16_En14
              dataOut => delayLineDataOut9  -- sfix16_En14
              );

  u_delayLine10 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn10_1),  -- sfix16_En14
              wrEn => delayLineShiftEn10_1,
              rdAddr => rdAddr10,  -- ufix1
              delayLineEnd => delayLineEnd10,  -- sfix16_En14
              dataOut => delayLineDataOut10  -- sfix16_En14
              );

  u_delayLine11 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn11_1),  -- sfix16_En14
              wrEn => delayLineShiftEn11_1,
              rdAddr => rdAddr11,  -- ufix1
              delayLineEnd => delayLineEnd11,  -- sfix16_En14
              dataOut => delayLineDataOut11  -- sfix16_En14
              );

  u_delayLine12 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn12_1),  -- sfix16_En14
              wrEn => delayLineShiftEn12_1,
              rdAddr => rdAddr12,  -- ufix1
              delayLineEnd => delayLineEnd12,  -- sfix16_En14
              dataOut => delayLineDataOut12  -- sfix16_En14
              );

  u_delayLine13 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn13_1),  -- sfix16_En14
              wrEn => delayLineShiftEn13_1,
              rdAddr => rdAddr13,  -- ufix1
              delayLineEnd => delayLineEnd13,  -- sfix16_En14
              dataOut => delayLineDataOut13  -- sfix16_En14
              );

  u_delayLine14 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn14_1),  -- sfix16_En14
              wrEn => delayLineShiftEn14_1,
              rdAddr => rdAddr14,  -- ufix1
              delayLineEnd => delayLineEnd14,  -- sfix16_En14
              dataOut => delayLineDataOut14  -- sfix16_En14
              );

  u_delayLine15 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn15_1),  -- sfix16_En14
              wrEn => delayLineShiftEn15_1,
              rdAddr => rdAddr15,  -- ufix1
              delayLineEnd => delayLineEnd15,  -- sfix16_En14
              dataOut => delayLineDataOut15  -- sfix16_En14
              );

  u_delayLine16 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn16_1),  -- sfix16_En14
              wrEn => delayLineShiftEn16_1,
              rdAddr => rdAddr16,  -- ufix1
              delayLineEnd => delayLineEnd16,  -- sfix16_En14
              dataOut => delayLineDataOut16  -- sfix16_En14
              );

  u_delayLine17 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn17_1),  -- sfix16_En14
              wrEn => delayLineShiftEn17_1,
              rdAddr => rdAddr17,  -- ufix1
              delayLineEnd => delayLineEnd17,  -- sfix16_En14
              dataOut => delayLineDataOut17  -- sfix16_En14
              );

  u_delayLine18 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn18_1),  -- sfix16_En14
              wrEn => delayLineShiftEn18_1,
              rdAddr => rdAddr18,  -- ufix1
              delayLineEnd => delayLineEnd18,  -- sfix16_En14
              dataOut => delayLineDataOut18  -- sfix16_En14
              );

  u_delayLine19 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn19_1),  -- sfix16_En14
              wrEn => delayLineShiftEn19_1,
              rdAddr => rdAddr19,  -- ufix1
              delayLineEnd => delayLineEnd19,  -- sfix16_En14
              dataOut => delayLineDataOut19  -- sfix16_En14
              );

  u_delayLine20 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn20_1),  -- sfix16_En14
              wrEn => delayLineShiftEn20_1,
              rdAddr => rdAddr20,  -- ufix1
              delayLineEnd => delayLineEnd20,  -- sfix16_En14
              dataOut => delayLineDataOut20  -- sfix16_En14
              );

  u_delayLine21 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn21_1),  -- sfix16_En14
              wrEn => delayLineShiftEn21_1,
              rdAddr => rdAddr21,  -- ufix1
              delayLineEnd => delayLineEnd21,  -- sfix16_En14
              dataOut => delayLineDataOut21  -- sfix16_En14
              );

  u_delayLine22 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn22_1),  -- sfix16_En14
              wrEn => delayLineShiftEn22_1,
              rdAddr => rdAddr22,  -- ufix1
              delayLineEnd => delayLineEnd22,  -- sfix16_En14
              dataOut => delayLineDataOut22  -- sfix16_En14
              );

  u_delayLine23 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn23_1),  -- sfix16_En14
              wrEn => delayLineShiftEn23_1,
              rdAddr => rdAddr23,  -- ufix1
              delayLineEnd => delayLineEnd23,  -- sfix16_En14
              dataOut => delayLineDataOut23  -- sfix16_En14
              );

  u_delayLine24 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn24_1),  -- sfix16_En14
              wrEn => delayLineShiftEn24_1,
              rdAddr => rdAddr24,  -- ufix1
              delayLineEnd => delayLineEnd24,  -- sfix16_En14
              dataOut => delayLineDataOut24  -- sfix16_En14
              );

  u_delayLine25 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn25_1),  -- sfix16_En14
              wrEn => delayLineShiftEn25_1,
              rdAddr => rdAddr25,  -- ufix1
              delayLineEnd => delayLineEnd25,  -- sfix16_En14
              dataOut => delayLineDataOut25  -- sfix16_En14
              );

  u_delayLine26 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn26_1),  -- sfix16_En14
              wrEn => delayLineShiftEn26_1,
              rdAddr => rdAddr26,  -- ufix1
              delayLineEnd => delayLineEnd26,  -- sfix16_En14
              dataOut => delayLineDataOut26  -- sfix16_En14
              );

  u_delayLine27 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn27_1),  -- sfix16_En14
              wrEn => delayLineShiftEn27_1,
              rdAddr => rdAddr27,  -- ufix1
              delayLineEnd => delayLineEnd27,  -- sfix16_En14
              dataOut => delayLineDataOut27  -- sfix16_En14
              );

  u_delayLine28 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn28_1),  -- sfix16_En14
              wrEn => delayLineShiftEn28_1,
              rdAddr => rdAddr28,  -- ufix1
              delayLineEnd => delayLineEnd28,  -- sfix16_En14
              dataOut => delayLineDataOut28  -- sfix16_En14
              );

  u_delayLine29 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn29_1),  -- sfix16_En14
              wrEn => delayLineShiftEn29_1,
              rdAddr => rdAddr29,  -- ufix1
              delayLineEnd => delayLineEnd29,  -- sfix16_En14
              dataOut => delayLineDataOut29  -- sfix16_En14
              );

  u_delayLine30 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn30_1),  -- sfix16_En14
              wrEn => delayLineShiftEn30_1,
              rdAddr => rdAddr30,  -- ufix1
              delayLineEnd => delayLineEnd30,  -- sfix16_En14
              dataOut => delayLineDataOut30  -- sfix16_En14
              );

  u_delayLine31 : full_tx_ip_src_Addressable_Delay_Line_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn31_1),  -- sfix16_En14
              wrEn => delayLineShiftEn31_1,
              rdAddr => rdAddr31,  -- ufix1
              delayLineEnd => delayLineEnd31deadOut,  -- sfix16_En14
              dataOut => delayLineDataOut31  -- sfix16_En14
              );

  u_filterTap0 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut0,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP0_1),  -- sfix16_En14
              sumIn => std_logic_vector(sumIn),  -- sfix32_En28
              sumOut => sumOut  -- sfix32_En28
              );

  u_filterTap1 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP1_1),  -- sfix16_En14
              sumIn => sumOut,  -- sfix32_En28
              sumOut => sumOut_0  -- sfix32_En28
              );

  u_filterTap2 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut2,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP2_1),  -- sfix16_En14
              sumIn => sumOut_0,  -- sfix32_En28
              sumOut => sumOut_1  -- sfix32_En28
              );

  u_filterTap3 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut3,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP3_1),  -- sfix16_En14
              sumIn => sumOut_1,  -- sfix32_En28
              sumOut => sumOut_2  -- sfix32_En28
              );

  u_filterTap4 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut4,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP4_1),  -- sfix16_En14
              sumIn => sumOut_2,  -- sfix32_En28
              sumOut => sumOut_3  -- sfix32_En28
              );

  u_filterTap5 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut5,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP5_1),  -- sfix16_En14
              sumIn => sumOut_3,  -- sfix32_En28
              sumOut => sumOut_4  -- sfix32_En28
              );

  u_filterTap6 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut6,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP6_1),  -- sfix16_En14
              sumIn => sumOut_4,  -- sfix32_En28
              sumOut => sumOut_5  -- sfix32_En28
              );

  u_filterTap7 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut7,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP7_1),  -- sfix16_En14
              sumIn => sumOut_5,  -- sfix32_En28
              sumOut => sumOut_6  -- sfix32_En28
              );

  u_filterTap8 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut8,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP8_1),  -- sfix16_En14
              sumIn => sumOut_6,  -- sfix32_En28
              sumOut => sumOut_7  -- sfix32_En28
              );

  u_filterTap9 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut9,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP9_1),  -- sfix16_En14
              sumIn => sumOut_7,  -- sfix32_En28
              sumOut => sumOut_8  -- sfix32_En28
              );

  u_filterTap10 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut10,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP10_1),  -- sfix16_En14
              sumIn => sumOut_8,  -- sfix32_En28
              sumOut => sumOut_9  -- sfix32_En28
              );

  u_filterTap11 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut11,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP11_1),  -- sfix16_En14
              sumIn => sumOut_9,  -- sfix32_En28
              sumOut => sumOut_10  -- sfix32_En28
              );

  u_filterTap12 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut12,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP12_1),  -- sfix16_En14
              sumIn => sumOut_10,  -- sfix32_En28
              sumOut => sumOut_11  -- sfix32_En28
              );

  u_filterTap13 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut13,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP13_1),  -- sfix16_En14
              sumIn => sumOut_11,  -- sfix32_En28
              sumOut => sumOut_12  -- sfix32_En28
              );

  u_filterTap14 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut14,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP14_1),  -- sfix16_En14
              sumIn => sumOut_12,  -- sfix32_En28
              sumOut => sumOut_13  -- sfix32_En28
              );

  u_filterTap15 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut15,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP15_1),  -- sfix16_En14
              sumIn => sumOut_13,  -- sfix32_En28
              sumOut => sumOut_14  -- sfix32_En28
              );

  u_filterTap16 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut16,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP16_1),  -- sfix16_En14
              sumIn => sumOut_14,  -- sfix32_En28
              sumOut => sumOut_15  -- sfix32_En28
              );

  u_filterTap17 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut17,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP17_1),  -- sfix16_En14
              sumIn => sumOut_15,  -- sfix32_En28
              sumOut => sumOut_16  -- sfix32_En28
              );

  u_filterTap18 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut18,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP18_1),  -- sfix16_En14
              sumIn => sumOut_16,  -- sfix32_En28
              sumOut => sumOut_17  -- sfix32_En28
              );

  u_filterTap19 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut19,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP19_1),  -- sfix16_En14
              sumIn => sumOut_17,  -- sfix32_En28
              sumOut => sumOut_18  -- sfix32_En28
              );

  u_filterTap20 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut20,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP20_1),  -- sfix16_En14
              sumIn => sumOut_18,  -- sfix32_En28
              sumOut => sumOut_19  -- sfix32_En28
              );

  u_filterTap21 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut21,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP21_1),  -- sfix16_En14
              sumIn => sumOut_19,  -- sfix32_En28
              sumOut => sumOut_20  -- sfix32_En28
              );

  u_filterTap22 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut22,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP22_1),  -- sfix16_En14
              sumIn => sumOut_20,  -- sfix32_En28
              sumOut => sumOut_21  -- sfix32_En28
              );

  u_filterTap23 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut23,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP23_1),  -- sfix16_En14
              sumIn => sumOut_21,  -- sfix32_En28
              sumOut => sumOut_22  -- sfix32_En28
              );

  u_filterTap24 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut24,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP24_1),  -- sfix16_En14
              sumIn => sumOut_22,  -- sfix32_En28
              sumOut => sumOut_23  -- sfix32_En28
              );

  u_filterTap25 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut25,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP25_1),  -- sfix16_En14
              sumIn => sumOut_23,  -- sfix32_En28
              sumOut => sumOut_24  -- sfix32_En28
              );

  u_filterTap26 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut26,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP26_1),  -- sfix16_En14
              sumIn => sumOut_24,  -- sfix32_En28
              sumOut => sumOut_25  -- sfix32_En28
              );

  u_filterTap27 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut27,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP27_1),  -- sfix16_En14
              sumIn => sumOut_25,  -- sfix32_En28
              sumOut => sumOut_26  -- sfix32_En28
              );

  u_filterTap28 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut28,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP28_1),  -- sfix16_En14
              sumIn => sumOut_26,  -- sfix32_En28
              sumOut => sumOut_27  -- sfix32_En28
              );

  u_filterTap29 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut29,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP29_1),  -- sfix16_En14
              sumIn => sumOut_27,  -- sfix32_En28
              sumOut => sumOut_28  -- sfix32_En28
              );

  u_filterTap30 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut30,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP30_1),  -- sfix16_En14
              sumIn => sumOut_28,  -- sfix32_En28
              sumOut => sumOut_29  -- sfix32_En28
              );

  u_filterTap31 : full_tx_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut31,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP31_1),  -- sfix16_En14
              sumIn => sumOut_29,  -- sfix32_En28
              sumOut => sumOut_30  -- sfix32_En28
              );

  u_delayLine0_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => dinSM_im,  -- sfix16_En14
              wrEn => delayLineValidInP,
              rdAddr => rdAddr0_1,  -- ufix1
              delayLineEnd => delayLineEnd0_1,  -- sfix16_En14
              dataOut => delayLineDataOut0_1  -- sfix16_En14
              );

  u_delayLine1_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn1_3),  -- sfix16_En14
              wrEn => delayLineShiftEn1_1,
              rdAddr => rdAddr1,  -- ufix1
              delayLineEnd => delayLineEnd1_1,  -- sfix16_En14
              dataOut => delayLineDataOut1_1  -- sfix16_En14
              );

  u_delayLine2_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn2_3),  -- sfix16_En14
              wrEn => delayLineShiftEn2_1,
              rdAddr => rdAddr2,  -- ufix1
              delayLineEnd => delayLineEnd2_1,  -- sfix16_En14
              dataOut => delayLineDataOut2_1  -- sfix16_En14
              );

  u_delayLine3_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn3_3),  -- sfix16_En14
              wrEn => delayLineShiftEn3_1,
              rdAddr => rdAddr3,  -- ufix1
              delayLineEnd => delayLineEnd3_1,  -- sfix16_En14
              dataOut => delayLineDataOut3_1  -- sfix16_En14
              );

  u_delayLine4_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn4_3),  -- sfix16_En14
              wrEn => delayLineShiftEn4_1,
              rdAddr => rdAddr4,  -- ufix1
              delayLineEnd => delayLineEnd4_1,  -- sfix16_En14
              dataOut => delayLineDataOut4_1  -- sfix16_En14
              );

  u_delayLine5_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn5_3),  -- sfix16_En14
              wrEn => delayLineShiftEn5_1,
              rdAddr => rdAddr5,  -- ufix1
              delayLineEnd => delayLineEnd5_1,  -- sfix16_En14
              dataOut => delayLineDataOut5_1  -- sfix16_En14
              );

  u_delayLine6_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn6_3),  -- sfix16_En14
              wrEn => delayLineShiftEn6_1,
              rdAddr => rdAddr6,  -- ufix1
              delayLineEnd => delayLineEnd6_1,  -- sfix16_En14
              dataOut => delayLineDataOut6_1  -- sfix16_En14
              );

  u_delayLine7_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn7_3),  -- sfix16_En14
              wrEn => delayLineShiftEn7_1,
              rdAddr => rdAddr7,  -- ufix1
              delayLineEnd => delayLineEnd7_1,  -- sfix16_En14
              dataOut => delayLineDataOut7_1  -- sfix16_En14
              );

  u_delayLine8_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn8_3),  -- sfix16_En14
              wrEn => delayLineShiftEn8_1,
              rdAddr => rdAddr8,  -- ufix1
              delayLineEnd => delayLineEnd8_1,  -- sfix16_En14
              dataOut => delayLineDataOut8_1  -- sfix16_En14
              );

  u_delayLine9_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn9_3),  -- sfix16_En14
              wrEn => delayLineShiftEn9_1,
              rdAddr => rdAddr9,  -- ufix1
              delayLineEnd => delayLineEnd9_1,  -- sfix16_En14
              dataOut => delayLineDataOut9_1  -- sfix16_En14
              );

  u_delayLine10_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn10_3),  -- sfix16_En14
              wrEn => delayLineShiftEn10_1,
              rdAddr => rdAddr10,  -- ufix1
              delayLineEnd => delayLineEnd10_1,  -- sfix16_En14
              dataOut => delayLineDataOut10_1  -- sfix16_En14
              );

  u_delayLine11_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn11_3),  -- sfix16_En14
              wrEn => delayLineShiftEn11_1,
              rdAddr => rdAddr11,  -- ufix1
              delayLineEnd => delayLineEnd11_1,  -- sfix16_En14
              dataOut => delayLineDataOut11_1  -- sfix16_En14
              );

  u_delayLine12_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn12_3),  -- sfix16_En14
              wrEn => delayLineShiftEn12_1,
              rdAddr => rdAddr12,  -- ufix1
              delayLineEnd => delayLineEnd12_1,  -- sfix16_En14
              dataOut => delayLineDataOut12_1  -- sfix16_En14
              );

  u_delayLine13_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn13_3),  -- sfix16_En14
              wrEn => delayLineShiftEn13_1,
              rdAddr => rdAddr13,  -- ufix1
              delayLineEnd => delayLineEnd13_1,  -- sfix16_En14
              dataOut => delayLineDataOut13_1  -- sfix16_En14
              );

  u_delayLine14_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn14_3),  -- sfix16_En14
              wrEn => delayLineShiftEn14_1,
              rdAddr => rdAddr14,  -- ufix1
              delayLineEnd => delayLineEnd14_1,  -- sfix16_En14
              dataOut => delayLineDataOut14_1  -- sfix16_En14
              );

  u_delayLine15_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn15_3),  -- sfix16_En14
              wrEn => delayLineShiftEn15_1,
              rdAddr => rdAddr15,  -- ufix1
              delayLineEnd => delayLineEnd15_1,  -- sfix16_En14
              dataOut => delayLineDataOut15_1  -- sfix16_En14
              );

  u_delayLine16_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn16_3),  -- sfix16_En14
              wrEn => delayLineShiftEn16_1,
              rdAddr => rdAddr16,  -- ufix1
              delayLineEnd => delayLineEnd16_1,  -- sfix16_En14
              dataOut => delayLineDataOut16_1  -- sfix16_En14
              );

  u_delayLine17_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn17_3),  -- sfix16_En14
              wrEn => delayLineShiftEn17_1,
              rdAddr => rdAddr17,  -- ufix1
              delayLineEnd => delayLineEnd17_1,  -- sfix16_En14
              dataOut => delayLineDataOut17_1  -- sfix16_En14
              );

  u_delayLine18_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn18_3),  -- sfix16_En14
              wrEn => delayLineShiftEn18_1,
              rdAddr => rdAddr18,  -- ufix1
              delayLineEnd => delayLineEnd18_1,  -- sfix16_En14
              dataOut => delayLineDataOut18_1  -- sfix16_En14
              );

  u_delayLine19_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn19_3),  -- sfix16_En14
              wrEn => delayLineShiftEn19_1,
              rdAddr => rdAddr19,  -- ufix1
              delayLineEnd => delayLineEnd19_1,  -- sfix16_En14
              dataOut => delayLineDataOut19_1  -- sfix16_En14
              );

  u_delayLine20_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn20_3),  -- sfix16_En14
              wrEn => delayLineShiftEn20_1,
              rdAddr => rdAddr20,  -- ufix1
              delayLineEnd => delayLineEnd20_1,  -- sfix16_En14
              dataOut => delayLineDataOut20_1  -- sfix16_En14
              );

  u_delayLine21_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn21_3),  -- sfix16_En14
              wrEn => delayLineShiftEn21_1,
              rdAddr => rdAddr21,  -- ufix1
              delayLineEnd => delayLineEnd21_1,  -- sfix16_En14
              dataOut => delayLineDataOut21_1  -- sfix16_En14
              );

  u_delayLine22_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn22_3),  -- sfix16_En14
              wrEn => delayLineShiftEn22_1,
              rdAddr => rdAddr22,  -- ufix1
              delayLineEnd => delayLineEnd22_1,  -- sfix16_En14
              dataOut => delayLineDataOut22_1  -- sfix16_En14
              );

  u_delayLine23_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn23_3),  -- sfix16_En14
              wrEn => delayLineShiftEn23_1,
              rdAddr => rdAddr23,  -- ufix1
              delayLineEnd => delayLineEnd23_1,  -- sfix16_En14
              dataOut => delayLineDataOut23_1  -- sfix16_En14
              );

  u_delayLine24_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn24_3),  -- sfix16_En14
              wrEn => delayLineShiftEn24_1,
              rdAddr => rdAddr24,  -- ufix1
              delayLineEnd => delayLineEnd24_1,  -- sfix16_En14
              dataOut => delayLineDataOut24_1  -- sfix16_En14
              );

  u_delayLine25_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn25_3),  -- sfix16_En14
              wrEn => delayLineShiftEn25_1,
              rdAddr => rdAddr25,  -- ufix1
              delayLineEnd => delayLineEnd25_1,  -- sfix16_En14
              dataOut => delayLineDataOut25_1  -- sfix16_En14
              );

  u_delayLine26_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn26_3),  -- sfix16_En14
              wrEn => delayLineShiftEn26_1,
              rdAddr => rdAddr26,  -- ufix1
              delayLineEnd => delayLineEnd26_1,  -- sfix16_En14
              dataOut => delayLineDataOut26_1  -- sfix16_En14
              );

  u_delayLine27_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn27_3),  -- sfix16_En14
              wrEn => delayLineShiftEn27_1,
              rdAddr => rdAddr27,  -- ufix1
              delayLineEnd => delayLineEnd27_1,  -- sfix16_En14
              dataOut => delayLineDataOut27_1  -- sfix16_En14
              );

  u_delayLine28_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn28_3),  -- sfix16_En14
              wrEn => delayLineShiftEn28_1,
              rdAddr => rdAddr28,  -- ufix1
              delayLineEnd => delayLineEnd28_1,  -- sfix16_En14
              dataOut => delayLineDataOut28_1  -- sfix16_En14
              );

  u_delayLine29_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn29_3),  -- sfix16_En14
              wrEn => delayLineShiftEn29_1,
              rdAddr => rdAddr29,  -- ufix1
              delayLineEnd => delayLineEnd29_1,  -- sfix16_En14
              dataOut => delayLineDataOut29_1  -- sfix16_En14
              );

  u_delayLine30_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn30_3),  -- sfix16_En14
              wrEn => delayLineShiftEn30_1,
              rdAddr => rdAddr30,  -- ufix1
              delayLineEnd => delayLineEnd30_1,  -- sfix16_En14
              dataOut => delayLineDataOut30_1  -- sfix16_En14
              );

  u_delayLine31_1 : full_tx_ip_src_Addressable_Delay_Line_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn31_3),  -- sfix16_En14
              wrEn => delayLineShiftEn31_1,
              rdAddr => rdAddr31,  -- ufix1
              delayLineEnd => delayLineEnd31deadOut_1,  -- sfix16_En14
              dataOut => delayLineDataOut31_1  -- sfix16_En14
              );

  u_filterTap0_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut0_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP0_3),  -- sfix16_En14
              sumIn => std_logic_vector(sumIn_1),  -- sfix32_En28
              sumOut => sumOut_31  -- sfix32_En28
              );

  u_filterTap1_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut1_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP1_3),  -- sfix16_En14
              sumIn => sumOut_31,  -- sfix32_En28
              sumOut => sumOut_0_1  -- sfix32_En28
              );

  u_filterTap2_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut2_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP2_3),  -- sfix16_En14
              sumIn => sumOut_0_1,  -- sfix32_En28
              sumOut => sumOut_1_1  -- sfix32_En28
              );

  u_filterTap3_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut3_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP3_3),  -- sfix16_En14
              sumIn => sumOut_1_1,  -- sfix32_En28
              sumOut => sumOut_2_1  -- sfix32_En28
              );

  u_filterTap4_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut4_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP4_3),  -- sfix16_En14
              sumIn => sumOut_2_1,  -- sfix32_En28
              sumOut => sumOut_3_1  -- sfix32_En28
              );

  u_filterTap5_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut5_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP5_3),  -- sfix16_En14
              sumIn => sumOut_3_1,  -- sfix32_En28
              sumOut => sumOut_4_1  -- sfix32_En28
              );

  u_filterTap6_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut6_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP6_3),  -- sfix16_En14
              sumIn => sumOut_4_1,  -- sfix32_En28
              sumOut => sumOut_5_1  -- sfix32_En28
              );

  u_filterTap7_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut7_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP7_3),  -- sfix16_En14
              sumIn => sumOut_5_1,  -- sfix32_En28
              sumOut => sumOut_6_1  -- sfix32_En28
              );

  u_filterTap8_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut8_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP8_3),  -- sfix16_En14
              sumIn => sumOut_6_1,  -- sfix32_En28
              sumOut => sumOut_7_1  -- sfix32_En28
              );

  u_filterTap9_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut9_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP9_3),  -- sfix16_En14
              sumIn => sumOut_7_1,  -- sfix32_En28
              sumOut => sumOut_8_1  -- sfix32_En28
              );

  u_filterTap10_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut10_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP10_3),  -- sfix16_En14
              sumIn => sumOut_8_1,  -- sfix32_En28
              sumOut => sumOut_9_1  -- sfix32_En28
              );

  u_filterTap11_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut11_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP11_3),  -- sfix16_En14
              sumIn => sumOut_9_1,  -- sfix32_En28
              sumOut => sumOut_10_1  -- sfix32_En28
              );

  u_filterTap12_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut12_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP12_3),  -- sfix16_En14
              sumIn => sumOut_10_1,  -- sfix32_En28
              sumOut => sumOut_11_1  -- sfix32_En28
              );

  u_filterTap13_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut13_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP13_3),  -- sfix16_En14
              sumIn => sumOut_11_1,  -- sfix32_En28
              sumOut => sumOut_12_1  -- sfix32_En28
              );

  u_filterTap14_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut14_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP14_3),  -- sfix16_En14
              sumIn => sumOut_12_1,  -- sfix32_En28
              sumOut => sumOut_13_1  -- sfix32_En28
              );

  u_filterTap15_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut15_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP15_3),  -- sfix16_En14
              sumIn => sumOut_13_1,  -- sfix32_En28
              sumOut => sumOut_14_1  -- sfix32_En28
              );

  u_filterTap16_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut16_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP16_3),  -- sfix16_En14
              sumIn => sumOut_14_1,  -- sfix32_En28
              sumOut => sumOut_15_1  -- sfix32_En28
              );

  u_filterTap17_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut17_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP17_3),  -- sfix16_En14
              sumIn => sumOut_15_1,  -- sfix32_En28
              sumOut => sumOut_16_1  -- sfix32_En28
              );

  u_filterTap18_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut18_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP18_3),  -- sfix16_En14
              sumIn => sumOut_16_1,  -- sfix32_En28
              sumOut => sumOut_17_1  -- sfix32_En28
              );

  u_filterTap19_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut19_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP19_3),  -- sfix16_En14
              sumIn => sumOut_17_1,  -- sfix32_En28
              sumOut => sumOut_18_1  -- sfix32_En28
              );

  u_filterTap20_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut20_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP20_3),  -- sfix16_En14
              sumIn => sumOut_18_1,  -- sfix32_En28
              sumOut => sumOut_19_1  -- sfix32_En28
              );

  u_filterTap21_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut21_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP21_3),  -- sfix16_En14
              sumIn => sumOut_19_1,  -- sfix32_En28
              sumOut => sumOut_20_1  -- sfix32_En28
              );

  u_filterTap22_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut22_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP22_3),  -- sfix16_En14
              sumIn => sumOut_20_1,  -- sfix32_En28
              sumOut => sumOut_21_1  -- sfix32_En28
              );

  u_filterTap23_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut23_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP23_3),  -- sfix16_En14
              sumIn => sumOut_21_1,  -- sfix32_En28
              sumOut => sumOut_22_1  -- sfix32_En28
              );

  u_filterTap24_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut24_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP24_3),  -- sfix16_En14
              sumIn => sumOut_22_1,  -- sfix32_En28
              sumOut => sumOut_23_1  -- sfix32_En28
              );

  u_filterTap25_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut25_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP25_3),  -- sfix16_En14
              sumIn => sumOut_23_1,  -- sfix32_En28
              sumOut => sumOut_24_1  -- sfix32_En28
              );

  u_filterTap26_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut26_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP26_3),  -- sfix16_En14
              sumIn => sumOut_24_1,  -- sfix32_En28
              sumOut => sumOut_25_1  -- sfix32_En28
              );

  u_filterTap27_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut27_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP27_3),  -- sfix16_En14
              sumIn => sumOut_25_1,  -- sfix32_En28
              sumOut => sumOut_26_1  -- sfix32_En28
              );

  u_filterTap28_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut28_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP28_3),  -- sfix16_En14
              sumIn => sumOut_26_1,  -- sfix32_En28
              sumOut => sumOut_27_1  -- sfix32_En28
              );

  u_filterTap29_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut29_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP29_3),  -- sfix16_En14
              sumIn => sumOut_27_1,  -- sfix32_En28
              sumOut => sumOut_28_1  -- sfix32_En28
              );

  u_filterTap30_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut30_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP30_3),  -- sfix16_En14
              sumIn => sumOut_28_1,  -- sfix32_En28
              sumOut => sumOut_29_1  -- sfix32_En28
              );

  u_filterTap31_1 : full_tx_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut31_1,  -- sfix16_En14
              coeff => std_logic_vector(coeffTableRegP31_3),  -- sfix16_En14
              sumIn => sumOut_29_1,  -- sfix32_En28
              sumOut => sumOut_30_1  -- sfix32_En28
              );

  coeff_re <= to_signed(16#0000#, 16);
  coeff_im <= to_signed(16#0000#, 16);

  haltProcess <= '0';

  rdCountReverse_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdCountReverse_1 <= '0';
      ELSIF enb = '1' THEN
        rdCountReverse_1 <= nextDelayLineRdAddrReverse;
      END IF;
    END IF;
  END PROCESS rdCountReverse_process;


  wrCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wrCount_1 <= '0';
      ELSIF enb = '1' THEN
        wrCount_1 <= nextDelayLineWrAddr;
      END IF;
    END IF;
  END PROCESS wrCount_process;


  rdCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdCount_1 <= '0';
      ELSIF enb = '1' THEN
        rdCount_1 <= nextDelayLineRdAddr;
      END IF;
    END IF;
  END PROCESS rdCount_process;


  sharingCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sharingCount_1 <= '0';
      ELSIF enb = '1' THEN
        sharingCount_1 <= nextSharingCount;
      END IF;
    END IF;
  END PROCESS sharingCount_process;


  -- Input control counter combinatorial logic
  InputControl_output : PROCESS (dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1)
    VARIABLE out4 : std_logic;
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(1 DOWNTO 0);
    VARIABLE sub_cast : unsigned(1 DOWNTO 0);
    VARIABLE sub_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_1 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_1 : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_2 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_2 : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_temp_0 := to_unsigned(16#0#, 2);
    sub_temp := to_unsigned(16#0#, 2);
    add_temp_1 := to_unsigned(16#0#, 2);
    add_temp_2 := to_unsigned(16#0#, 2);
    add_cast_2 := to_unsigned(16#0#, 2);
    add_cast_1 := to_unsigned(16#0#, 2);
    sub_cast := to_unsigned(16#0#, 2);
    add_cast_0 := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    delayLineValidInP <= hdlcoder_to_stdlogic((sharingCount_1 = '0') AND (dinVldSM = '1'));
    lastPhaseStrobe <= sharingCount_1;
    IF (dinVldSM = '1') OR (sharingCount_1 > '0') THEN 
      IF sharingCount_1 = '1' THEN 
        nextSharingCount <= '0';
      ELSE 
        add_cast := '0' & sharingCount_1;
        add_temp := add_cast + to_unsigned(16#1#, 2);
        nextSharingCount <= add_temp(0);
      END IF;
    ELSE 
      nextSharingCount <= sharingCount_1;
    END IF;
    IF dinVldSM = '1' THEN 
      IF wrCount_1 = '1' THEN 
        out4 := '0';
      ELSE 
        add_cast_0 := '0' & wrCount_1;
        add_temp_0 := add_cast_0 + to_unsigned(16#1#, 2);
        out4 := add_temp_0(0);
      END IF;
    ELSE 
      out4 := wrCount_1;
    END IF;
    IF (rdCount_1 /= out4) OR (dinVldSM = '1') THEN 
      IF rdCount_1 = '0' THEN 
        nextDelayLineRdAddr <= '1';
      ELSE 
        sub_cast := '0' & rdCount_1;
        sub_temp := sub_cast - to_unsigned(16#1#, 2);
        nextDelayLineRdAddr <= sub_temp(0);
      END IF;
    ELSE 
      nextDelayLineRdAddr <= rdCount_1;
    END IF;
    IF (sharingCount_1 > '0') OR (dinVldSM = '1') THEN 
      IF sharingCount_1 = '1' THEN 
        IF wrCount_1 = '1' THEN 
          nextDelayLineRdAddrReverse <= '0';
        ELSE 
          add_cast_2 := '0' & wrCount_1;
          add_temp_2 := add_cast_2 + to_unsigned(16#1#, 2);
          nextDelayLineRdAddrReverse <= add_temp_2(0);
        END IF;
      ELSIF rdCountReverse_1 = '1' THEN 
        nextDelayLineRdAddrReverse <= '0';
      ELSE 
        add_cast_1 := '0' & rdCountReverse_1;
        add_temp_1 := add_cast_1 + to_unsigned(16#1#, 2);
        nextDelayLineRdAddrReverse <= add_temp_1(0);
      END IF;
    ELSE 
      nextDelayLineRdAddrReverse <= rdCountReverse_1;
    END IF;
    nextDelayLineWrAddr <= out4;
  END PROCESS InputControl_output;


  delayLineShiftEn0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEnP <= '0';
      ELSIF enb = '1' THEN
        delayLineShiftEnP <= lastPhaseStrobe;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn0_process;


  delayLineShiftEn1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn1_1 <= '0';
      ELSIF enb = '1' THEN
        delayLineShiftEn1_1 <= delayLineShiftEnP;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn1_process;


  delayLineShiftEn2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn2_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn2_1 <= '0';
        ELSE 
          delayLineShiftEn2_1 <= delayLineShiftEn1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn2_process;


  delayLineShiftEn3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn3_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn3_1 <= '0';
        ELSE 
          delayLineShiftEn3_1 <= delayLineShiftEn2_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn3_process;


  delayLineShiftEn4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn4_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn4_1 <= '0';
        ELSE 
          delayLineShiftEn4_1 <= delayLineShiftEn3_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn4_process;


  delayLineShiftEn5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn5_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn5_1 <= '0';
        ELSE 
          delayLineShiftEn5_1 <= delayLineShiftEn4_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn5_process;


  delayLineShiftEn6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn6_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn6_1 <= '0';
        ELSE 
          delayLineShiftEn6_1 <= delayLineShiftEn5_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn6_process;


  delayLineShiftEn7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn7_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn7_1 <= '0';
        ELSE 
          delayLineShiftEn7_1 <= delayLineShiftEn6_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn7_process;


  delayLineShiftEn8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn8_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn8_1 <= '0';
        ELSE 
          delayLineShiftEn8_1 <= delayLineShiftEn7_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn8_process;


  delayLineShiftEn9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn9_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn9_1 <= '0';
        ELSE 
          delayLineShiftEn9_1 <= delayLineShiftEn8_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn9_process;


  delayLineShiftEn10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn10_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn10_1 <= '0';
        ELSE 
          delayLineShiftEn10_1 <= delayLineShiftEn9_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn10_process;


  delayLineShiftEn11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn11_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn11_1 <= '0';
        ELSE 
          delayLineShiftEn11_1 <= delayLineShiftEn10_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn11_process;


  delayLineShiftEn12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn12_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn12_1 <= '0';
        ELSE 
          delayLineShiftEn12_1 <= delayLineShiftEn11_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn12_process;


  delayLineShiftEn13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn13_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn13_1 <= '0';
        ELSE 
          delayLineShiftEn13_1 <= delayLineShiftEn12_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn13_process;


  delayLineShiftEn14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn14_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn14_1 <= '0';
        ELSE 
          delayLineShiftEn14_1 <= delayLineShiftEn13_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn14_process;


  delayLineShiftEn15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn15_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn15_1 <= '0';
        ELSE 
          delayLineShiftEn15_1 <= delayLineShiftEn14_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn15_process;


  delayLineShiftEn16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn16_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn16_1 <= '0';
        ELSE 
          delayLineShiftEn16_1 <= delayLineShiftEn15_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn16_process;


  delayLineShiftEn17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn17_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn17_1 <= '0';
        ELSE 
          delayLineShiftEn17_1 <= delayLineShiftEn16_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn17_process;


  delayLineShiftEn18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn18_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn18_1 <= '0';
        ELSE 
          delayLineShiftEn18_1 <= delayLineShiftEn17_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn18_process;


  delayLineShiftEn19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn19_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn19_1 <= '0';
        ELSE 
          delayLineShiftEn19_1 <= delayLineShiftEn18_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn19_process;


  delayLineShiftEn20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn20_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn20_1 <= '0';
        ELSE 
          delayLineShiftEn20_1 <= delayLineShiftEn19_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn20_process;


  delayLineShiftEn21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn21_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn21_1 <= '0';
        ELSE 
          delayLineShiftEn21_1 <= delayLineShiftEn20_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn21_process;


  delayLineShiftEn22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn22_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn22_1 <= '0';
        ELSE 
          delayLineShiftEn22_1 <= delayLineShiftEn21_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn22_process;


  delayLineShiftEn23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn23_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn23_1 <= '0';
        ELSE 
          delayLineShiftEn23_1 <= delayLineShiftEn22_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn23_process;


  delayLineShiftEn24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn24_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn24_1 <= '0';
        ELSE 
          delayLineShiftEn24_1 <= delayLineShiftEn23_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn24_process;


  delayLineShiftEn25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn25_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn25_1 <= '0';
        ELSE 
          delayLineShiftEn25_1 <= delayLineShiftEn24_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn25_process;


  delayLineShiftEn26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn26_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn26_1 <= '0';
        ELSE 
          delayLineShiftEn26_1 <= delayLineShiftEn25_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn26_process;


  delayLineShiftEn27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn27_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn27_1 <= '0';
        ELSE 
          delayLineShiftEn27_1 <= delayLineShiftEn26_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn27_process;


  delayLineShiftEn28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn28_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn28_1 <= '0';
        ELSE 
          delayLineShiftEn28_1 <= delayLineShiftEn27_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn28_process;


  delayLineShiftEn29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn29_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn29_1 <= '0';
        ELSE 
          delayLineShiftEn29_1 <= delayLineShiftEn28_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn29_process;


  delayLineShiftEn30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn30_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn30_1 <= '0';
        ELSE 
          delayLineShiftEn30_1 <= delayLineShiftEn29_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn30_process;


  delayLineShiftEn31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn31_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn31_1 <= '0';
        ELSE 
          delayLineShiftEn31_1 <= delayLineShiftEn30_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn31_process;


  validOutLookahead_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOutLookahead_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOutLookahead_reg(0) <= delayLineShiftEn31_1;
        validOutLookahead_reg(6 DOWNTO 1) <= validOutLookahead_reg(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS validOutLookahead_process;

  validOutLookahead_1 <= validOutLookahead_reg(6);

  vldOut_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vldOut_1 <= '0';
      ELSIF enb = '1' THEN
        vldOut_1 <= validOutLookahead_1;
      END IF;
    END IF;
  END PROCESS vldOut_process;


  notValid <=  NOT vldOut_1;

  rdAddr0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr0_1 <= '0';
      ELSIF enb = '1' THEN
        rdAddr0_1 <= sharingCount_1;
      END IF;
    END IF;
  END PROCESS rdAddr0_process;


  rdAddr0_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr1 <= '0';
      ELSIF enb = '1' THEN
        rdAddr1 <= rdAddr0_1;
      END IF;
    END IF;
  END PROCESS rdAddr0_2_process;


  rdAddr1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr2 <= '0';
      ELSIF enb = '1' THEN
        rdAddr2 <= rdAddr1;
      END IF;
    END IF;
  END PROCESS rdAddr1_1_process;


  rdAddr2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr3 <= '0';
      ELSIF enb = '1' THEN
        rdAddr3 <= rdAddr2;
      END IF;
    END IF;
  END PROCESS rdAddr2_1_process;


  rdAddr3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr4 <= '0';
      ELSIF enb = '1' THEN
        rdAddr4 <= rdAddr3;
      END IF;
    END IF;
  END PROCESS rdAddr3_1_process;


  rdAddr4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr5 <= '0';
      ELSIF enb = '1' THEN
        rdAddr5 <= rdAddr4;
      END IF;
    END IF;
  END PROCESS rdAddr4_1_process;


  rdAddr5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr6 <= '0';
      ELSIF enb = '1' THEN
        rdAddr6 <= rdAddr5;
      END IF;
    END IF;
  END PROCESS rdAddr5_1_process;


  rdAddr6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr7 <= '0';
      ELSIF enb = '1' THEN
        rdAddr7 <= rdAddr6;
      END IF;
    END IF;
  END PROCESS rdAddr6_1_process;


  rdAddr7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr8 <= '0';
      ELSIF enb = '1' THEN
        rdAddr8 <= rdAddr7;
      END IF;
    END IF;
  END PROCESS rdAddr7_1_process;


  rdAddr8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr9 <= '0';
      ELSIF enb = '1' THEN
        rdAddr9 <= rdAddr8;
      END IF;
    END IF;
  END PROCESS rdAddr8_1_process;


  rdAddr9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr10 <= '0';
      ELSIF enb = '1' THEN
        rdAddr10 <= rdAddr9;
      END IF;
    END IF;
  END PROCESS rdAddr9_1_process;


  rdAddr10_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr11 <= '0';
      ELSIF enb = '1' THEN
        rdAddr11 <= rdAddr10;
      END IF;
    END IF;
  END PROCESS rdAddr10_1_process;


  rdAddr11_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr12 <= '0';
      ELSIF enb = '1' THEN
        rdAddr12 <= rdAddr11;
      END IF;
    END IF;
  END PROCESS rdAddr11_1_process;


  rdAddr12_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr13 <= '0';
      ELSIF enb = '1' THEN
        rdAddr13 <= rdAddr12;
      END IF;
    END IF;
  END PROCESS rdAddr12_1_process;


  rdAddr13_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr14 <= '0';
      ELSIF enb = '1' THEN
        rdAddr14 <= rdAddr13;
      END IF;
    END IF;
  END PROCESS rdAddr13_1_process;


  rdAddr14_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr15 <= '0';
      ELSIF enb = '1' THEN
        rdAddr15 <= rdAddr14;
      END IF;
    END IF;
  END PROCESS rdAddr14_1_process;


  rdAddr15_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr16 <= '0';
      ELSIF enb = '1' THEN
        rdAddr16 <= rdAddr15;
      END IF;
    END IF;
  END PROCESS rdAddr15_1_process;


  rdAddr16_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr17 <= '0';
      ELSIF enb = '1' THEN
        rdAddr17 <= rdAddr16;
      END IF;
    END IF;
  END PROCESS rdAddr16_1_process;


  rdAddr17_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr18 <= '0';
      ELSIF enb = '1' THEN
        rdAddr18 <= rdAddr17;
      END IF;
    END IF;
  END PROCESS rdAddr17_1_process;


  rdAddr18_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr19 <= '0';
      ELSIF enb = '1' THEN
        rdAddr19 <= rdAddr18;
      END IF;
    END IF;
  END PROCESS rdAddr18_1_process;


  rdAddr19_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr20 <= '0';
      ELSIF enb = '1' THEN
        rdAddr20 <= rdAddr19;
      END IF;
    END IF;
  END PROCESS rdAddr19_1_process;


  rdAddr20_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr21 <= '0';
      ELSIF enb = '1' THEN
        rdAddr21 <= rdAddr20;
      END IF;
    END IF;
  END PROCESS rdAddr20_1_process;


  rdAddr21_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr22 <= '0';
      ELSIF enb = '1' THEN
        rdAddr22 <= rdAddr21;
      END IF;
    END IF;
  END PROCESS rdAddr21_1_process;


  rdAddr22_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr23 <= '0';
      ELSIF enb = '1' THEN
        rdAddr23 <= rdAddr22;
      END IF;
    END IF;
  END PROCESS rdAddr22_1_process;


  rdAddr23_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr24 <= '0';
      ELSIF enb = '1' THEN
        rdAddr24 <= rdAddr23;
      END IF;
    END IF;
  END PROCESS rdAddr23_1_process;


  rdAddr24_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr25 <= '0';
      ELSIF enb = '1' THEN
        rdAddr25 <= rdAddr24;
      END IF;
    END IF;
  END PROCESS rdAddr24_1_process;


  rdAddr25_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr26 <= '0';
      ELSIF enb = '1' THEN
        rdAddr26 <= rdAddr25;
      END IF;
    END IF;
  END PROCESS rdAddr25_1_process;


  rdAddr26_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr27 <= '0';
      ELSIF enb = '1' THEN
        rdAddr27 <= rdAddr26;
      END IF;
    END IF;
  END PROCESS rdAddr26_1_process;


  rdAddr27_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr28 <= '0';
      ELSIF enb = '1' THEN
        rdAddr28 <= rdAddr27;
      END IF;
    END IF;
  END PROCESS rdAddr27_1_process;


  rdAddr28_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr29 <= '0';
      ELSIF enb = '1' THEN
        rdAddr29 <= rdAddr28;
      END IF;
    END IF;
  END PROCESS rdAddr28_1_process;


  rdAddr29_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr30 <= '0';
      ELSIF enb = '1' THEN
        rdAddr30 <= rdAddr29;
      END IF;
    END IF;
  END PROCESS rdAddr29_1_process;


  rdAddr30_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr31 <= '0';
      ELSIF enb = '1' THEN
        rdAddr31 <= rdAddr30;
      END IF;
    END IF;
  END PROCESS rdAddr30_1_process;


  rdAddrEndZero <=  NOT rdAddr31;

  finalSumValidPipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        finalSumValidPipe_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        finalSumValidPipe_reg(0) <= rdAddrEndZero;
        finalSumValidPipe_reg(5 DOWNTO 1) <= finalSumValidPipe_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS finalSumValidPipe_process;

  accumulate <= finalSumValidPipe_reg(5);

  accDataOut <= to_signed(0, 32);

  delayLineEnd0_signed <= signed(delayLineEnd0);

  delayLineDataIn1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn1_1 <= delayLineEnd0_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn1_process;


  delayLineEnd1_signed <= signed(delayLineEnd1);

  delayLineDataIn2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn2_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn2_1 <= delayLineEnd1_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn2_process;


  delayLineEnd2_signed <= signed(delayLineEnd2);

  delayLineDataIn3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn3_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn3_1 <= delayLineEnd2_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn3_process;


  delayLineEnd3_signed <= signed(delayLineEnd3);

  delayLineDataIn4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn4_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn4_1 <= delayLineEnd3_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn4_process;


  delayLineEnd4_signed <= signed(delayLineEnd4);

  delayLineDataIn5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn5_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn5_1 <= delayLineEnd4_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn5_process;


  delayLineEnd5_signed <= signed(delayLineEnd5);

  delayLineDataIn6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn6_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn6_1 <= delayLineEnd5_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn6_process;


  delayLineEnd6_signed <= signed(delayLineEnd6);

  delayLineDataIn7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn7_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn7_1 <= delayLineEnd6_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn7_process;


  delayLineEnd7_signed <= signed(delayLineEnd7);

  delayLineDataIn8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn8_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn8_1 <= delayLineEnd7_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn8_process;


  delayLineEnd8_signed <= signed(delayLineEnd8);

  delayLineDataIn9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn9_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn9_1 <= delayLineEnd8_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn9_process;


  delayLineEnd9_signed <= signed(delayLineEnd9);

  delayLineDataIn10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn10_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn10_1 <= delayLineEnd9_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn10_process;


  delayLineEnd10_signed <= signed(delayLineEnd10);

  delayLineDataIn11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn11_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn11_1 <= delayLineEnd10_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn11_process;


  delayLineEnd11_signed <= signed(delayLineEnd11);

  delayLineDataIn12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn12_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn12_1 <= delayLineEnd11_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn12_process;


  delayLineEnd12_signed <= signed(delayLineEnd12);

  delayLineDataIn13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn13_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn13_1 <= delayLineEnd12_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn13_process;


  delayLineEnd13_signed <= signed(delayLineEnd13);

  delayLineDataIn14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn14_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn14_1 <= delayLineEnd13_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn14_process;


  delayLineEnd14_signed <= signed(delayLineEnd14);

  delayLineDataIn15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn15_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn15_1 <= delayLineEnd14_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn15_process;


  delayLineEnd15_signed <= signed(delayLineEnd15);

  delayLineDataIn16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn16_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn16_1 <= delayLineEnd15_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn16_process;


  delayLineEnd16_signed <= signed(delayLineEnd16);

  delayLineDataIn17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn17_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn17_1 <= delayLineEnd16_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn17_process;


  delayLineEnd17_signed <= signed(delayLineEnd17);

  delayLineDataIn18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn18_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn18_1 <= delayLineEnd17_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn18_process;


  delayLineEnd18_signed <= signed(delayLineEnd18);

  delayLineDataIn19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn19_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn19_1 <= delayLineEnd18_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn19_process;


  delayLineEnd19_signed <= signed(delayLineEnd19);

  delayLineDataIn20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn20_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn20_1 <= delayLineEnd19_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn20_process;


  delayLineEnd20_signed <= signed(delayLineEnd20);

  delayLineDataIn21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn21_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn21_1 <= delayLineEnd20_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn21_process;


  delayLineEnd21_signed <= signed(delayLineEnd21);

  delayLineDataIn22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn22_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn22_1 <= delayLineEnd21_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn22_process;


  delayLineEnd22_signed <= signed(delayLineEnd22);

  delayLineDataIn23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn23_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn23_1 <= delayLineEnd22_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn23_process;


  delayLineEnd23_signed <= signed(delayLineEnd23);

  delayLineDataIn24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn24_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn24_1 <= delayLineEnd23_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn24_process;


  delayLineEnd24_signed <= signed(delayLineEnd24);

  delayLineDataIn25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn25_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn25_1 <= delayLineEnd24_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn25_process;


  delayLineEnd25_signed <= signed(delayLineEnd25);

  delayLineDataIn26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn26_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn26_1 <= delayLineEnd25_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn26_process;


  delayLineEnd26_signed <= signed(delayLineEnd26);

  delayLineDataIn27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn27_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn27_1 <= delayLineEnd26_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn27_process;


  delayLineEnd27_signed <= signed(delayLineEnd27);

  delayLineDataIn28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn28_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn28_1 <= delayLineEnd27_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn28_process;


  delayLineEnd28_signed <= signed(delayLineEnd28);

  delayLineDataIn29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn29_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn29_1 <= delayLineEnd28_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn29_process;


  delayLineEnd29_signed <= signed(delayLineEnd29);

  delayLineDataIn30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn30_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn30_1 <= delayLineEnd29_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn30_process;


  delayLineEnd30_signed <= signed(delayLineEnd30);

  delayLineDataIn31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn31_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn31_1 <= delayLineEnd30_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn31_process;


  -- Coefficient table for multiplier31
  coeffTable31_output : PROCESS (rdAddr31)
  BEGIN
    CASE rdAddr31 IS
      WHEN '0' =>
        coeffTableOut31 <= to_signed(-16#001D#, 16);
      WHEN '1' =>
        coeffTableOut31 <= to_signed(16#0000#, 16);
      WHEN OTHERS => 
        coeffTableOut31 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable31_output;


  coeffTableRegP31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP31_1 <= coeffTableOut31;
      END IF;
    END IF;
  END PROCESS coeffTableRegP31_process;


  -- Coefficient table for multiplier30
  coeffTable30_output : PROCESS (rdAddr30)
  BEGIN
    CASE rdAddr30 IS
      WHEN '0' =>
        coeffTableOut30 <= to_signed(16#000B#, 16);
      WHEN '1' =>
        coeffTableOut30 <= to_signed(-16#001F#, 16);
      WHEN OTHERS => 
        coeffTableOut30 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable30_output;


  coeffTableRegP30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP30_1 <= coeffTableOut30;
      END IF;
    END IF;
  END PROCESS coeffTableRegP30_process;


  -- Coefficient table for multiplier29
  coeffTable29_output : PROCESS (rdAddr29)
  BEGIN
    CASE rdAddr29 IS
      WHEN '0' =>
        coeffTableOut29 <= to_signed(16#0004#, 16);
      WHEN '1' =>
        coeffTableOut29 <= to_signed(-16#0008#, 16);
      WHEN OTHERS => 
        coeffTableOut29 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable29_output;


  coeffTableRegP29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP29_1 <= coeffTableOut29;
      END IF;
    END IF;
  END PROCESS coeffTableRegP29_process;


  -- Coefficient table for multiplier28
  coeffTable28_output : PROCESS (rdAddr28)
  BEGIN
    CASE rdAddr28 IS
      WHEN '0' =>
        coeffTableOut28 <= to_signed(-16#0008#, 16);
      WHEN '1' =>
        coeffTableOut28 <= to_signed(16#0001#, 16);
      WHEN OTHERS => 
        coeffTableOut28 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable28_output;


  coeffTableRegP28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP28_1 <= coeffTableOut28;
      END IF;
    END IF;
  END PROCESS coeffTableRegP28_process;


  -- Coefficient table for multiplier27
  coeffTable27_output : PROCESS (rdAddr27)
  BEGIN
    CASE rdAddr27 IS
      WHEN '0' =>
        coeffTableOut27 <= to_signed(-16#001C#, 16);
      WHEN '1' =>
        coeffTableOut27 <= to_signed(16#0011#, 16);
      WHEN OTHERS => 
        coeffTableOut27 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable27_output;


  coeffTableRegP27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP27_1 <= coeffTableOut27;
      END IF;
    END IF;
  END PROCESS coeffTableRegP27_process;


  -- Coefficient table for multiplier26
  coeffTable26_output : PROCESS (rdAddr26)
  BEGIN
    CASE rdAddr26 IS
      WHEN '0' =>
        coeffTableOut26 <= to_signed(-16#003B#, 16);
      WHEN '1' =>
        coeffTableOut26 <= to_signed(16#002B#, 16);
      WHEN OTHERS => 
        coeffTableOut26 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable26_output;


  coeffTableRegP26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP26_1 <= coeffTableOut26;
      END IF;
    END IF;
  END PROCESS coeffTableRegP26_process;


  -- Coefficient table for multiplier25
  coeffTable25_output : PROCESS (rdAddr25)
  BEGIN
    CASE rdAddr25 IS
      WHEN '0' =>
        coeffTableOut25 <= to_signed(-16#0066#, 16);
      WHEN '1' =>
        coeffTableOut25 <= to_signed(16#004F#, 16);
      WHEN OTHERS => 
        coeffTableOut25 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable25_output;


  coeffTableRegP25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP25_1 <= coeffTableOut25;
      END IF;
    END IF;
  END PROCESS coeffTableRegP25_process;


  -- Coefficient table for multiplier24
  coeffTable24_output : PROCESS (rdAddr24)
  BEGIN
    CASE rdAddr24 IS
      WHEN '0' =>
        coeffTableOut24 <= to_signed(-16#009D#, 16);
      WHEN '1' =>
        coeffTableOut24 <= to_signed(16#0080#, 16);
      WHEN OTHERS => 
        coeffTableOut24 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable24_output;


  coeffTableRegP24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP24_1 <= coeffTableOut24;
      END IF;
    END IF;
  END PROCESS coeffTableRegP24_process;


  -- Coefficient table for multiplier23
  coeffTable23_output : PROCESS (rdAddr23)
  BEGIN
    CASE rdAddr23 IS
      WHEN '0' =>
        coeffTableOut23 <= to_signed(-16#00DF#, 16);
      WHEN '1' =>
        coeffTableOut23 <= to_signed(16#00BD#, 16);
      WHEN OTHERS => 
        coeffTableOut23 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable23_output;


  coeffTableRegP23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP23_1 <= coeffTableOut23;
      END IF;
    END IF;
  END PROCESS coeffTableRegP23_process;


  -- Coefficient table for multiplier22
  coeffTable22_output : PROCESS (rdAddr22)
  BEGIN
    CASE rdAddr22 IS
      WHEN '0' =>
        coeffTableOut22 <= to_signed(-16#0128#, 16);
      WHEN '1' =>
        coeffTableOut22 <= to_signed(16#0103#, 16);
      WHEN OTHERS => 
        coeffTableOut22 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable22_output;


  coeffTableRegP22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP22_1 <= coeffTableOut22;
      END IF;
    END IF;
  END PROCESS coeffTableRegP22_process;


  -- Coefficient table for multiplier21
  coeffTable21_output : PROCESS (rdAddr21)
  BEGIN
    CASE rdAddr21 IS
      WHEN '0' =>
        coeffTableOut21 <= to_signed(-16#0176#, 16);
      WHEN '1' =>
        coeffTableOut21 <= to_signed(16#014F#, 16);
      WHEN OTHERS => 
        coeffTableOut21 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable21_output;


  coeffTableRegP21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP21_1 <= coeffTableOut21;
      END IF;
    END IF;
  END PROCESS coeffTableRegP21_process;


  -- Coefficient table for multiplier20
  coeffTable20_output : PROCESS (rdAddr20)
  BEGIN
    CASE rdAddr20 IS
      WHEN '0' =>
        coeffTableOut20 <= to_signed(-16#01C2#, 16);
      WHEN '1' =>
        coeffTableOut20 <= to_signed(16#019C#, 16);
      WHEN OTHERS => 
        coeffTableOut20 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable20_output;


  coeffTableRegP20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP20_1 <= coeffTableOut20;
      END IF;
    END IF;
  END PROCESS coeffTableRegP20_process;


  -- Coefficient table for multiplier19
  coeffTable19_output : PROCESS (rdAddr19)
  BEGIN
    CASE rdAddr19 IS
      WHEN '0' =>
        coeffTableOut19 <= to_signed(-16#0209#, 16);
      WHEN '1' =>
        coeffTableOut19 <= to_signed(16#01E7#, 16);
      WHEN OTHERS => 
        coeffTableOut19 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable19_output;


  coeffTableRegP19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP19_1 <= coeffTableOut19;
      END IF;
    END IF;
  END PROCESS coeffTableRegP19_process;


  -- Coefficient table for multiplier18
  coeffTable18_output : PROCESS (rdAddr18)
  BEGIN
    CASE rdAddr18 IS
      WHEN '0' =>
        coeffTableOut18 <= to_signed(-16#0243#, 16);
      WHEN '1' =>
        coeffTableOut18 <= to_signed(16#0228#, 16);
      WHEN OTHERS => 
        coeffTableOut18 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable18_output;


  coeffTableRegP18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP18_1 <= coeffTableOut18;
      END IF;
    END IF;
  END PROCESS coeffTableRegP18_process;


  -- Coefficient table for multiplier17
  coeffTable17_output : PROCESS (rdAddr17)
  BEGIN
    CASE rdAddr17 IS
      WHEN '0' =>
        coeffTableOut17 <= to_signed(-16#026D#, 16);
      WHEN '1' =>
        coeffTableOut17 <= to_signed(16#025B#, 16);
      WHEN OTHERS => 
        coeffTableOut17 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable17_output;


  coeffTableRegP17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP17_1 <= coeffTableOut17;
      END IF;
    END IF;
  END PROCESS coeffTableRegP17_process;


  -- Coefficient table for multiplier16
  coeffTable16_output : PROCESS (rdAddr16)
  BEGIN
    CASE rdAddr16 IS
      WHEN '0' =>
        coeffTableOut16 <= to_signed(-16#0283#, 16);
      WHEN '1' =>
        coeffTableOut16 <= to_signed(16#027B#, 16);
      WHEN OTHERS => 
        coeffTableOut16 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable16_output;


  coeffTableRegP16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP16_1 <= coeffTableOut16;
      END IF;
    END IF;
  END PROCESS coeffTableRegP16_process;


  -- Coefficient table for multiplier15
  coeffTable15_output : PROCESS (rdAddr15)
  BEGIN
    CASE rdAddr15 IS
      WHEN '0' =>
        coeffTableOut15 <= to_signed(-16#0283#, 16);
      WHEN '1' =>
        coeffTableOut15 <= to_signed(16#4286#, 16);
      WHEN OTHERS => 
        coeffTableOut15 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable15_output;


  coeffTableRegP15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP15_1 <= coeffTableOut15;
      END IF;
    END IF;
  END PROCESS coeffTableRegP15_process;


  -- Coefficient table for multiplier14
  coeffTable14_output : PROCESS (rdAddr14)
  BEGIN
    CASE rdAddr14 IS
      WHEN '0' =>
        coeffTableOut14 <= to_signed(-16#026D#, 16);
      WHEN '1' =>
        coeffTableOut14 <= to_signed(16#027B#, 16);
      WHEN OTHERS => 
        coeffTableOut14 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable14_output;


  coeffTableRegP14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP14_1 <= coeffTableOut14;
      END IF;
    END IF;
  END PROCESS coeffTableRegP14_process;


  -- Coefficient table for multiplier13
  coeffTable13_output : PROCESS (rdAddr13)
  BEGIN
    CASE rdAddr13 IS
      WHEN '0' =>
        coeffTableOut13 <= to_signed(-16#0243#, 16);
      WHEN '1' =>
        coeffTableOut13 <= to_signed(16#025B#, 16);
      WHEN OTHERS => 
        coeffTableOut13 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable13_output;


  coeffTableRegP13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP13_1 <= coeffTableOut13;
      END IF;
    END IF;
  END PROCESS coeffTableRegP13_process;


  -- Coefficient table for multiplier12
  coeffTable12_output : PROCESS (rdAddr12)
  BEGIN
    CASE rdAddr12 IS
      WHEN '0' =>
        coeffTableOut12 <= to_signed(-16#0209#, 16);
      WHEN '1' =>
        coeffTableOut12 <= to_signed(16#0228#, 16);
      WHEN OTHERS => 
        coeffTableOut12 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable12_output;


  coeffTableRegP12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP12_1 <= coeffTableOut12;
      END IF;
    END IF;
  END PROCESS coeffTableRegP12_process;


  -- Coefficient table for multiplier11
  coeffTable11_output : PROCESS (rdAddr11)
  BEGIN
    CASE rdAddr11 IS
      WHEN '0' =>
        coeffTableOut11 <= to_signed(-16#01C2#, 16);
      WHEN '1' =>
        coeffTableOut11 <= to_signed(16#01E7#, 16);
      WHEN OTHERS => 
        coeffTableOut11 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable11_output;


  coeffTableRegP11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP11_1 <= coeffTableOut11;
      END IF;
    END IF;
  END PROCESS coeffTableRegP11_process;


  -- Coefficient table for multiplier10
  coeffTable10_output : PROCESS (rdAddr10)
  BEGIN
    CASE rdAddr10 IS
      WHEN '0' =>
        coeffTableOut10 <= to_signed(-16#0176#, 16);
      WHEN '1' =>
        coeffTableOut10 <= to_signed(16#019C#, 16);
      WHEN OTHERS => 
        coeffTableOut10 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable10_output;


  coeffTableRegP10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP10_1 <= coeffTableOut10;
      END IF;
    END IF;
  END PROCESS coeffTableRegP10_process;


  -- Coefficient table for multiplier9
  coeffTable9_output : PROCESS (rdAddr9)
  BEGIN
    CASE rdAddr9 IS
      WHEN '0' =>
        coeffTableOut9 <= to_signed(-16#0128#, 16);
      WHEN '1' =>
        coeffTableOut9 <= to_signed(16#014F#, 16);
      WHEN OTHERS => 
        coeffTableOut9 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable9_output;


  coeffTableRegP9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP9_1 <= coeffTableOut9;
      END IF;
    END IF;
  END PROCESS coeffTableRegP9_process;


  -- Coefficient table for multiplier8
  coeffTable8_output : PROCESS (rdAddr8)
  BEGIN
    CASE rdAddr8 IS
      WHEN '0' =>
        coeffTableOut8 <= to_signed(-16#00DF#, 16);
      WHEN '1' =>
        coeffTableOut8 <= to_signed(16#0103#, 16);
      WHEN OTHERS => 
        coeffTableOut8 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable8_output;


  coeffTableRegP8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP8_1 <= coeffTableOut8;
      END IF;
    END IF;
  END PROCESS coeffTableRegP8_process;


  -- Coefficient table for multiplier7
  coeffTable7_output : PROCESS (rdAddr7)
  BEGIN
    CASE rdAddr7 IS
      WHEN '0' =>
        coeffTableOut7 <= to_signed(-16#009D#, 16);
      WHEN '1' =>
        coeffTableOut7 <= to_signed(16#00BD#, 16);
      WHEN OTHERS => 
        coeffTableOut7 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable7_output;


  coeffTableRegP7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP7_1 <= coeffTableOut7;
      END IF;
    END IF;
  END PROCESS coeffTableRegP7_process;


  -- Coefficient table for multiplier6
  coeffTable6_output : PROCESS (rdAddr6)
  BEGIN
    CASE rdAddr6 IS
      WHEN '0' =>
        coeffTableOut6 <= to_signed(-16#0066#, 16);
      WHEN '1' =>
        coeffTableOut6 <= to_signed(16#0080#, 16);
      WHEN OTHERS => 
        coeffTableOut6 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable6_output;


  coeffTableRegP6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP6_1 <= coeffTableOut6;
      END IF;
    END IF;
  END PROCESS coeffTableRegP6_process;


  -- Coefficient table for multiplier5
  coeffTable5_output : PROCESS (rdAddr5)
  BEGIN
    CASE rdAddr5 IS
      WHEN '0' =>
        coeffTableOut5 <= to_signed(-16#003B#, 16);
      WHEN '1' =>
        coeffTableOut5 <= to_signed(16#004F#, 16);
      WHEN OTHERS => 
        coeffTableOut5 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable5_output;


  coeffTableRegP5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP5_1 <= coeffTableOut5;
      END IF;
    END IF;
  END PROCESS coeffTableRegP5_process;


  -- Coefficient table for multiplier4
  coeffTable4_output : PROCESS (rdAddr4)
  BEGIN
    CASE rdAddr4 IS
      WHEN '0' =>
        coeffTableOut4 <= to_signed(-16#001C#, 16);
      WHEN '1' =>
        coeffTableOut4 <= to_signed(16#002B#, 16);
      WHEN OTHERS => 
        coeffTableOut4 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable4_output;


  coeffTableRegP4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP4_1 <= coeffTableOut4;
      END IF;
    END IF;
  END PROCESS coeffTableRegP4_process;


  -- Coefficient table for multiplier3
  coeffTable3_output : PROCESS (rdAddr3)
  BEGIN
    CASE rdAddr3 IS
      WHEN '0' =>
        coeffTableOut3 <= to_signed(-16#0008#, 16);
      WHEN '1' =>
        coeffTableOut3 <= to_signed(16#0011#, 16);
      WHEN OTHERS => 
        coeffTableOut3 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable3_output;


  coeffTableRegP3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP3_1 <= coeffTableOut3;
      END IF;
    END IF;
  END PROCESS coeffTableRegP3_process;


  -- Coefficient table for multiplier2
  coeffTable2_output : PROCESS (rdAddr2)
  BEGIN
    CASE rdAddr2 IS
      WHEN '0' =>
        coeffTableOut2 <= to_signed(16#0004#, 16);
      WHEN '1' =>
        coeffTableOut2 <= to_signed(16#0001#, 16);
      WHEN OTHERS => 
        coeffTableOut2 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable2_output;


  coeffTableRegP2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP2_1 <= coeffTableOut2;
      END IF;
    END IF;
  END PROCESS coeffTableRegP2_process;


  -- Coefficient table for multiplier1
  coeffTable1_output : PROCESS (rdAddr1)
  BEGIN
    CASE rdAddr1 IS
      WHEN '0' =>
        coeffTableOut1 <= to_signed(16#000B#, 16);
      WHEN '1' =>
        coeffTableOut1 <= to_signed(-16#0008#, 16);
      WHEN OTHERS => 
        coeffTableOut1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable1_output;


  coeffTableRegP1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP1_1 <= coeffTableOut1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP1_process;


  -- Coefficient table for multiplier0
  coeffTable0_output : PROCESS (rdAddr0_1)
  BEGIN
    CASE rdAddr0_1 IS
      WHEN '0' =>
        coeffTableOut0 <= to_signed(-16#001D#, 16);
      WHEN '1' =>
        coeffTableOut0 <= to_signed(-16#001F#, 16);
      WHEN OTHERS => 
        coeffTableOut0 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable0_output;


  coeffTableRegP0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP0_1 <= coeffTableOut0;
      END IF;
    END IF;
  END PROCESS coeffTableRegP0_process;


  sumIn <= to_signed(0, 32);

  sumOut_30_signed <= signed(sumOut_30);

  sumOutReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sumOutReg_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        sumOutReg_1 <= sumOut_30_signed;
      END IF;
    END IF;
  END PROCESS sumOutReg_process;


  
  accSwitchOut <= accDataOut_1 WHEN accumulate = '0' ELSE
      accDataOut;

  accAdderOut <= accSwitchOut + sumOutReg_1;

  accDataOut_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accDataOut_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        accDataOut_1 <= accAdderOut;
      END IF;
    END IF;
  END PROCESS accDataOut_2_process;


  converterOut <= accDataOut_1(29 DOWNTO 14);

  dout_re_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_re_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND validOutLookahead_1 = '1' THEN
        dout_re_1 <= converterOut;
      END IF;
    END IF;
  END PROCESS dout_re_process;


  validOutLookahead_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOutLookahead_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOutLookahead_reg_1(0) <= delayLineShiftEn31_1;
        validOutLookahead_reg_1(6 DOWNTO 1) <= validOutLookahead_reg_1(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS validOutLookahead_2_process;

  validOutLookahead_3 <= validOutLookahead_reg_1(6);

  rdAddrEndZero_1 <=  NOT rdAddr31;

  finalSumValidPipe_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        finalSumValidPipe_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        finalSumValidPipe_reg_1(0) <= rdAddrEndZero_1;
        finalSumValidPipe_reg_1(5 DOWNTO 1) <= finalSumValidPipe_reg_1(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS finalSumValidPipe_1_process;

  accumulate_1 <= finalSumValidPipe_reg_1(5);

  accDataOut_3 <= to_signed(0, 32);

  delayLineEnd0_signed_1 <= signed(delayLineEnd0_1);

  delayLineDataIn1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn1_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn1_3 <= delayLineEnd0_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn1_2_process;


  delayLineEnd1_signed_1 <= signed(delayLineEnd1_1);

  delayLineDataIn2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn2_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn2_3 <= delayLineEnd1_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn2_2_process;


  delayLineEnd2_signed_1 <= signed(delayLineEnd2_1);

  delayLineDataIn3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn3_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn3_3 <= delayLineEnd2_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn3_2_process;


  delayLineEnd3_signed_1 <= signed(delayLineEnd3_1);

  delayLineDataIn4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn4_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn4_3 <= delayLineEnd3_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn4_2_process;


  delayLineEnd4_signed_1 <= signed(delayLineEnd4_1);

  delayLineDataIn5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn5_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn5_3 <= delayLineEnd4_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn5_2_process;


  delayLineEnd5_signed_1 <= signed(delayLineEnd5_1);

  delayLineDataIn6_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn6_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn6_3 <= delayLineEnd5_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn6_2_process;


  delayLineEnd6_signed_1 <= signed(delayLineEnd6_1);

  delayLineDataIn7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn7_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn7_3 <= delayLineEnd6_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn7_2_process;


  delayLineEnd7_signed_1 <= signed(delayLineEnd7_1);

  delayLineDataIn8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn8_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn8_3 <= delayLineEnd7_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn8_2_process;


  delayLineEnd8_signed_1 <= signed(delayLineEnd8_1);

  delayLineDataIn9_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn9_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn9_3 <= delayLineEnd8_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn9_2_process;


  delayLineEnd9_signed_1 <= signed(delayLineEnd9_1);

  delayLineDataIn10_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn10_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn10_3 <= delayLineEnd9_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn10_2_process;


  delayLineEnd10_signed_1 <= signed(delayLineEnd10_1);

  delayLineDataIn11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn11_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn11_3 <= delayLineEnd10_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn11_2_process;


  delayLineEnd11_signed_1 <= signed(delayLineEnd11_1);

  delayLineDataIn12_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn12_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn12_3 <= delayLineEnd11_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn12_2_process;


  delayLineEnd12_signed_1 <= signed(delayLineEnd12_1);

  delayLineDataIn13_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn13_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn13_3 <= delayLineEnd12_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn13_2_process;


  delayLineEnd13_signed_1 <= signed(delayLineEnd13_1);

  delayLineDataIn14_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn14_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn14_3 <= delayLineEnd13_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn14_2_process;


  delayLineEnd14_signed_1 <= signed(delayLineEnd14_1);

  delayLineDataIn15_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn15_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn15_3 <= delayLineEnd14_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn15_2_process;


  delayLineEnd15_signed_1 <= signed(delayLineEnd15_1);

  delayLineDataIn16_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn16_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn16_3 <= delayLineEnd15_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn16_2_process;


  delayLineEnd16_signed_1 <= signed(delayLineEnd16_1);

  delayLineDataIn17_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn17_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn17_3 <= delayLineEnd16_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn17_2_process;


  delayLineEnd17_signed_1 <= signed(delayLineEnd17_1);

  delayLineDataIn18_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn18_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn18_3 <= delayLineEnd17_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn18_2_process;


  delayLineEnd18_signed_1 <= signed(delayLineEnd18_1);

  delayLineDataIn19_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn19_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn19_3 <= delayLineEnd18_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn19_2_process;


  delayLineEnd19_signed_1 <= signed(delayLineEnd19_1);

  delayLineDataIn20_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn20_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn20_3 <= delayLineEnd19_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn20_2_process;


  delayLineEnd20_signed_1 <= signed(delayLineEnd20_1);

  delayLineDataIn21_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn21_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn21_3 <= delayLineEnd20_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn21_2_process;


  delayLineEnd21_signed_1 <= signed(delayLineEnd21_1);

  delayLineDataIn22_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn22_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn22_3 <= delayLineEnd21_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn22_2_process;


  delayLineEnd22_signed_1 <= signed(delayLineEnd22_1);

  delayLineDataIn23_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn23_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn23_3 <= delayLineEnd22_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn23_2_process;


  delayLineEnd23_signed_1 <= signed(delayLineEnd23_1);

  delayLineDataIn24_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn24_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn24_3 <= delayLineEnd23_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn24_2_process;


  delayLineEnd24_signed_1 <= signed(delayLineEnd24_1);

  delayLineDataIn25_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn25_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn25_3 <= delayLineEnd24_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn25_2_process;


  delayLineEnd25_signed_1 <= signed(delayLineEnd25_1);

  delayLineDataIn26_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn26_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn26_3 <= delayLineEnd25_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn26_2_process;


  delayLineEnd26_signed_1 <= signed(delayLineEnd26_1);

  delayLineDataIn27_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn27_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn27_3 <= delayLineEnd26_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn27_2_process;


  delayLineEnd27_signed_1 <= signed(delayLineEnd27_1);

  delayLineDataIn28_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn28_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn28_3 <= delayLineEnd27_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn28_2_process;


  delayLineEnd28_signed_1 <= signed(delayLineEnd28_1);

  delayLineDataIn29_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn29_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn29_3 <= delayLineEnd28_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn29_2_process;


  delayLineEnd29_signed_1 <= signed(delayLineEnd29_1);

  delayLineDataIn30_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn30_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn30_3 <= delayLineEnd29_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn30_2_process;


  delayLineEnd30_signed_1 <= signed(delayLineEnd30_1);

  delayLineDataIn31_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn31_3 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        delayLineDataIn31_3 <= delayLineEnd30_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn31_2_process;


  -- Coefficient table for multiplier31
  coeffTable31_1_output : PROCESS (rdAddr31)
  BEGIN
    CASE rdAddr31 IS
      WHEN '0' =>
        coeffTableOut31_1 <= to_signed(-16#001D#, 16);
      WHEN '1' =>
        coeffTableOut31_1 <= to_signed(16#0000#, 16);
      WHEN OTHERS => 
        coeffTableOut31_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable31_1_output;


  coeffTableRegP31_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP31_3 <= coeffTableOut31_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP31_2_process;


  -- Coefficient table for multiplier30
  coeffTable30_1_output : PROCESS (rdAddr30)
  BEGIN
    CASE rdAddr30 IS
      WHEN '0' =>
        coeffTableOut30_1 <= to_signed(16#000B#, 16);
      WHEN '1' =>
        coeffTableOut30_1 <= to_signed(-16#001F#, 16);
      WHEN OTHERS => 
        coeffTableOut30_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable30_1_output;


  coeffTableRegP30_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP30_3 <= coeffTableOut30_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP30_2_process;


  -- Coefficient table for multiplier29
  coeffTable29_1_output : PROCESS (rdAddr29)
  BEGIN
    CASE rdAddr29 IS
      WHEN '0' =>
        coeffTableOut29_1 <= to_signed(16#0004#, 16);
      WHEN '1' =>
        coeffTableOut29_1 <= to_signed(-16#0008#, 16);
      WHEN OTHERS => 
        coeffTableOut29_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable29_1_output;


  coeffTableRegP29_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP29_3 <= coeffTableOut29_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP29_2_process;


  -- Coefficient table for multiplier28
  coeffTable28_1_output : PROCESS (rdAddr28)
  BEGIN
    CASE rdAddr28 IS
      WHEN '0' =>
        coeffTableOut28_1 <= to_signed(-16#0008#, 16);
      WHEN '1' =>
        coeffTableOut28_1 <= to_signed(16#0001#, 16);
      WHEN OTHERS => 
        coeffTableOut28_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable28_1_output;


  coeffTableRegP28_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP28_3 <= coeffTableOut28_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP28_2_process;


  -- Coefficient table for multiplier27
  coeffTable27_1_output : PROCESS (rdAddr27)
  BEGIN
    CASE rdAddr27 IS
      WHEN '0' =>
        coeffTableOut27_1 <= to_signed(-16#001C#, 16);
      WHEN '1' =>
        coeffTableOut27_1 <= to_signed(16#0011#, 16);
      WHEN OTHERS => 
        coeffTableOut27_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable27_1_output;


  coeffTableRegP27_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP27_3 <= coeffTableOut27_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP27_2_process;


  -- Coefficient table for multiplier26
  coeffTable26_1_output : PROCESS (rdAddr26)
  BEGIN
    CASE rdAddr26 IS
      WHEN '0' =>
        coeffTableOut26_1 <= to_signed(-16#003B#, 16);
      WHEN '1' =>
        coeffTableOut26_1 <= to_signed(16#002B#, 16);
      WHEN OTHERS => 
        coeffTableOut26_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable26_1_output;


  coeffTableRegP26_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP26_3 <= coeffTableOut26_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP26_2_process;


  -- Coefficient table for multiplier25
  coeffTable25_1_output : PROCESS (rdAddr25)
  BEGIN
    CASE rdAddr25 IS
      WHEN '0' =>
        coeffTableOut25_1 <= to_signed(-16#0066#, 16);
      WHEN '1' =>
        coeffTableOut25_1 <= to_signed(16#004F#, 16);
      WHEN OTHERS => 
        coeffTableOut25_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable25_1_output;


  coeffTableRegP25_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP25_3 <= coeffTableOut25_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP25_2_process;


  -- Coefficient table for multiplier24
  coeffTable24_1_output : PROCESS (rdAddr24)
  BEGIN
    CASE rdAddr24 IS
      WHEN '0' =>
        coeffTableOut24_1 <= to_signed(-16#009D#, 16);
      WHEN '1' =>
        coeffTableOut24_1 <= to_signed(16#0080#, 16);
      WHEN OTHERS => 
        coeffTableOut24_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable24_1_output;


  coeffTableRegP24_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP24_3 <= coeffTableOut24_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP24_2_process;


  -- Coefficient table for multiplier23
  coeffTable23_1_output : PROCESS (rdAddr23)
  BEGIN
    CASE rdAddr23 IS
      WHEN '0' =>
        coeffTableOut23_1 <= to_signed(-16#00DF#, 16);
      WHEN '1' =>
        coeffTableOut23_1 <= to_signed(16#00BD#, 16);
      WHEN OTHERS => 
        coeffTableOut23_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable23_1_output;


  coeffTableRegP23_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP23_3 <= coeffTableOut23_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP23_2_process;


  -- Coefficient table for multiplier22
  coeffTable22_1_output : PROCESS (rdAddr22)
  BEGIN
    CASE rdAddr22 IS
      WHEN '0' =>
        coeffTableOut22_1 <= to_signed(-16#0128#, 16);
      WHEN '1' =>
        coeffTableOut22_1 <= to_signed(16#0103#, 16);
      WHEN OTHERS => 
        coeffTableOut22_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable22_1_output;


  coeffTableRegP22_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP22_3 <= coeffTableOut22_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP22_2_process;


  -- Coefficient table for multiplier21
  coeffTable21_1_output : PROCESS (rdAddr21)
  BEGIN
    CASE rdAddr21 IS
      WHEN '0' =>
        coeffTableOut21_1 <= to_signed(-16#0176#, 16);
      WHEN '1' =>
        coeffTableOut21_1 <= to_signed(16#014F#, 16);
      WHEN OTHERS => 
        coeffTableOut21_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable21_1_output;


  coeffTableRegP21_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP21_3 <= coeffTableOut21_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP21_2_process;


  -- Coefficient table for multiplier20
  coeffTable20_1_output : PROCESS (rdAddr20)
  BEGIN
    CASE rdAddr20 IS
      WHEN '0' =>
        coeffTableOut20_1 <= to_signed(-16#01C2#, 16);
      WHEN '1' =>
        coeffTableOut20_1 <= to_signed(16#019C#, 16);
      WHEN OTHERS => 
        coeffTableOut20_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable20_1_output;


  coeffTableRegP20_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP20_3 <= coeffTableOut20_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP20_2_process;


  -- Coefficient table for multiplier19
  coeffTable19_1_output : PROCESS (rdAddr19)
  BEGIN
    CASE rdAddr19 IS
      WHEN '0' =>
        coeffTableOut19_1 <= to_signed(-16#0209#, 16);
      WHEN '1' =>
        coeffTableOut19_1 <= to_signed(16#01E7#, 16);
      WHEN OTHERS => 
        coeffTableOut19_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable19_1_output;


  coeffTableRegP19_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP19_3 <= coeffTableOut19_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP19_2_process;


  -- Coefficient table for multiplier18
  coeffTable18_1_output : PROCESS (rdAddr18)
  BEGIN
    CASE rdAddr18 IS
      WHEN '0' =>
        coeffTableOut18_1 <= to_signed(-16#0243#, 16);
      WHEN '1' =>
        coeffTableOut18_1 <= to_signed(16#0228#, 16);
      WHEN OTHERS => 
        coeffTableOut18_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable18_1_output;


  coeffTableRegP18_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP18_3 <= coeffTableOut18_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP18_2_process;


  -- Coefficient table for multiplier17
  coeffTable17_1_output : PROCESS (rdAddr17)
  BEGIN
    CASE rdAddr17 IS
      WHEN '0' =>
        coeffTableOut17_1 <= to_signed(-16#026D#, 16);
      WHEN '1' =>
        coeffTableOut17_1 <= to_signed(16#025B#, 16);
      WHEN OTHERS => 
        coeffTableOut17_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable17_1_output;


  coeffTableRegP17_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP17_3 <= coeffTableOut17_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP17_2_process;


  -- Coefficient table for multiplier16
  coeffTable16_1_output : PROCESS (rdAddr16)
  BEGIN
    CASE rdAddr16 IS
      WHEN '0' =>
        coeffTableOut16_1 <= to_signed(-16#0283#, 16);
      WHEN '1' =>
        coeffTableOut16_1 <= to_signed(16#027B#, 16);
      WHEN OTHERS => 
        coeffTableOut16_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable16_1_output;


  coeffTableRegP16_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP16_3 <= coeffTableOut16_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP16_2_process;


  -- Coefficient table for multiplier15
  coeffTable15_1_output : PROCESS (rdAddr15)
  BEGIN
    CASE rdAddr15 IS
      WHEN '0' =>
        coeffTableOut15_1 <= to_signed(-16#0283#, 16);
      WHEN '1' =>
        coeffTableOut15_1 <= to_signed(16#4286#, 16);
      WHEN OTHERS => 
        coeffTableOut15_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable15_1_output;


  coeffTableRegP15_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP15_3 <= coeffTableOut15_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP15_2_process;


  -- Coefficient table for multiplier14
  coeffTable14_1_output : PROCESS (rdAddr14)
  BEGIN
    CASE rdAddr14 IS
      WHEN '0' =>
        coeffTableOut14_1 <= to_signed(-16#026D#, 16);
      WHEN '1' =>
        coeffTableOut14_1 <= to_signed(16#027B#, 16);
      WHEN OTHERS => 
        coeffTableOut14_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable14_1_output;


  coeffTableRegP14_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP14_3 <= coeffTableOut14_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP14_2_process;


  -- Coefficient table for multiplier13
  coeffTable13_1_output : PROCESS (rdAddr13)
  BEGIN
    CASE rdAddr13 IS
      WHEN '0' =>
        coeffTableOut13_1 <= to_signed(-16#0243#, 16);
      WHEN '1' =>
        coeffTableOut13_1 <= to_signed(16#025B#, 16);
      WHEN OTHERS => 
        coeffTableOut13_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable13_1_output;


  coeffTableRegP13_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP13_3 <= coeffTableOut13_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP13_2_process;


  -- Coefficient table for multiplier12
  coeffTable12_1_output : PROCESS (rdAddr12)
  BEGIN
    CASE rdAddr12 IS
      WHEN '0' =>
        coeffTableOut12_1 <= to_signed(-16#0209#, 16);
      WHEN '1' =>
        coeffTableOut12_1 <= to_signed(16#0228#, 16);
      WHEN OTHERS => 
        coeffTableOut12_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable12_1_output;


  coeffTableRegP12_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP12_3 <= coeffTableOut12_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP12_2_process;


  -- Coefficient table for multiplier11
  coeffTable11_1_output : PROCESS (rdAddr11)
  BEGIN
    CASE rdAddr11 IS
      WHEN '0' =>
        coeffTableOut11_1 <= to_signed(-16#01C2#, 16);
      WHEN '1' =>
        coeffTableOut11_1 <= to_signed(16#01E7#, 16);
      WHEN OTHERS => 
        coeffTableOut11_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable11_1_output;


  coeffTableRegP11_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP11_3 <= coeffTableOut11_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP11_2_process;


  -- Coefficient table for multiplier10
  coeffTable10_1_output : PROCESS (rdAddr10)
  BEGIN
    CASE rdAddr10 IS
      WHEN '0' =>
        coeffTableOut10_1 <= to_signed(-16#0176#, 16);
      WHEN '1' =>
        coeffTableOut10_1 <= to_signed(16#019C#, 16);
      WHEN OTHERS => 
        coeffTableOut10_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable10_1_output;


  coeffTableRegP10_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP10_3 <= coeffTableOut10_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP10_2_process;


  -- Coefficient table for multiplier9
  coeffTable9_1_output : PROCESS (rdAddr9)
  BEGIN
    CASE rdAddr9 IS
      WHEN '0' =>
        coeffTableOut9_1 <= to_signed(-16#0128#, 16);
      WHEN '1' =>
        coeffTableOut9_1 <= to_signed(16#014F#, 16);
      WHEN OTHERS => 
        coeffTableOut9_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable9_1_output;


  coeffTableRegP9_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP9_3 <= coeffTableOut9_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP9_2_process;


  -- Coefficient table for multiplier8
  coeffTable8_1_output : PROCESS (rdAddr8)
  BEGIN
    CASE rdAddr8 IS
      WHEN '0' =>
        coeffTableOut8_1 <= to_signed(-16#00DF#, 16);
      WHEN '1' =>
        coeffTableOut8_1 <= to_signed(16#0103#, 16);
      WHEN OTHERS => 
        coeffTableOut8_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable8_1_output;


  coeffTableRegP8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP8_3 <= coeffTableOut8_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP8_2_process;


  -- Coefficient table for multiplier7
  coeffTable7_1_output : PROCESS (rdAddr7)
  BEGIN
    CASE rdAddr7 IS
      WHEN '0' =>
        coeffTableOut7_1 <= to_signed(-16#009D#, 16);
      WHEN '1' =>
        coeffTableOut7_1 <= to_signed(16#00BD#, 16);
      WHEN OTHERS => 
        coeffTableOut7_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable7_1_output;


  coeffTableRegP7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP7_3 <= coeffTableOut7_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP7_2_process;


  -- Coefficient table for multiplier6
  coeffTable6_1_output : PROCESS (rdAddr6)
  BEGIN
    CASE rdAddr6 IS
      WHEN '0' =>
        coeffTableOut6_1 <= to_signed(-16#0066#, 16);
      WHEN '1' =>
        coeffTableOut6_1 <= to_signed(16#0080#, 16);
      WHEN OTHERS => 
        coeffTableOut6_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable6_1_output;


  coeffTableRegP6_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP6_3 <= coeffTableOut6_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP6_2_process;


  -- Coefficient table for multiplier5
  coeffTable5_1_output : PROCESS (rdAddr5)
  BEGIN
    CASE rdAddr5 IS
      WHEN '0' =>
        coeffTableOut5_1 <= to_signed(-16#003B#, 16);
      WHEN '1' =>
        coeffTableOut5_1 <= to_signed(16#004F#, 16);
      WHEN OTHERS => 
        coeffTableOut5_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable5_1_output;


  coeffTableRegP5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP5_3 <= coeffTableOut5_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP5_2_process;


  -- Coefficient table for multiplier4
  coeffTable4_1_output : PROCESS (rdAddr4)
  BEGIN
    CASE rdAddr4 IS
      WHEN '0' =>
        coeffTableOut4_1 <= to_signed(-16#001C#, 16);
      WHEN '1' =>
        coeffTableOut4_1 <= to_signed(16#002B#, 16);
      WHEN OTHERS => 
        coeffTableOut4_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable4_1_output;


  coeffTableRegP4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP4_3 <= coeffTableOut4_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP4_2_process;


  -- Coefficient table for multiplier3
  coeffTable3_1_output : PROCESS (rdAddr3)
  BEGIN
    CASE rdAddr3 IS
      WHEN '0' =>
        coeffTableOut3_1 <= to_signed(-16#0008#, 16);
      WHEN '1' =>
        coeffTableOut3_1 <= to_signed(16#0011#, 16);
      WHEN OTHERS => 
        coeffTableOut3_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable3_1_output;


  coeffTableRegP3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP3_3 <= coeffTableOut3_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP3_2_process;


  -- Coefficient table for multiplier2
  coeffTable2_1_output : PROCESS (rdAddr2)
  BEGIN
    CASE rdAddr2 IS
      WHEN '0' =>
        coeffTableOut2_1 <= to_signed(16#0004#, 16);
      WHEN '1' =>
        coeffTableOut2_1 <= to_signed(16#0001#, 16);
      WHEN OTHERS => 
        coeffTableOut2_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable2_1_output;


  coeffTableRegP2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP2_3 <= coeffTableOut2_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP2_2_process;


  -- Coefficient table for multiplier1
  coeffTable1_1_output : PROCESS (rdAddr1)
  BEGIN
    CASE rdAddr1 IS
      WHEN '0' =>
        coeffTableOut1_1 <= to_signed(16#000B#, 16);
      WHEN '1' =>
        coeffTableOut1_1 <= to_signed(-16#0008#, 16);
      WHEN OTHERS => 
        coeffTableOut1_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable1_1_output;


  coeffTableRegP1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP1_3 <= coeffTableOut1_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP1_2_process;


  -- Coefficient table for multiplier0
  coeffTable0_1_output : PROCESS (rdAddr0_1)
  BEGIN
    CASE rdAddr0_1 IS
      WHEN '0' =>
        coeffTableOut0_1 <= to_signed(-16#001D#, 16);
      WHEN '1' =>
        coeffTableOut0_1 <= to_signed(-16#001F#, 16);
      WHEN OTHERS => 
        coeffTableOut0_1 <= to_signed(16#0000#, 16);
    END CASE;
  END PROCESS coeffTable0_1_output;


  coeffTableRegP0_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP0_3 <= coeffTableOut0_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP0_2_process;


  sumIn_1 <= to_signed(0, 32);

  sumOut_30_signed_1 <= signed(sumOut_30_1);

  sumOutReg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sumOutReg_3 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        sumOutReg_3 <= sumOut_30_signed_1;
      END IF;
    END IF;
  END PROCESS sumOutReg_2_process;


  
  accSwitchOut_1 <= accDataOut_4 WHEN accumulate_1 = '0' ELSE
      accDataOut_3;

  accAdderOut_1 <= accSwitchOut_1 + sumOutReg_3;

  accDataOut_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accDataOut_4 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        accDataOut_4 <= accAdderOut_1;
      END IF;
    END IF;
  END PROCESS accDataOut_5_process;


  converterOut_1 <= accDataOut_4(29 DOWNTO 14);

  dout_im_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_im_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' AND validOutLookahead_3 = '1' THEN
        dout_im_1 <= converterOut_1;
      END IF;
    END IF;
  END PROCESS dout_im_process;


  dataZero <= to_signed(16#0000#, 16);

  dataZero_dtc_re <= dataZero;
  dataZero_dtc_im <= to_signed(16#0000#, 16);

  
  dout_cmplxSW_re <= dout_re_1 WHEN notValid = '0' ELSE
      dataZero_dtc_re;
  
  dout_cmplxSW_im <= dout_im_1 WHEN notValid = '0' ELSE
      dataZero_dtc_im;

  dataOut_re <= std_logic_vector(dout_cmplxSW_re);

  dataOut_im <= std_logic_vector(dout_cmplxSW_im);

  validOut <= vldOut_1;

END rtl;

