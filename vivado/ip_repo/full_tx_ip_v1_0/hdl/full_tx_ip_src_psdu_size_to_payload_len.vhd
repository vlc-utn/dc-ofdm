-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_src_psdu_size_to_payload_len.vhd
-- Created: 2024-06-30 19:38:39
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_src_psdu_size_to_payload_len
-- Source Path: HDLTx/full_tx/payload_full/psdu_size_to_payload_len
-- Hierarchy Level: 2
-- Model version: 4.75
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_src_psdu_size_to_payload_len IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        psdu_size                         :   IN    std_logic_vector(23 DOWNTO 0);  -- boolean [24]
        fec_rate                          :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        payload_len_in_ofdm_symbols       :   OUT   std_logic_vector(28 DOWNTO 0)  -- ufix29
        );
END full_tx_ip_src_psdu_size_to_payload_len;


ARCHITECTURE rtl OF full_tx_ip_src_psdu_size_to_payload_len IS

  -- Component Declarations
  COMPONENT full_tx_ip_src_Compare_To_Zero
    PORT( u                               :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_src_Divide
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dividend_in                     :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28
          divisor_in                      :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          quotient                        :   OUT   std_logic_vector(27 DOWNTO 0)  -- ufix28
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_src_Compare_To_Zero
    USE ENTITY work.full_tx_ip_src_Compare_To_Zero(rtl);

  FOR ALL : full_tx_ip_src_Divide
    USE ENTITY work.full_tx_ip_src_Divide(rtl);

  -- Signals
  SIGNAL Data_Type_Conversion_out1        : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Data_Type_Conversion_out1_23     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_22     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_21     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_20     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_19     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_18     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_17     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_16     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_15     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_14     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_13     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_12     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_11     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_10     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_9      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_8      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_7      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_6      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_5      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_4      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_3      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_2      : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_1      : std_logic;  -- ufix1
  SIGNAL fec_rate_unsigned                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Type_Conversion_out1_0      : std_logic;  -- ufix1
  SIGNAL y                                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL bits_per_OFDM_Symbol             : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Delay4_out1                      : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL multiply_by_8_out1               : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL bits_per_OFDM_Symbol_1           : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay_out1                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Constant1_out1                   : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Switch_out1                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL bits_in_psdu                     : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL bits_in_psdu_1                   : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL bits_in_ofdm_symbol              : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL bits_in_ofdm_symbol_1            : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Divide_out1                      : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL Divide_out1_unsigned             : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Delay5_bypass_reg                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Delay5_out1                      : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Constant2_out1                   : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL Delay2_out1                      : unsigned(28 DOWNTO 0);  -- ufix29

BEGIN
  -- Get length of the payload expressed in OFDM Symbols:
  -- 
  -- bitsInPsdu = psduSize * 8 * fecRate [bits/payload]
  -- bitsInOFDMSymbol = numDataCarriers * bitsPerSubcarrier [bits/OFDM]
  -- 
  -- payloadLenInOFDMSymbols = ceil( bitsInPsdu / bitsInOFDMSymbol ) [OFDM/payload]
  -- Repetition not supported
  -- Adding "1" is the same as doing a "ceil()" operation,
  -- because the divider "floors" the previous result.
  -- It is assumed that the division will never be an integer

  u_Compare_To_Zero : full_tx_ip_src_Compare_To_Zero
    PORT MAP( u => std_logic_vector(Delay_out1),  -- ufix12
              y => Compare_To_Zero_out1
              );

  u_Divide : full_tx_ip_src_Divide
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dividend_in => bits_in_psdu_1,  -- ufix28
              divisor_in => bits_in_ofdm_symbol_1,  -- ufix12
              quotient => Divide_out1  -- ufix28
              );

  Data_Type_Conversion_out1 <= psdu_size;

  Data_Type_Conversion_out1_23 <= Data_Type_Conversion_out1(23);

  Data_Type_Conversion_out1_22 <= Data_Type_Conversion_out1(22);

  Data_Type_Conversion_out1_21 <= Data_Type_Conversion_out1(21);

  Data_Type_Conversion_out1_20 <= Data_Type_Conversion_out1(20);

  Data_Type_Conversion_out1_19 <= Data_Type_Conversion_out1(19);

  Data_Type_Conversion_out1_18 <= Data_Type_Conversion_out1(18);

  Data_Type_Conversion_out1_17 <= Data_Type_Conversion_out1(17);

  Data_Type_Conversion_out1_16 <= Data_Type_Conversion_out1(16);

  Data_Type_Conversion_out1_15 <= Data_Type_Conversion_out1(15);

  Data_Type_Conversion_out1_14 <= Data_Type_Conversion_out1(14);

  Data_Type_Conversion_out1_13 <= Data_Type_Conversion_out1(13);

  Data_Type_Conversion_out1_12 <= Data_Type_Conversion_out1(12);

  Data_Type_Conversion_out1_11 <= Data_Type_Conversion_out1(11);

  Data_Type_Conversion_out1_10 <= Data_Type_Conversion_out1(10);

  Data_Type_Conversion_out1_9 <= Data_Type_Conversion_out1(9);

  Data_Type_Conversion_out1_8 <= Data_Type_Conversion_out1(8);

  Data_Type_Conversion_out1_7 <= Data_Type_Conversion_out1(7);

  Data_Type_Conversion_out1_6 <= Data_Type_Conversion_out1(6);

  Data_Type_Conversion_out1_5 <= Data_Type_Conversion_out1(5);

  Data_Type_Conversion_out1_4 <= Data_Type_Conversion_out1(4);

  Data_Type_Conversion_out1_3 <= Data_Type_Conversion_out1(3);

  Data_Type_Conversion_out1_2 <= Data_Type_Conversion_out1(2);

  Data_Type_Conversion_out1_1 <= Data_Type_Conversion_out1(1);

  fec_rate_unsigned <= unsigned(fec_rate);

  Data_Type_Conversion_out1_0 <= Data_Type_Conversion_out1(0);

  y <= unsigned'(Data_Type_Conversion_out1_23 & Data_Type_Conversion_out1_22 & Data_Type_Conversion_out1_21 & Data_Type_Conversion_out1_20 & Data_Type_Conversion_out1_19 & Data_Type_Conversion_out1_18 & Data_Type_Conversion_out1_17 & Data_Type_Conversion_out1_16 & Data_Type_Conversion_out1_15 & Data_Type_Conversion_out1_14 & Data_Type_Conversion_out1_13 & Data_Type_Conversion_out1_12 & Data_Type_Conversion_out1_11 & Data_Type_Conversion_out1_10 & Data_Type_Conversion_out1_9 & Data_Type_Conversion_out1_8 & Data_Type_Conversion_out1_7 & Data_Type_Conversion_out1_6 & Data_Type_Conversion_out1_5 & Data_Type_Conversion_out1_4 & Data_Type_Conversion_out1_3 & Data_Type_Conversion_out1_2 & Data_Type_Conversion_out1_1 & Data_Type_Conversion_out1_0);

  bits_per_OFDM_Symbol <= fec_rate_unsigned * y;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_unsigned(16#0000000#, 28);
      ELSIF enb_1_8_0 = '1' THEN
        Delay4_out1 <= bits_per_OFDM_Symbol;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  multiply_by_8_out1 <= Delay4_out1 sll 3;

  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  Constant_out1 <= to_unsigned(16#F5#, 8);

  bits_per_OFDM_Symbol_1 <= bits_per_subcarrier_unsigned * Constant_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb_1_8_0 = '1' THEN
        Delay_out1 <= bits_per_OFDM_Symbol_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Constant1_out1 <= to_unsigned(16#001#, 12);

  
  Switch_out1 <= Delay_out1 WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant1_out1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        bits_in_psdu <= to_unsigned(16#0000000#, 28);
      ELSIF enb_1_8_0 = '1' THEN
        bits_in_psdu <= multiply_by_8_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  bits_in_psdu_1 <= std_logic_vector(bits_in_psdu);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        bits_in_ofdm_symbol <= to_unsigned(16#001#, 12);
      ELSIF enb_1_8_0 = '1' THEN
        bits_in_ofdm_symbol <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  bits_in_ofdm_symbol_1 <= std_logic_vector(bits_in_ofdm_symbol);

  Divide_out1_unsigned <= unsigned(Divide_out1);

  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_bypass_reg <= to_unsigned(16#0000000#, 28);
      ELSIF enb_1_8_1 = '1' THEN
        Delay5_bypass_reg <= Divide_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Delay5_out1 <= Divide_out1_unsigned WHEN enb_1_8_1 = '1' ELSE
      Delay5_bypass_reg;

  Constant2_out1 <= to_unsigned(16#0000001#, 28);

  Delay2_out1 <= resize(Delay5_out1, 29) + resize(Constant2_out1, 29);

  payload_len_in_ofdm_symbols <= std_logic_vector(Delay2_out1);

END rtl;

