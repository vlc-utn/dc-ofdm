-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_rotate_90.vhd
-- Created: 2024-10-03 16:24:08
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_rotate_90
-- Source Path: HDLRxDemodulator/rx_demodulator_full/constellation_descrambler/rotate_-90/rotate_-90
-- Hierarchy Level: 3
-- Model version: 1.66
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_optimized_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_optimized_src_rotate_90 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        s2                                :   IN    std_logic;
        s1                                :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
        );
END rx_demod_optimized_src_rotate_90;


ARCHITECTURE rtl OF rx_demod_optimized_src_rotate_90 IS

  -- Signals
  SIGNAL Bit_Concat_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_re_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayMatch_reg_re                : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL delayMatch_reg_im                : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL data_in_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus1_cast                : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus1_cast_1              : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus1_out1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayMatch1_reg_re               : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL delayMatch1_reg_im               : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL Real_Imag_to_Complex1_out1_re    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex1_out1_im    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus_cast                 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus_cast_1               : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus_out1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus3_cast                : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus3_cast_1              : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus3_out1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayMatch2_reg_re               : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL delayMatch2_reg_im               : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL Real_Imag_to_Complex_out1_re     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex_out1_im     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus2_cast                : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus2_cast_1              : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus2_out1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayMatch3_reg_re               : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL delayMatch3_reg_im               : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL Real_Imag_to_Complex2_out1_re    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex2_out1_im    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_re         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_im         : signed(11 DOWNTO 0);  -- sfix12_En10

BEGIN
  Bit_Concat_out1 <= unsigned'(s2 & s1);

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg_re <= (OTHERS => to_signed(16#000#, 12));
        delayMatch_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg_im(0) <= data_in_im_signed;
        delayMatch_reg_im(1) <= delayMatch_reg_im(0);
        delayMatch_reg_re(0) <= data_in_re_signed;
        delayMatch_reg_re(1) <= delayMatch_reg_re(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  data_in_re_1 <= delayMatch_reg_re(1);
  data_in_im_1 <= delayMatch_reg_im(1);

  Unary_Minus1_cast <= resize(data_in_re_signed, 13);
  Unary_Minus1_cast_1 <=  - (Unary_Minus1_cast);
  Unary_Minus1_out1 <= Unary_Minus1_cast_1(11 DOWNTO 0);

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg_re <= (OTHERS => to_signed(16#000#, 12));
        delayMatch1_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch1_reg_im(0) <= Unary_Minus1_out1;
        delayMatch1_reg_im(1) <= delayMatch1_reg_im(0);
        delayMatch1_reg_re(0) <= data_in_im_signed;
        delayMatch1_reg_re(1) <= delayMatch1_reg_re(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Real_Imag_to_Complex1_out1_re <= delayMatch1_reg_re(1);
  Real_Imag_to_Complex1_out1_im <= delayMatch1_reg_im(1);

  Unary_Minus_cast <= resize(data_in_re_signed, 13);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(11 DOWNTO 0);

  Unary_Minus3_cast <= resize(data_in_im_signed, 13);
  Unary_Minus3_cast_1 <=  - (Unary_Minus3_cast);
  Unary_Minus3_out1 <= Unary_Minus3_cast_1(11 DOWNTO 0);

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg_re <= (OTHERS => to_signed(16#000#, 12));
        delayMatch2_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch2_reg_im(0) <= Unary_Minus3_out1;
        delayMatch2_reg_im(1) <= delayMatch2_reg_im(0);
        delayMatch2_reg_re(0) <= Unary_Minus_out1;
        delayMatch2_reg_re(1) <= delayMatch2_reg_re(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Real_Imag_to_Complex_out1_re <= delayMatch2_reg_re(1);
  Real_Imag_to_Complex_out1_im <= delayMatch2_reg_im(1);

  Unary_Minus2_cast <= resize(data_in_im_signed, 13);
  Unary_Minus2_cast_1 <=  - (Unary_Minus2_cast);
  Unary_Minus2_out1 <= Unary_Minus2_cast_1(11 DOWNTO 0);

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg_re <= (OTHERS => to_signed(16#000#, 12));
        delayMatch3_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch3_reg_im(0) <= data_in_re_signed;
        delayMatch3_reg_im(1) <= delayMatch3_reg_im(0);
        delayMatch3_reg_re(0) <= Unary_Minus2_out1;
        delayMatch3_reg_re(1) <= delayMatch3_reg_re(0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  Real_Imag_to_Complex2_out1_re <= delayMatch3_reg_re(1);
  Real_Imag_to_Complex2_out1_im <= delayMatch3_reg_im(1);

  
  Multiport_Switch_out1_re <= data_in_re_1 WHEN Bit_Concat_out1 = to_unsigned(16#0#, 2) ELSE
      Real_Imag_to_Complex1_out1_re WHEN Bit_Concat_out1 = to_unsigned(16#1#, 2) ELSE
      Real_Imag_to_Complex_out1_re WHEN Bit_Concat_out1 = to_unsigned(16#2#, 2) ELSE
      Real_Imag_to_Complex2_out1_re;
  
  Multiport_Switch_out1_im <= data_in_im_1 WHEN Bit_Concat_out1 = to_unsigned(16#0#, 2) ELSE
      Real_Imag_to_Complex1_out1_im WHEN Bit_Concat_out1 = to_unsigned(16#1#, 2) ELSE
      Real_Imag_to_Complex_out1_im WHEN Bit_Concat_out1 = to_unsigned(16#2#, 2) ELSE
      Real_Imag_to_Complex2_out1_im;

  data_out_re <= std_logic_vector(Multiport_Switch_out1_re);

  data_out_im <= std_logic_vector(Multiport_Switch_out1_im);

END rtl;

