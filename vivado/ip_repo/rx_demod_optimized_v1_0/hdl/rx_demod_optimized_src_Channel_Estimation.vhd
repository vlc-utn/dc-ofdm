-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_Channel_Estimation.vhd
-- Created: 2024-10-02 09:49:04
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_Channel_Estimation
-- Source Path: HDLRxDemodulator/rx_demodulator_full/channel_estimation_and_equalization/Channel Estimation
-- Hierarchy Level: 2
-- Model version: 1.65
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_optimized_src_Channel_Estimation IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        reset                             :   IN    std_logic;
        channel_estimate_re               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        channel_estimate_im               :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_estimate                    :   OUT   std_logic
        );
END rx_demod_optimized_src_Channel_Estimation;


ARCHITECTURE rtl OF rx_demod_optimized_src_Channel_Estimation IS

  -- Component Declarations
  COMPONENT rx_demod_optimized_src_rising_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_HDL_FIFO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          In_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          rst                             :   IN    std_logic;
          Out_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Out_im                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_optimized_src_rising_edge_detector_block
    USE ENTITY work.rx_demod_optimized_src_rising_edge_detector_block(rtl);

  FOR ALL : rx_demod_optimized_src_HDL_FIFO
    USE ENTITY work.rx_demod_optimized_src_HDL_FIFO(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL count_step                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_from                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_reset                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL HDL_Counter_out1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_1                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count_2                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL range_hit                        : std_logic;
  SIGNAL count_hit                        : std_logic;
  SIGNAL zero_1                           : std_logic;
  SIGNAL HDL_Counter_out2                 : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL HDL_FIFO_out1_re                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL HDL_FIFO_out1_im                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL HDL_FIFO_out1_re_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HDL_FIFO_out1_im_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add_add_cast                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add_add_cast_1                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add_add_cast_2                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add_add_cast_3                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add_out1_re                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Add_out1_im                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay3_out1_re                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Delay3_out1_im                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Divide_by_2_out1_re              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Divide_by_2_out1_im              : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Unary_Minus_cast                 : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Unary_Minus_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Unary_Minus_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Unary_Minus_cast_3               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Unary_Minus_out1_re              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Unary_Minus_out1_im              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;

BEGIN
  -- Store first channel symbol
  -- Modificacion del channel estimation, para reducir DSPs, considerando que el valor de referencia del canal es H="-1 
  -- + 0i

  u_rising_edge_detector : rx_demod_optimized_src_rising_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_rsvd => valid_in,
              Out_rsvd => rising_edge_detector_out1
              );

  u_HDL_FIFO : rx_demod_optimized_src_HDL_FIFO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_re => std_logic_vector(Delay8_out1_re),  -- sfix16_En14
              In_im => std_logic_vector(Delay8_out1_im),  -- sfix16_En14
              Push => Logical_Operator1_out1,
              Pop => Logical_Operator2_out1,
              rst => reset,
              Out_re => HDL_FIFO_out1_re,  -- sfix16_En14
              Out_im => HDL_FIFO_out1_im  -- sfix16_En14
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_re <= to_signed(16#0000#, 16);
        Delay8_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1_re <= data_in_re_signed;
        Delay8_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_re <= to_signed(16#0000#, 16);
        Delay2_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1_re <= Delay8_out1_re;
        Delay2_out1_im <= Delay8_out1_im;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay6_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  count_step <= to_unsigned(16#1#, 2);

  count_from <= to_unsigned(16#0#, 2);

  count_reset <= to_unsigned(16#0#, 2);

  count <= HDL_Counter_out1 + count_step;

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN rising_edge_detector_out1 = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN reset = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_out1 <= to_unsigned(16#0#, 2);
      ELSIF enb_1_2_0 = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#2#, 2) ELSE
      '0';

  
  range_hit <= '1' WHEN HDL_Counter_out1 > to_unsigned(16#2#, 2) ELSE
      '0';

  count_hit <= need_to_wrap OR range_hit;

  zero_1 <= '0';

  
  HDL_Counter_out2 <= count_hit WHEN reset = '0' ELSE
      zero_1;

  Logical_Operator_out1 <=  NOT HDL_Counter_out2;

  Logical_Operator1_out1 <= Delay6_out1 AND Logical_Operator_out1;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Logical_Operator2_out1 <= Delay7_out1 AND HDL_Counter_out2;

  HDL_FIFO_out1_re_signed <= signed(HDL_FIFO_out1_re);

  HDL_FIFO_out1_im_signed <= signed(HDL_FIFO_out1_im);

  Add_add_cast <= resize(Delay2_out1_re, 17);
  Add_add_cast_1 <= resize(HDL_FIFO_out1_re_signed, 17);
  Add_out1_re <= Add_add_cast + Add_add_cast_1;
  Add_add_cast_2 <= resize(Delay2_out1_im, 17);
  Add_add_cast_3 <= resize(HDL_FIFO_out1_im_signed, 17);
  Add_out1_im <= Add_add_cast_2 + Add_add_cast_3;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_re <= to_signed(16#00000#, 17);
        Delay3_out1_im <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1_re <= Add_out1_re;
        Delay3_out1_im <= Add_out1_im;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Divide_by_2_out1_re <= SHIFT_RIGHT(Delay3_out1_re, 1);
  Divide_by_2_out1_im <= SHIFT_RIGHT(Delay3_out1_im, 1);

  Data_Type_Conversion_out1_re <= Divide_by_2_out1_re(15 DOWNTO 0);
  Data_Type_Conversion_out1_im <= Divide_by_2_out1_im(15 DOWNTO 0);

  Unary_Minus_cast <= resize(Data_Type_Conversion_out1_re, 17);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1_re <= Unary_Minus_cast_1(15 DOWNTO 0);
  Unary_Minus_cast_2 <= resize(Data_Type_Conversion_out1_im, 17);
  Unary_Minus_cast_3 <=  - (Unary_Minus_cast_2);
  Unary_Minus_out1_im <= Unary_Minus_cast_3(15 DOWNTO 0);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re <= to_signed(16#0000#, 16);
        Delay_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1_re <= Unary_Minus_out1_re;
        Delay_out1_im <= Unary_Minus_out1_im;
      END IF;
    END IF;
  END PROCESS Delay_process;


  channel_estimate_re <= std_logic_vector(Delay_out1_re);

  channel_estimate_im <= std_logic_vector(Delay_out1_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay5_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  valid_estimate <= Delay5_out1;

END rtl;

