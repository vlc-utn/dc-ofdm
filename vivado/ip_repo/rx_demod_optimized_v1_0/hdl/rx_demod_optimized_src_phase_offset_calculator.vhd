-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_phase_offset_calculator.vhd
-- Created: 2024-10-03 16:24:08
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_phase_offset_calculator
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/phase_offset_calculator
-- Hierarchy Level: 2
-- Model version: 1.66
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_optimized_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_optimized_src_phase_offset_calculator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        peak_sync                         :   IN    std_logic;
        P_d_re                            :   IN    std_logic_vector(12 DOWNTO 0);  -- sfix13_En9
        P_d_im                            :   IN    std_logic_vector(12 DOWNTO 0);  -- sfix13_En9
        frequency_offset                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END rx_demod_optimized_src_phase_offset_calculator;


ARCHITECTURE rtl OF rx_demod_optimized_src_phase_offset_calculator IS

  -- Component Declarations
  COMPONENT rx_demod_optimized_src_HDL_CMA_core
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_re                           :   IN    std_logic_vector(12 DOWNTO 0);  -- sfix13_En9
          In_im                           :   IN    std_logic_vector(12 DOWNTO 0);  -- sfix13_En9
          validIn                         :   IN    std_logic;
          angle                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_optimized_src_HDL_CMA_core
    USE ENTITY work.rx_demod_optimized_src_HDL_CMA_core(rtl);

  -- Signals
  SIGNAL Complex_to_Magnitude_Angle_out1  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Complex_to_Magnitude_Angle_out2  : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Complex_to_Magnitude_Angle_out1_signed : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay2_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Switch_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Unit_Delay_out1                  : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  u_Complex_to_Magnitude_Angle : rx_demod_optimized_src_HDL_CMA_core
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_re => P_d_re,  -- sfix13_En9
              In_im => P_d_im,  -- sfix13_En9
              validIn => peak_sync,
              angle => Complex_to_Magnitude_Angle_out1,  -- sfix16_En15
              validOut => Complex_to_Magnitude_Angle_out2
              );

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_reg(0) <= Complex_to_Magnitude_Angle_out2;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Complex_to_Magnitude_Angle_out1_signed <= signed(Complex_to_Magnitude_Angle_out1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_reg(0) <= Complex_to_Magnitude_Angle_out1_signed;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Unit_Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  Switch_out1 <= Unit_Delay_out1 WHEN Delay3_out1 = '0' ELSE
      Delay2_out1;

  frequency_offset <= std_logic_vector(Switch_out1);

END rtl;

