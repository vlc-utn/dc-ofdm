-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_Quadrant_Mapper.vhd
-- Created: 2024-10-03 16:24:08
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_Quadrant_Mapper
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/phase_offset_calculator/HDL_CMA_core/Quadrant_Mapper
-- Hierarchy Level: 4
-- Model version: 1.66
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_optimized_src_Quadrant_Mapper IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        xin                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        yin                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        xout                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        yout                              :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        QA_Control                        :   OUT   std_logic_vector(4 DOWNTO 0)  -- ufix5
        );
END rx_demod_optimized_src_Quadrant_Mapper;


ARCHITECTURE rtl OF rx_demod_optimized_src_Quadrant_Mapper IS

  -- Signals
  SIGNAL xin_signed                       : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL abs_rsvd_y                       : signed(14 DOWNTO 0);  -- sfix15_En9
  SIGNAL abs_rsvd_cast                    : signed(14 DOWNTO 0);  -- sfix15_En9
  SIGNAL xAbs                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL xAbsReg                          : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL yin_signed                       : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL abs_rsvd_y_1                     : signed(14 DOWNTO 0);  -- sfix15_En9
  SIGNAL abs_rsvd_cast_1                  : signed(14 DOWNTO 0);  -- sfix15_En9
  SIGNAL yAbs                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL yAbsReg                          : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL XGreaterThanY                    : std_logic;  -- ufix1
  SIGNAL xout_1                           : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL yout_1                           : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL in2reg                           : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL yZero                            : std_logic;  -- ufix1
  SIGNAL in1reg                           : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL xPositive                        : std_logic;  -- ufix1
  SIGNAL yZeroXPositive                   : std_logic;  -- ufix1
  SIGNAL xNegative                        : std_logic;  -- ufix1
  SIGNAL yZeroXNegative                   : std_logic;  -- ufix1
  SIGNAL yNegative                        : std_logic;  -- ufix1
  SIGNAL qcControl                        : unsigned(4 DOWNTO 0);  -- ufix5

BEGIN
  xin_signed <= signed(xin);

  abs_rsvd_cast <= resize(xin_signed, 15);
  
  abs_rsvd_y <=  - (abs_rsvd_cast) WHEN xin_signed < to_signed(16#0000#, 14) ELSE
      resize(xin_signed, 15);
  xAbs <= abs_rsvd_y(13 DOWNTO 0);

  DelayxAbs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xAbsReg <= to_signed(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        xAbsReg <= xAbs;
      END IF;
    END IF;
  END PROCESS DelayxAbs_process;


  yin_signed <= signed(yin);

  abs_rsvd_cast_1 <= resize(yin_signed, 15);
  
  abs_rsvd_y_1 <=  - (abs_rsvd_cast_1) WHEN yin_signed < to_signed(16#0000#, 14) ELSE
      resize(yin_signed, 15);
  yAbs <= abs_rsvd_y_1(13 DOWNTO 0);

  DelayyAbs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yAbsReg <= to_signed(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        yAbsReg <= yAbs;
      END IF;
    END IF;
  END PROCESS DelayyAbs_process;


  
  XGreaterThanY <= '1' WHEN xAbsReg > yAbsReg ELSE
      '0';

  
  xout_1 <= yAbsReg WHEN XGreaterThanY = '0' ELSE
      xAbsReg;

  xout <= std_logic_vector(xout_1);

  
  yout_1 <= xAbsReg WHEN XGreaterThanY = '0' ELSE
      yAbsReg;

  yout <= std_logic_vector(yout_1);

  Delayin2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in2reg <= to_signed(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        in2reg <= yin_signed;
      END IF;
    END IF;
  END PROCESS Delayin2_process;


  
  yZero <= '1' WHEN in2reg = to_signed(16#0000#, 14) ELSE
      '0';

  Delayin1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in1reg <= to_signed(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        in1reg <= xin_signed;
      END IF;
    END IF;
  END PROCESS Delayin1_process;


  
  xPositive <= '1' WHEN in1reg >= to_signed(16#0000#, 14) ELSE
      '0';

  yZeroXPositive <= yZero AND xPositive;

  
  xNegative <= '1' WHEN in1reg < to_signed(16#0000#, 14) ELSE
      '0';

  yZeroXNegative <= yZero AND xNegative;

  
  yNegative <= '1' WHEN in2reg < to_signed(16#0000#, 14) ELSE
      '0';

  qcControl <= unsigned'(yZeroXPositive & yZeroXNegative & XGreaterThanY & xNegative & yNegative);

  QA_Control <= std_logic_vector(qcControl);

END rtl;

