-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_equalizer.vhd
-- Created: 2024-10-04 10:51:59
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_equalizer
-- Source Path: HDLRxDemodulator/rx_demodulator_full/channel_estimation_and_equalization/Channel Equalization/equalizer
-- Hierarchy Level: 3
-- Model version: 1.70
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_optimized_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_optimized_src_equalizer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        hEst_re                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        hEst_im                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        Valid                             :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic
        );
END rx_demod_optimized_src_equalizer;


ARCHITECTURE rtl OF rx_demod_optimized_src_equalizer IS

  -- Component Declarations
  COMPONENT rx_demod_optimized_src_complex_multiplier
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in_a_re                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          in_a_im                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          in_b_re                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          in_b_im                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          a_times_b_re                    :   OUT   std_logic_vector(25 DOWNTO 0);  -- sfix26_En20
          a_times_b_im                    :   OUT   std_logic_vector(25 DOWNTO 0)  -- sfix26_En20
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_Real_Divide_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_Real_Divide_HDL_Optimized1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_optimized_src_complex_multiplier
    USE ENTITY work.rx_demod_optimized_src_complex_multiplier(rtl);

  FOR ALL : rx_demod_optimized_src_Real_Divide_HDL_Optimized
    USE ENTITY work.rx_demod_optimized_src_Real_Divide_HDL_Optimized(rtl);

  FOR ALL : rx_demod_optimized_src_Real_Divide_HDL_Optimized1
    USE ENTITY work.rx_demod_optimized_src_Real_Divide_HDL_Optimized1(rtl);

  -- Signals
  SIGNAL hEst_re_signed                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL hEst_im_signed                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL conj_cast                        : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL conj_cast_1                      : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Conjugate_out1_re                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Conjugate_out1_im                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL complex_multiplier_out1_re       : std_logic_vector(25 DOWNTO 0);  -- ufix26
  SIGNAL complex_multiplier_out1_im       : std_logic_vector(25 DOWNTO 0);  -- ufix26
  SIGNAL complex_multiplier_out1_re_signed : signed(25 DOWNTO 0);  -- sfix26_En20
  SIGNAL complex_multiplier_out1_im_signed : signed(25 DOWNTO 0);  -- sfix26_En20
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_reg                       : vector_of_signed12(0 TO 1);  -- sfix12 [2]
  SIGNAL Delay7_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay7_out1_1                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay7_out1_2                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Product_out1                     : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Product_out1_1                   : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Delay8_reg                       : vector_of_signed12(0 TO 1);  -- sfix12 [2]
  SIGNAL Delay8_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay8_out1_1                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay8_out1_2                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Product1_out1                    : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Product1_out1_1                  : signed(23 DOWNTO 0);  -- sfix24_En20
  SIGNAL Add_add_cast                     : signed(24 DOWNTO 0);  -- sfix25_En20
  SIGNAL Add_add_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En20
  SIGNAL Add_out1                         : signed(24 DOWNTO 0);  -- sfix25_En20
  SIGNAL Delay11_reg                      : vector_of_signed25(0 TO 1);  -- sfix25 [2]
  SIGNAL Delay11_out1                     : signed(24 DOWNTO 0);  -- sfix25_En20
  SIGNAL Data_Type_Conversion1_out1       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay13_reg                      : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Real_Divide_HDL_Optimized_out1   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Real_Divide_HDL_Optimized1_out1  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Real_Divide_HDL_Optimized1_out2  : std_logic;

BEGIN
  u_complex_multiplier : rx_demod_optimized_src_complex_multiplier
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              in_a_re => data_in_re,  -- sfix12_En10
              in_a_im => data_in_im,  -- sfix12_En10
              in_b_re => std_logic_vector(Conjugate_out1_re),  -- sfix12_En10
              in_b_im => std_logic_vector(Conjugate_out1_im),  -- sfix12_En10
              a_times_b_re => complex_multiplier_out1_re,  -- sfix26_En20
              a_times_b_im => complex_multiplier_out1_im  -- sfix26_En20
              );

  u_Real_Divide_HDL_Optimized : rx_demod_optimized_src_Real_Divide_HDL_Optimized
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              num => std_logic_vector(Data_Type_Conversion_out1_re),  -- sfix16_En14
              den => std_logic_vector(Data_Type_Conversion1_out1),  -- sfix16_En14
              validIn => Delay13_out1,
              y => Real_Divide_HDL_Optimized_out1  -- sfix12_En10
              );

  u_Real_Divide_HDL_Optimized1 : rx_demod_optimized_src_Real_Divide_HDL_Optimized1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              num => std_logic_vector(Data_Type_Conversion_out1_im),  -- sfix16_En14
              den => std_logic_vector(Data_Type_Conversion1_out1),  -- sfix16_En14
              validIn => Delay13_out1,
              y => Real_Divide_HDL_Optimized1_out1,  -- sfix12_En10
              validOut => Real_Divide_HDL_Optimized1_out2
              );

  hEst_re_signed <= signed(hEst_re);

  hEst_im_signed <= signed(hEst_im);

  Conjugate_out1_re <= hEst_re_signed;
  conj_cast <= resize(hEst_im_signed, 13);
  conj_cast_1 <=  - (conj_cast);
  
  Conjugate_out1_im <= "011111111111" WHEN (conj_cast_1(12) = '0') AND (conj_cast_1(11) /= '0') ELSE
      "100000000000" WHEN (conj_cast_1(12) = '1') AND (conj_cast_1(11) /= '1') ELSE
      conj_cast_1(11 DOWNTO 0);

  complex_multiplier_out1_re_signed <= signed(complex_multiplier_out1_re);

  complex_multiplier_out1_im_signed <= signed(complex_multiplier_out1_im);

  Data_Type_Conversion_out1_re <= complex_multiplier_out1_re_signed(21 DOWNTO 6);
  Data_Type_Conversion_out1_im <= complex_multiplier_out1_im_signed(21 DOWNTO 6);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_reg(0) <= hEst_re_signed;
        Delay7_reg(1) <= Delay7_reg(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_1 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_out1_1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_2 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_out1_2 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product_out1 <= Delay7_out1_1 * Delay7_out1_2;

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_2_0 = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_reg(0) <= hEst_im_signed;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_1 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1_1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_2 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1_2 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Product1_out1 <= Delay8_out1_1 * Delay8_out1_2;

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product1_out1_1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_2_0 = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Add_add_cast <= resize(Product_out1_1, 25);
  Add_add_cast_1 <= resize(Product1_out1_1, 25);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg <= (OTHERS => to_signed(16#0000000#, 25));
      ELSIF enb_1_2_0 = '1' THEN
        Delay11_reg(0) <= Add_out1;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  Data_Type_Conversion1_out1 <= Delay11_out1(21 DOWNTO 6);

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay13_reg(0) <= Valid;
        Delay13_reg(5 DOWNTO 1) <= Delay13_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(5);

  data_out_re <= Real_Divide_HDL_Optimized_out1;

  data_out_im <= Real_Divide_HDL_Optimized1_out1;

  valid_out <= Real_Divide_HDL_Optimized1_out2;

END rtl;

