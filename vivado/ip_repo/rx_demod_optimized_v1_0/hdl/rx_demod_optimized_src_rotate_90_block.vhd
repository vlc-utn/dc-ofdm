-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_rotate_90_block.vhd
-- Created: 2024-10-03 16:24:08
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_rotate_90_block
-- Source Path: HDLRxDemodulator/rx_demodulator_full/constellation_descrambler/rotate_-90
-- Hierarchy Level: 2
-- Model version: 1.66
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_optimized_src_rotate_90_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_in                          :   IN    std_logic;
        s1_in                             :   IN    std_logic;
        s2_in                             :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic
        );
END rx_demod_optimized_src_rotate_90_block;


ARCHITECTURE rtl OF rx_demod_optimized_src_rotate_90_block IS

  -- Component Declarations
  COMPONENT rx_demod_optimized_src_rotate_90
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          s2                              :   IN    std_logic;
          s1                              :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_optimized_src_rotate_90
    USE ENTITY work.rx_demod_optimized_src_rotate_90(rtl);

  -- Signals
  SIGNAL en                               : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL s2                               : std_logic;
  SIGNAL data_in_re_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_1                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_im_1                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_re_signed               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_signed               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_tmp                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_tmp                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_rotate_90 : rx_demod_optimized_src_rotate_90
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              s2 => s2,
              s1 => s1,
              data_in_re => std_logic_vector(data_in_re_1),  -- sfix12_En10
              data_in_im => std_logic_vector(data_in_im_1),  -- sfix12_En10
              data_out_re => data_out_re_1,  -- sfix12_En10
              data_out_im => data_out_im_1  -- sfix12_En10
              );

  en <= valid_in;

  s1 <= s1_in;

  s2 <= s2_in;

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_1 <= to_signed(16#000#, 12);
        data_in_im_1 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        data_in_re_1 <= data_in_re_signed;
        data_in_im_1 <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_re_tmp <= to_signed(16#000#, 12);
        data_out_im_tmp <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        data_out_re_tmp <= data_out_re_signed;
        data_out_im_tmp <= data_out_im_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  data_out_re <= std_logic_vector(data_out_re_tmp);

  data_out_im <= std_logic_vector(data_out_im_tmp);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= en;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  valid_out <= Delay3_out1;

END rtl;

