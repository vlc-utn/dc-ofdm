-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_optimized_src_OFDM_Demodulator.vhd
-- Created: 2024-10-03 16:24:09
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_optimized_src_OFDM_Demodulator
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_demod/OFDM Demodulator
-- Hierarchy Level: 2
-- Model version: 1.66
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_optimized_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_optimized_src_OFDM_Demodulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid                             :   IN    std_logic;
        FFTLen                            :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        CPLen                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        numLgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        numRgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        reset                             :   IN    std_logic;
        data_re_1                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
        data_im_1                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
        valid_1                           :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END rx_demod_optimized_src_OFDM_Demodulator;


ARCHITECTURE rtl OF rx_demod_optimized_src_OFDM_Demodulator IS

  -- Component Declarations
  COMPONENT rx_demod_optimized_src_CPRemoval_stage1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_6                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_7                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_8                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_5                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_6                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_SamplesRepetition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_6                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          varargout_4                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          varargout_5                     :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_HDLFFTShift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_1_im                   :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_1_im                  :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          varargout_2                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_dsphdl_FFT
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          dataOut_im                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          startOut                        :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_DownSampler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargin_1_im                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_6                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargout_1_im                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_4                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_5                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT rx_demod_optimized_src_SubcarrierSelector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargin_1_im                   :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_5                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_6                      :   IN    std_logic;
          varargout_1_re                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargout_1_im                  :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          varargout_2                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_optimized_src_CPRemoval_stage1
    USE ENTITY work.rx_demod_optimized_src_CPRemoval_stage1(rtl);

  FOR ALL : rx_demod_optimized_src_SamplesRepetition
    USE ENTITY work.rx_demod_optimized_src_SamplesRepetition(rtl);

  FOR ALL : rx_demod_optimized_src_HDLFFTShift
    USE ENTITY work.rx_demod_optimized_src_HDLFFTShift(rtl);

  FOR ALL : rx_demod_optimized_src_dsphdl_FFT
    USE ENTITY work.rx_demod_optimized_src_dsphdl_FFT(rtl);

  FOR ALL : rx_demod_optimized_src_DownSampler
    USE ENTITY work.rx_demod_optimized_src_DownSampler(rtl);

  FOR ALL : rx_demod_optimized_src_SubcarrierSelector
    USE ENTITY work.rx_demod_optimized_src_SubcarrierSelector(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_dataReadyDelay_re            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL obj_dataReadyDelay_im            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL frstVldANDRdyN                   : std_logic;
  SIGNAL frstVldANDRdyN_1                 : std_logic;
  SIGNAL obj_validLowCount                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_validLowCount_1              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_maxFFTMinusVec               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_maxFFTMinusVec_1             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp                              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_validLowFlag                 : std_logic;
  SIGNAL obj_validLowFlag_1               : std_logic;
  SIGNAL obj_validLowFlag_2               : std_logic;
  SIGNAL obj_validLowFlag_3               : std_logic;
  SIGNAL obj_validLowFlag_4               : std_logic;
  SIGNAL vldHvldL                         : std_logic;
  SIGNAL vldHvldL_1                       : std_logic;
  SIGNAL obj_firstValidHighFlag           : std_logic;
  SIGNAL obj_firstValidHighFlag_1         : std_logic;
  SIGNAL obj_firstValidHighFlag_2         : std_logic;
  SIGNAL frstVldANDRdy                    : std_logic;
  SIGNAL frstVldANDRdy_1                  : std_logic;
  SIGNAL obj_CPLength1                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL CPLen_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL obj_CPLengthSig                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validHighFlag                : std_logic;
  SIGNAL obj_validHighFlag_1              : std_logic;
  SIGNAL obj_validHighFlag_2              : std_logic;
  SIGNAL obj_validHighFlag_3              : std_logic;
  SIGNAL vldHvldLN                        : std_logic;
  SIGNAL vldHvldLN_1                      : std_logic;
  SIGNAL obj_validHighCount               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL samplingSignal                   : std_logic;
  SIGNAL samplingSignal_1                 : std_logic;
  SIGNAL obj_FFTLength1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL FFTLen_unsigned                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_FFTLengthSig                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_readyDataDelay               : std_logic;
  SIGNAL obj_readyState                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_2                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_3                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_4                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyDataDelay_1             : std_logic;
  SIGNAL obj_readyDataDelay_2             : std_logic;
  SIGNAL obj_readyDataDelay_3             : std_logic;
  SIGNAL out_rsvd                         : std_logic;
  SIGNAL out_rsvd_1                       : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_3                            : std_logic;
  SIGNAL tmp_4                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL FFTeqMaxFFT                      : std_logic;
  SIGNAL tmp_5                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_6                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL obj_readyState_5                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_7                            : std_logic;
  SIGNAL tmp_8                            : std_logic;
  SIGNAL tmp_9                            : std_logic;
  SIGNAL tmp_10                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_11                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_FFTLength1_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_12                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL obj_readyHigh                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_13                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p276tmp_sub_cast                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p276tmp_sub_cast_1               : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p276tmp_sub_cast_2               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p276tmp_sub_cast_3               : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p276tmp_sub_temp                 : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p276tmp_cast                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_14                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_15                           : std_logic;
  SIGNAL tmp_16                           : std_logic;
  SIGNAL tmp_17                           : std_logic;
  SIGNAL tmp_18                           : std_logic;
  SIGNAL obj_validHighFlag_4              : std_logic;
  SIGNAL tmp_19                           : std_logic;
  SIGNAL tmp_20                           : std_logic;
  SIGNAL tmp_21                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_22                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_CPLength1_1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validHighCount_1             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_23                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p327tmp_add_temp                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_24                           : std_logic;
  SIGNAL tmp_25                           : std_logic;
  SIGNAL tmp_26                           : std_logic;
  SIGNAL tmp_27                           : std_logic;
  SIGNAL tmp_28                           : std_logic;
  SIGNAL obj_validLowFlag_5               : std_logic;
  SIGNAL tmp_29                           : std_logic;
  SIGNAL obj_readyLow                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p288obj_readyLow_sub_cast        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p288obj_readyLow_sub_cast_1      : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p288obj_readyLow_sub_cast_2      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p288obj_readyLow_sub_cast_3      : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p288obj_readyLow_sub_temp        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p288obj_readyLow_cast            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL obj_validLowCount_2              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_30                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p328tmp_add_temp                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_31                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_32                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_33                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_34                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_35                           : std_logic;
  SIGNAL tmp_36                           : std_logic;
  SIGNAL tmp_37                           : std_logic;
  SIGNAL tmp_38                           : std_logic;
  SIGNAL tmp_39                           : std_logic;
  SIGNAL tmp_40                           : std_logic;
  SIGNAL tmp_41                           : std_logic;
  SIGNAL tmp_42                           : std_logic;
  SIGNAL tmp_43                           : std_logic;
  SIGNAL obj_firstValidHighFlag_3         : std_logic;
  SIGNAL tmp_44                           : std_logic;
  SIGNAL tmp_45                           : std_logic;
  SIGNAL tmp_46                           : std_logic;
  SIGNAL tmp_47                           : std_logic;
  SIGNAL tmp_48                           : std_logic;
  SIGNAL tmp_49                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_50                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL sampCntLessthanVector            : std_logic;
  SIGNAL tmp_51                           : std_logic;
  SIGNAL tmp_52                           : std_logic;
  SIGNAL obj_readyDataDelay_4             : std_logic;
  SIGNAL s                                : std_logic;
  SIGNAL obj_LGaurdSub1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL numLgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL obj_LGrdSig                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_53                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_54                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_LGaurdSub1_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_RGaurdSub1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL numRgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL obj_RGrdSig                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_55                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_56                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_RGaurdSub1_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validReadyDelay              : std_logic;
  SIGNAL obj_fftLenReadyDelay             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_cpLenReadyDelay              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_lgGrdReadyDelay              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_rgGrdReadyDelay              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2                      : std_logic;
  SIGNAL varargout_3                      : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_5                      : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_6                      : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_1                    : std_logic;
  SIGNAL varargout_3_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_4                      : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_5_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_1_re_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_1_im_2                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL varargout_2_2                    : std_logic;
  SIGNAL varargout_1_re_3                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_1_im_3                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_2_3                    : std_logic;
  SIGNAL varargout_3_2                    : std_logic;
  SIGNAL varargout_1_re_signed            : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL varargout_1_im_signed            : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_dataDelay1_re                : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_dataDelay1_im                : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_validDelay1                  : std_logic;
  SIGNAL tmp_57                           : std_logic;
  SIGNAL tmp_58                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_3_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_fftInFFTDelayBal             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel                              : std_logic;
  SIGNAL obj_countReg                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_countReg_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_countReg_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_59                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p342tmp_add_temp                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL s_1                              : std_logic;
  SIGNAL tmp_60                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_61                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_62                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL s_2                              : std_logic;
  SIGNAL sel_1                            : std_logic;
  SIGNAL out_rsvd_2                       : std_logic;
  SIGNAL sel_2                            : std_logic;
  SIGNAL sel_2_1                          : std_logic;
  SIGNAL obj_index                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index_2                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_63                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p337tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL s_3                              : std_logic;
  SIGNAL tmp_64                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_65                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_66                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_67                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_68                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p330tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p330tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_69                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_FFTReg                       : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_70                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_FFTReg_1                     : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_4                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_index1                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index1_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index1_2                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_71                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p347tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL s_5                              : std_logic;
  SIGNAL tmp_72                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_73                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_74                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_75                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p160tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p160tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_FFTRegDelay                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_FFTRegDelay_1                : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_76                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_77                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_78                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p157tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p157tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_79                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_80                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_LGrdInFFTDelayBal            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel_3                            : std_logic;
  SIGNAL sel_4                            : std_logic;
  SIGNAL out_rsvd_3                       : std_logic;
  SIGNAL sel_2_2                          : std_logic;
  SIGNAL sel_2_3                          : std_logic;
  SIGNAL tmp_81                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p331tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p331tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_82                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_LGrdReg                      : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_83                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_LGrdReg_1                    : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_6                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_84                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p161tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p161tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_LGrdRegDelay                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_LGrdRegDelay_1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_85                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_86                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_87                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p158tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p158tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_88                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_89                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_5_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_RGrdInFFTDelayBal            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel_5                            : std_logic;
  SIGNAL sel_6                            : std_logic;
  SIGNAL out_rsvd_4                       : std_logic;
  SIGNAL sel_2_4                          : std_logic;
  SIGNAL sel_2_5                          : std_logic;
  SIGNAL tmp_90                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p332tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p332tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_91                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_RGrdReg                      : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_92                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_RGrdReg_1                    : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_7                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_93                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p162tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p162tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL obj_RGrdRegDelay                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_RGrdRegDelay_1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_94                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_95                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_96                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p159tmp_add_temp                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p159tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_97                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_validDelay1_1                : std_logic;
  SIGNAL obj_FFTLenDelay1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_LGDelay1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_RGDelay1                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_4                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_1_im_4                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_2_4                    : std_logic;
  SIGNAL varargout_3_3                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_1                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_5_2                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_5                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_1_im_5                 : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL varargout_2_5                    : std_logic;
  SIGNAL varargout_1_re_signed_1          : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL varargout_1_im_signed_1          : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_dataOut_re                   : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_dataOut_im                   : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL tmp_re                           : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL tmp_im                           : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_dataOut_re_1                 : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_dataOut_im_1                 : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL obj_validOut                     : std_logic;
  SIGNAL tmp_98                           : std_logic;
  SIGNAL obj_validOut_1                   : std_logic;
  SIGNAL obj_readyLast                    : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL p286obj_readyLast_sub_cast       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL p286obj_readyLast_sub_cast_1     : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p286obj_readyLast_sub_temp       : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL p286obj_readyLast_cast           : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL tmp_99                           : std_logic;
  SIGNAL obj_readyFlag                    : std_logic;
  SIGNAL obj_readyFlag_1                  : std_logic;
  SIGNAL obj_readyFlag_2                  : std_logic;
  SIGNAL obj_readyFlag_3                  : std_logic;
  SIGNAL s_8                              : std_logic;
  SIGNAL obj_readyFlag_4                  : std_logic;
  SIGNAL tmp_100                          : std_logic;
  SIGNAL tmp_101                          : std_logic;
  SIGNAL tmp_102                          : std_logic;
  SIGNAL tmp_103                          : std_logic;
  SIGNAL obj_readyOut                     : std_logic;
  SIGNAL obj_readyOut_1                   : std_logic;
  SIGNAL tmp_104                          : std_logic;
  SIGNAL obj_readyOut_2                   : std_logic;
  SIGNAL tmp_105                          : std_logic;
  SIGNAL obj_readyOut_3                   : std_logic;
  SIGNAL tmp_106                          : std_logic;
  SIGNAL obj_readyOut_4                   : std_logic;
  SIGNAL tmp_107                          : std_logic;
  SIGNAL obj_readyOut_5                   : std_logic;
  SIGNAL s_9                              : std_logic;
  SIGNAL varargout_3_4                    : std_logic;
  SIGNAL varargout_3_5                    : std_logic;
  SIGNAL tmp_108                          : std_logic;
  SIGNAL tmp_109                          : std_logic;

BEGIN
  u_CPRemoval_stage1 : rx_demod_optimized_src_CPRemoval_stage1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => std_logic_vector(obj_dataReadyDelay_re),  -- sfix16_En14
              varargin_1_im => std_logic_vector(obj_dataReadyDelay_im),  -- sfix16_En14
              varargin_2 => obj_validReadyDelay,
              varargin_3 => std_logic_vector(obj_fftLenReadyDelay),  -- ufix10
              varargin_5 => std_logic_vector(obj_cpLenReadyDelay),  -- ufix10
              varargin_6 => std_logic_vector(obj_lgGrdReadyDelay),  -- ufix10
              varargin_7 => std_logic_vector(obj_rgGrdReadyDelay),  -- ufix10
              varargin_8 => reset,
              varargout_1_re => varargout_1_re,  -- sfix16_En14
              varargout_1_im => varargout_1_im,  -- sfix16_En14
              varargout_2 => varargout_2,
              varargout_3 => varargout_3,  -- ufix10
              varargout_5 => varargout_5,  -- ufix10
              varargout_6 => varargout_6  -- ufix10
              );

  u_SamplesRepetition : rx_demod_optimized_src_SamplesRepetition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re,  -- sfix16_En14
              varargin_1_im => varargout_1_im,  -- sfix16_En14
              varargin_2 => varargout_2,
              varargin_3 => varargout_3,  -- ufix10
              varargin_4 => varargout_5,  -- ufix10
              varargin_5 => varargout_6,  -- ufix10
              varargin_6 => reset,
              varargout_1_re => varargout_1_re_1,  -- sfix16_En14
              varargout_1_im => varargout_1_im_1,  -- sfix16_En14
              varargout_2 => varargout_2_1,
              varargout_3 => varargout_3_1,  -- ufix9
              varargout_4 => varargout_4,  -- ufix9
              varargout_5 => varargout_5_1  -- ufix9
              );

  u_HDLFFTShift : rx_demod_optimized_src_HDLFFTShift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_1,  -- sfix16_En14
              varargin_1_im => varargout_1_im_1,  -- sfix16_En14
              varargin_2 => varargout_2_1,
              varargin_3 => reset,
              varargout_1_re => varargout_1_re_2,  -- sfix16_En14
              varargout_1_im => varargout_1_im_2,  -- sfix16_En14
              varargout_2 => varargout_2_2
              );

  u_dsphdl_FFT : rx_demod_optimized_src_dsphdl_FFT
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              dataIn_re => varargout_1_re_2,  -- sfix16_En14
              dataIn_im => varargout_1_im_2,  -- sfix16_En14
              validIn => varargout_2_2,
              syncReset => reset,
              dataOut_re => varargout_1_re_3,  -- sfix24_En14
              dataOut_im => varargout_1_im_3,  -- sfix24_En14
              startOut => varargout_2_3,
              validOut => varargout_3_2
              );

  u_DownSampler : rx_demod_optimized_src_DownSampler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => std_logic_vector(obj_dataDelay1_re),  -- sfix24_En14
              varargin_1_im => std_logic_vector(obj_dataDelay1_im),  -- sfix24_En14
              varargin_2 => obj_validDelay1_1,
              varargin_3 => std_logic_vector(obj_FFTLenDelay1),  -- ufix10
              varargin_4 => std_logic_vector(obj_LGDelay1),  -- ufix10
              varargin_5 => std_logic_vector(obj_RGDelay1),  -- ufix10
              varargin_6 => reset,
              varargout_1_re => varargout_1_re_4,  -- sfix24_En14
              varargout_1_im => varargout_1_im_4,  -- sfix24_En14
              varargout_2 => varargout_2_4,
              varargout_3 => varargout_3_3,  -- ufix10
              varargout_4 => varargout_4_1,  -- ufix10
              varargout_5 => varargout_5_2  -- ufix10
              );

  u_SubcarrierSelector : rx_demod_optimized_src_SubcarrierSelector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_4,  -- sfix24_En14
              varargin_1_im => varargout_1_im_4,  -- sfix24_En14
              varargin_2 => varargout_2_4,
              varargin_3 => varargout_3_3,  -- ufix10
              varargin_4 => varargout_4_1,  -- ufix10
              varargin_5 => varargout_5_2,  -- ufix10
              varargin_6 => reset,
              varargout_1_re => varargout_1_re_5,  -- sfix24_En14
              varargout_1_im => varargout_1_im_5,  -- sfix24_En14
              varargout_2 => varargout_2_5
              );

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  obj_dataReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataReadyDelay_re <= to_signed(16#0000#, 16);
        obj_dataReadyDelay_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        obj_dataReadyDelay_re <= data_re_signed;
        obj_dataReadyDelay_im <= data_im_signed;
      END IF;
    END IF;
  END PROCESS obj_dataReadyDelay_reg_process;


  frstVldANDRdyN <= '0';

  frstVldANDRdyN_1 <= '1';

  obj_validLowCount <= to_unsigned(16#000#, 11);

  obj_validLowCount_1 <= to_unsigned(16#000#, 11);

  obj_maxFFTMinusVec <= to_unsigned(16#0FF#, 11);

  
  tmp <= obj_maxFFTMinusVec_1 WHEN reset = '0' ELSE
      obj_maxFFTMinusVec;

  obj_maxFFTMinusVec_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_maxFFTMinusVec_1 <= to_unsigned(16#0FF#, 11);
      ELSIF enb_1_2_0 = '1' THEN
        obj_maxFFTMinusVec_1 <= tmp;
      END IF;
    END IF;
  END PROCESS obj_maxFFTMinusVec_reg_process;


  obj_validLowFlag <= '0';

  obj_validLowFlag_1 <= '1';

  obj_validLowFlag_2 <= '0';

  obj_validLowFlag_3 <= '0';

  obj_validLowFlag_4 <= '1';

  vldHvldL <= '0';

  vldHvldL_1 <= '1';

  obj_firstValidHighFlag <= '0';

  obj_firstValidHighFlag_1 <= '0';

  obj_firstValidHighFlag_2 <= '1';

  frstVldANDRdy <= '0';

  frstVldANDRdy_1 <= '1';

  obj_CPLength1 <= to_unsigned(16#010#, 10);

  CPLen_unsigned <= unsigned(CPLen);

  obj_CPLengthSig <= resize(CPLen_unsigned, 10);

  obj_validHighFlag <= '0';

  obj_validHighFlag_1 <= '0';

  obj_validHighFlag_2 <= '0';

  obj_validHighFlag_3 <= '1';

  vldHvldLN <= '0';

  vldHvldLN_1 <= '1';

  obj_validHighCount <= to_unsigned(16#000#, 11);

  samplingSignal <= '0';

  samplingSignal_1 <= '1';

  obj_FFTLength1 <= to_unsigned(16#100#, 10);

  FFTLen_unsigned <= unsigned(FFTLen);

  obj_FFTLengthSig <= resize(FFTLen_unsigned, 10);

  obj_readyDataDelay <= '1';

  obj_readyState <= to_unsigned(16#0#, 2);

  obj_readyState_1 <= to_unsigned(16#0#, 2);

  obj_readyState_2 <= to_unsigned(16#1#, 2);

  obj_readyState_3 <= to_unsigned(16#0#, 2);

  obj_readyState_4 <= to_unsigned(16#0#, 2);

  obj_readyDataDelay_1 <= '0';

  obj_readyDataDelay_2 <= '1';

  obj_readyDataDelay_3 <= '1';

  out_rsvd <= '0';

  out_rsvd_1 <= '1';

  
  tmp_2 <= obj_readyState WHEN tmp_1 = '0' ELSE
      obj_readyState_1;

  
  tmp_4 <= tmp_2 WHEN tmp_3 = '0' ELSE
      obj_readyState_2;

  
  tmp_5 <= tmp_4 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyState_3;

  
  tmp_6 <= tmp_5 WHEN reset = '0' ELSE
      obj_readyState_4;

  obj_readyState_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyState_5 <= to_unsigned(16#0#, 2);
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyState_5 <= tmp_6;
      END IF;
    END IF;
  END PROCESS obj_readyState_reg_process;


  
  tmp_7 <= '1' WHEN obj_readyState_5 = to_unsigned(16#0#, 2) ELSE
      '0';

  
  tmp_8 <= obj_readyDataDelay WHEN tmp_1 = '0' ELSE
      tmp_7;

  
  tmp_9 <= tmp_8 WHEN tmp_3 = '0' ELSE
      obj_readyDataDelay_1;

  
  tmp_11 <= tmp_10 WHEN reset = '0' ELSE
      obj_FFTLength1;

  obj_FFTLength1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTLength1_1 <= to_unsigned(16#100#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTLength1_1 <= tmp_11;
      END IF;
    END IF;
  END PROCESS obj_FFTLength1_reg_process;


  p276tmp_sub_cast <= resize(tmp_12, 12);
  p276tmp_sub_cast_1 <= signed(resize(p276tmp_sub_cast, 13));
  p276tmp_sub_cast_2 <= resize(obj_readyHigh, 12);
  p276tmp_sub_cast_3 <= signed(resize(p276tmp_sub_cast_2, 13));
  p276tmp_sub_temp <= p276tmp_sub_cast_1 - p276tmp_sub_cast_3;
  
  p276tmp_cast <= "000000000000" WHEN p276tmp_sub_temp(12) = '1' ELSE
      unsigned(p276tmp_sub_temp(11 DOWNTO 0));
  
  tmp_13 <= "11111111111" WHEN p276tmp_cast(11) /= '0' ELSE
      p276tmp_cast(10 DOWNTO 0);

  
  tmp_14 <= tmp_12 WHEN tmp_1 = '0' ELSE
      tmp_13;

  
  tmp_16 <= tmp_15 WHEN tmp_1 = '0' ELSE
      obj_validHighFlag;

  
  tmp_17 <= tmp_16 WHEN tmp_3 = '0' ELSE
      tmp_15;

  
  tmp_18 <= tmp_17 WHEN reset = '0' ELSE
      obj_validHighFlag_1;

  obj_validHighFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validHighFlag_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validHighFlag_4 <= tmp_18;
      END IF;
    END IF;
  END PROCESS obj_validHighFlag_reg_process;


  
  tmp_20 <= obj_validHighFlag_4 WHEN tmp_19 = '0' ELSE
      obj_validHighFlag_2;

  
  tmp_22 <= tmp_21 WHEN reset = '0' ELSE
      obj_CPLength1;

  obj_CPLength1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_CPLength1_1 <= to_unsigned(16#010#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_CPLength1_1 <= tmp_22;
      END IF;
    END IF;
  END PROCESS obj_CPLength1_reg_process;


  
  tmp_21 <= obj_CPLength1_1 WHEN tmp_19 = '0' ELSE
      obj_CPLengthSig;

  obj_readyHigh <= resize(tmp_10, 11) + resize(tmp_21, 11);

  p327tmp_add_temp <= resize(obj_validHighCount_1, 12) + to_unsigned(16#001#, 12);
  
  tmp_23 <= "11111111111" WHEN p327tmp_add_temp(11) /= '0' ELSE
      p327tmp_add_temp(10 DOWNTO 0);

  
  tmp_25 <= tmp_24 WHEN tmp_1 = '0' ELSE
      obj_validLowFlag;

  
  tmp_26 <= tmp_25 WHEN tmp_3 = '0' ELSE
      tmp_24;

  
  tmp_27 <= tmp_26 WHEN FFTeqMaxFFT = '0' ELSE
      obj_validLowFlag_1;

  
  tmp_28 <= tmp_27 WHEN reset = '0' ELSE
      obj_validLowFlag_2;

  obj_validLowFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validLowFlag_5 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validLowFlag_5 <= tmp_28;
      END IF;
    END IF;
  END PROCESS obj_validLowFlag_reg_process;


  
  tmp_29 <= obj_validLowFlag_5 WHEN tmp_19 = '0' ELSE
      obj_validLowFlag_3;

  p288obj_readyLow_sub_cast <= resize(obj_maxFFTMinusVec_1, 12);
  p288obj_readyLow_sub_cast_1 <= signed(resize(p288obj_readyLow_sub_cast, 13));
  p288obj_readyLow_sub_cast_2 <= resize(tmp_10, 12);
  p288obj_readyLow_sub_cast_3 <= signed(resize(p288obj_readyLow_sub_cast_2, 13));
  p288obj_readyLow_sub_temp <= p288obj_readyLow_sub_cast_1 - p288obj_readyLow_sub_cast_3;
  
  p288obj_readyLow_cast <= "000000000000" WHEN p288obj_readyLow_sub_temp(12) = '1' ELSE
      unsigned(p288obj_readyLow_sub_temp(11 DOWNTO 0));
  
  obj_readyLow <= "11111111111" WHEN p288obj_readyLow_cast(11) /= '0' ELSE
      p288obj_readyLow_cast(10 DOWNTO 0);

  p328tmp_add_temp <= resize(obj_validLowCount_2, 12) + to_unsigned(16#001#, 12);
  
  tmp_30 <= "11111111111" WHEN p328tmp_add_temp(11) /= '0' ELSE
      p328tmp_add_temp(10 DOWNTO 0);

  
  tmp_32 <= tmp_31 WHEN tmp_1 = '0' ELSE
      obj_validLowCount;

  
  tmp_33 <= tmp_32 WHEN tmp_3 = '0' ELSE
      tmp_31;

  
  tmp_34 <= tmp_33 WHEN reset = '0' ELSE
      obj_validLowCount_1;

  obj_validLowCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validLowCount_2 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_2_0 = '1' THEN
        obj_validLowCount_2 <= tmp_34;
      END IF;
    END IF;
  END PROCESS obj_validLowCount_reg_process;


  tmp_37 <= tmp_35 AND ( NOT tmp_36);

  
  tmp_38 <= frstVldANDRdyN WHEN tmp_37 = '0' ELSE
      frstVldANDRdyN_1;

  
  tmp_31 <= obj_validLowCount_2 WHEN tmp_38 = '0' ELSE
      tmp_30;

  
  tmp_39 <= '1' WHEN tmp_31 >= obj_readyLow ELSE
      '0';

  
  tmp_24 <= tmp_29 WHEN tmp_39 = '0' ELSE
      obj_validLowFlag_4;

  tmp_40 <= tmp_15 AND tmp_24;

  
  tmp_1 <= vldHvldL WHEN tmp_40 = '0' ELSE
      vldHvldL_1;

  
  tmp_41 <= tmp_35 WHEN tmp_1 = '0' ELSE
      obj_firstValidHighFlag;

  
  tmp_42 <= tmp_41 WHEN tmp_3 = '0' ELSE
      tmp_35;

  
  tmp_43 <= tmp_42 WHEN reset = '0' ELSE
      obj_firstValidHighFlag_1;

  obj_firstValidHighFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_firstValidHighFlag_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_firstValidHighFlag_3 <= tmp_43;
      END IF;
    END IF;
  END PROCESS obj_firstValidHighFlag_reg_process;


  tmp_44 <= tmp_36 AND ( NOT obj_firstValidHighFlag_3);

  
  tmp_35 <= obj_firstValidHighFlag_3 WHEN tmp_44 = '0' ELSE
      obj_firstValidHighFlag_2;

  tmp_45 <= tmp_35 AND tmp_36;

  
  tmp_46 <= frstVldANDRdy WHEN tmp_45 = '0' ELSE
      frstVldANDRdy_1;

  
  tmp_12 <= obj_validHighCount_1 WHEN tmp_46 = '0' ELSE
      tmp_23;

  
  tmp_47 <= '1' WHEN tmp_12 >= obj_readyHigh ELSE
      '0';

  
  tmp_15 <= tmp_20 WHEN tmp_47 = '0' ELSE
      obj_validHighFlag_3;

  tmp_48 <= tmp_15 AND ( NOT tmp_24);

  
  tmp_3 <= vldHvldLN WHEN tmp_48 = '0' ELSE
      vldHvldLN_1;

  
  tmp_49 <= tmp_14 WHEN tmp_3 = '0' ELSE
      tmp_12;

  
  tmp_50 <= tmp_49 WHEN reset = '0' ELSE
      obj_validHighCount;

  obj_validHighCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validHighCount_1 <= to_unsigned(16#000#, 11);
      ELSIF enb_1_2_0 = '1' THEN
        obj_validHighCount_1 <= tmp_50;
      END IF;
    END IF;
  END PROCESS obj_validHighCount_reg_process;


  sampCntLessthanVector <= hdlcoder_to_stdlogic(obj_validHighCount_1 < to_unsigned(16#001#, 11)) AND tmp_36;

  
  tmp_19 <= samplingSignal WHEN sampCntLessthanVector = '0' ELSE
      samplingSignal_1;

  
  tmp_10 <= obj_FFTLength1_1 WHEN tmp_19 = '0' ELSE
      obj_FFTLengthSig;

  
  FFTeqMaxFFT <= '1' WHEN tmp_10 = to_unsigned(16#100#, 10) ELSE
      '0';

  
  tmp_51 <= tmp_9 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyDataDelay_2;

  
  tmp_52 <= tmp_51 WHEN reset = '0' ELSE
      obj_readyDataDelay_3;

  obj_readyDataDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyDataDelay_4 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyDataDelay_4 <= tmp_52;
      END IF;
    END IF;
  END PROCESS obj_readyDataDelay_reg_process;


  s <= (obj_readyDataDelay_4 AND valid) AND ( NOT reset);

  
  tmp_36 <= out_rsvd WHEN s = '0' ELSE
      out_rsvd_1;

  obj_LGaurdSub1 <= to_unsigned(16#006#, 10);

  numLgSc_unsigned <= unsigned(numLgSc);

  obj_LGrdSig <= resize(numLgSc_unsigned, 10);

  
  tmp_54 <= tmp_53 WHEN reset = '0' ELSE
      obj_LGaurdSub1;

  obj_LGaurdSub1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGaurdSub1_1 <= to_unsigned(16#006#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_LGaurdSub1_1 <= tmp_54;
      END IF;
    END IF;
  END PROCESS obj_LGaurdSub1_reg_process;


  
  tmp_53 <= obj_LGaurdSub1_1 WHEN tmp_19 = '0' ELSE
      obj_LGrdSig;

  obj_RGaurdSub1 <= to_unsigned(16#005#, 10);

  numRgSc_unsigned <= unsigned(numRgSc);

  obj_RGrdSig <= resize(numRgSc_unsigned, 10);

  
  tmp_56 <= tmp_55 WHEN reset = '0' ELSE
      obj_RGaurdSub1;

  obj_RGaurdSub1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGaurdSub1_1 <= to_unsigned(16#005#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_RGaurdSub1_1 <= tmp_56;
      END IF;
    END IF;
  END PROCESS obj_RGaurdSub1_reg_process;


  
  tmp_55 <= obj_RGaurdSub1_1 WHEN tmp_19 = '0' ELSE
      obj_RGrdSig;

  obj_validReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validReadyDelay <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validReadyDelay <= tmp_36;
      END IF;
    END IF;
  END PROCESS obj_validReadyDelay_reg_process;


  obj_fftLenReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_fftLenReadyDelay <= to_unsigned(16#040#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_fftLenReadyDelay <= tmp_10;
      END IF;
    END IF;
  END PROCESS obj_fftLenReadyDelay_reg_process;


  obj_cpLenReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_cpLenReadyDelay <= to_unsigned(16#010#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_cpLenReadyDelay <= tmp_21;
      END IF;
    END IF;
  END PROCESS obj_cpLenReadyDelay_reg_process;


  obj_lgGrdReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_lgGrdReadyDelay <= to_unsigned(16#006#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_lgGrdReadyDelay <= tmp_53;
      END IF;
    END IF;
  END PROCESS obj_lgGrdReadyDelay_reg_process;


  obj_rgGrdReadyDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_rgGrdReadyDelay <= to_unsigned(16#005#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_rgGrdReadyDelay <= tmp_55;
      END IF;
    END IF;
  END PROCESS obj_rgGrdReadyDelay_reg_process;


  varargout_1_re_signed <= signed(varargout_1_re_3);

  varargout_1_im_signed <= signed(varargout_1_im_3);

  obj_dataDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataDelay1_re <= to_signed(16#000000#, 24);
        obj_dataDelay1_im <= to_signed(16#000000#, 24);
      ELSIF enb_1_2_0 = '1' THEN
        obj_dataDelay1_re <= varargout_1_re_signed;
        obj_dataDelay1_im <= varargout_1_im_signed;
      END IF;
    END IF;
  END PROCESS obj_dataDelay1_reg_process;


  obj_validDelay1 <= '0';

  
  tmp_57 <= varargout_3_2 WHEN reset = '0' ELSE
      obj_validDelay1;

  tmp_58 <= to_unsigned(16#040#, 10);

  varargout_3_unsigned <= unsigned(varargout_3_1);

  obj_fftInFFTDelayBal <= resize(varargout_3_unsigned, 10);

  sel <= '0';

  obj_countReg <= to_unsigned(16#000#, 10);

  obj_countReg_1 <= to_unsigned(16#000#, 10);

  p342tmp_add_temp <= resize(obj_countReg_2, 12) + to_unsigned(16#001#, 12);
  
  tmp_59 <= "1111111111" WHEN p342tmp_add_temp(11 DOWNTO 10) /= "00" ELSE
      p342tmp_add_temp(9 DOWNTO 0);

  
  s_1 <= '1' WHEN resize(obj_countReg_2, 12) = to_unsigned(16#0FF#, 12) ELSE
      '0';

  
  tmp_60 <= tmp_59 WHEN s_1 = '0' ELSE
      obj_countReg;

  
  tmp_61 <= obj_countReg_2 WHEN varargout_2_2 = '0' ELSE
      tmp_60;

  
  tmp_62 <= tmp_61 WHEN reset = '0' ELSE
      obj_countReg_1;

  obj_countReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_countReg_2 <= to_unsigned(16#000#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_countReg_2 <= tmp_62;
      END IF;
    END IF;
  END PROCESS obj_countReg_reg_process;


  
  s_2 <= '1' WHEN obj_countReg_2 = to_unsigned(16#000#, 10) ELSE
      '0';

  sel_1 <= '0';

  out_rsvd_2 <= '1';

  
  sel_2 <= sel_1 WHEN s_2 = '0' ELSE
      out_rsvd_2;

  
  sel_2_1 <= sel WHEN varargout_2_2 = '0' ELSE
      sel_2;

  obj_index <= to_unsigned(16#00#, 7);

  obj_index_1 <= to_unsigned(16#00#, 7);

  p337tmp_add_temp <= resize(obj_index_2, 8) + to_unsigned(16#01#, 8);
  
  tmp_63 <= "1111111" WHEN p337tmp_add_temp(7) /= '0' ELSE
      p337tmp_add_temp(6 DOWNTO 0);

  
  s_3 <= '1' WHEN obj_index_2 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_64 <= tmp_63 WHEN s_3 = '0' ELSE
      obj_index;

  
  tmp_65 <= obj_index_2 WHEN s_2 = '0' ELSE
      tmp_64;

  
  tmp_66 <= obj_index_2 WHEN varargout_2_2 = '0' ELSE
      tmp_65;

  
  tmp_67 <= tmp_66 WHEN reset = '0' ELSE
      obj_index_1;

  obj_index_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index_2 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        obj_index_2 <= tmp_67;
      END IF;
    END IF;
  END PROCESS obj_index_reg_process;


  p330tmp_add_temp <= resize(obj_index_2, 8) + to_unsigned(16#01#, 8);
  p330tmp_sub_cast <= signed(resize(p330tmp_add_temp, 32));
  tmp_68 <= p330tmp_sub_cast - 1;

  obj_FFTReg <= (OTHERS => tmp_58);

  
  tmp_70 <= tmp_69 WHEN reset = '0' ELSE
      obj_FFTReg;

  obj_FFTReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTReg_1 <= (OTHERS => to_unsigned(16#040#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTReg_1 <= tmp_70;
      END IF;
    END IF;
  END PROCESS obj_FFTReg_reg_process;


  p180_output : PROCESS (obj_FFTReg_1, obj_fftInFFTDelayBal, sel_2_1, tmp_68)
  BEGIN
    s_4 <= obj_FFTReg_1;
    IF sel_2_1 = '1' THEN 
      s_4(to_integer(tmp_68)) <= obj_fftInFFTDelayBal;
    END IF;
  END PROCESS p180_output;


  
  tmp_69 <= s_4 WHEN varargout_2_2 = '0' ELSE
      s_4;

  obj_index1 <= to_unsigned(16#00#, 7);

  obj_index1_1 <= to_unsigned(16#00#, 7);

  p347tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  
  tmp_71 <= "1111111" WHEN p347tmp_add_temp(7) /= '0' ELSE
      p347tmp_add_temp(6 DOWNTO 0);

  
  s_5 <= '1' WHEN obj_index1_2 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_72 <= tmp_71 WHEN s_5 = '0' ELSE
      obj_index1;

  
  tmp_73 <= obj_index1_2 WHEN varargout_2_3 = '0' ELSE
      tmp_72;

  
  tmp_74 <= tmp_73 WHEN reset = '0' ELSE
      obj_index1_1;

  obj_index1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index1_2 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        obj_index1_2 <= tmp_74;
      END IF;
    END IF;
  END PROCESS obj_index1_reg_process;


  p160tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  p160tmp_sub_cast <= signed(resize(p160tmp_add_temp, 32));
  tmp_75 <= tmp_69(to_integer(p160tmp_sub_cast - 1));

  obj_FFTRegDelay <= to_unsigned(16#040#, 10);

  
  tmp_76 <= obj_FFTRegDelay_1 WHEN varargout_2_3 = '0' ELSE
      tmp_75;

  
  tmp_77 <= tmp_76 WHEN reset = '0' ELSE
      obj_FFTRegDelay;

  obj_FFTRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTRegDelay_1 <= to_unsigned(16#040#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTRegDelay_1 <= tmp_77;
      END IF;
    END IF;
  END PROCESS obj_FFTRegDelay_reg_process;


  p157tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  p157tmp_sub_cast <= signed(resize(p157tmp_add_temp, 32));
  tmp_78 <= tmp_69(to_integer(p157tmp_sub_cast - 1));

  
  tmp_79 <= obj_FFTRegDelay_1 WHEN varargout_2_3 = '0' ELSE
      tmp_78;

  tmp_80 <= to_unsigned(16#006#, 10);

  varargout_4_unsigned <= unsigned(varargout_4);

  obj_LGrdInFFTDelayBal <= resize(varargout_4_unsigned, 10);

  sel_3 <= '0';

  sel_4 <= '0';

  out_rsvd_3 <= '1';

  
  sel_2_2 <= sel_4 WHEN s_2 = '0' ELSE
      out_rsvd_3;

  
  sel_2_3 <= sel_3 WHEN varargout_2_2 = '0' ELSE
      sel_2_2;

  p331tmp_add_temp <= resize(obj_index_2, 8) + to_unsigned(16#01#, 8);
  p331tmp_sub_cast <= signed(resize(p331tmp_add_temp, 32));
  tmp_81 <= p331tmp_sub_cast - 1;

  obj_LGrdReg <= (OTHERS => tmp_80);

  
  tmp_83 <= tmp_82 WHEN reset = '0' ELSE
      obj_LGrdReg;

  obj_LGrdReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGrdReg_1 <= (OTHERS => to_unsigned(16#006#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_LGrdReg_1 <= tmp_83;
      END IF;
    END IF;
  END PROCESS obj_LGrdReg_reg_process;


  p172_output : PROCESS (obj_LGrdInFFTDelayBal, obj_LGrdReg_1, sel_2_3, tmp_81)
  BEGIN
    s_6 <= obj_LGrdReg_1;
    IF sel_2_3 = '1' THEN 
      s_6(to_integer(tmp_81)) <= obj_LGrdInFFTDelayBal;
    END IF;
  END PROCESS p172_output;


  
  tmp_82 <= s_6 WHEN varargout_2_2 = '0' ELSE
      s_6;

  p161tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  p161tmp_sub_cast <= signed(resize(p161tmp_add_temp, 32));
  tmp_84 <= tmp_82(to_integer(p161tmp_sub_cast - 1));

  obj_LGrdRegDelay <= to_unsigned(16#006#, 10);

  
  tmp_85 <= obj_LGrdRegDelay_1 WHEN varargout_2_3 = '0' ELSE
      tmp_84;

  
  tmp_86 <= tmp_85 WHEN reset = '0' ELSE
      obj_LGrdRegDelay;

  obj_LGrdRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGrdRegDelay_1 <= to_unsigned(16#006#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_LGrdRegDelay_1 <= tmp_86;
      END IF;
    END IF;
  END PROCESS obj_LGrdRegDelay_reg_process;


  p158tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  p158tmp_sub_cast <= signed(resize(p158tmp_add_temp, 32));
  tmp_87 <= tmp_82(to_integer(p158tmp_sub_cast - 1));

  
  tmp_88 <= obj_LGrdRegDelay_1 WHEN varargout_2_3 = '0' ELSE
      tmp_87;

  tmp_89 <= to_unsigned(16#005#, 10);

  varargout_5_unsigned <= unsigned(varargout_5_1);

  obj_RGrdInFFTDelayBal <= resize(varargout_5_unsigned, 10);

  sel_5 <= '0';

  sel_6 <= '0';

  out_rsvd_4 <= '1';

  
  sel_2_4 <= sel_6 WHEN s_2 = '0' ELSE
      out_rsvd_4;

  
  sel_2_5 <= sel_5 WHEN varargout_2_2 = '0' ELSE
      sel_2_4;

  p332tmp_add_temp <= resize(obj_index_2, 8) + to_unsigned(16#01#, 8);
  p332tmp_sub_cast <= signed(resize(p332tmp_add_temp, 32));
  tmp_90 <= p332tmp_sub_cast - 1;

  obj_RGrdReg <= (OTHERS => tmp_89);

  
  tmp_92 <= tmp_91 WHEN reset = '0' ELSE
      obj_RGrdReg;

  obj_RGrdReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGrdReg_1 <= (OTHERS => to_unsigned(16#005#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_RGrdReg_1 <= tmp_92;
      END IF;
    END IF;
  END PROCESS obj_RGrdReg_reg_process;


  p176_output : PROCESS (obj_RGrdInFFTDelayBal, obj_RGrdReg_1, sel_2_5, tmp_90)
  BEGIN
    s_7 <= obj_RGrdReg_1;
    IF sel_2_5 = '1' THEN 
      s_7(to_integer(tmp_90)) <= obj_RGrdInFFTDelayBal;
    END IF;
  END PROCESS p176_output;


  
  tmp_91 <= s_7 WHEN varargout_2_2 = '0' ELSE
      s_7;

  p162tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  p162tmp_sub_cast <= signed(resize(p162tmp_add_temp, 32));
  tmp_93 <= tmp_91(to_integer(p162tmp_sub_cast - 1));

  obj_RGrdRegDelay <= to_unsigned(16#005#, 10);

  
  tmp_94 <= obj_RGrdRegDelay_1 WHEN varargout_2_3 = '0' ELSE
      tmp_93;

  
  tmp_95 <= tmp_94 WHEN reset = '0' ELSE
      obj_RGrdRegDelay;

  obj_RGrdRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGrdRegDelay_1 <= to_unsigned(16#005#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_RGrdRegDelay_1 <= tmp_95;
      END IF;
    END IF;
  END PROCESS obj_RGrdRegDelay_reg_process;


  p159tmp_add_temp <= resize(obj_index1_2, 8) + to_unsigned(16#01#, 8);
  p159tmp_sub_cast <= signed(resize(p159tmp_add_temp, 32));
  tmp_96 <= tmp_91(to_integer(p159tmp_sub_cast - 1));

  
  tmp_97 <= obj_RGrdRegDelay_1 WHEN varargout_2_3 = '0' ELSE
      tmp_96;

  obj_validDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validDelay1_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validDelay1_1 <= tmp_57;
      END IF;
    END IF;
  END PROCESS obj_validDelay1_reg_process;


  obj_FFTLenDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTLenDelay1 <= to_unsigned(16#040#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTLenDelay1 <= tmp_79;
      END IF;
    END IF;
  END PROCESS obj_FFTLenDelay1_reg_process;


  obj_LGDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_LGDelay1 <= to_unsigned(16#006#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_LGDelay1 <= tmp_88;
      END IF;
    END IF;
  END PROCESS obj_LGDelay1_reg_process;


  obj_RGDelay1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_RGDelay1 <= to_unsigned(16#005#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_RGDelay1 <= tmp_97;
      END IF;
    END IF;
  END PROCESS obj_RGDelay1_reg_process;


  varargout_1_re_signed_1 <= signed(varargout_1_re_5);

  varargout_1_im_signed_1 <= signed(varargout_1_im_5);

  obj_dataOut_re <= to_signed(16#000000#, 24);
  obj_dataOut_im <= to_signed(16#000000#, 24);

  
  tmp_re <= varargout_1_re_signed_1 WHEN reset = '0' ELSE
      obj_dataOut_re;
  
  tmp_im <= varargout_1_im_signed_1 WHEN reset = '0' ELSE
      obj_dataOut_im;

  obj_dataOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataOut_re_1 <= to_signed(16#000000#, 24);
        obj_dataOut_im_1 <= to_signed(16#000000#, 24);
      ELSIF enb_1_2_0 = '1' THEN
        obj_dataOut_re_1 <= tmp_re;
        obj_dataOut_im_1 <= tmp_im;
      END IF;
    END IF;
  END PROCESS obj_dataOut_reg_process;


  obj_validOut <= '0';

  
  tmp_98 <= varargout_2_5 WHEN reset = '0' ELSE
      obj_validOut;

  obj_validOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validOut_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validOut_1 <= tmp_98;
      END IF;
    END IF;
  END PROCESS obj_validOut_reg_process;


  p286obj_readyLast_sub_cast <= resize(obj_readyHigh, 12);
  p286obj_readyLast_sub_cast_1 <= signed(resize(p286obj_readyLast_sub_cast, 13));
  p286obj_readyLast_sub_temp <= p286obj_readyLast_sub_cast_1 - to_signed(16#0001#, 13);
  
  p286obj_readyLast_cast <= "000000000000" WHEN p286obj_readyLast_sub_temp(12) = '1' ELSE
      unsigned(p286obj_readyLast_sub_temp(11 DOWNTO 0));
  obj_readyLast <= resize(p286obj_readyLast_cast, 17);

  
  tmp_99 <= '1' WHEN (resize(tmp_12, 17) >= obj_readyLast) AND (tmp_12 < obj_readyHigh) ELSE
      '0';

  obj_readyFlag <= '0';

  obj_readyFlag_1 <= '1';

  obj_readyFlag_2 <= '0';

  obj_readyFlag_3 <= '0';

  
  tmp_100 <= obj_readyFlag_4 WHEN s_8 = '0' ELSE
      obj_readyFlag;

  
  tmp_101 <= tmp_100 WHEN tmp_99 = '0' ELSE
      obj_readyFlag_1;

  
  tmp_102 <= tmp_101 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyFlag_2;

  
  tmp_103 <= tmp_102 WHEN reset = '0' ELSE
      obj_readyFlag_3;

  obj_readyFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyFlag_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyFlag_4 <= tmp_103;
      END IF;
    END IF;
  END PROCESS obj_readyFlag_reg_process;


  s_8 <= obj_readyFlag_4 AND valid;

  obj_readyOut <= '1';

  obj_readyOut_1 <= '1';

  
  tmp_104 <= obj_readyOut WHEN tmp_1 = '0' ELSE
      obj_readyOut_1;

  obj_readyOut_2 <= '0';

  
  tmp_105 <= tmp_104 WHEN tmp_3 = '0' ELSE
      obj_readyOut_2;

  obj_readyOut_3 <= '1';

  
  tmp_106 <= tmp_105 WHEN FFTeqMaxFFT = '0' ELSE
      obj_readyOut_3;

  obj_readyOut_4 <= '1';

  
  tmp_107 <= tmp_106 WHEN reset = '0' ELSE
      obj_readyOut_4;

  obj_readyOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyOut_5 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyOut_5 <= tmp_107;
      END IF;
    END IF;
  END PROCESS obj_readyOut_reg_process;


  s_9 <=  NOT obj_validLowFlag_5;

  varargout_3_4 <= '1';

  varargout_3_5 <= '0';

  
  tmp_108 <= varargout_3_4 WHEN s_9 = '0' ELSE
      varargout_3_5;

  
  tmp_109 <= obj_readyOut_5 WHEN s_8 = '0' ELSE
      tmp_108;

  data_re_1 <= std_logic_vector(obj_dataOut_re_1);

  data_im_1 <= std_logic_vector(obj_dataOut_im_1);

  valid_1 <= obj_validOut_1;

  ready <= tmp_109;

END rtl;

