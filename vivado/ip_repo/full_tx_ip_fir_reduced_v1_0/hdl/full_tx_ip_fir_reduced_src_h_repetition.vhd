-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_fir_reduced_src_h_repetition.vhd
-- Created: 2024-08-10 09:35:20
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_fir_reduced_src_h_repetition
-- Source Path: HDLTx/full_tx/header_full/h_repetition
-- Hierarchy Level: 2
-- Model version: 4.90
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_fir_reduced_src_h_repetition IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic;
        ctrl_in_end                       :   IN    std_logic;
        ctrl_in_valid                     :   IN    std_logic;
        data_out                          :   OUT   std_logic;
        ctrl_out_end                      :   OUT   std_logic;
        ctrl_out_valid                    :   OUT   std_logic
        );
END full_tx_ip_fir_reduced_src_h_repetition;


ARCHITECTURE rtl OF full_tx_ip_fir_reduced_src_h_repetition IS

  -- Component Declarations
  COMPONENT full_tx_ip_fir_reduced_src_SimpleDualPortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic;
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_ip_fir_reduced_src_Sample_Control_Bus_Creator_block2
    PORT( In2                             :   IN    std_logic;
          In3                             :   IN    std_logic;
          Out1_end                        :   OUT   std_logic;
          Out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_fir_reduced_src_SimpleDualPortRAM_singlebit
    USE ENTITY work.full_tx_ip_fir_reduced_src_SimpleDualPortRAM_singlebit(rtl);

  FOR ALL : full_tx_ip_fir_reduced_src_Sample_Control_Bus_Creator_block2
    USE ENTITY work.full_tx_ip_fir_reduced_src_Sample_Control_Bus_Creator_block2(rtl);

  -- Signals
  SIGNAL datain                           : std_logic;
  SIGNAL end_rsvd                         : std_logic;
  SIGNAL count_step                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from                       : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL HDL_Counter3_out2                : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL addrA                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL range_hit                        : std_logic;
  SIGNAL count                            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Unit_Delay_Enabled_Synchronous1_out1 : std_logic;
  SIGNAL count_1                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous1_ectrl : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL HDL_Counter2_ctrl_const_out      : std_logic;
  SIGNAL HDL_Counter2_ctrl_delay_out      : std_logic;
  SIGNAL HDL_Counter2_Initial_Val_out     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL addrB_valid                      : std_logic;
  SIGNAL count_step_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL HDL_Counter2_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_2                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_3                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL HDL_Counter2_out                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Simple_Dual_Port_RAM_out1        : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Sample_Control_Bus_Creator_out1_end : std_logic;
  SIGNAL Sample_Control_Bus_Creator_out1_valid : std_logic;

BEGIN
  u_Simple_Dual_Port_RAM : full_tx_ip_fir_reduced_src_SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb => enb,
              wr_din => datain,
              wr_addr => std_logic_vector(HDL_Counter2_out1),
              wr_en => ctrl_in_valid,
              rd_addr => std_logic_vector(addrA),
              dout => Simple_Dual_Port_RAM_out1
              );

  u_Sample_Control_Bus_Creator : full_tx_ip_fir_reduced_src_Sample_Control_Bus_Creator_block2
    PORT MAP( In2 => Delay4_out1,
              In3 => Switch1_out1,
              Out1_end => Sample_Control_Bus_Creator_out1_end,
              Out1_valid => Sample_Control_Bus_Creator_out1_valid
              );

  datain <= data_in;

  end_rsvd <= ctrl_in_end;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 51
  count_step <= to_unsigned(16#001#, 9);

  count_from <= to_unsigned(16#000#, 9);

  NOT_out1 <=  NOT HDL_Counter3_out2;

  
  range_hit <= '1' WHEN addrA > to_unsigned(16#1FE#, 9) ELSE
      '0';

  count <= addrA + count_step;

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= addrA WHEN Unit_Delay_Enabled_Synchronous1_out1 = '0' ELSE
      count_value;

  HDL_Counter3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        addrA <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        addrA <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  
  need_to_wrap <= '1' WHEN addrA = to_unsigned(16#033#, 9) ELSE
      '0';

  HDL_Counter3_out2 <= need_to_wrap OR range_hit;

  Logical_Operator1_out1 <= end_rsvd OR HDL_Counter3_out2;

  
  Unit_Delay_Enabled_Synchronous1_ectrl <= Unit_Delay_Enabled_Synchronous1_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      NOT_out1;

  Unit_Delay_Enabled_Synchronous1_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay_Enabled_Synchronous1_out1 <= Unit_Delay_Enabled_Synchronous1_ectrl;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous1_lowered_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= Unit_Delay_Enabled_Synchronous1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Logical_Operator2_out1 <=  NOT Delay2_out1;

  HDL_Counter2_ctrl_const_out <= '1';

  HDL_Counter2_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter2_ctrl_delay_out <= '0';
      ELSIF enb = '1' THEN
        HDL_Counter2_ctrl_delay_out <= HDL_Counter2_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_ctrl_delay_process;


  HDL_Counter2_Initial_Val_out <= to_unsigned(16#14E#, 9);

  addrB_valid <= ctrl_in_valid;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 335
  count_step_1 <= to_unsigned(16#001#, 9);

  count_from_1 <= to_unsigned(16#000#, 9);

  count_2 <= HDL_Counter2_out1 + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN HDL_Counter2_out1 = to_unsigned(16#14F#, 9) ELSE
      '0';

  
  count_value_1 <= count_2 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_3 <= HDL_Counter2_out1 WHEN addrB_valid = '0' ELSE
      count_value_1;

  HDL_Counter2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter2_out <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        HDL_Counter2_out <= count_3;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  
  HDL_Counter2_out1 <= HDL_Counter2_Initial_Val_out WHEN HDL_Counter2_ctrl_delay_out = '0' ELSE
      HDL_Counter2_out;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= datain;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  
  Switch_out1 <= Simple_Dual_Port_RAM_out1 WHEN Logical_Operator2_out1 = '0' ELSE
      Delay1_out1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= HDL_Counter3_out2;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator_out1 <=  NOT Delay2_out1;

  valid <= ctrl_in_valid;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= valid;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  Switch1_out1 <= Delay2_out1 WHEN Logical_Operator_out1 = '0' ELSE
      Delay3_out1;

  data_out <= Switch_out1;

  ctrl_out_end <= Sample_Control_Bus_Creator_out1_end;

  ctrl_out_valid <= Sample_Control_Bus_Creator_out1_valid;

END rtl;

