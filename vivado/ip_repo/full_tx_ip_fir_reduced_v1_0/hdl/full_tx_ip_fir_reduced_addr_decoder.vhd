-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_ip_fir_reduced_addr_decoder.vhd
-- Created: 2024-08-10 09:36:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_ip_fir_reduced_addr_decoder
-- Source Path: full_tx_ip_fir_reduced/full_tx_ip_fir_reduced_axi_lite/full_tx_ip_fir_reduced_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_ip_fir_reduced_addr_decoder IS
  PORT( data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        addr_sel_rd                       :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESET                      :   IN    std_logic;  -- ufix1
        IPCORE_GLOBAL_RESET               :   IN    std_logic;  -- ufix1
        AXI4_ACLK                         :   IN    std_logic;
        AXI4_ARESET                       :   IN    std_logic;
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        rd_enb_ack                        :   OUT   std_logic;  -- ufix1
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_reg0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_reg1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_reg2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_reg3                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END full_tx_ip_fir_reduced_addr_decoder;


ARCHITECTURE rtl OF full_tx_ip_fir_reduced_addr_decoder IS

  -- Component Declarations
  COMPONENT full_tx_ip_fir_reduced_addr_decoder_read
    PORT( IPCORE_CLK                      :   IN    std_logic;  -- ufix1
          IPCORE_RESET                    :   IN    std_logic;  -- ufix1
          AXI4_ACLK                       :   IN    std_logic;
          AXI4_ARESET                     :   IN    std_logic;
          addr_sel_rd                     :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          rd_enb                          :   IN    std_logic;  -- ufix1
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          rd_enb_ack                      :   OUT   std_logic;  -- ufix1
          s_data_read                     :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  COMPONENT full_tx_ip_fir_reduced_addr_decoder_write
    PORT( IPCORE_CLK                      :   IN    std_logic;  -- ufix1
          IPCORE_GLOBAL_RESET             :   IN    std_logic;  -- ufix1
          data_write                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          addr_sel                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_enb                          :   IN    std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_reg0                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reg1                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reg2                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_reg3                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_ip_fir_reduced_addr_decoder_read
    USE ENTITY work.full_tx_ip_fir_reduced_addr_decoder_read(rtl);

  FOR ALL : full_tx_ip_fir_reduced_addr_decoder_write
    USE ENTITY work.full_tx_ip_fir_reduced_addr_decoder_write(rtl);

  -- Signals
  SIGNAL s_data_read                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg0_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg1_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg2_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg3_tmp                   : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_full_tx_ip_fir_reduced_addr_decoder_read_inst : full_tx_ip_fir_reduced_addr_decoder_read
    PORT MAP( IPCORE_CLK => IPCORE_CLK,  -- ufix1
              IPCORE_RESET => IPCORE_RESET,  -- ufix1
              AXI4_ACLK => AXI4_ACLK,
              AXI4_ARESET => AXI4_ARESET,
              addr_sel_rd => addr_sel_rd,  -- ufix14
              rd_enb => rd_enb,  -- ufix1
              read_ip_timestamp => read_ip_timestamp,  -- ufix32
              rd_enb_ack => rd_enb_ack,  -- ufix1
              s_data_read => s_data_read  -- ufix32
              );

  u_full_tx_ip_fir_reduced_addr_decoder_write_inst : full_tx_ip_fir_reduced_addr_decoder_write
    PORT MAP( IPCORE_CLK => IPCORE_CLK,  -- ufix1
              IPCORE_GLOBAL_RESET => IPCORE_GLOBAL_RESET,  -- ufix1
              data_write => data_write,  -- ufix32
              addr_sel => addr_sel,  -- ufix14
              wr_enb => wr_enb,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_reg0 => write_reg0_tmp,  -- ufix32
              write_reg1 => write_reg1_tmp,  -- ufix32
              write_reg2 => write_reg2_tmp,  -- ufix32
              write_reg3 => write_reg3_tmp  -- ufix32
              );

  data_read <= s_data_read;

  write_reg0 <= write_reg0_tmp;

  write_reg1 <= write_reg1_tmp;

  write_reg2 <= write_reg2_tmp;

  write_reg3 <= write_reg3_tmp;

END rtl;

