-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_rotate_90_block.vhd
-- Created: 2024-10-06 17:05:29
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_rotate_90_block
-- Source Path: HDLRx/full_rx/rx_demodulator_full/constellation_descrambler/rotate_-90
-- Hierarchy Level: 3
-- Model version: 1.129
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_RX_src_full_rx_pac.ALL;

ENTITY IEEE_8021513_RX_src_rotate_90_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        data_in_im                        :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        valid_in                          :   IN    std_logic;
        s1_in                             :   IN    std_logic;
        s2_in                             :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        data_out_im                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        valid_out                         :   OUT   std_logic
        );
END IEEE_8021513_RX_src_rotate_90_block;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_rotate_90_block IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_rotate_90
    PORT( s2                              :   IN    std_logic;
          s1                              :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          data_in_im                      :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          data_out_re                     :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
          data_out_im                     :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_rotate_90
    USE ENTITY work.IEEE_8021513_RX_src_rotate_90(rtl);

  -- Signals
  SIGNAL en                               : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL s2                               : std_logic;
  SIGNAL data_in_re_signed                : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_in_im_signed                : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay_reg_re                     : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL Delay_reg_im                     : vector_of_signed18(0 TO 1);  -- sfix18_En12 [2]
  SIGNAL data_in_re_1                     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_in_im_1                     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_re_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL data_out_im_1                    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL data_out_re_signed               : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_im_signed               : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_re_tmp                  : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL data_out_im_tmp                  : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay1_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;

BEGIN
  u_rotate_90 : IEEE_8021513_RX_src_rotate_90
    PORT MAP( s2 => s2,
              s1 => s1,
              data_in_re => std_logic_vector(data_in_re_1),  -- sfix18_En12
              data_in_im => std_logic_vector(data_in_im_1),  -- sfix18_En12
              data_out_re => data_out_re_1,  -- sfix18_En12
              data_out_im => data_out_im_1  -- sfix18_En12
              );

  en <= valid_in;

  s1 <= s1_in;

  s2 <= s2_in;

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg_re <= (OTHERS => to_signed(16#00000#, 18));
        Delay_reg_im <= (OTHERS => to_signed(16#00000#, 18));
      ELSIF enb_1_2_0 = '1' THEN
        Delay_reg_im(0) <= data_in_im_signed;
        Delay_reg_im(1) <= Delay_reg_im(0);
        Delay_reg_re(0) <= data_in_re_signed;
        Delay_reg_re(1) <= Delay_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  data_in_re_1 <= Delay_reg_re(1);
  data_in_im_1 <= Delay_reg_im(1);

  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_re_tmp <= to_signed(16#00000#, 18);
        data_out_im_tmp <= to_signed(16#00000#, 18);
      ELSIF enb_1_2_0 = '1' THEN
        data_out_re_tmp <= data_out_re_signed;
        data_out_im_tmp <= data_out_im_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  data_out_re <= std_logic_vector(data_out_re_tmp);

  data_out_im <= std_logic_vector(data_out_im_tmp);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg(0) <= en;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  valid_out <= Delay3_out1;

END rtl;

