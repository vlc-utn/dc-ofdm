-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_ofdm_symbol_sync.vhd
-- Created: 2024-10-27 23:05:39
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_ofdm_symbol_sync
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync
-- Hierarchy Level: 2
-- Model version: 1.138
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_RX_src_ofdm_symbol_sync IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        peak_sync                         :   OUT   std_logic;
        phase_offset                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        reset_ofdm                        :   OUT   std_logic
        );
END IEEE_8021513_RX_src_ofdm_symbol_sync;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_ofdm_symbol_sync IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_m_cox
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          M_d                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          P_d_re                          :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En10
          P_d_im                          :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En10
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_find_peak
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          M_in                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          peak_sync                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_SimpleDualPortRAM_singlebit
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din                          :   IN    std_logic;
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_phase_offset_calculator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          peak_sync                       :   IN    std_logic;
          P_d_re                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En10
          P_d_im                          :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En10
          frequency_offset                :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_m_cox
    USE ENTITY work.IEEE_8021513_RX_src_m_cox(rtl);

  FOR ALL : IEEE_8021513_RX_src_find_peak
    USE ENTITY work.IEEE_8021513_RX_src_find_peak(rtl);

  FOR ALL : IEEE_8021513_RX_src_SimpleDualPortRAM_singlebit
    USE ENTITY work.IEEE_8021513_RX_src_SimpleDualPortRAM_singlebit(rtl);

  FOR ALL : IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3
    USE ENTITY work.IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3(rtl);

  FOR ALL : IEEE_8021513_RX_src_phase_offset_calculator
    USE ENTITY work.IEEE_8021513_RX_src_phase_offset_calculator(rtl);

  -- Signals
  SIGNAL m_cox_out1_re                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m_cox_out1_im                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m_cox_out2                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL m_cox_out3_re                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL m_cox_out3_im                    : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL find_peak_out1_re                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL find_peak_out1_im                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL find_peak_out2                   : std_logic;
  SIGNAL Delay_regin                      : std_logic;
  SIGNAL Delay_waddr                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay_wrenb                      : std_logic;  -- ufix1
  SIGNAL Delay_raddr                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Delay_regout                     : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(19 DOWNTO 0);  -- ufix1 [20]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL m_cox_out3_re_signed             : signed(19 DOWNTO 0);  -- sfix20_En10
  SIGNAL m_cox_out3_im_signed             : signed(19 DOWNTO 0);  -- sfix20_En10
  SIGNAL mergedInput                      : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL mergedDelay_regin                : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL mergedDelay_waddr                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_regout               : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL mergedDelay_regout_unsigned      : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL mergedOutput                     : unsigned(39 DOWNTO 0);  -- ufix40
  SIGNAL slicedInput                      : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL realOutput                       : signed(19 DOWNTO 0);  -- sfix20_En10
  SIGNAL slicedInput_1                    : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL imagOutput                       : signed(19 DOWNTO 0);  -- sfix20_En10
  SIGNAL phase_offset_calculator_out1     : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  -- peakSync is synchronized with the first element of the channel
  -- Delay of find_peak = peakDetectorWindow 

  u_m_cox : IEEE_8021513_RX_src_m_cox
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => data_in_re,  -- sfix16_En14
              data_in_im => data_in_im,  -- sfix16_En14
              data_out_re => m_cox_out1_re,  -- sfix16_En14
              data_out_im => m_cox_out1_im,  -- sfix16_En14
              M_d => m_cox_out2,  -- sfix16_En14
              P_d_re => m_cox_out3_re,  -- sfix20_En10
              P_d_im => m_cox_out3_im  -- sfix20_En10
              );

  u_find_peak : IEEE_8021513_RX_src_find_peak
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => m_cox_out1_re,  -- sfix16_En14
              data_in_im => m_cox_out1_im,  -- sfix16_En14
              M_in => m_cox_out2,  -- sfix16_En14
              data_out_re => find_peak_out1_re,  -- sfix16_En14
              data_out_im => find_peak_out1_im,  -- sfix16_En14
              peak_sync => find_peak_out2
              );

  u_ShiftRegisterRAM_singlebit : IEEE_8021513_RX_src_SimpleDualPortRAM_singlebit
    GENERIC MAP( AddrWidth => 12,
                 DataWidth => 1
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => Delay_regin,
              wr_addr => std_logic_vector(Delay_waddr),
              wr_en => Delay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(Delay_raddr),
              dout => Delay_regout
              );

  u_ShiftRegisterRAM : IEEE_8021513_RX_src_SimpleDualPortRAM_generic_block3
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 40
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              dout => mergedDelay_regout
              );

  u_phase_offset_calculator : IEEE_8021513_RX_src_phase_offset_calculator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              peak_sync => find_peak_out2,
              P_d_re => std_logic_vector(realOutput),  -- sfix20_En10
              P_d_im => std_logic_vector(imagOutput),  -- sfix20_En10
              frequency_offset => phase_offset_calculator_out1  -- sfix16_En15
              );

  -- Input register for RAM-based shift register Delay
  Delay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_regin <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay_regin <= find_peak_out2;
      END IF;
    END IF;
  END PROCESS Delay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 3589
  -- Write address counter for RAM-based shift register Delay
  Delay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_waddr <= to_unsigned(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        IF Delay_waddr >= to_unsigned(16#E05#, 12) THEN 
          Delay_waddr <= to_unsigned(16#000#, 12);
        ELSE 
          Delay_waddr <= Delay_waddr + to_unsigned(16#001#, 12);
        END IF;
      END IF;
    END IF;
  END PROCESS Delay_wr_process;


  Delay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 3589
  -- Read address counter for RAM-based shift register Delay
  Delay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_raddr <= to_unsigned(16#001#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        IF Delay_raddr >= to_unsigned(16#E05#, 12) THEN 
          Delay_raddr <= to_unsigned(16#000#, 12);
        ELSE 
          Delay_raddr <= Delay_raddr + to_unsigned(16#001#, 12);
        END IF;
      END IF;
    END IF;
  END PROCESS Delay_rd_process;


  -- Output register for RAM-based shift register Delay
  Delay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1 <= Delay_regout;
      END IF;
    END IF;
  END PROCESS Delay_regoutc_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_reg(0) <= Delay_out1;
        Delay2_reg(19 DOWNTO 1) <= Delay2_reg(18 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(19);

  m_cox_out3_re_signed <= signed(m_cox_out3_re);

  m_cox_out3_im_signed <= signed(m_cox_out3_im);

  mergedInput <= unsigned(m_cox_out3_re_signed) & unsigned(m_cox_out3_im_signed);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_regin <= to_unsigned(0, 40);
      ELSIF enb_1_2_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 125
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#7D#, 7) THEN 
          mergedDelay_waddr <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 125
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#01#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#7D#, 7) THEN 
          mergedDelay_raddr <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedOutput <= to_unsigned(0, 40);
      ELSIF enb_1_2_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput <= mergedOutput(39 DOWNTO 20);

  realOutput <= signed(slicedInput);

  slicedInput_1 <= mergedOutput(19 DOWNTO 0);

  imagOutput <= signed(slicedInput_1);

  data_out_re <= find_peak_out1_re;

  data_out_im <= find_peak_out1_im;

  peak_sync <= Delay2_out1;

  phase_offset <= phase_offset_calculator_out1;

  reset_ofdm <= Delay_out1;

END rtl;

