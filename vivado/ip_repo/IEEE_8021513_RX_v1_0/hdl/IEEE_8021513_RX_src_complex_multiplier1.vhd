-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_complex_multiplier1.vhd
-- Created: 2024-10-06 17:05:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_complex_multiplier1
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/m_cox/calculate_P/complex_multiplier1
-- Hierarchy Level: 5
-- Model version: 1.129
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_RX_src_full_rx_pac.ALL;

ENTITY IEEE_8021513_RX_src_complex_multiplier1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        in_a_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        in_a_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        in_b_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        in_b_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        a_times_b_re                      :   OUT   std_logic_vector(33 DOWNTO 0);  -- sfix34_En20
        a_times_b_im                      :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En20
        );
END IEEE_8021513_RX_src_complex_multiplier1;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_complex_multiplier1 IS

  -- Signals
  SIGNAL in_b_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL in_b_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Subtract_sub_cast                : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Subtract_sub_cast_1              : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Subtract_out1                    : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Delay5_reg                       : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL Delay5_out1                      : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL in_a_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL in_a_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay7_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay7_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product1_out1                    : signed(32 DOWNTO 0);  -- sfix33_En20
  SIGNAL Delay11_reg                      : vector_of_signed33(0 TO 1);  -- sfix33 [2]
  SIGNAL Delay11_out1                     : signed(32 DOWNTO 0);  -- sfix33_En20
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Subtract1_sub_cast               : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Subtract1_sub_cast_1             : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Subtract1_out1                   : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Delay4_reg                       : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL Delay4_out1                      : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Delay9_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay9_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product_out1                     : signed(32 DOWNTO 0);  -- sfix33_En20
  SIGNAL Delay8_reg                       : vector_of_signed33(0 TO 1);  -- sfix33 [2]
  SIGNAL Delay8_out1                      : signed(32 DOWNTO 0);  -- sfix33_En20
  SIGNAL Add1_add_cast                    : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Add1_add_cast_1                  : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Add1_out1                        : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Add_add_cast                     : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Add_add_cast_1                   : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Add_out1                         : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Delay6_reg                       : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL Delay6_out1                      : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Delay14_reg                      : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay14_out1                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Product2_out1                    : signed(32 DOWNTO 0);  -- sfix33_En20
  SIGNAL Delay13_reg                      : vector_of_signed33(0 TO 1);  -- sfix33 [2]
  SIGNAL Delay13_out1                     : signed(32 DOWNTO 0);  -- sfix33_En20
  SIGNAL Add2_add_cast                    : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Add2_add_cast_1                  : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Add2_out1                        : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Delay10_out1_re                  : signed(33 DOWNTO 0);  -- sfix34_En20
  SIGNAL Delay10_out1_im                  : signed(33 DOWNTO 0);  -- sfix34_En20

BEGIN
  in_b_re_signed <= signed(in_b_re);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1 <= in_b_re_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  in_b_im_signed <= signed(in_b_im);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1 <= in_b_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Subtract_sub_cast <= resize(Delay2_out1, 17);
  Subtract_sub_cast_1 <= resize(Delay3_out1, 17);
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg <= (OTHERS => to_signed(16#00000#, 17));
      ELSIF enb_1_2_0 = '1' THEN
        Delay5_reg(0) <= Subtract_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  in_a_re_signed <= signed(in_a_re);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1 <= in_a_re_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_reg(0) <= Delay_out1;
        Delay7_reg(1) <= Delay7_reg(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);

  Product1_out1 <= Delay5_out1 * Delay7_out1;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg <= (OTHERS => to_signed(0, 33));
      ELSIF enb_1_2_0 = '1' THEN
        Delay11_reg(0) <= Product1_out1;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  in_a_im_signed <= signed(in_a_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= in_a_im_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Subtract1_sub_cast <= resize(Delay_out1, 17);
  Subtract1_sub_cast_1 <= resize(Delay1_out1, 17);
  Subtract1_out1 <= Subtract1_sub_cast - Subtract1_sub_cast_1;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(16#00000#, 17));
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_reg(0) <= Subtract1_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay9_reg(0) <= Delay3_out1;
        Delay9_reg(1) <= Delay9_reg(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(1);

  Product_out1 <= Delay4_out1 * Delay9_out1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(0, 33));
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_reg(0) <= Product_out1;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Add1_add_cast <= resize(Delay11_out1, 34);
  Add1_add_cast_1 <= resize(Delay8_out1, 34);
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  Add_add_cast <= resize(Delay2_out1, 17);
  Add_add_cast_1 <= resize(Delay3_out1, 17);
  Add_out1 <= Add_add_cast + Add_add_cast_1;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_reg <= (OTHERS => to_signed(16#00000#, 17));
      ELSIF enb_1_2_0 = '1' THEN
        Delay6_reg(0) <= Add_out1;
        Delay6_reg(1) <= Delay6_reg(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay14_reg(0) <= Delay1_out1;
        Delay14_reg(1) <= Delay14_reg(0);
      END IF;
    END IF;
  END PROCESS Delay14_process;

  Delay14_out1 <= Delay14_reg(1);

  Product2_out1 <= Delay6_out1 * Delay14_out1;

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_reg <= (OTHERS => to_signed(0, 33));
      ELSIF enb_1_2_0 = '1' THEN
        Delay13_reg(0) <= Product2_out1;
        Delay13_reg(1) <= Delay13_reg(0);
      END IF;
    END IF;
  END PROCESS Delay13_process;

  Delay13_out1 <= Delay13_reg(1);

  Add2_add_cast <= resize(Delay8_out1, 34);
  Add2_add_cast_1 <= resize(Delay13_out1, 34);
  Add2_out1 <= Add2_add_cast + Add2_add_cast_1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1_re <= to_signed(0, 34);
        Delay10_out1_im <= to_signed(0, 34);
      ELSIF enb_1_2_0 = '1' THEN
        Delay10_out1_re <= Add1_out1;
        Delay10_out1_im <= Add2_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  a_times_b_re <= std_logic_vector(Delay10_out1_re);

  a_times_b_im <= std_logic_vector(Delay10_out1_im);

END rtl;

