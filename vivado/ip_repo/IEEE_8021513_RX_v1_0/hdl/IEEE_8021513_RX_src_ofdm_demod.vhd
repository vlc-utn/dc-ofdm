-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_ofdm_demod.vhd
-- Created: 2024-10-27 23:05:39
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_ofdm_demod
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_demod
-- Hierarchy Level: 2
-- Model version: 1.138
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_RX_src_ofdm_demod IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        reset                             :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        data_out_im                       :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En12
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END IEEE_8021513_RX_src_ofdm_demod;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_ofdm_demod IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_OFDM_Demodulator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid                           :   IN    std_logic;
          FFTLen                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          CPLen                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          numLgSc                         :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          numRgSc                         :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          reset                           :   IN    std_logic;
          data_re_1                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          data_im_1                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En14
          valid_1                         :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_OFDM_Demodulator
    USE ENTITY work.IEEE_8021513_RX_src_OFDM_Demodulator(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL cp_len_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Constant2_out1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay5_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant4_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant3_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL data_re                          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL data_im                          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL valid                            : std_logic;
  SIGNAL ready_1                          : std_logic;
  SIGNAL data_re_signed                   : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL data_im_signed                   : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Delay_out1_re                    : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Delay_out1_im                    : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Data_Type_Conversion_out1_re     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Data_Type_Conversion_out1_im     : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_OFDM_Demodulator : IEEE_8021513_RX_src_OFDM_Demodulator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_re => std_logic_vector(Delay3_out1_re),  -- sfix16_En14
              data_im => std_logic_vector(Delay3_out1_im),  -- sfix16_En14
              valid => Delay4_out1,
              FFTLen => std_logic_vector(Constant2_out1),  -- ufix9
              CPLen => std_logic_vector(Delay5_out1),  -- uint8
              numLgSc => std_logic_vector(Constant4_out1),  -- ufix6
              numRgSc => std_logic_vector(Constant3_out1),  -- ufix6
              reset => Delay6_out1,
              data_re_1 => data_re,  -- sfix24_En14
              data_im_1 => data_im,  -- sfix24_En14
              valid_1 => valid,
              ready => ready_1
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_re <= to_signed(16#0000#, 16);
        Delay3_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1_re <= data_in_re_signed;
        Delay3_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  cp_len_unsigned <= unsigned(cp_len);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Constant2_out1 <= to_unsigned(16#100#, 9);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        Delay5_out1 <= cp_len_unsigned;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Constant4_out1 <= to_unsigned(16#1A#, 6);

  Constant3_out1 <= to_unsigned(16#19#, 6);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay6_out1 <= reset;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re <= to_signed(16#000000#, 24);
        Delay_out1_im <= to_signed(16#000000#, 24);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1_re <= data_re_signed;
        Delay_out1_im <= data_im_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Data_Type_Conversion_out1_re <= Delay_out1_re(19 DOWNTO 2);
  Data_Type_Conversion_out1_im <= Delay_out1_im(19 DOWNTO 2);

  data_out_re <= std_logic_vector(Data_Type_Conversion_out1_re);

  data_out_im <= std_logic_vector(Data_Type_Conversion_out1_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= valid;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1 <= ready_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  valid_out <= Delay1_out1;

  ready <= Delay2_out1;

END rtl;

