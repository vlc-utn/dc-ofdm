-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_downshifter.vhd
-- Created: 2024-10-27 23:05:38
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_downshifter
-- Source Path: HDLRx/full_rx/rx_demodulator_full/downshifter
-- Hierarchy Level: 2
-- Model version: 1.138
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_RX_src_full_rx_pac.ALL;

ENTITY IEEE_8021513_RX_src_downshifter IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        valid_in                          :   IN    std_logic;
        phase_offset                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic
        );
END IEEE_8021513_RX_src_downshifter;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_downshifter IS

  -- Component Declarations
  COMPONENT IEEE_8021513_RX_src_rising_edge_detector_block5
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_NCO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          inc                             :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          resetPhase                      :   IN    std_logic;
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_RX_src_digital_carrier_receiver
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          ncoIn_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ncoIn_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_RX_src_rising_edge_detector_block5
    USE ENTITY work.IEEE_8021513_RX_src_rising_edge_detector_block5(rtl);

  FOR ALL : IEEE_8021513_RX_src_NCO
    USE ENTITY work.IEEE_8021513_RX_src_NCO(rtl);

  FOR ALL : IEEE_8021513_RX_src_digital_carrier_receiver
    USE ENTITY work.IEEE_8021513_RX_src_digital_carrier_receiver(rtl);

  -- Signals
  SIGNAL data_in_signed                   : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Delay11_reg                      : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL Delay11_out1                     : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Delay8_reg                       : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL Delay8_out1                      : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Delay3_reg                       : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL Delay3_out1                      : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Delay_reg                        : vector_of_signed14(0 TO 5);  -- sfix14 [6]
  SIGNAL Delay_out1                       : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Constant_out1                    : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL phase_offset_signed              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Delay9_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay9_out1                      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Constant1_out1                   : unsigned(19 DOWNTO 0);  -- ufix20_En8
  SIGNAL Product_cast                     : signed(20 DOWNTO 0);  -- sfix21_En8
  SIGNAL Product_mul_temp                 : signed(36 DOWNTO 0);  -- sfix37_En23
  SIGNAL Product_cast_1                   : signed(35 DOWNTO 0);  -- sfix36_En23
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay10_reg                      : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay10_out1                     : signed(15 DOWNTO 0);  -- int16
  SIGNAL Add_add_cast                     : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Add_add_temp                     : signed(25 DOWNTO 0);  -- sfix26
  SIGNAL Add_out1                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay5_reg                       : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL inc                              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Delay12_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay7_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL valid                            : std_logic;
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out2                         : std_logic;
  SIGNAL digital_carrier_receiver_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL digital_carrier_receiver_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Delay1_reg                       : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  u_rising_edge_detector : IEEE_8021513_RX_src_rising_edge_detector_block5
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => Delay4_out1,
              Out_rsvd => rising_edge_detector_out1
              );

  u_NCO : IEEE_8021513_RX_src_NCO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              inc => std_logic_vector(inc),  -- ufix24
              resetPhase => rising_edge_detector_out1,
              validIn => valid,
              complexexp_re => NCO_out1_re,  -- sfix16_En14
              complexexp_im => NCO_out1_im,  -- sfix16_En14
              validOut => NCO_out2
              );

  u_digital_carrier_receiver : IEEE_8021513_RX_src_digital_carrier_receiver
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(Delay_out1),  -- sfix14_En13
              ncoIn_re => NCO_out1_re,  -- sfix16_En14
              ncoIn_im => NCO_out1_im,  -- sfix16_En14
              data_out_re => digital_carrier_receiver_out1_re,  -- sfix16_En14
              data_out_im => digital_carrier_receiver_out1_im  -- sfix16_En14
              );

  data_in_signed <= signed(data_in);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        Delay11_reg(0) <= data_in_signed;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        Delay8_reg(0) <= Delay11_out1;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= Delay8_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Delay3_out1;
        Delay_reg(1 TO 5) <= Delay_reg(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(5);

  Constant_out1 <= to_unsigned(16#400000#, 24);

  phase_offset_signed <= signed(phase_offset);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay9_reg(0) <= phase_offset_signed;
        Delay9_reg(1) <= Delay9_reg(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(1);

  Constant1_out1 <= to_unsigned(16#CB366#, 20);

  Product_cast <= signed(resize(Constant1_out1, 21));
  Product_mul_temp <= Delay9_out1 * Product_cast;
  Product_cast_1 <= Product_mul_temp(35 DOWNTO 0);
  Product_out1 <= resize(Product_cast_1(35 DOWNTO 23), 16);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay10_reg(0) <= Product_out1;
        Delay10_reg(1) <= Delay10_reg(0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1 <= Delay10_reg(1);

  Add_add_cast <= signed(resize(Constant_out1, 26));
  Add_add_temp <= Add_add_cast + resize(Delay10_out1, 26);
  Add_out1 <= unsigned(Add_add_temp(23 DOWNTO 0));

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg <= (OTHERS => to_unsigned(16#000000#, 24));
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= Add_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  inc <= Delay5_reg(1);

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay12_reg(0) <= valid_in;
        Delay12_reg(1) <= Delay12_reg(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay7_reg(0) <= Delay12_out1;
        Delay7_reg(1) <= Delay7_reg(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= Delay7_out1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  valid <= Delay2_reg(1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= NCO_out2;
        Delay1_reg(3 DOWNTO 1) <= Delay1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(3);

  data_out_re <= digital_carrier_receiver_out1_re;

  data_out_im <= digital_carrier_receiver_out1_im;

  valid_out <= Delay1_out1;

END rtl;

