-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/IEEE_8021513_RX_src_CordicKernelMag.vhd
-- Created: 2024-10-06 17:05:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_RX_src_CordicKernelMag
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/phase_offset_calculator/HDL_CMA_core/CordicKernelMag
-- Hierarchy Level: 5
-- Model version: 1.129
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_RX_src_CordicKernelMag IS
  PORT( xin                               :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En10
        yin                               :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En10
        zin                               :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En22
        lut_value                         :   IN    std_logic_vector(19 DOWNTO 0);  -- ufix20_En22
        idx                               :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        xout                              :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En10
        yout                              :   OUT   std_logic_vector(20 DOWNTO 0);  -- sfix21_En10
        zout                              :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En22
        );
END IEEE_8021513_RX_src_CordicKernelMag;


ARCHITECTURE rtl OF IEEE_8021513_RX_src_CordicKernelMag IS

  -- Signals
  SIGNAL yin_signed                       : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL yLessThanZero                    : std_logic;
  SIGNAL xin_signed                       : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL idx_unsigned                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dynamic_shift_cast               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL yShifted                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL xout2                            : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL xout1                            : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL xout_tmp                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL dynamic_shift_cast_1             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL xShifted                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL yout2                            : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL yout1                            : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL yout_tmp                         : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL zin_signed                       : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL lut_value_unsigned               : unsigned(19 DOWNTO 0);  -- ufix20_En22
  SIGNAL ZAdder_add_cast                  : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL zout2                            : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL ZSub_sub_cast                    : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL zout1                            : signed(22 DOWNTO 0);  -- sfix23_En22
  SIGNAL zout_tmp                         : signed(22 DOWNTO 0);  -- sfix23_En22

BEGIN
  yin_signed <= signed(yin);

  
  yLessThanZero <= '1' WHEN yin_signed < to_signed(16#000000#, 21) ELSE
      '0';

  xin_signed <= signed(xin);

  idx_unsigned <= unsigned(idx);

  dynamic_shift_cast <= resize(idx_unsigned, 8);
  yShifted <= SHIFT_RIGHT(yin_signed, to_integer(dynamic_shift_cast));

  xout2 <= xin_signed + yShifted;

  xout1 <= xin_signed - yShifted;

  
  xout_tmp <= xout2 WHEN yLessThanZero = '0' ELSE
      xout1;

  xout <= std_logic_vector(xout_tmp);

  dynamic_shift_cast_1 <= resize(idx_unsigned, 8);
  xShifted <= SHIFT_RIGHT(xin_signed, to_integer(dynamic_shift_cast_1));

  yout2 <= yin_signed - xShifted;

  yout1 <= yin_signed + xShifted;

  
  yout_tmp <= yout2 WHEN yLessThanZero = '0' ELSE
      yout1;

  yout <= std_logic_vector(yout_tmp);

  zin_signed <= signed(zin);

  lut_value_unsigned <= unsigned(lut_value);

  ZAdder_add_cast <= signed(resize(lut_value_unsigned, 23));
  zout2 <= zin_signed + ZAdder_add_cast;

  ZSub_sub_cast <= signed(resize(lut_value_unsigned, 23));
  zout1 <= zin_signed - ZSub_sub_cast;

  
  zout_tmp <= zout2 WHEN yLessThanZero = '0' ELSE
      zout1;

  zout <= std_logic_vector(zout_tmp);

END rtl;

