-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLDecimator/decimator_ip_src_decimator.vhd
-- Created: 2024-10-01 07:52:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 8e-09
-- Target subsystem base rate: 8e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.6e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out                      ce_out        1.6e-08
-- valid_out                     ce_out        1.6e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: decimator_ip_src_decimator
-- Source Path: HDLDecimator/decimator
-- Hierarchy Level: 0
-- Model version: 1.40
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY decimator_ip_src_decimator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        data_out                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic
        );
END decimator_ip_src_decimator;


ARCHITECTURE rtl OF decimator_ip_src_decimator IS

  -- Component Declarations
  COMPONENT decimator_ip_src_decimator_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT decimator_ip_src_rising_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT decimator_ip_src_FIR_Decimator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validIn                         :   IN    std_logic;
          softReset                       :   IN    std_logic;
          dataOut                         :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT decimator_ip_src_falling_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : decimator_ip_src_decimator_tc
    USE ENTITY work.decimator_ip_src_decimator_tc(rtl);

  FOR ALL : decimator_ip_src_rising_edge_detector
    USE ENTITY work.decimator_ip_src_rising_edge_detector(rtl);

  FOR ALL : decimator_ip_src_FIR_Decimator
    USE ENTITY work.decimator_ip_src_FIR_Decimator(rtl);

  FOR ALL : decimator_ip_src_falling_edge_detector
    USE ENTITY work.decimator_ip_src_falling_edge_detector(rtl);

  -- Signals
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL data_in_signed                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay10_out1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay5_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(47 DOWNTO 0);  -- ufix1 [48]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL data_out_1                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL valid_out_1                      : std_logic;
  SIGNAL data_out_signed                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Switch_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unit_Delay_out1                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_after_down                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay2_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay9_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL valid_after_down                 : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL falling_edge_detector_out1       : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;

BEGIN
  -- The data out from this blocks is "valid" one sample, and invalid four samples.
  -- This blocks makes sure that the data is valid the five cycles.
  -- What happens is that the ZOH might sample the signal when is valid or invalid.

  u_decimator_tc : decimator_ip_src_decimator_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  u_rising_edge_detector : decimator_ip_src_rising_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => valid_in,
              Out_rsvd => rising_edge_detector_out1
              );

  u_FIR_Decimator : decimator_ip_src_FIR_Decimator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(Delay5_out1),  -- sfix12_En10
              validIn => Logical_Operator_out1,
              softReset => rising_edge_detector_out1,
              dataOut => data_out_1,  -- sfix12_En10
              validOut => valid_out_1
              );

  u_falling_edge_detector : decimator_ip_src_falling_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              in_rsvd => Logical_Operator2_out1,
              out_rsvd => falling_edge_detector_out1
              );

  data_in_signed <= signed(data_in);

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay10_out1 <= data_in_signed;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay5_out1 <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= Delay1_out1;
        Delay3_reg(47 DOWNTO 1) <= Delay3_reg(46 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(47);

  Logical_Operator_out1 <= Delay1_out1 OR Delay3_out1;

  data_out_signed <= signed(data_out_1);

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Unit_Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  Switch_out1 <= Unit_Delay_out1 WHEN valid_out_1 = '0' ELSE
      data_out_signed;

  -- Downsample by 2 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_after_down <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        data_after_down <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1 <= data_after_down;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        Delay9_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  data_out <= std_logic_vector(Delay9_out1);

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1 <= valid_out_1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Logical_Operator1_out1 <= Delay11_out1 OR valid_out_1;

  -- Downsample by 2 register (Sample offset 0)
  Downsample_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_after_down <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        valid_after_down <= Logical_Operator1_out1;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1 <= valid_after_down;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_reg(0) <= Delay8_out1;
        Delay4_reg(6 DOWNTO 1) <= Delay4_reg(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(6);

  Logical_Operator2_out1 <= Delay8_out1 AND Delay4_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1 <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Logical_Operator4_out1 <=  NOT falling_edge_detector_out1;

  Logical_Operator3_out1 <= Delay_out1 AND Logical_Operator4_out1;

  ce_out <= enb_1_2_1;

  valid_out <= Logical_Operator3_out1;

END rtl;

