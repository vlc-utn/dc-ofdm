-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLDecimator/decimator_ip.vhd
-- Created: 2024-10-01 07:52:42
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: decimator_ip
-- Source Path: decimator_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY decimator_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;  -- ufix1
        data_out                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_out                         :   OUT   std_logic  -- ufix1
        );
END decimator_ip;


ARCHITECTURE rtl OF decimator_ip IS

  -- Component Declarations
  COMPONENT decimator_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT decimator_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_in                        :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : decimator_ip_reset_sync
    USE ENTITY work.decimator_ip_reset_sync(rtl);

  FOR ALL : decimator_ip_dut
    USE ENTITY work.decimator_ip_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL data_in_unsigned                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL data_in_sig                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL data_out_sig_signed              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_tmp                     : unsigned(11 DOWNTO 0);  -- ufix12

BEGIN
  u_decimator_ip_reset_sync_inst : decimator_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_decimator_ip_dut_inst : decimator_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              data_in => std_logic_vector(data_in_sig),  -- sfix12_En10
              valid_in => valid_in,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              data_out => data_out_sig,  -- sfix12_En10
              valid_out => valid_out_sig  -- ufix1
              );

  dut_enable <= '1';

  data_in_unsigned <= unsigned(data_in);

  data_in_sig <= signed(data_in_unsigned);

  reset_cm <=  NOT IPCORE_RESETN;

  data_out_sig_signed <= signed(data_out_sig);

  data_out_tmp <= unsigned(data_out_sig_signed);

  data_out <= std_logic_vector(data_out_tmp);

  valid_out <= valid_out_sig;

END rtl;

