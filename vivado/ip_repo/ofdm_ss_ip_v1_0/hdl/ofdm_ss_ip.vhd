-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLOFDMSS/ofdm_ss_ip.vhd
-- Created: 2024-10-01 22:57:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_ss_ip
-- Source Path: ofdm_ss_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY ofdm_ss_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        data_in_r                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        data_in_i                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        data_out_r                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        data_out_i                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        peak_out                          :   OUT   std_logic;  -- ufix1
        phase_offset                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        M_d                               :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        reset_ofdm                        :   OUT   std_logic  -- ufix1
        );
END ofdm_ss_ip;


ARCHITECTURE rtl OF ofdm_ss_ip IS

  -- Component Declarations
  COMPONENT ofdm_ss_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_ss_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          data_in_r                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_i                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ce_out                          :   OUT   std_logic;  -- ufix1
          data_out_r                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_i                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          peak_out                        :   OUT   std_logic;  -- ufix1
          phase_offset                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          M_d                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          reset_ofdm                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_ss_ip_reset_sync
    USE ENTITY work.ofdm_ss_ip_reset_sync(rtl);

  FOR ALL : ofdm_ss_ip_dut
    USE ENTITY work.ofdm_ss_ip_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL data_in_r_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_in_r_sig                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_i_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_in_i_sig                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_r_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_i_sig                   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL peak_out_sig                     : std_logic;  -- ufix1
  SIGNAL phase_offset_sig                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL M_d_sig                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL reset_ofdm_sig                   : std_logic;  -- ufix1
  SIGNAL data_out_r_sig_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_out_r_tmp                   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_i_sig_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_out_i_tmp                   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL phase_offset_sig_signed          : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL phase_offset_tmp                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL M_d_sig_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL M_d_tmp                          : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  u_ofdm_ss_ip_reset_sync_inst : ofdm_ss_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_ofdm_ss_ip_dut_inst : ofdm_ss_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              data_in_r => std_logic_vector(data_in_r_sig),  -- sfix16_En14
              data_in_i => std_logic_vector(data_in_i_sig),  -- sfix16_En14
              ce_out => ce_out_sig,  -- ufix1
              data_out_r => data_out_r_sig,  -- sfix16_En14
              data_out_i => data_out_i_sig,  -- sfix16_En14
              peak_out => peak_out_sig,  -- ufix1
              phase_offset => phase_offset_sig,  -- sfix16_En15
              M_d => M_d_sig,  -- sfix16_En14
              reset_ofdm => reset_ofdm_sig  -- ufix1
              );

  dut_enable <= '1';

  data_in_r_unsigned <= unsigned(data_in_r);

  data_in_r_sig <= signed(data_in_r_unsigned);

  data_in_i_unsigned <= unsigned(data_in_i);

  data_in_i_sig <= signed(data_in_i_unsigned);

  reset_cm <=  NOT IPCORE_RESETN;

  data_out_r_sig_signed <= signed(data_out_r_sig);

  data_out_r_tmp <= unsigned(data_out_r_sig_signed);

  data_out_r <= std_logic_vector(data_out_r_tmp);

  data_out_i_sig_signed <= signed(data_out_i_sig);

  data_out_i_tmp <= unsigned(data_out_i_sig_signed);

  data_out_i <= std_logic_vector(data_out_i_tmp);

  phase_offset_sig_signed <= signed(phase_offset_sig);

  phase_offset_tmp <= unsigned(phase_offset_sig_signed);

  phase_offset <= std_logic_vector(phase_offset_tmp);

  M_d_sig_signed <= signed(M_d_sig);

  M_d_tmp <= unsigned(M_d_sig_signed);

  M_d <= std_logic_vector(M_d_tmp);

  peak_out <= peak_out_sig;

  reset_ofdm <= reset_ofdm_sig;

END rtl;

