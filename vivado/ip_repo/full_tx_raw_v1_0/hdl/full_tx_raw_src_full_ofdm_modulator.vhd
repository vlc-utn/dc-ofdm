-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_raw_src_full_ofdm_modulator.vhd
-- Created: 2024-08-31 20:20:58
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_raw_src_full_ofdm_modulator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator
-- Hierarchy Level: 1
-- Model version: 4.99
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_raw_src_full_ofdm_modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_sym                      :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_out                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END full_tx_raw_src_full_ofdm_modulator;


ARCHITECTURE rtl OF full_tx_raw_src_full_ofdm_modulator IS

  -- Component Declarations
  COMPONENT full_tx_raw_src_sync_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          new_ofdm_symbol                 :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          valid_in                        :   IN    std_logic;
          s1                              :   OUT   std_logic;
          s2                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_raw_src_enabled_qam_and_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_rsvd                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          s2_in                           :   IN    std_logic;
          s1_in                           :   IN    std_logic;
          Enable                          :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          cp_len_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_scrambler                 :   OUT   std_logic;
          init_out                        :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_raw_src_ofdm_modulator_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_raw_src_interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_raw_src_rising_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_raw_src_frequency_upshift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_raw_src_sync_constellation_scrambler
    USE ENTITY work.full_tx_raw_src_sync_constellation_scrambler(rtl);

  FOR ALL : full_tx_raw_src_enabled_qam_and_scrambler
    USE ENTITY work.full_tx_raw_src_enabled_qam_and_scrambler(rtl);

  FOR ALL : full_tx_raw_src_ofdm_modulator_block
    USE ENTITY work.full_tx_raw_src_ofdm_modulator_block(rtl);

  FOR ALL : full_tx_raw_src_interpolator
    USE ENTITY work.full_tx_raw_src_interpolator(rtl);

  FOR ALL : full_tx_raw_src_rising_edge_detector_block
    USE ENTITY work.full_tx_raw_src_rising_edge_detector_block(rtl);

  FOR ALL : full_tx_raw_src_frequency_upshift
    USE ENTITY work.full_tx_raw_src_frequency_upshift(rtl);

  -- Signals
  SIGNAL data_in_unsigned                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL Delay_out1                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_1_2_0_gated_3                : std_logic;
  SIGNAL Delay4_out1                      : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_1_2_0_gated_4                : std_logic;
  SIGNAL cp_len_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_1_2_0_gated_5                : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay6_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL enb_1_2_0_gated_6                : std_logic;
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL enb_1_2_0_gated_7                : std_logic;
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL enb_1_2_0_gated_8                : std_logic;
  SIGNAL stateControl_19                  : std_logic;
  SIGNAL stateControl_20                  : std_logic;
  SIGNAL enb_1_2_0_gated_9                : std_logic;
  SIGNAL enabled_qam_and_scrambler_out3   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL enabled_qam_and_scrambler_out3_unsigned : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay9_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL ready_out                        : std_logic;
  SIGNAL enabled_qam_and_scrambler_out2   : std_logic;
  SIGNAL valid_new                        : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Delay8_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL out_new_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL out_new_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL enabled_qam_and_scrambler_out4   : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL enabled_qam_and_scrambler_out6   : std_logic;
  SIGNAL enabled_qam_and_scrambler_out5   : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL sync_constellation_scrambler_out1 : std_logic;
  SIGNAL sync_constellation_scrambler_out2 : std_logic;
  SIGNAL out_new_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL out_new_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ofdm_modulator_out1_re           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out1_im           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out2              : std_logic;
  SIGNAL interpolator_out1_re             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL interpolator_out1_im             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL interpolator_out2                : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL frequency_upshift_out1           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL frequency_upshift_out2           : std_logic;

BEGIN
  u_sync_constellation_scrambler : full_tx_raw_src_sync_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              new_ofdm_symbol => enabled_qam_and_scrambler_out6,
              init => enabled_qam_and_scrambler_out5,  -- boolean [13]
              valid_in => Logical_Operator_out1,
              s1 => sync_constellation_scrambler_out1,
              s2 => sync_constellation_scrambler_out2
              );

  u_enabled_qam_and_scrambler : full_tx_raw_src_enabled_qam_and_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => std_logic_vector(Delay_out1),  -- ufix12
              valid_in => Delay2_out1,
              bits_per_subcarrier => std_logic_vector(Delay3_out1),  -- ufix4
              init => Delay4_out1,  -- boolean [13]
              new_rsvd => Delay5_out1,
              cp_len => std_logic_vector(Delay6_out1),  -- uint8
              s2_in => sync_constellation_scrambler_out2,
              s1_in => sync_constellation_scrambler_out1,
              Enable => ready_out_1,
              data_out_re => out_new_re,  -- sfix16_En14
              data_out_im => out_new_im,  -- sfix16_En14
              valid_out => enabled_qam_and_scrambler_out2,
              cp_len_out => enabled_qam_and_scrambler_out3,  -- uint8
              valid_scrambler => enabled_qam_and_scrambler_out4,
              init_out => enabled_qam_and_scrambler_out5,  -- boolean [13]
              new_out => enabled_qam_and_scrambler_out6
              );

  u_ofdm_modulator : full_tx_raw_src_ofdm_modulator_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => std_logic_vector(Delay8_out1_re),  -- sfix16_En14
              data_in_im => std_logic_vector(Delay8_out1_im),  -- sfix16_En14
              valid_in => Delay7_out1,
              cp_len => std_logic_vector(Delay9_out1),  -- uint8
              data_out_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_out_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_out => ofdm_modulator_out2,
              ready => ready_out
              );

  u_interpolator : full_tx_raw_src_interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_in_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_in => ofdm_modulator_out2,
              data_out_re => interpolator_out1_re,  -- sfix16_En14
              data_out_im => interpolator_out1_im,  -- sfix16_En14
              valid_out => interpolator_out2
              );

  u_rising_edge_detector : full_tx_raw_src_rising_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => interpolator_out2,
              Out_rsvd => rising_edge_detector_out1
              );

  u_frequency_upshift : full_tx_raw_src_frequency_upshift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in_re => interpolator_out1_re,  -- sfix16_En14
              data_in_im => interpolator_out1_im,  -- sfix16_En14
              valid_in => interpolator_out2,
              reset => rising_edge_detector_out1,
              data_out => frequency_upshift_out1,  -- sfix16_En14
              valid_out => frequency_upshift_out2
              );

  data_in_unsigned <= unsigned(data_in);

  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_2 <= stateControl_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enb_1_2_0_gated <= stateControl_2 AND enb_1_2_0;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_unsigned(16#000#, 12);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay_out1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS Delay_process;


  stateControl_3 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_4 <= stateControl_3;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  enb_1_2_0_gated_1 <= stateControl_4 AND enb_1_2_0;

  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  stateControl_5 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_6 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_6 <= stateControl_5;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  enb_1_2_0_gated_2 <= stateControl_6 AND enb_1_2_0;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay2_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay3_out1 <= bits_per_subcarrier_unsigned;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  stateControl_7 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_8 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_8 <= stateControl_7;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  enb_1_2_0_gated_3 <= stateControl_8 AND enb_1_2_0;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated_3 = '1' THEN
        Delay4_out1 <= init;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  stateControl_9 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_10 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_10 <= stateControl_9;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  enb_1_2_0_gated_4 <= stateControl_10 AND enb_1_2_0;

  cp_len_unsigned <= unsigned(cp_len);

  stateControl_11 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_12 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_12 <= stateControl_11;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  enb_1_2_0_gated_5 <= stateControl_12 AND enb_1_2_0;

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_2_0_gated_4 = '1' THEN
        Delay5_out1 <= new_ofdm_sym;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0_gated_5 = '1' THEN
        Delay6_out1 <= cp_len_unsigned;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  stateControl_13 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_14 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_14 <= stateControl_13;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  enb_1_2_0_gated_6 <= stateControl_14 AND enb_1_2_0;

  stateControl_15 <= '1';

  delayMatch8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_16 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_16 <= stateControl_15;
      END IF;
    END IF;
  END PROCESS delayMatch8_process;


  enb_1_2_0_gated_7 <= stateControl_16 AND enb_1_2_0;

  stateControl_17 <= '1';

  delayMatch7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_18 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_18 <= stateControl_17;
      END IF;
    END IF;
  END PROCESS delayMatch7_process;


  enb_1_2_0_gated_8 <= stateControl_18 AND enb_1_2_0;

  stateControl_19 <= '1';

  delayMatch9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_20 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_20 <= stateControl_19;
      END IF;
    END IF;
  END PROCESS delayMatch9_process;


  enb_1_2_0_gated_9 <= stateControl_20 AND enb_1_2_0;

  enabled_qam_and_scrambler_out3_unsigned <= unsigned(enabled_qam_and_scrambler_out3);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0_gated_9 = '1' THEN
        Delay9_out1 <= enabled_qam_and_scrambler_out3_unsigned;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  valid_new <= ready_out AND enabled_qam_and_scrambler_out2;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb_1_2_0_gated_8 = '1' THEN
        Delay7_out1 <= valid_new;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  out_new_im_signed <= signed(out_new_im);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_1 <= '0';
      ELSIF enb_1_2_0_gated_6 = '1' THEN
        ready_out_1 <= ready_out;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Logical_Operator_out1 <= enabled_qam_and_scrambler_out4 AND ready_out;

  out_new_re_signed <= signed(out_new_re);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_re <= to_signed(16#0000#, 16);
        Delay8_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0_gated_7 = '1' THEN
        Delay8_out1_re <= out_new_re_signed;
        Delay8_out1_im <= out_new_im_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  data_out <= frequency_upshift_out1;

  valid_out <= frequency_upshift_out2;

  ready <= ready_out_1;

END rtl;

