-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_raw_src_Mixer.vhd
-- Created: 2024-08-31 20:20:58
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_raw_src_Mixer
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/frequency_upshift/Mixer
-- Hierarchy Level: 3
-- Model version: 4.99
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_tx_raw_src_full_tx_pac.ALL;

ENTITY full_tx_raw_src_Mixer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ncoIn_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ncoIn_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        mixedOut                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END full_tx_raw_src_Mixer;


ARCHITECTURE rtl OF full_tx_raw_src_Mixer IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay1_reg                       : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16 [2]
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ncoIn_re_signed                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ncoIn_im_signed                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay3_reg                       : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16 [2]
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay6_out1                      : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay2_reg                       : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16 [2]
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_gated_4                      : std_logic;
  SIGNAL Delay4_reg                       : vector_of_signed16(0 TO 1) := (OTHERS => to_signed(16#0000#, 16));  -- sfix16 [2]
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product2_out1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch6_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_gated_5                      : std_logic;
  SIGNAL Delay7_out1                      : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14
  SIGNAL Add_out1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL enb_gated_6                      : std_logic;
  SIGNAL Delay12_out1                     : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En14

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  stateControl_1 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_2 <= delayMatch_reg(1);

  enb_gated <= stateControl_2 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        Delay1_reg(0) <= dataIn_re_signed;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  ncoIn_re_signed <= signed(ncoIn_re);

  stateControl_3 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl_3;
        delayMatch3_reg(1) <= delayMatch3_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_4 <= delayMatch3_reg(1);

  enb_gated_1 <= stateControl_4 AND enb;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated_1 = '1' THEN
        Delay3_reg(0) <= ncoIn_re_signed;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Product1_mul_temp <= Delay1_out1 * Delay3_out1;
  Product1_out1 <= Product1_mul_temp(29 DOWNTO 14);

  stateControl_5 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch5_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch5_reg(0) <= stateControl_5;
        delayMatch5_reg(1) <= delayMatch5_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  stateControl_6 <= delayMatch5_reg(1);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated_2 = '1' THEN
        Delay6_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  dataIn_im_signed <= signed(dataIn_im);

  stateControl_7 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_7;
        delayMatch2_reg(1) <= delayMatch2_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_8 <= delayMatch2_reg(1);

  enb_gated_3 <= stateControl_8 AND enb;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated_3 = '1' THEN
        Delay2_reg(0) <= dataIn_im_signed;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  ncoIn_im_signed <= signed(ncoIn_im);

  stateControl_9 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch4_reg(0) <= stateControl_9;
        delayMatch4_reg(1) <= delayMatch4_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  stateControl_10 <= delayMatch4_reg(1);

  enb_gated_4 <= stateControl_10 AND enb;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated_4 = '1' THEN
        Delay4_reg(0) <= ncoIn_im_signed;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  Product2_mul_temp <= Delay2_out1 * Delay4_out1;
  Product2_out1 <= Product2_mul_temp(29 DOWNTO 14);

  stateControl_11 <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch6_reg(0) <= stateControl_11;
        delayMatch6_reg(1) <= delayMatch6_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  stateControl_12 <= delayMatch6_reg(1);

  enb_gated_5 <= stateControl_12 AND enb;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated_5 = '1' THEN
        Delay7_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Add_out1 <= Delay6_out1 - Delay7_out1;

  stateControl_13 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_13;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_14 <= delayMatch1_reg(1);

  enb_gated_6 <= stateControl_14 AND enb;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_gated_6 = '1' THEN
        Delay12_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  mixedOut <= std_logic_vector(Delay12_out1);

END rtl;

