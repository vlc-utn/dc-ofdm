-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_raw_src_frequency_upshift.vhd
-- Created: 2024-08-31 20:20:58
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_raw_src_frequency_upshift
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/frequency_upshift
-- Hierarchy Level: 2
-- Model version: 4.99
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_tx_raw_src_full_tx_pac.ALL;

ENTITY full_tx_raw_src_frequency_upshift IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_out                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic
        );
END full_tx_raw_src_frequency_upshift;


ARCHITECTURE rtl OF full_tx_raw_src_frequency_upshift IS

  -- Component Declarations
  COMPONENT full_tx_raw_src_NCO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          resetPhase                      :   IN    std_logic;
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_tx_raw_src_Mixer
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ncoIn_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ncoIn_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          mixedOut                        :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_tx_raw_src_NCO
    USE ENTITY work.full_tx_raw_src_NCO(rtl);

  FOR ALL : full_tx_raw_src_Mixer
    USE ENTITY work.full_tx_raw_src_Mixer(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Delay3_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL enb_gated_1                      : std_logic;
  SIGNAL Delay_reg_re                     : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Delay_reg_im                     : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL Delay_out1_re                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_out1_im                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_gated_2                      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out2                         : std_logic;
  SIGNAL Mixer_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_gated_3                      : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  u_NCO : full_tx_raw_src_NCO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              resetPhase => reset,
              validIn => Delay2_out1,
              complexexp_re => NCO_out1_re,  -- sfix16_En14
              complexexp_im => NCO_out1_im,  -- sfix16_En14
              validOut => NCO_out2
              );

  u_Mixer : full_tx_raw_src_Mixer
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => std_logic_vector(Delay_out1_re),  -- sfix16_En14
              dataIn_im => std_logic_vector(Delay_out1_im),  -- sfix16_En14
              ncoIn_re => NCO_out1_re,  -- sfix16_En14
              ncoIn_im => NCO_out1_im,  -- sfix16_En14
              mixedOut => Mixer_out1  -- sfix16_En14
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  stateControl <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch3_reg(0) <= stateControl;
        delayMatch3_reg(1) <= delayMatch3_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  stateControl_1 <= delayMatch3_reg(1);

  enb_gated <= stateControl_1 AND enb;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_re <= to_signed(16#0000#, 16);
        Delay3_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_gated = '1' THEN
        Delay3_out1_re <= data_in_re_signed;
        Delay3_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  stateControl_3 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch_reg(0) <= stateControl_3;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  stateControl_4 <= delayMatch_reg(1);

  enb_gated_1 <= stateControl_4 AND enb;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_gated_1 = '1' THEN
        Delay_reg_im(0) <= Delay3_out1_im;
        Delay_reg_im(1 TO 5) <= Delay_reg_im(0 TO 4);
        Delay_reg_re(0) <= Delay3_out1_re;
        Delay_reg_re(1 TO 5) <= Delay_reg_re(0 TO 4);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(5);
  Delay_out1_im <= Delay_reg_im(5);

  stateControl_5 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch2_reg(0) <= stateControl_5;
        delayMatch2_reg(1) <= delayMatch2_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  stateControl_6 <= delayMatch2_reg(1);

  enb_gated_2 <= stateControl_6 AND enb;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_gated_2 = '1' THEN
        Delay2_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  stateControl_7 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch1_reg(0) <= stateControl_7;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  stateControl_8 <= delayMatch1_reg(1);

  enb_gated_3 <= stateControl_8 AND enb;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_gated_3 = '1' THEN
        Delay1_reg(0) <= NCO_out2;
        Delay1_reg(3 DOWNTO 1) <= Delay1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(3);

  data_out <= Mixer_out1;

  valid_out <= Delay1_out1;

END rtl;

