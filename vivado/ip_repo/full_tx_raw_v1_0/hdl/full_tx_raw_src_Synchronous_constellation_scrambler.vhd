-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/full_tx_raw_src_Synchronous_constellation_scrambler.vhd
-- Created: 2024-08-31 20:20:58
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_tx_raw_src_Synchronous_constellation_scrambler
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/sync_constellation_scrambler/Synchronous constellation scrambler
-- Hierarchy Level: 3
-- Model version: 4.99
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_tx_raw_src_Synchronous_constellation_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_symbol                   :   IN    std_logic;
        s1_out                            :   OUT   std_logic;
        s2_out                            :   OUT   std_logic
        );
END full_tx_raw_src_Synchronous_constellation_scrambler;


ARCHITECTURE rtl OF full_tx_raw_src_Synchronous_constellation_scrambler IS

  -- Signals
  SIGNAL init_1                           : std_logic;
  SIGNAL init_2                           : std_logic;
  SIGNAL init_3                           : std_logic;
  SIGNAL init_4                           : std_logic;
  SIGNAL init_5                           : std_logic;
  SIGNAL init_6                           : std_logic;
  SIGNAL init_7                           : std_logic;
  SIGNAL init_8                           : std_logic;
  SIGNAL init_9                           : std_logic;
  SIGNAL init_10                          : std_logic;
  SIGNAL init_11                          : std_logic;
  SIGNAL init_12                          : std_logic;
  SIGNAL init_0                           : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL s2_1                             : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL s3_out1                          : std_logic;
  SIGNAL Switch3_out1                     : std_logic;
  SIGNAL s4_out1                          : std_logic;
  SIGNAL Switch4_out1                     : std_logic;
  SIGNAL s5_out1                          : std_logic;
  SIGNAL Switch5_out1                     : std_logic;
  SIGNAL s6_out1                          : std_logic;
  SIGNAL Switch6_out1                     : std_logic;
  SIGNAL s7_out1                          : std_logic;
  SIGNAL Switch7_out1                     : std_logic;
  SIGNAL s8_out1                          : std_logic;
  SIGNAL Switch8_out1                     : std_logic;
  SIGNAL s9_out1                          : std_logic;
  SIGNAL Switch9_out1                     : std_logic;
  SIGNAL s10_out1                         : std_logic;
  SIGNAL Switch10_out1                    : std_logic;
  SIGNAL s11_out1                         : std_logic;
  SIGNAL Switch11_out1                    : std_logic;
  SIGNAL s12_out1                         : std_logic;
  SIGNAL Switch12_out1                    : std_logic;
  SIGNAL s13_out1                         : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Switch_out1                      : std_logic;

BEGIN
  -- nota: este LFSR deberia correr al doble de clock

  init_1 <= init(1);

  init_2 <= init(2);

  init_3 <= init(3);

  init_4 <= init(4);

  init_5 <= init(5);

  init_6 <= init(6);

  init_7 <= init(7);

  init_8 <= init(8);

  init_9 <= init(9);

  init_10 <= init(10);

  init_11 <= init(11);

  init_12 <= init(12);

  init_0 <= init(0);

  
  Switch1_out1 <= s1 WHEN new_ofdm_symbol = '0' ELSE
      init_1;

  s2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s2_1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s2_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS s2_process;


  
  Switch2_out1 <= s2_1 WHEN new_ofdm_symbol = '0' ELSE
      init_2;

  s3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s3_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s3_out1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS s3_process;


  
  Switch3_out1 <= s3_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_3;

  s4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s4_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s4_out1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS s4_process;


  
  Switch4_out1 <= s4_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_4;

  s5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s5_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s5_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS s5_process;


  
  Switch5_out1 <= s5_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_5;

  s6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s6_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s6_out1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS s6_process;


  
  Switch6_out1 <= s6_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_6;

  s7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s7_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s7_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS s7_process;


  
  Switch7_out1 <= s7_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_7;

  s8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s8_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s8_out1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS s8_process;


  
  Switch8_out1 <= s8_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_8;

  s9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s9_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s9_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS s9_process;


  
  Switch9_out1 <= s9_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_9;

  s10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s10_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s10_out1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS s10_process;


  
  Switch10_out1 <= s10_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_10;

  s11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s11_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s11_out1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS s11_process;


  
  Switch11_out1 <= s11_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_11;

  s12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s12_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s12_out1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS s12_process;


  
  Switch12_out1 <= s12_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_12;

  s13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s13_out1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s13_out1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS s13_process;


  Logical_Operator_out1 <= s13_out1 XOR s12_out1;

  Logical_Operator1_out1 <= Logical_Operator_out1 XOR s11_out1;

  Logical_Operator2_out1 <= Logical_Operator1_out1 XOR s8_out1;

  
  Switch_out1 <= Logical_Operator2_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_0;

  s1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s1 <= '0';
      ELSIF enb = '1' AND valid_in = '1' THEN
        s1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS s1_1_process;


  s1_out <= s1;

  s2_out <= s2_1;

END rtl;

