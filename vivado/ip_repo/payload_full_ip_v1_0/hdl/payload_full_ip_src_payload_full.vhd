-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLPayloadFull/payload_full_ip_src_payload_full.vhd
-- Created: 2024-08-31 17:52:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out_0      1e-08
-- ce_out_1      8e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- payload                       ce_out_0      1e-08
-- ctrl_out_start                ce_out_0      1e-08
-- ctrl_out_end                  ce_out_0      1e-08
-- ctrl_out_valid                ce_out_0      1e-08
-- ready                         ce_out_1      8e-08
-- len_in_ofdm_symbols           ce_out_0      1e-08
-- bits_per_subcarrier           ce_out_0      1e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: payload_full_ip_src_payload_full
-- Source Path: HDLPayloadFull/payload_full
-- Hierarchy Level: 0
-- Model version: 1.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY payload_full_ip_src_payload_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_in                          :   IN    std_logic;
        last_frame                        :   IN    std_logic;
        new_frame                         :   IN    std_logic;
        scrambler_init_0                  :   IN    std_logic;  -- boolean
        scrambler_init_1                  :   IN    std_logic;  -- boolean
        scrambler_init_2                  :   IN    std_logic;  -- boolean
        scrambler_init_3                  :   IN    std_logic;  -- boolean
        fec_rate_0                        :   IN    std_logic;  -- boolean
        fec_rate_1                        :   IN    std_logic;  -- boolean
        fec_rate_2                        :   IN    std_logic;  -- boolean
        block_size_0                      :   IN    std_logic;  -- boolean
        block_size_1                      :   IN    std_logic;  -- boolean
        bat_id_0                          :   IN    std_logic;  -- boolean
        bat_id_1                          :   IN    std_logic;  -- boolean
        bat_id_2                          :   IN    std_logic;  -- boolean
        bat_id_3                          :   IN    std_logic;  -- boolean
        bat_id_4                          :   IN    std_logic;  -- boolean
        psdu_size_0                       :   IN    std_logic;  -- boolean
        psdu_size_1                       :   IN    std_logic;  -- boolean
        psdu_size_2                       :   IN    std_logic;  -- boolean
        psdu_size_3                       :   IN    std_logic;  -- boolean
        psdu_size_4                       :   IN    std_logic;  -- boolean
        psdu_size_5                       :   IN    std_logic;  -- boolean
        psdu_size_6                       :   IN    std_logic;  -- boolean
        psdu_size_7                       :   IN    std_logic;  -- boolean
        psdu_size_8                       :   IN    std_logic;  -- boolean
        psdu_size_9                       :   IN    std_logic;  -- boolean
        psdu_size_10                      :   IN    std_logic;  -- boolean
        psdu_size_11                      :   IN    std_logic;  -- boolean
        psdu_size_12                      :   IN    std_logic;  -- boolean
        psdu_size_13                      :   IN    std_logic;  -- boolean
        psdu_size_14                      :   IN    std_logic;  -- boolean
        psdu_size_15                      :   IN    std_logic;  -- boolean
        psdu_size_16                      :   IN    std_logic;  -- boolean
        psdu_size_17                      :   IN    std_logic;  -- boolean
        psdu_size_18                      :   IN    std_logic;  -- boolean
        psdu_size_19                      :   IN    std_logic;  -- boolean
        psdu_size_20                      :   IN    std_logic;  -- boolean
        psdu_size_21                      :   IN    std_logic;  -- boolean
        psdu_size_22                      :   IN    std_logic;  -- boolean
        psdu_size_23                      :   IN    std_logic;  -- boolean
        rep_number_0                      :   IN    std_logic;  -- boolean
        rep_number_1                      :   IN    std_logic;  -- boolean
        rep_number_2                      :   IN    std_logic;  -- boolean
        ce_out_0                          :   OUT   std_logic;
        ce_out_1                          :   OUT   std_logic;
        payload                           :   OUT   std_logic;
        ctrl_out_start                    :   OUT   std_logic;
        ctrl_out_end                      :   OUT   std_logic;
        ctrl_out_valid                    :   OUT   std_logic;
        ready                             :   OUT   std_logic;
        len_in_ofdm_symbols               :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        bits_per_subcarrier               :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
        );
END payload_full_ip_src_payload_full;


ARCHITECTURE rtl OF payload_full_ip_src_payload_full IS

  -- Component Declarations
  COMPONENT payload_full_ip_src_payload_full_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_8_0                       :   OUT   std_logic;
          enb_1_8_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_valid_to_ctrl
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          validIn                         :   IN    std_logic;
          ctrlOut_start                   :   OUT   std_logic;
          ctrlOut_end                     :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_next_frame_to_ready
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_8_1                       :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          next_frame                      :   IN    std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_p_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;  -- ufix1
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          SI                              :   IN    std_logic_vector(3 DOWNTO 0);  -- boolean [4]
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_reduced_ldpc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic;
          next_frame                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_puncturer
    PORT( data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_payload_rep
    PORT( data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_batid_to_bits_per_subcarrier
    PORT( bat_id                          :   IN    std_logic_vector(4 DOWNTO 0);  -- boolean [5]
          bits_per_subcarrier             :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_psdu_size_to_payload_len
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_8_1                       :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- boolean [24]
          payload_len_in_ofdm_symbols     :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT payload_full_ip_src_tone_mapping
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          len_in_ofdm_symbols             :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          new_frame                       :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : payload_full_ip_src_payload_full_tc
    USE ENTITY work.payload_full_ip_src_payload_full_tc(rtl);

  FOR ALL : payload_full_ip_src_valid_to_ctrl
    USE ENTITY work.payload_full_ip_src_valid_to_ctrl(rtl);

  FOR ALL : payload_full_ip_src_next_frame_to_ready
    USE ENTITY work.payload_full_ip_src_next_frame_to_ready(rtl);

  FOR ALL : payload_full_ip_src_p_scrambler
    USE ENTITY work.payload_full_ip_src_p_scrambler(rtl);

  FOR ALL : payload_full_ip_src_reduced_ldpc
    USE ENTITY work.payload_full_ip_src_reduced_ldpc(rtl);

  FOR ALL : payload_full_ip_src_puncturer
    USE ENTITY work.payload_full_ip_src_puncturer(rtl);

  FOR ALL : payload_full_ip_src_payload_rep
    USE ENTITY work.payload_full_ip_src_payload_rep(rtl);

  FOR ALL : payload_full_ip_src_batid_to_bits_per_subcarrier
    USE ENTITY work.payload_full_ip_src_batid_to_bits_per_subcarrier(rtl);

  FOR ALL : payload_full_ip_src_psdu_size_to_payload_len
    USE ENTITY work.payload_full_ip_src_psdu_size_to_payload_len(rtl);

  FOR ALL : payload_full_ip_src_tone_mapping
    USE ENTITY work.payload_full_ip_src_tone_mapping(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_8_1                        : std_logic;
  SIGNAL enb_1_8_0                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Switch1_out1_1                   : std_logic;
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL data_in_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL data_in_1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y_1                              : std_logic;  -- ufix1
  SIGNAL y_2                              : std_logic;  -- ufix1
  SIGNAL y_3                              : std_logic;  -- ufix1
  SIGNAL y_4                              : std_logic;  -- ufix1
  SIGNAL y_5                              : std_logic;  -- ufix1
  SIGNAL y_6                              : std_logic;  -- ufix1
  SIGNAL y_7                              : std_logic;  -- ufix1
  SIGNAL y_8                              : std_logic;  -- ufix1
  SIGNAL y                                : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL serial_in_1                      : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL scrambler_init                   : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL scrambler_init_4                 : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Serializer1D_out2                : std_logic;
  SIGNAL valid_to_ctrl_out1_start         : std_logic;
  SIGNAL valid_to_ctrl_out1_end           : std_logic;
  SIGNAL valid_to_ctrl_out1_valid         : std_logic;
  SIGNAL reduced_ldpc_out3                : std_logic;
  SIGNAL reduced_ldpc_out3_1              : std_logic;
  SIGNAL Rate_Transition_out1             : std_logic;
  SIGNAL Rate_Transition_out1_1           : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL ready_1                          : std_logic;
  SIGNAL ready_2                          : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL control_in_2                     : std_logic;
  SIGNAL Serializer1D_contl_cnt           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Serializer1D_invldSignal         : std_logic;
  SIGNAL Serializer1D_data                : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL Serializer1D_data_next           : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL serializer_PostProcessed         : std_logic;  -- ufix1
  SIGNAL serializer_PostProcessed_1       : std_logic;  -- ufix1
  SIGNAL p_scrambler_out1                 : std_logic;
  SIGNAL p_scrambler_out2_start           : std_logic;
  SIGNAL p_scrambler_out2_end             : std_logic;
  SIGNAL p_scrambler_out2_valid           : std_logic;
  SIGNAL dataOut                          : std_logic;
  SIGNAL reduced_ldpc_out2_start          : std_logic;
  SIGNAL reduced_ldpc_out2_end            : std_logic;
  SIGNAL reduced_ldpc_out2_valid          : std_logic;
  SIGNAL puncturer_out1                   : std_logic;
  SIGNAL puncturer_out2_start             : std_logic;
  SIGNAL puncturer_out2_end               : std_logic;
  SIGNAL puncturer_out2_valid             : std_logic;
  SIGNAL payload_rep_out1                 : std_logic;
  SIGNAL ctrl_in_start                    : std_logic;
  SIGNAL ctrl_in_end                      : std_logic;
  SIGNAL ctrl_in_valid                    : std_logic;
  SIGNAL bat_id                           : std_logic_vector(4 DOWNTO 0);  -- boolean [5]
  SIGNAL y_9                              : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL y_unsigned                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL y_10                             : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL bits_per_subcarrier_tmp          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL bits_per_subcarrier_tmp_1        : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL psdu_size                        : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL psdu_size_to_payload_len_out1    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL psdu_size_to_payload_len_out1_unsigned : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL psdu_size_to_payload_len_out1_1  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL len_in_ofdm_symbols_tmp          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL len_in_ofdm_symbols_tmp_1        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL new_frame_1                      : std_logic;
  SIGNAL tone_mapping_out1                : std_logic;
  SIGNAL tone_mapping_out2_start          : std_logic;
  SIGNAL tone_mapping_out2_end            : std_logic;
  SIGNAL tone_mapping_out2_valid          : std_logic;

BEGIN
  -- Note: careful when adding delays to signals "ready, valid or data" outside this block

  u_payload_full_tc : payload_full_ip_src_payload_full_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1
              );

  u_valid_to_ctrl : payload_full_ip_src_valid_to_ctrl
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              validIn => Serializer1D_out2,
              ctrlOut_start => valid_to_ctrl_out1_start,
              ctrlOut_end => valid_to_ctrl_out1_end,
              ctrlOut_valid => valid_to_ctrl_out1_valid
              );

  u_next_frame_to_ready : payload_full_ip_src_next_frame_to_ready
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_8_1 => enb_1_8_1,
              enb_1_8_0 => enb_1_8_0,
              next_frame => Logical_Operator1_out1,
              ready => ready_1
              );

  u_p_scrambler : payload_full_ip_src_p_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => serializer_PostProcessed_1,  -- ufix1
              ctrl_in_start => valid_to_ctrl_out1_start,
              ctrl_in_end => valid_to_ctrl_out1_end,
              ctrl_in_valid => valid_to_ctrl_out1_valid,
              SI => scrambler_init_4,  -- boolean [4]
              data_out => p_scrambler_out1,
              ctrl_out_start => p_scrambler_out2_start,
              ctrl_out_end => p_scrambler_out2_end,
              ctrl_out_valid => p_scrambler_out2_valid
              );

  u_reduced_ldpc : payload_full_ip_src_reduced_ldpc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => p_scrambler_out1,
              ctrl_in_start => p_scrambler_out2_start,
              ctrl_in_end => p_scrambler_out2_end,
              ctrl_in_valid => p_scrambler_out2_valid,
              data_out => dataOut,
              ctrl_out_start => reduced_ldpc_out2_start,
              ctrl_out_end => reduced_ldpc_out2_end,
              ctrl_out_valid => reduced_ldpc_out2_valid,
              next_frame => reduced_ldpc_out3
              );

  u_puncturer : payload_full_ip_src_puncturer
    PORT MAP( data_in => dataOut,
              ctrl_in_start => reduced_ldpc_out2_start,
              ctrl_in_end => reduced_ldpc_out2_end,
              ctrl_in_valid => reduced_ldpc_out2_valid,
              data_out => puncturer_out1,
              ctrl_out_start => puncturer_out2_start,
              ctrl_out_end => puncturer_out2_end,
              ctrl_out_valid => puncturer_out2_valid
              );

  u_payload_rep : payload_full_ip_src_payload_rep
    PORT MAP( data_in => puncturer_out1,
              ctrl_in_start => puncturer_out2_start,
              ctrl_in_end => puncturer_out2_end,
              ctrl_in_valid => puncturer_out2_valid,
              data_out => payload_rep_out1,
              ctrl_out_start => ctrl_in_start,
              ctrl_out_end => ctrl_in_end,
              ctrl_out_valid => ctrl_in_valid
              );

  u_batid_to_bits_per_subcarrier : payload_full_ip_src_batid_to_bits_per_subcarrier
    PORT MAP( bat_id => bat_id,  -- boolean [5]
              bits_per_subcarrier => y_9  -- ufix4
              );

  u_psdu_size_to_payload_len : payload_full_ip_src_psdu_size_to_payload_len
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_8_1 => enb_1_8_1,
              enb_1_8_0 => enb_1_8_0,
              bits_per_subcarrier => y_9,  -- ufix4
              psdu_size => psdu_size,  -- boolean [24]
              payload_len_in_ofdm_symbols => psdu_size_to_payload_len_out1  -- uint16
              );

  u_tone_mapping : payload_full_ip_src_tone_mapping
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => payload_rep_out1,
              ctrl_in_start => ctrl_in_start,
              ctrl_in_end => ctrl_in_end,
              ctrl_in_valid => ctrl_in_valid,
              bits_per_subcarrier => bits_per_subcarrier_tmp_1,  -- ufix4
              len_in_ofdm_symbols => len_in_ofdm_symbols_tmp_1,  -- uint16
              new_frame => new_frame_1,
              data_out => tone_mapping_out1,
              ctrl_out_start => tone_mapping_out2_start,
              ctrl_out_end => tone_mapping_out2_end,
              ctrl_out_valid => tone_mapping_out2_valid
              );

  Logical_Operator5_out1 <= new_frame OR last_frame;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch1_out1_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  
  Switch1_out1 <= Switch1_out1_1 WHEN Logical_Operator5_out1 = '0' ELSE
      new_frame;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_in_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        valid_in_1 <= valid_in;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  data_in_unsigned <= unsigned(data_in);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_8_0 = '1' THEN
        data_in_1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  y_1 <= data_in_1(0);

  y_2 <= data_in_1(1);

  y_3 <= data_in_1(2);

  y_4 <= data_in_1(3);

  y_5 <= data_in_1(4);

  y_6 <= data_in_1(5);

  y_7 <= data_in_1(6);

  y_8 <= data_in_1(7);

  y(0) <= y_1;
  y(1) <= y_2;
  y(2) <= y_3;
  y(3) <= y_4;
  y(4) <= y_5;
  y(5) <= y_6;
  y(6) <= y_7;
  y(7) <= y_8;

  serial_in_1 <= y;

  scrambler_init(0) <= scrambler_init_0;
  scrambler_init(1) <= scrambler_init_1;
  scrambler_init(2) <= scrambler_init_2;
  scrambler_init(3) <= scrambler_init_3;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        scrambler_init_4 <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        scrambler_init_4 <= scrambler_init;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_ldpc_out3_1 <= '0';
      ELSIF enb = '1' THEN
        reduced_ldpc_out3_1 <= reduced_ldpc_out3;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  Rate_Transition_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1 <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Rate_Transition_out1 <= reduced_ldpc_out3_1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_output_process;


  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Rate_Transition_out1_1 <= Rate_Transition_out1;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  Logical_Operator1_out1 <= Switch1_out1 AND Rate_Transition_out1_1;

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_2 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        ready_2 <= ready_1;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  Logical_Operator_out1 <= ready_2 AND valid_in_1;

  control_in_2 <= Logical_Operator_out1;

  Serializer1D_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Serializer1D_contl_cnt <= to_unsigned(16#0#, 3);
      ELSIF enb = '1' THEN
        IF Serializer1D_contl_cnt = to_unsigned(16#7#, 3) THEN 
          Serializer1D_contl_cnt <= to_unsigned(16#0#, 3);
        ELSE 
          Serializer1D_contl_cnt <= Serializer1D_contl_cnt + to_unsigned(16#1#, 3);
        END IF;
      END IF;
    END IF;
  END PROCESS Serializer1D_contl_process;

  Serializer1D_out2 <= control_in_2;
  
  Serializer1D_invldSignal <= '1' WHEN Serializer1D_contl_cnt = to_unsigned(16#0#, 3) ELSE
      '0';

  Serializer1D_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Serializer1D_data <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Serializer1D_data <= Serializer1D_data_next;
      END IF;
    END IF;
  END PROCESS Serializer1D_process;

  Serializer1D_output : PROCESS (Serializer1D_data, Serializer1D_invldSignal, serial_in_1)
  BEGIN
    Serializer1D_data_next <= Serializer1D_data;
    IF Serializer1D_invldSignal /= '0' THEN 
      serializer_PostProcessed <= serial_in_1(0);
    ELSE 
      serializer_PostProcessed <= Serializer1D_data(0);
    END IF;
    IF Serializer1D_invldSignal /= '0' THEN 
      Serializer1D_data_next(6 DOWNTO 0) <= serial_in_1(7 DOWNTO 1);
    ELSE 
      Serializer1D_data_next(5 DOWNTO 0) <= Serializer1D_data(6 DOWNTO 1);
      Serializer1D_data_next(6) <= serial_in_1(7);
    END IF;
  END PROCESS Serializer1D_output;


  rd_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        serializer_PostProcessed_1 <= '0';
      ELSIF enb = '1' THEN
        serializer_PostProcessed_1 <= serializer_PostProcessed;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  bat_id(0) <= bat_id_0;
  bat_id(1) <= bat_id_1;
  bat_id(2) <= bat_id_2;
  bat_id(3) <= bat_id_3;
  bat_id(4) <= bat_id_4;

  y_unsigned <= unsigned(y_9);

  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        y_10 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_8_0 = '1' THEN
        y_10 <= y_unsigned;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  bits_per_subcarrier_tmp <= y_10;

  bits_per_subcarrier_tmp_1 <= std_logic_vector(bits_per_subcarrier_tmp);

  psdu_size(0) <= psdu_size_0;
  psdu_size(1) <= psdu_size_1;
  psdu_size(2) <= psdu_size_2;
  psdu_size(3) <= psdu_size_3;
  psdu_size(4) <= psdu_size_4;
  psdu_size(5) <= psdu_size_5;
  psdu_size(6) <= psdu_size_6;
  psdu_size(7) <= psdu_size_7;
  psdu_size(8) <= psdu_size_8;
  psdu_size(9) <= psdu_size_9;
  psdu_size(10) <= psdu_size_10;
  psdu_size(11) <= psdu_size_11;
  psdu_size(12) <= psdu_size_12;
  psdu_size(13) <= psdu_size_13;
  psdu_size(14) <= psdu_size_14;
  psdu_size(15) <= psdu_size_15;
  psdu_size(16) <= psdu_size_16;
  psdu_size(17) <= psdu_size_17;
  psdu_size(18) <= psdu_size_18;
  psdu_size(19) <= psdu_size_19;
  psdu_size(20) <= psdu_size_20;
  psdu_size(21) <= psdu_size_21;
  psdu_size(22) <= psdu_size_22;
  psdu_size(23) <= psdu_size_23;

  psdu_size_to_payload_len_out1_unsigned <= unsigned(psdu_size_to_payload_len_out1);

  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        psdu_size_to_payload_len_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_8_0 = '1' THEN
        psdu_size_to_payload_len_out1_1 <= psdu_size_to_payload_len_out1_unsigned;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  len_in_ofdm_symbols_tmp <= psdu_size_to_payload_len_out1_1;

  len_in_ofdm_symbols_tmp_1 <= std_logic_vector(len_in_ofdm_symbols_tmp);

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_frame_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        new_frame_1 <= new_frame;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  len_in_ofdm_symbols <= std_logic_vector(len_in_ofdm_symbols_tmp);

  bits_per_subcarrier <= std_logic_vector(bits_per_subcarrier_tmp);

  ce_out_0 <= enb_1_1_1;

  ce_out_1 <= enb_1_8_1;

  payload <= tone_mapping_out1;

  ctrl_out_start <= tone_mapping_out2_start;

  ctrl_out_end <= tone_mapping_out2_end;

  ctrl_out_valid <= tone_mapping_out2_valid;

  ready <= ready_1;

END rtl;

