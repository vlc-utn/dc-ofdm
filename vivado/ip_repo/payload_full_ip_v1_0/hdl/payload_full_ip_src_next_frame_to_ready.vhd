-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLPayloadFull/payload_full_ip_src_next_frame_to_ready.vhd
-- Created: 2024-08-31 17:52:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: payload_full_ip_src_next_frame_to_ready
-- Source Path: HDLPayloadFull/payload_full/next_frame_to_ready
-- Hierarchy Level: 1
-- Model version: 1.46
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.payload_full_ip_src_payload_full_pac.ALL;

ENTITY payload_full_ip_src_next_frame_to_ready IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        next_frame                        :   IN    std_logic;
        ready                             :   OUT   std_logic
        );
END payload_full_ip_src_next_frame_to_ready;


ARCHITECTURE rtl OF payload_full_ip_src_next_frame_to_ready IS

  -- Component Declarations
  COMPONENT payload_full_ip_src_rising_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : payload_full_ip_src_rising_edge_detector
    USE ENTITY work.payload_full_ip_src_rising_edge_detector(rtl);

  -- Signals
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL rising_edge_detector_out1_1      : std_logic;
  SIGNAL rising_edge_detector_out1_2      : std_logic;
  SIGNAL count_step                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_from                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HDL_Counter_out2                 : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL rd_1_reg                         : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Logical_Operator2_out1_1         : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL range_hit                        : std_logic;
  SIGNAL count                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_1                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_value_1                    : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rd_6_reg                         : vector_of_unsigned7(0 TO 1);  -- ufix7 [2]
  SIGNAL HDL_Counter_out1_1               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Unit_Delay_Enabled_Synchronous_out1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_1 : std_logic;
  SIGNAL rd_4_reg                         : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay_Enabled_Synchronous_out1_2 : std_logic;
  SIGNAL count_2                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_3                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HDL_Counter_bypass_reg           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HDL_Counter_out1_2               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HDL_Counter_out2_1               : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator3_out1_1         : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_ectrl_1 : std_logic;
  SIGNAL Unit_Delay_Enabled_Synchronous_lowered_bypass_reg : std_logic;  -- ufix1

BEGIN
  -- Given a next frame rising edge, this subsystem will generate a "ready" signal for the duration of "payloadWordsPerBlock0" 
  -- clock cycle

  u_rising_edge_detector : payload_full_ip_src_rising_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In_rsvd => next_frame,
              Out_rsvd => rising_edge_detector_out1
              );

  rising_edge_detector_out1_1 <= rising_edge_detector_out1;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rising_edge_detector_out1_2 <= '0';
      ELSIF enb = '1' THEN
        rising_edge_detector_out1_2 <= rising_edge_detector_out1_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 119
  count_step <= to_unsigned(16#01#, 7);

  count_from <= to_unsigned(16#00#, 7);

  Logical_Operator2_out1 <=  NOT HDL_Counter_out2;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_1_reg(0) <= Logical_Operator2_out1;
        rd_1_reg(1) <= rd_1_reg(0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  Logical_Operator2_out1_1 <= rd_1_reg(1);

  
  range_hit <= '1' WHEN HDL_Counter_out1 > to_unsigned(16#7E#, 7) ELSE
      '0';

  count <= HDL_Counter_out1 + count_step;

  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_1 <= to_unsigned(16#00#, 7);
      ELSIF enb = '1' THEN
        count_1 <= count;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        need_to_wrap_1 <= '0';
      ELSIF enb = '1' THEN
        need_to_wrap_1 <= need_to_wrap;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  
  count_value <= count_1 WHEN need_to_wrap_1 = '0' ELSE
      count_from;

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_value_1 <= to_unsigned(16#00#, 7);
      ELSIF enb = '1' THEN
        count_value_1 <= count_value;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_6_reg <= (OTHERS => to_unsigned(16#00#, 7));
      ELSIF enb = '1' THEN
        rd_6_reg(0) <= HDL_Counter_out1;
        rd_6_reg(1) <= rd_6_reg(0);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  HDL_Counter_out1_1 <= rd_6_reg(1);

  Unit_Delay_Enabled_Synchronous_out1_1 <= Unit_Delay_Enabled_Synchronous_out1;

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_4_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_4_reg(0) <= Unit_Delay_Enabled_Synchronous_out1_1;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  Unit_Delay_Enabled_Synchronous_out1_2 <= rd_4_reg(1);

  
  count_2 <= HDL_Counter_out1_1 WHEN Unit_Delay_Enabled_Synchronous_out1_2 = '0' ELSE
      count_value_1;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_3 <= to_unsigned(16#00#, 7);
      ELSIF enb = '1' THEN
        count_3 <= count_2;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  HDL_Counter_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_bypass_reg <= to_unsigned(16#00#, 7);
      ELSIF enb_1_8_1 = '1' THEN
        HDL_Counter_bypass_reg <= count_3;
      END IF;
    END IF;
  END PROCESS HDL_Counter_bypass_process;

  
  HDL_Counter_out1_2 <= count_3 WHEN enb_1_8_1 = '1' ELSE
      HDL_Counter_bypass_reg;

  HDL_Counter_out1 <= HDL_Counter_out1_2;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#77#, 7) ELSE
      '0';

  HDL_Counter_out2 <= need_to_wrap OR range_hit;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter_out2_1 <= '0';
      ELSIF enb = '1' THEN
        HDL_Counter_out2_1 <= HDL_Counter_out2;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Logical_Operator3_out1 <= rising_edge_detector_out1_2 OR HDL_Counter_out2_1;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Logical_Operator3_out1_1 <= Logical_Operator3_out1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  
  Unit_Delay_Enabled_Synchronous_ectrl <= Unit_Delay_Enabled_Synchronous_out1_2 WHEN Logical_Operator3_out1_1 = '0' ELSE
      Logical_Operator2_out1_1;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_Enabled_Synchronous_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay_Enabled_Synchronous_ectrl_1 <= Unit_Delay_Enabled_Synchronous_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Unit_Delay_Enabled_Synchronous_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_Enabled_Synchronous_lowered_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay_Enabled_Synchronous_lowered_bypass_reg <= Unit_Delay_Enabled_Synchronous_ectrl_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_Enabled_Synchronous_lowered_bypass_process;

  
  Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay_Enabled_Synchronous_lowered_bypass_reg;

  ready <= Unit_Delay_Enabled_Synchronous_out1;

END rtl;

