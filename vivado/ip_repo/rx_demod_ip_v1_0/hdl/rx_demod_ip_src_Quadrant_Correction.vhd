-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_Quadrant_Correction.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_Quadrant_Correction
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/frequency_offset_calculator/HDL_CMA_core/Quadrant_Correction
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_Quadrant_Correction IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        zin                               :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
        QA_Control                        :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
        zout                              :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
        );
END rx_demod_ip_src_Quadrant_Correction;


ARCHITECTURE rtl OF rx_demod_ip_src_Quadrant_Correction IS

  -- Signals
  SIGNAL QA_Control_unsigned              : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL yZeroXPositive                   : std_logic;  -- ufix1
  SIGNAL yZeroXNegative                   : std_logic;  -- ufix1
  SIGNAL xyNegative                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_0_reg                         : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL xyNegative_1                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL AbsRel                           : std_logic;  -- ufix1
  SIGNAL AbsRel_1                         : std_logic;  -- ufix1
  SIGNAL pidivtwo                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin_signed                       : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pivdivtwosubout                  : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pivdivtwosubout_1                : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zCast                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL mux1out                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL mux1out_1                        : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Negation_cast                    : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL Negation_cast_1                  : signed(19 DOWNTO 0);  -- sfix20_En18
  SIGNAL Negation_cast_2                  : signed(20 DOWNTO 0);  -- sfix21_En18
  SIGNAL mux1out_negate                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL mux1out_negate_1                 : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pionepos                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pionepos_1                       : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pi_subtraction                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pi_subtraction_1                 : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pioneneg                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL pioneneg_1                       : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL negpi_addition                   : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL rd_6_reg                         : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL yZeroXNegative_1                 : std_logic;  -- ufix1
  SIGNAL negpi_addition_1                 : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL mux2out                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL rd_11_reg                        : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL yZeroXPositive_1                 : std_logic;  -- ufix1
  SIGNAL rd_12_reg                        : vector_of_signed19(0 TO 1);  -- sfix19 [2]
  SIGNAL pionepos_2                       : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL mux5out                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zero                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL mux6out                          : signed(18 DOWNTO 0);  -- sfix19_En18

BEGIN
  QA_Control_unsigned <= unsigned(QA_Control);

  yZeroXPositive <= QA_Control_unsigned(4);

  yZeroXNegative <= QA_Control_unsigned(3);

  xyNegative <= QA_Control_unsigned(1 DOWNTO 0);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_0_reg <= (OTHERS => to_unsigned(16#0#, 2));
      ELSIF enb = '1' THEN
        rd_0_reg(0) <= xyNegative;
        rd_0_reg(1) <= rd_0_reg(0);
      END IF;
    END IF;
  END PROCESS rd_0_process;

  xyNegative_1 <= rd_0_reg(1);

  AbsRel <= QA_Control_unsigned(2);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        AbsRel_1 <= '0';
      ELSIF enb = '1' THEN
        AbsRel_1 <= AbsRel;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  pidivtwo <= to_signed(16#20000#, 19);

  zin_signed <= signed(zin);

  pivdivtwosubout <= pidivtwo - zin_signed;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        pivdivtwosubout_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        pivdivtwosubout_1 <= pivdivtwosubout;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zCast <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zCast <= zin_signed;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  
  mux1out <= pivdivtwosubout_1 WHEN AbsRel_1 = '0' ELSE
      zCast;

  rd_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mux1out_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        mux1out_1 <= mux1out;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  Negation_cast <= resize(mux1out, 20);
  Negation_cast_1 <=  - (Negation_cast);
  Negation_cast_2 <= resize(Negation_cast_1, 21);
  mux1out_negate <= Negation_cast_2(18 DOWNTO 0);

  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mux1out_negate_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        mux1out_negate_1 <= mux1out_negate;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  pionepos <= to_signed(16#3FFFF#, 19);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        pionepos_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        pionepos_1 <= pionepos;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  pi_subtraction <= pionepos_1 - mux1out;

  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        pi_subtraction_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        pi_subtraction_1 <= pi_subtraction;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  pioneneg <= to_signed(-16#40000#, 19);

  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        pioneneg_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        pioneneg_1 <= pioneneg;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  negpi_addition <= pioneneg_1 + mux1out;

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_6_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_6_reg(0) <= yZeroXNegative;
        rd_6_reg(1) <= rd_6_reg(0);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  yZeroXNegative_1 <= rd_6_reg(1);

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        negpi_addition_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        negpi_addition_1 <= negpi_addition;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  
  mux2out <= mux1out_1 WHEN xyNegative_1 = to_unsigned(16#0#, 2) ELSE
      mux1out_negate_1 WHEN xyNegative_1 = to_unsigned(16#1#, 2) ELSE
      pi_subtraction_1 WHEN xyNegative_1 = to_unsigned(16#2#, 2) ELSE
      negpi_addition_1;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_11_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_11_reg(0) <= yZeroXPositive;
        rd_11_reg(1) <= rd_11_reg(0);
      END IF;
    END IF;
  END PROCESS rd_11_process;

  yZeroXPositive_1 <= rd_11_reg(1);

  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_12_reg <= (OTHERS => to_signed(16#00000#, 19));
      ELSIF enb = '1' THEN
        rd_12_reg(0) <= pionepos;
        rd_12_reg(1) <= rd_12_reg(0);
      END IF;
    END IF;
  END PROCESS rd_12_process;

  pionepos_2 <= rd_12_reg(1);

  
  mux5out <= mux2out WHEN yZeroXNegative_1 = '0' ELSE
      pionepos_2;

  zero <= to_signed(16#00000#, 19);

  
  mux6out <= mux5out WHEN yZeroXPositive_1 = '0' ELSE
      zero;

  zout <= std_logic_vector(mux6out);

END rtl;

