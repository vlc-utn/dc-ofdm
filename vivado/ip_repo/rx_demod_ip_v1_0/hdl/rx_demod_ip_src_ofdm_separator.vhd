-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_ofdm_separator.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_ofdm_separator
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_separator
-- Hierarchy Level: 1
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_ofdm_separator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        peak                              :   IN    std_logic;
        psdu_size                         :   IN    std_logic_vector(23 DOWNTO 0);  -- boolean [24]
        payload_bits_per_subcarrier       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        payload_cp_len                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        header_ready                      :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_channel                     :   OUT   std_logic;
        valid_header                      :   OUT   std_logic;
        valid_payload                     :   OUT   std_logic;
        payload_num_ofdm_symbols          :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END rx_demod_ip_src_ofdm_separator;


ARCHITECTURE rtl OF rx_demod_ip_src_ofdm_separator IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_rising_edge_detector_block2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_psdu_size_to_payload_len
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- boolean [24]
          payload_len_in_ofdm_symbols     :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_Compare_To_Constant1
    PORT( u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_falling_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_wait_for_header
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          header_ready                    :   IN    std_logic;
          valid_payload                   :   IN    std_logic;
          zero_payload                    :   IN    std_logic;
          one_payload                     :   IN    std_logic;
          ofdm_samples                    :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_payload_out               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_rising_edge_detector_block2
    USE ENTITY work.rx_demod_ip_src_rising_edge_detector_block2(rtl);

  FOR ALL : rx_demod_ip_src_psdu_size_to_payload_len
    USE ENTITY work.rx_demod_ip_src_psdu_size_to_payload_len(rtl);

  FOR ALL : rx_demod_ip_src_Compare_To_Constant
    USE ENTITY work.rx_demod_ip_src_Compare_To_Constant(rtl);

  FOR ALL : rx_demod_ip_src_Compare_To_Constant1
    USE ENTITY work.rx_demod_ip_src_Compare_To_Constant1(rtl);

  FOR ALL : rx_demod_ip_src_falling_edge_detector_block
    USE ENTITY work.rx_demod_ip_src_falling_edge_detector_block(rtl);

  FOR ALL : rx_demod_ip_src_wait_for_header
    USE ENTITY work.rx_demod_ip_src_wait_for_header(rtl);

  -- Signals
  SIGNAL header_ready_1                   : std_logic;
  SIGNAL header_ready_2                   : std_logic;
  SIGNAL header_ready_3                   : std_logic;
  SIGNAL header_ready_4                   : std_logic;
  SIGNAL Delay16_out1                     : std_logic;
  SIGNAL Delay7_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay16_out1_1                   : std_logic;
  SIGNAL header_ready_5                   : std_logic;
  SIGNAL rd_2_reg                         : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL header_ready_6                   : std_logic;
  SIGNAL peak_1                           : std_logic;
  SIGNAL peak_2                           : std_logic;
  SIGNAL peak_3                           : std_logic;
  SIGNAL count_step                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_from                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_reset                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL zero                             : std_logic;
  SIGNAL Counter_channel_out1             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL range_hit                        : std_logic;
  SIGNAL count                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_value_1                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Counter_channel_out1_1           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Switch_out1_1                    : std_logic;
  SIGNAL Unit_Delay_bypass_reg            : std_logic;  -- ufix1
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Unit_Delay_out1_1                : std_logic;
  SIGNAL Counter_channel_out2             : std_logic;
  SIGNAL Counter_channel_out2_1           : std_logic;
  SIGNAL Delay_bypass_reg                 : std_logic;  -- ufix1
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay_out1_1                     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Switch_out1_2                    : std_logic;
  SIGNAL count_1                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_2                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_3                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Counter_channel_bypass_reg       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Counter_channel_out1_2           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_hit                        : std_logic;
  SIGNAL Counter_channel_out2_2           : std_logic;
  SIGNAL Delay5_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay5_out1_1                    : std_logic;
  SIGNAL Delay5_out1_2                    : std_logic;
  SIGNAL count_step_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from_1                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_reset_1                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL zero_2                           : std_logic;
  SIGNAL Counter_header_out1              : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL range_hit_1                      : std_logic;
  SIGNAL count_4                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_2                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_value_3                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Counter_header_out1_1            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Switch1_out1_1                   : std_logic;
  SIGNAL Unit_Delay1_bypass_reg           : std_logic;  -- ufix1
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL Unit_Delay1_out1_1               : std_logic;
  SIGNAL Counter_header_out2              : std_logic;
  SIGNAL Counter_header_out2_1            : std_logic;
  SIGNAL Delay1_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Switch1_out1_2                   : std_logic;
  SIGNAL count_5                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_6                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_7                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Counter_header_bypass_reg        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Counter_header_out1_2            : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_hit_1                      : std_logic;
  SIGNAL Counter_header_out2_2            : std_logic;
  SIGNAL Delay6_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay6_out1_1                    : std_logic;
  SIGNAL Counter_payload_ctrl_const_out   : std_logic;
  SIGNAL Counter_payload_ctrl_const_out_1 : std_logic;
  SIGNAL Counter_payload_ctrl_delay_bypass_reg : std_logic;  -- ufix1
  SIGNAL Counter_payload_ctrl_delay_out   : std_logic;
  SIGNAL Counter_payload_ctrl_delay_out_1 : std_logic;
  SIGNAL Counter_payload_Initial_Val_out  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_step_2                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_reset_2                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL rd_25_reg                        : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL count_reset_3                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL From4_out1                       : std_logic;
  SIGNAL Constant2_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL psdu_size_to_payload_len_out1    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL psdu_size_to_payload_len_out1_1  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL psdu_size_to_payload_len_out1_2  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL payload_cp_len_1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant1_out1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Add_out1                         : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Add_out1_1                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay3_bypass_reg                : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Delay3_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay3_out1_1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay3_out1_2                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL payloadNumOFDMSamples            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL payloadNumOFDMSamples_1          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL psdu_size_1                      : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Data_Type_Conversion1_out1_23    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_22    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_21    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_20    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_19    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_18    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_17    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_16    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_15    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_14    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_13    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_12    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_11    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_10    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_9     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_8     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_7     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_6     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_5     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_4     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_3     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_2     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_0     : std_logic;  -- ufix1
  SIGNAL y                                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL AND_out1_1                       : std_logic;
  SIGNAL AND_out1_2                       : std_logic;
  SIGNAL rd_30_reg                        : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL AND_out1_3                       : std_logic;
  SIGNAL zero_payload                     : std_logic;
  SIGNAL psdu_size_to_payload_len_out1_3  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL Delay15_bypass_reg               : std_logic;  -- ufix1
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL Delay15_out1_1                   : std_logic;
  SIGNAL Delay15_out1_2                   : std_logic;
  SIGNAL rd_32_reg                        : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay15_out1_3                   : std_logic;
  SIGNAL one_payload                      : std_logic;
  SIGNAL payloadNumOFDMSamples_2          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Switch2_out1_1                   : std_logic;
  SIGNAL Unit_Delay2_bypass_reg           : std_logic;  -- ufix1
  SIGNAL Unit_Delay2_out1                 : std_logic;
  SIGNAL Unit_Delay2_out1_1               : std_logic;
  SIGNAL Switch4_out1                     : std_logic;
  SIGNAL Switch4_out1_1                   : std_logic;
  SIGNAL Unit_Delay3_bypass_reg           : std_logic;  -- ufix1
  SIGNAL Unit_Delay3_out1                 : std_logic;
  SIGNAL Unit_Delay3_out1_1               : std_logic;
  SIGNAL Unit_Delay3_out1_2               : std_logic;
  SIGNAL wait_for_header_out2             : std_logic;
  SIGNAL b                                : std_logic;
  SIGNAL b_1                              : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator3_out1_1         : std_logic;
  SIGNAL From_out1                        : std_logic;
  SIGNAL From_out1_1                      : std_logic;
  SIGNAL rd_38_reg                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL From_out1_2                      : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay8_out1_1                    : std_logic;
  SIGNAL Switch3_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay4_bypass_reg                : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL payloadNumOFDMSamples_3          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL payloadNumOFDMSamples_4          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Counter_payload_out1             : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_8                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_9                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Counter_payload_out1_1           : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Switch2_out1_2                   : std_logic;
  SIGNAL count_10                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_11                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL rd_44_reg                        : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Logical_Operator2_out1_1         : std_logic;
  SIGNAL count_12                         : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Counter_payload_bypass_reg       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Counter_payload_out              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Counter_payload_out_1            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL hit                              : std_logic;
  SIGNAL hit_1                            : std_logic;
  SIGNAL Delay2_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_out1_1                    : std_logic;
  SIGNAL wait_for_header_out1_re          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wait_for_header_out1_im          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL t_bypass_reg                     : std_logic;  -- ufix1
  SIGNAL Switch_out1_3                    : std_logic;
  SIGNAL t1_bypass_reg                    : std_logic;  -- ufix1
  SIGNAL Switch1_out1_3                   : std_logic;

BEGIN
  -- FIFO delay
  -- Note: the payload is formed for a single "block0"
  -- high number to avoid a false "hit" on the payload counter (could be any)

  u_rising_edge_detector : rx_demod_ip_src_rising_edge_detector_block2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_rsvd => peak,
              Out_rsvd => peak_1
              );

  u_psdu_size_to_payload_len : rx_demod_ip_src_psdu_size_to_payload_len
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              bits_per_subcarrier => payload_bits_per_subcarrier,  -- uint8
              psdu_size => psdu_size,  -- boolean [24]
              payload_len_in_ofdm_symbols => psdu_size_to_payload_len_out1  -- uint16
              );

  u_Compare_To_Constant : rx_demod_ip_src_Compare_To_Constant
    PORT MAP( u => std_logic_vector(y),  -- ufix24
              y => Compare_To_Constant_out1
              );

  u_Compare_To_Constant1 : rx_demod_ip_src_Compare_To_Constant1
    PORT MAP( u => psdu_size_to_payload_len_out1_3,  -- uint16
              y => Compare_To_Constant1_out1
              );

  u_falling_edge_detector : rx_demod_ip_src_falling_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              in_rsvd => wait_for_header_out2,
              out_rsvd => b
              );

  u_wait_for_header : rx_demod_ip_src_wait_for_header
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => data_in_re,  -- sfix16_En14
              data_in_im => data_in_im,  -- sfix16_En14
              header_ready => header_ready_6,
              valid_payload => Switch2_out1,
              zero_payload => zero_payload,
              one_payload => one_payload,
              ofdm_samples => std_logic_vector(payloadNumOFDMSamples_2),  -- uint32
              data_out_re => wait_for_header_out1_re,  -- sfix16_En14
              data_out_im => wait_for_header_out1_im,  -- sfix16_En14
              valid_payload_out => wait_for_header_out2
              );

  header_ready_1 <= header_ready;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        header_ready_2 <= '0';
      ELSIF enb = '1' THEN
        header_ready_2 <= header_ready_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  Delay16_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        header_ready_3 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        header_ready_3 <= header_ready_2;
      END IF;
    END IF;
  END PROCESS Delay16_output_process;


  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        header_ready_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        header_ready_4 <= header_ready_3;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  Delay16_out1 <= header_ready_4;

  Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay7_bypass_reg <= Delay16_out1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  Delay16_out1_1 <= Delay16_out1 WHEN enb_1_2_1 = '1' ELSE
      Delay7_bypass_reg;

  header_ready_5 <= Delay16_out1_1;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_2_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_2_reg(0) <= header_ready_5;
        rd_2_reg(5 DOWNTO 1) <= rd_2_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_2_process;

  header_ready_6 <= rd_2_reg(5);

  peak_2 <= peak_1;

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        peak_3 <= '0';
      ELSIF enb = '1' THEN
        peak_3 <= peak_2;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 638
  count_step <= to_unsigned(16#001#, 10);

  count_from <= to_unsigned(16#000#, 10);

  count_reset <= to_unsigned(16#000#, 10);

  zero <= '0';

  
  range_hit <= '1' WHEN Counter_channel_out1 > to_unsigned(16#3FE#, 10) ELSE
      '0';

  count <= Counter_channel_out1 + count_step;

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_value_1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        count_value_1 <= count_value;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_channel_out1_1 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        Counter_channel_out1_1 <= Counter_channel_out1;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  Unit_Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Unit_Delay_bypass_reg <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_bypass_process;

  
  Unit_Delay_out1 <= Switch_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Unit_Delay_bypass_reg;

  Unit_Delay_out1_1 <= Unit_Delay_out1;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_channel_out2_1 <= '0';
      ELSIF enb = '1' THEN
        Counter_channel_out2_1 <= Counter_channel_out2;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg <= Counter_channel_out2_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= Counter_channel_out2_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg;

  Delay_out1_1 <= Delay_out1;

  Logical_Operator_out1 <= peak_2 OR Delay_out1_1;

  
  Switch_out1 <= Unit_Delay_out1_1 WHEN Logical_Operator_out1 = '0' ELSE
      peak_2;

  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Switch_out1_2 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  
  count_1 <= Counter_channel_out1_1 WHEN Switch_out1_2 = '0' ELSE
      count_value_1;

  
  count_2 <= count_1 WHEN peak_3 = '0' ELSE
      count_reset;

  rd_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_3 <= to_unsigned(16#000#, 10);
      ELSIF enb = '1' THEN
        count_3 <= count_2;
      END IF;
    END IF;
  END PROCESS rd_13_process;


  Counter_channel_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_channel_bypass_reg <= to_unsigned(16#000#, 10);
      ELSIF enb_1_2_1 = '1' THEN
        Counter_channel_bypass_reg <= count_3;
      END IF;
    END IF;
  END PROCESS Counter_channel_bypass_process;

  
  Counter_channel_out1_2 <= count_3 WHEN enb_1_2_1 = '1' ELSE
      Counter_channel_bypass_reg;

  Counter_channel_out1 <= Counter_channel_out1_2;

  
  need_to_wrap <= '1' WHEN Counter_channel_out1 = to_unsigned(16#27E#, 10) ELSE
      '0';

  count_hit <= need_to_wrap OR range_hit;

  
  Counter_channel_out2 <= count_hit WHEN peak_2 = '0' ELSE
      zero;

  rd_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_channel_out2_2 <= '0';
      ELSIF enb = '1' THEN
        Counter_channel_out2_2 <= Counter_channel_out2;
      END IF;
    END IF;
  END PROCESS rd_14_process;


  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay5_bypass_reg <= Counter_channel_out2_2;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Delay5_out1 <= Counter_channel_out2_2 WHEN enb_1_2_1 = '1' ELSE
      Delay5_bypass_reg;

  Delay5_out1_1 <= Delay5_out1;

  rd_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= Delay5_out1_1;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 318
  count_step_1 <= to_unsigned(16#001#, 9);

  count_from_1 <= to_unsigned(16#000#, 9);

  count_reset_1 <= to_unsigned(16#000#, 9);

  zero_2 <= '0';

  
  range_hit_1 <= '1' WHEN Counter_header_out1 > to_unsigned(16#1FE#, 9) ELSE
      '0';

  count_4 <= Counter_header_out1 + count_step_1;

  
  count_value_2 <= count_4 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  rd_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_value_3 <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        count_value_3 <= count_value_2;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  rd_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_header_out1_1 <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        Counter_header_out1_1 <= Counter_header_out1;
      END IF;
    END IF;
  END PROCESS rd_19_process;


  rd_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  Unit_Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Unit_Delay1_bypass_reg <= Switch1_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_bypass_process;

  
  Unit_Delay1_out1 <= Switch1_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Unit_Delay1_bypass_reg;

  Unit_Delay1_out1_1 <= Unit_Delay1_out1;

  rd_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_header_out2_1 <= '0';
      ELSIF enb = '1' THEN
        Counter_header_out2_1 <= Counter_header_out2;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg <= Counter_header_out2_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= Counter_header_out2_1 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg;

  Delay1_out1_1 <= Delay1_out1;

  Logical_Operator1_out1 <= Delay5_out1_1 OR Delay1_out1_1;

  
  Switch1_out1 <= Unit_Delay1_out1_1 WHEN Logical_Operator1_out1 = '0' ELSE
      Delay5_out1_1;

  rd_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch1_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Switch1_out1_2 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  
  count_5 <= Counter_header_out1_1 WHEN Switch1_out1_2 = '0' ELSE
      count_value_3;

  
  count_6 <= count_5 WHEN Delay5_out1_2 = '0' ELSE
      count_reset_1;

  rd_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_7 <= to_unsigned(16#000#, 9);
      ELSIF enb = '1' THEN
        count_7 <= count_6;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  Counter_header_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_header_bypass_reg <= to_unsigned(16#000#, 9);
      ELSIF enb_1_2_1 = '1' THEN
        Counter_header_bypass_reg <= count_7;
      END IF;
    END IF;
  END PROCESS Counter_header_bypass_process;

  
  Counter_header_out1_2 <= count_7 WHEN enb_1_2_1 = '1' ELSE
      Counter_header_bypass_reg;

  Counter_header_out1 <= Counter_header_out1_2;

  
  need_to_wrap_1 <= '1' WHEN Counter_header_out1 = to_unsigned(16#13E#, 9) ELSE
      '0';

  count_hit_1 <= need_to_wrap_1 OR range_hit_1;

  
  Counter_header_out2 <= count_hit_1 WHEN Delay5_out1_1 = '0' ELSE
      zero_2;

  rd_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_header_out2_2 <= '0';
      ELSIF enb = '1' THEN
        Counter_header_out2_2 <= Counter_header_out2;
      END IF;
    END IF;
  END PROCESS rd_24_process;


  Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay6_bypass_reg <= Counter_header_out2_2;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;

  
  Delay6_out1 <= Counter_header_out2_2 WHEN enb_1_2_1 = '1' ELSE
      Delay6_bypass_reg;

  Delay6_out1_1 <= Delay6_out1;

  Counter_payload_ctrl_const_out <= '1';

  rd_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_payload_ctrl_const_out_1 <= '0';
      ELSIF enb = '1' THEN
        Counter_payload_ctrl_const_out_1 <= Counter_payload_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS rd_26_process;


  Counter_payload_ctrl_delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_payload_ctrl_delay_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Counter_payload_ctrl_delay_bypass_reg <= Counter_payload_ctrl_const_out_1;
      END IF;
    END IF;
  END PROCESS Counter_payload_ctrl_delay_bypass_process;

  
  Counter_payload_ctrl_delay_out <= Counter_payload_ctrl_const_out_1 WHEN enb_1_2_1 = '1' ELSE
      Counter_payload_ctrl_delay_bypass_reg;

  Counter_payload_ctrl_delay_out_1 <= Counter_payload_ctrl_delay_out;

  Counter_payload_Initial_Val_out <= to_unsigned(2, 32);

  -- Free running, Unsigned Counter
  --  initial value   = 2
  --  step value      = 1
  count_step_2 <= to_unsigned(1, 32);

  count_reset_2 <= to_unsigned(2, 32);

  rd_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_25_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        rd_25_reg(0) <= count_reset_2;
        rd_25_reg(1) <= rd_25_reg(0);
      END IF;
    END IF;
  END PROCESS rd_25_process;

  count_reset_3 <= rd_25_reg(1);

  rd_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From4_out1 <= '0';
      ELSIF enb = '1' THEN
        From4_out1 <= Delay16_out1;
      END IF;
    END IF;
  END PROCESS rd_28_process;


  Constant2_out1 <= to_unsigned(65535, 32);

  psdu_size_to_payload_len_out1_1 <= unsigned(psdu_size_to_payload_len_out1);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        psdu_size_to_payload_len_out1_2 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        psdu_size_to_payload_len_out1_2 <= psdu_size_to_payload_len_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  payload_cp_len_1 <= unsigned(payload_cp_len);

  Constant1_out1 <= to_unsigned(16#100#, 9);

  Add_out1 <= resize(resize(payload_cp_len_1, 10) + resize(Constant1_out1, 10), 16);

  rd_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add_out1_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS rd_27_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Add_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Add_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay3_out1_1 <= Delay3_out1;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_2 <= to_unsigned(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  payloadNumOFDMSamples <= psdu_size_to_payload_len_out1_2 * Delay3_out1_2;

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        payloadNumOFDMSamples_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        payloadNumOFDMSamples_1 <= payloadNumOFDMSamples;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  psdu_size_1 <= psdu_size;

  Data_Type_Conversion1_out1 <= psdu_size_1;

  Data_Type_Conversion1_out1_23 <= Data_Type_Conversion1_out1(23);

  Data_Type_Conversion1_out1_22 <= Data_Type_Conversion1_out1(22);

  Data_Type_Conversion1_out1_21 <= Data_Type_Conversion1_out1(21);

  Data_Type_Conversion1_out1_20 <= Data_Type_Conversion1_out1(20);

  Data_Type_Conversion1_out1_19 <= Data_Type_Conversion1_out1(19);

  Data_Type_Conversion1_out1_18 <= Data_Type_Conversion1_out1(18);

  Data_Type_Conversion1_out1_17 <= Data_Type_Conversion1_out1(17);

  Data_Type_Conversion1_out1_16 <= Data_Type_Conversion1_out1(16);

  Data_Type_Conversion1_out1_15 <= Data_Type_Conversion1_out1(15);

  Data_Type_Conversion1_out1_14 <= Data_Type_Conversion1_out1(14);

  Data_Type_Conversion1_out1_13 <= Data_Type_Conversion1_out1(13);

  Data_Type_Conversion1_out1_12 <= Data_Type_Conversion1_out1(12);

  Data_Type_Conversion1_out1_11 <= Data_Type_Conversion1_out1(11);

  Data_Type_Conversion1_out1_10 <= Data_Type_Conversion1_out1(10);

  Data_Type_Conversion1_out1_9 <= Data_Type_Conversion1_out1(9);

  Data_Type_Conversion1_out1_8 <= Data_Type_Conversion1_out1(8);

  Data_Type_Conversion1_out1_7 <= Data_Type_Conversion1_out1(7);

  Data_Type_Conversion1_out1_6 <= Data_Type_Conversion1_out1(6);

  Data_Type_Conversion1_out1_5 <= Data_Type_Conversion1_out1(5);

  Data_Type_Conversion1_out1_4 <= Data_Type_Conversion1_out1(4);

  Data_Type_Conversion1_out1_3 <= Data_Type_Conversion1_out1(3);

  Data_Type_Conversion1_out1_2 <= Data_Type_Conversion1_out1(2);

  Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1(1);

  Data_Type_Conversion1_out1_0 <= Data_Type_Conversion1_out1(0);

  y <= unsigned'(Data_Type_Conversion1_out1_23 & Data_Type_Conversion1_out1_22 & Data_Type_Conversion1_out1_21 & Data_Type_Conversion1_out1_20 & Data_Type_Conversion1_out1_19 & Data_Type_Conversion1_out1_18 & Data_Type_Conversion1_out1_17 & Data_Type_Conversion1_out1_16 & Data_Type_Conversion1_out1_15 & Data_Type_Conversion1_out1_14 & Data_Type_Conversion1_out1_13 & Data_Type_Conversion1_out1_12 & Data_Type_Conversion1_out1_11 & Data_Type_Conversion1_out1_10 & Data_Type_Conversion1_out1_9 & Data_Type_Conversion1_out1_8 & Data_Type_Conversion1_out1_7 & Data_Type_Conversion1_out1_6 & Data_Type_Conversion1_out1_5 & Data_Type_Conversion1_out1_4 & Data_Type_Conversion1_out1_3 & Data_Type_Conversion1_out1_2 & Data_Type_Conversion1_out1_1 & Data_Type_Conversion1_out1_0);

  AND_out1 <= Compare_To_Constant_out1 AND Delay16_out1;

  rd_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        AND_out1_1 <= '0';
      ELSIF enb = '1' THEN
        AND_out1_1 <= AND_out1;
      END IF;
    END IF;
  END PROCESS rd_29_process;


  Delay10_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        AND_out1_2 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        AND_out1_2 <= AND_out1_1;
      END IF;
    END IF;
  END PROCESS Delay10_output_process;


  rd_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_30_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_30_reg(0) <= AND_out1_2;
        rd_30_reg(4 DOWNTO 1) <= rd_30_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_30_process;

  AND_out1_3 <= rd_30_reg(4);

  zero_payload <= AND_out1_3;

  psdu_size_to_payload_len_out1_3 <= std_logic_vector(unsigned(psdu_size_to_payload_len_out1));

  rd_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Compare_To_Constant1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Compare_To_Constant1_out1_1 <= Compare_To_Constant1_out1;
      END IF;
    END IF;
  END PROCESS rd_31_process;


  Delay15_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay15_bypass_reg <= Compare_To_Constant1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay15_bypass_process;

  
  Delay15_out1 <= Compare_To_Constant1_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay15_bypass_reg;

  Delay15_out1_1 <= Delay15_out1;

  Delay13_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_out1_2 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay15_out1_2 <= Delay15_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_output_process;


  rd_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_32_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_32_reg(0) <= Delay15_out1_2;
        rd_32_reg(1) <= rd_32_reg(0);
      END IF;
    END IF;
  END PROCESS rd_32_process;

  Delay15_out1_3 <= rd_32_reg(1);

  one_payload <= Delay15_out1_3;

  rd_33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch2_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch2_out1_1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS rd_33_process;


  Unit_Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay2_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Unit_Delay2_bypass_reg <= Switch2_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_bypass_process;

  
  Unit_Delay2_out1 <= Switch2_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Unit_Delay2_bypass_reg;

  Unit_Delay2_out1_1 <= Unit_Delay2_out1;

  rd_34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch4_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch4_out1_1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS rd_34_process;


  Unit_Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay3_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Unit_Delay3_bypass_reg <= Switch4_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_bypass_process;

  
  Unit_Delay3_out1 <= Switch4_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Unit_Delay3_bypass_reg;

  Unit_Delay3_out1_1 <= Unit_Delay3_out1;

  rd_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay3_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay3_out1_2 <= Unit_Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  b_1 <= b;

  Logical_Operator3_out1 <= b_1 OR Delay16_out1;

  rd_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Logical_Operator3_out1_1 <= Logical_Operator3_out1;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  
  Switch4_out1 <= Unit_Delay3_out1_2 WHEN Logical_Operator3_out1_1 = '0' ELSE
      From4_out1;

  rd_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From_out1 <= '0';
      ELSIF enb = '1' THEN
        From_out1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  Delay8_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From_out1_1 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        From_out1_1 <= From_out1;
      END IF;
    END IF;
  END PROCESS Delay8_output_process;


  rd_38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_38_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_38_reg(0) <= From_out1_1;
        rd_38_reg(2 DOWNTO 1) <= rd_38_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_38_process;

  From_out1_2 <= rd_38_reg(2);

  Delay8_out1 <= From_out1_2;

  rd_39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1_1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS rd_39_process;


  
  Switch3_out1 <= Constant2_out1 WHEN Delay8_out1_1 = '0' ELSE
      payloadNumOFDMSamples_1;

  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_bypass_reg <= to_unsigned(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay4_bypass_reg <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  payloadNumOFDMSamples_2 <= Switch3_out1 WHEN enb_1_2_1 = '1' ELSE
      Delay4_bypass_reg;

  payloadNumOFDMSamples_3 <= payloadNumOFDMSamples_2;

  payloadNumOFDMSamples_4 <= payloadNumOFDMSamples_3;

  count_8 <= Counter_payload_out1 + count_step_2;

  rd_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_9 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        count_9 <= count_8;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  rd_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_payload_out1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Counter_payload_out1_1 <= Counter_payload_out1;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  rd_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch2_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Switch2_out1_2 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  
  count_10 <= Counter_payload_out1_1 WHEN Switch2_out1_2 = '0' ELSE
      count_9;

  rd_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_11 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        count_11 <= count_10;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  rd_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_44_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_44_reg(0) <= Logical_Operator2_out1;
        rd_44_reg(1) <= rd_44_reg(0);
      END IF;
    END IF;
  END PROCESS rd_44_process;

  Logical_Operator2_out1_1 <= rd_44_reg(1);

  
  count_12 <= count_11 WHEN Logical_Operator2_out1_1 = '0' ELSE
      count_reset_3;

  Counter_payload_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Counter_payload_bypass_reg <= to_unsigned(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Counter_payload_bypass_reg <= count_12;
      END IF;
    END IF;
  END PROCESS Counter_payload_bypass_process;

  
  Counter_payload_out <= count_12 WHEN enb_1_2_1 = '1' ELSE
      Counter_payload_bypass_reg;

  Counter_payload_out_1 <= Counter_payload_out;

  
  Counter_payload_out1 <= Counter_payload_Initial_Val_out WHEN Counter_payload_ctrl_delay_out_1 = '0' ELSE
      Counter_payload_out_1;

  
  hit <= '1' WHEN Counter_payload_out1 >= payloadNumOFDMSamples_4 ELSE
      '0';

  rd_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hit_1 <= '0';
      ELSIF enb = '1' THEN
        hit_1 <= hit;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_reg <= hit_1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= hit_1 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay2_out1_1 <= Delay2_out1;

  Logical_Operator2_out1 <= Delay6_out1_1 OR Delay2_out1_1;

  
  Switch2_out1 <= Unit_Delay2_out1_1 WHEN Logical_Operator2_out1 = '0' ELSE
      Delay6_out1_1;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t_bypass_reg <= Switch_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Switch_out1_3 <= Switch_out1 WHEN enb_1_2_1 = '1' ELSE
      t_bypass_reg;

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t1_bypass_reg <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Switch1_out1_3 <= Switch1_out1 WHEN enb_1_2_1 = '1' ELSE
      t1_bypass_reg;

  data_out_re <= wait_for_header_out1_re;

  data_out_im <= wait_for_header_out1_im;

  valid_channel <= Switch_out1_3;

  valid_header <= Switch1_out1_3;

  valid_payload <= wait_for_header_out2;

  payload_num_ofdm_symbols <= psdu_size_to_payload_len_out1;

END rtl;

