-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_rx_demodulator_full.vhd
-- Created: 2024-09-22 18:53:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 8e-09
-- Target subsystem base rate: 8e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.6e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out_0                    ce_out        1.6e-08
-- data_out_1                    ce_out        1.6e-08
-- data_out_2                    ce_out        1.6e-08
-- data_out_3                    ce_out        1.6e-08
-- valid_header                  ce_out        1.6e-08
-- valid_payload                 ce_out        1.6e-08
-- last_frame                    ce_out        1.6e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_rx_demodulator_full
-- Source Path: HDLRxDemodulator/rx_demodulator_full
-- Hierarchy Level: 0
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_rx_demodulator_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        payload_cp_len                    :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        payload_bits_per_subcarrier       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        psdu_size_0                       :   IN    std_logic;  -- boolean
        psdu_size_1                       :   IN    std_logic;  -- boolean
        psdu_size_2                       :   IN    std_logic;  -- boolean
        psdu_size_3                       :   IN    std_logic;  -- boolean
        psdu_size_4                       :   IN    std_logic;  -- boolean
        psdu_size_5                       :   IN    std_logic;  -- boolean
        psdu_size_6                       :   IN    std_logic;  -- boolean
        psdu_size_7                       :   IN    std_logic;  -- boolean
        psdu_size_8                       :   IN    std_logic;  -- boolean
        psdu_size_9                       :   IN    std_logic;  -- boolean
        psdu_size_10                      :   IN    std_logic;  -- boolean
        psdu_size_11                      :   IN    std_logic;  -- boolean
        psdu_size_12                      :   IN    std_logic;  -- boolean
        psdu_size_13                      :   IN    std_logic;  -- boolean
        psdu_size_14                      :   IN    std_logic;  -- boolean
        psdu_size_15                      :   IN    std_logic;  -- boolean
        psdu_size_16                      :   IN    std_logic;  -- boolean
        psdu_size_17                      :   IN    std_logic;  -- boolean
        psdu_size_18                      :   IN    std_logic;  -- boolean
        psdu_size_19                      :   IN    std_logic;  -- boolean
        psdu_size_20                      :   IN    std_logic;  -- boolean
        psdu_size_21                      :   IN    std_logic;  -- boolean
        psdu_size_22                      :   IN    std_logic;  -- boolean
        psdu_size_23                      :   IN    std_logic;  -- boolean
        header_ready                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        data_out_0                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        data_out_1                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        data_out_2                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        data_out_3                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        valid_header                      :   OUT   std_logic;
        valid_payload                     :   OUT   std_logic;
        last_frame                        :   OUT   std_logic
        );
END rx_demod_ip_src_rx_demodulator_full;


ARCHITECTURE rtl OF rx_demod_ip_src_rx_demodulator_full IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_rx_demodulator_full_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_downshifter
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          valid_in                        :   IN    std_logic;
          frequency_offset                :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_decimator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_ofdm_symbol_sync
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          peak_sync                       :   OUT   std_logic;
          frequency_offset                :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          reset_ofdm                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_ofdm_separator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          peak                            :   IN    std_logic;
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- boolean [24]
          payload_bits_per_subcarrier     :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          payload_cp_len                  :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          header_ready                    :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_channel                   :   OUT   std_logic;
          valid_header                    :   OUT   std_logic;
          valid_payload                   :   OUT   std_logic;
          payload_num_ofdm_symbols        :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_get_cp
    PORT( valid_header                    :   IN    std_logic;
          valid_payload                   :   IN    std_logic;
          cp_payload                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ofdm_cp_len                     :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_ofdm_demod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          reset                           :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_ofdm_rx_counter
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          valid                           :   IN    std_logic;
          rst                             :   IN    std_logic;
          payload_num_ofdm_symbols        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          is_channel                      :   OUT   std_logic;
          is_header                       :   OUT   std_logic;
          is_payload                      :   OUT   std_logic;
          last_frame                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_get_init
    PORT( valid_header                    :   IN    std_logic;
          valid_payload                   :   IN    std_logic;
          descrambler_init                :   OUT   std_logic_vector(12 DOWNTO 0)  -- boolean [13]
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_constellation_descrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_channel_estimation_and_equalization
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_data                      :   IN    std_logic;
          valid_channel                   :   IN    std_logic;
          dont_use_equalizer              :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_get_bits_per_subcarrier
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          payload_bits_per_sub            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_header                    :   IN    std_logic;
          qam_demod_bits                  :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_qam_demod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          data_out                        :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En10 [4]
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_SimpleDualPortRAM_generic_block1
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_rx_demodulator_full_tc
    USE ENTITY work.rx_demod_ip_src_rx_demodulator_full_tc(rtl);

  FOR ALL : rx_demod_ip_src_downshifter
    USE ENTITY work.rx_demod_ip_src_downshifter(rtl);

  FOR ALL : rx_demod_ip_src_decimator
    USE ENTITY work.rx_demod_ip_src_decimator(rtl);

  FOR ALL : rx_demod_ip_src_ofdm_symbol_sync
    USE ENTITY work.rx_demod_ip_src_ofdm_symbol_sync(rtl);

  FOR ALL : rx_demod_ip_src_ofdm_separator
    USE ENTITY work.rx_demod_ip_src_ofdm_separator(rtl);

  FOR ALL : rx_demod_ip_src_get_cp
    USE ENTITY work.rx_demod_ip_src_get_cp(rtl);

  FOR ALL : rx_demod_ip_src_ofdm_demod
    USE ENTITY work.rx_demod_ip_src_ofdm_demod(rtl);

  FOR ALL : rx_demod_ip_src_ofdm_rx_counter
    USE ENTITY work.rx_demod_ip_src_ofdm_rx_counter(rtl);

  FOR ALL : rx_demod_ip_src_get_init
    USE ENTITY work.rx_demod_ip_src_get_init(rtl);

  FOR ALL : rx_demod_ip_src_constellation_descrambler
    USE ENTITY work.rx_demod_ip_src_constellation_descrambler(rtl);

  FOR ALL : rx_demod_ip_src_channel_estimation_and_equalization
    USE ENTITY work.rx_demod_ip_src_channel_estimation_and_equalization(rtl);

  FOR ALL : rx_demod_ip_src_get_bits_per_subcarrier
    USE ENTITY work.rx_demod_ip_src_get_bits_per_subcarrier(rtl);

  FOR ALL : rx_demod_ip_src_qam_demod
    USE ENTITY work.rx_demod_ip_src_qam_demod(rtl);

  FOR ALL : rx_demod_ip_src_SimpleDualPortRAM_generic_block1
    USE ENTITY work.rx_demod_ip_src_SimpleDualPortRAM_generic_block1(rtl);

  -- Signals
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL valid_out                        : std_logic;
  SIGNAL rd_0_reg                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL valid_out_1                      : std_logic;
  SIGNAL ofdm_symbol_sync_out3            : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_symbol_sync_out3_signed     : signed(15 DOWNTO 0);  -- int16
  SIGNAL From1_out1                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rate_Transition_out1             : signed(15 DOWNTO 0);  -- int16
  SIGNAL Rate_Transition_out1_1           : signed(15 DOWNTO 0);  -- int16
  SIGNAL downshifter_out1_re              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL downshifter_out1_im              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL decimator_out1_re                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL decimator_out1_im                : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_symbol_sync_out1_re         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_symbol_sync_out1_im         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL peak_sync                        : std_logic;
  SIGNAL ofdm_symbol_sync_out5            : std_logic;
  SIGNAL psdu_size                        : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL ofdm_separator_out1_re           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_separator_out1_im           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_channel                    : std_logic;
  SIGNAL valid_header_1                   : std_logic;
  SIGNAL valid_payload_1                  : std_logic;
  SIGNAL ofdm_separator_out5              : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL cp_len                           : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ofdm_demod_out3                  : std_logic;
  SIGNAL ofdm_demod_out3_1                : std_logic;
  SIGNAL ofdm_valid                       : std_logic;
  SIGNAL ofdm_demod_out1_re               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_demod_out1_im               : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_ofdm_demod_out             : std_logic;
  SIGNAL ofdm_demod_out1_re_signed        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ofdm_demod_out1_im_signed        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ofdm_demod_out1_re_1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ofdm_demod_out1_im_1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL descrambler_valid                : std_logic;
  SIGNAL descrambler_valid_1              : std_logic;
  SIGNAL is_channel                       : std_logic;
  SIGNAL is_header                        : std_logic;
  SIGNAL is_payload                       : std_logic;
  SIGNAL last_frame_1                     : std_logic;
  SIGNAL get_init_out1                    : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL data_out_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL qam_demod_valid                  : std_logic;
  SIGNAL rd_5_reg                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL is_header_1                      : std_logic;
  SIGNAL rd_6_reg                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL is_payload_1                     : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL OR_out1_1                        : std_logic;
  SIGNAL rd_8_reg                         : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL qam_demod_valid_1                : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL rd_9_reg                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL qam_demod_valid_2                : std_logic;
  SIGNAL rd_10_reg                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL is_channel_1                     : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL channel_estimation_and_equalization_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL channel_estimation_and_equalization_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL channel_estimation_and_equalization_out2 : std_logic;
  SIGNAL get_bits_per_subcarrier_out1     : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL qam_demod_out1                   : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL qam_demod_out2                   : std_logic;
  SIGNAL mergedInput                      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regin                : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_waddr                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mergedDelay_regout               : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedDelay_regout_unsigned      : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL mergedOutput                     : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL rd_12_reg                        : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL qam_demod_out2_1                 : std_logic;
  SIGNAL slicedInput                      : std_logic;  -- ufix1
  SIGNAL is_header_2                      : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Logical_Operator6_out1_1         : std_logic;
  SIGNAL rd_15_reg                        : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL qam_demod_out2_2                 : std_logic;
  SIGNAL slicedInput_1                    : std_logic;  -- ufix1
  SIGNAL is_payload_2                     : std_logic;
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL Logical_Operator7_out1_1         : std_logic;
  SIGNAL slicedInput_2                    : std_logic;  -- ufix1

BEGIN
  -- Last frame has one less delay because of the falling edge

  u_rx_demodulator_full_tc : rx_demod_ip_src_rx_demodulator_full_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  u_downshifter : rx_demod_ip_src_downshifter
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => data_in,  -- sfix14_En13
              valid_in => Constant1_out1,
              frequency_offset => std_logic_vector(Rate_Transition_out1_1),  -- int16
              data_out_re => downshifter_out1_re,  -- sfix16_En14
              data_out_im => downshifter_out1_im,  -- sfix16_En14
              valid_out => valid_out
              );

  u_decimator : rx_demod_ip_src_decimator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => downshifter_out1_re,  -- sfix16_En14
              data_in_im => downshifter_out1_im,  -- sfix16_En14
              valid_in => valid_out_1,
              data_out_re => decimator_out1_re,  -- sfix16_En14
              data_out_im => decimator_out1_im  -- sfix16_En14
              );

  u_ofdm_symbol_sync : rx_demod_ip_src_ofdm_symbol_sync
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => decimator_out1_re,  -- sfix16_En14
              data_in_im => decimator_out1_im,  -- sfix16_En14
              data_out_re => ofdm_symbol_sync_out1_re,  -- sfix16_En14
              data_out_im => ofdm_symbol_sync_out1_im,  -- sfix16_En14
              peak_sync => peak_sync,
              frequency_offset => ofdm_symbol_sync_out3,  -- int16
              reset_ofdm => ofdm_symbol_sync_out5
              );

  u_ofdm_separator : rx_demod_ip_src_ofdm_separator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => ofdm_symbol_sync_out1_re,  -- sfix16_En14
              data_in_im => ofdm_symbol_sync_out1_im,  -- sfix16_En14
              peak => peak_sync,
              psdu_size => psdu_size,  -- boolean [24]
              payload_bits_per_subcarrier => payload_bits_per_subcarrier,  -- uint8
              payload_cp_len => payload_cp_len,  -- uint8
              header_ready => header_ready,
              data_out_re => ofdm_separator_out1_re,  -- sfix16_En14
              data_out_im => ofdm_separator_out1_im,  -- sfix16_En14
              valid_channel => valid_channel,
              valid_header => valid_header_1,
              valid_payload => valid_payload_1,
              payload_num_ofdm_symbols => ofdm_separator_out5  -- uint16
              );

  u_get_cp : rx_demod_ip_src_get_cp
    PORT MAP( valid_header => valid_header_1,
              valid_payload => valid_payload_1,
              cp_payload => payload_cp_len,  -- uint8
              ofdm_cp_len => cp_len  -- uint8
              );

  u_ofdm_demod : rx_demod_ip_src_ofdm_demod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => ofdm_separator_out1_re,  -- sfix16_En14
              data_in_im => ofdm_separator_out1_im,  -- sfix16_En14
              valid_in => ofdm_valid,
              cp_len => cp_len,  -- uint8
              reset => ofdm_symbol_sync_out5,
              data_out_re => ofdm_demod_out1_re,  -- sfix16_En14
              data_out_im => ofdm_demod_out1_im,  -- sfix16_En14
              valid_out => valid_ofdm_demod_out,
              ready => ofdm_demod_out3
              );

  u_ofdm_rx_counter : rx_demod_ip_src_ofdm_rx_counter
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              valid => valid_ofdm_demod_out,
              rst => valid_channel,
              payload_num_ofdm_symbols => ofdm_separator_out5,  -- uint16
              is_channel => is_channel,
              is_header => is_header,
              is_payload => is_payload,
              last_frame => last_frame_1
              );

  u_get_init : rx_demod_ip_src_get_init
    PORT MAP( valid_header => is_header,
              valid_payload => is_payload,
              descrambler_init => get_init_out1  -- boolean [13]
              );

  u_constellation_descrambler : rx_demod_ip_src_constellation_descrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => std_logic_vector(ofdm_demod_out1_re_1),  -- sfix16_En14
              data_in_im => std_logic_vector(ofdm_demod_out1_im_1),  -- sfix16_En14
              valid_in => descrambler_valid_1,
              init => get_init_out1,  -- boolean [13]
              data_out_re => data_out_re,  -- sfix16_En14
              data_out_im => data_out_im,  -- sfix16_En14
              valid_out => qam_demod_valid
              );

  u_channel_estimation_and_equalization : rx_demod_ip_src_channel_estimation_and_equalization
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => data_out_re,  -- sfix16_En14
              data_in_im => data_out_im,  -- sfix16_En14
              valid_data => AND2_out1,
              valid_channel => AND1_out1,
              dont_use_equalizer => Constant_out1,
              reset => ofdm_symbol_sync_out5,
              data_out_re => channel_estimation_and_equalization_out1_re,  -- sfix16_En14
              data_out_im => channel_estimation_and_equalization_out1_im,  -- sfix16_En14
              valid_out => channel_estimation_and_equalization_out2
              );

  u_get_bits_per_subcarrier : rx_demod_ip_src_get_bits_per_subcarrier
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              payload_bits_per_sub => payload_bits_per_subcarrier,  -- uint8
              valid_header => is_header,
              qam_demod_bits => get_bits_per_subcarrier_out1  -- ufix4
              );

  u_qam_demod : rx_demod_ip_src_qam_demod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              data_in_re => channel_estimation_and_equalization_out1_re,  -- sfix16_En14
              data_in_im => channel_estimation_and_equalization_out1_im,  -- sfix16_En14
              valid_in => channel_estimation_and_equalization_out2,
              bits_per_subcarrier => get_bits_per_subcarrier_out1,  -- ufix4
              data_out => qam_demod_out1,  -- sfix16_En10 [4]
              valid_out => qam_demod_out2
              );

  u_ShiftRegisterRAM : rx_demod_ip_src_SimpleDualPortRAM_generic_block1
    GENERIC MAP( AddrWidth => 7,
                 DataWidth => 3
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              dout => mergedDelay_regout
              );

  Constant1_out1 <= '1';

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_0_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_0_reg(0) <= valid_out;
        rd_0_reg(2 DOWNTO 1) <= rd_0_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_0_process;

  valid_out_1 <= rd_0_reg(2);

  ofdm_symbol_sync_out3_signed <= signed(ofdm_symbol_sync_out3);

  Rate_Transition_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From1_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        From1_out1 <= ofdm_symbol_sync_out3_signed;
      END IF;
    END IF;
  END PROCESS Rate_Transition_process;


  Rate_Transition_out1 <= From1_out1;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Rate_Transition_out1_1 <= Rate_Transition_out1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  psdu_size(0) <= psdu_size_0;
  psdu_size(1) <= psdu_size_1;
  psdu_size(2) <= psdu_size_2;
  psdu_size(3) <= psdu_size_3;
  psdu_size(4) <= psdu_size_4;
  psdu_size(5) <= psdu_size_5;
  psdu_size(6) <= psdu_size_6;
  psdu_size(7) <= psdu_size_7;
  psdu_size(8) <= psdu_size_8;
  psdu_size(9) <= psdu_size_9;
  psdu_size(10) <= psdu_size_10;
  psdu_size(11) <= psdu_size_11;
  psdu_size(12) <= psdu_size_12;
  psdu_size(13) <= psdu_size_13;
  psdu_size(14) <= psdu_size_14;
  psdu_size(15) <= psdu_size_15;
  psdu_size(16) <= psdu_size_16;
  psdu_size(17) <= psdu_size_17;
  psdu_size(18) <= psdu_size_18;
  psdu_size(19) <= psdu_size_19;
  psdu_size(20) <= psdu_size_20;
  psdu_size(21) <= psdu_size_21;
  psdu_size(22) <= psdu_size_22;
  psdu_size(23) <= psdu_size_23;

  Logical_Operator1_out1 <= valid_payload_1 OR (valid_channel OR valid_header_1);

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ofdm_demod_out3_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        ofdm_demod_out3_1 <= ofdm_demod_out3;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  ofdm_valid <= ofdm_demod_out3_1 AND Logical_Operator1_out1;

  ofdm_demod_out1_re_signed <= signed(ofdm_demod_out1_re);

  ofdm_demod_out1_im_signed <= signed(ofdm_demod_out1_im);

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ofdm_demod_out1_re_1 <= to_signed(16#0000#, 16);
        ofdm_demod_out1_im_1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        ofdm_demod_out1_re_1 <= ofdm_demod_out1_re_signed;
        ofdm_demod_out1_im_1 <= ofdm_demod_out1_im_signed;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  descrambler_valid <= valid_ofdm_demod_out;

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        descrambler_valid_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        descrambler_valid_1 <= descrambler_valid;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_5_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_5_reg(0) <= is_header;
        rd_5_reg(2 DOWNTO 1) <= rd_5_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_5_process;

  is_header_1 <= rd_5_reg(2);

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_6_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_6_reg(0) <= is_payload;
        rd_6_reg(2 DOWNTO 1) <= rd_6_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  is_payload_1 <= rd_6_reg(2);

  OR_out1 <= is_header_1 OR is_payload_1;

  rd_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        OR_out1_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        OR_out1_1 <= OR_out1;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_8_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_8_reg(0) <= qam_demod_valid;
        rd_8_reg(3 DOWNTO 1) <= rd_8_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_8_process;

  qam_demod_valid_1 <= rd_8_reg(3);

  AND2_out1 <= OR_out1_1 AND qam_demod_valid_1;

  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_9_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_9_reg(0) <= qam_demod_valid;
        rd_9_reg(2 DOWNTO 1) <= rd_9_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_9_process;

  qam_demod_valid_2 <= rd_9_reg(2);

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_10_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_10_reg(0) <= is_channel;
        rd_10_reg(2 DOWNTO 1) <= rd_10_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_10_process;

  is_channel_1 <= rd_10_reg(2);

  AND1_out1 <= qam_demod_valid_2 AND is_channel_1;

  Constant_out1 <= '0';

  mergedInput <= unsigned'(is_header & is_payload & last_frame_1);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_regin <= to_unsigned(16#0#, 3);
      ELSIF enb_1_2_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 106
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#6A#, 7) THEN 
          mergedDelay_waddr <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 106
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#01#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#6A#, 7) THEN 
          mergedDelay_raddr <= to_unsigned(16#00#, 7);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#01#, 7);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedOutput <= to_unsigned(16#0#, 3);
      ELSIF enb_1_2_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_12_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_12_reg(0) <= qam_demod_out2;
        rd_12_reg(5 DOWNTO 1) <= rd_12_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_12_process;

  qam_demod_out2_1 <= rd_12_reg(5);

  slicedInput <= mergedOutput(2);

  is_header_2 <= slicedInput;

  Logical_Operator6_out1 <= qam_demod_out2_1 AND is_header_2;

  rd_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator6_out1_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator6_out1_1 <= Logical_Operator6_out1;
      END IF;
    END IF;
  END PROCESS rd_14_process;


  rd_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_15_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_15_reg(0) <= qam_demod_out2;
        rd_15_reg(5 DOWNTO 1) <= rd_15_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_15_process;

  qam_demod_out2_2 <= rd_15_reg(5);

  slicedInput_1 <= mergedOutput(1);

  is_payload_2 <= slicedInput_1;

  Logical_Operator7_out1 <= qam_demod_out2_2 AND is_payload_2;

  rd_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator7_out1_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator7_out1_1 <= Logical_Operator7_out1;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  slicedInput_2 <= mergedOutput(0);

  last_frame <= slicedInput_2;

  ce_out <= enb_1_2_1;

  data_out_0 <= qam_demod_out1(0);

  data_out_1 <= qam_demod_out1(1);

  data_out_2 <= qam_demod_out1(2);

  data_out_3 <= qam_demod_out1(3);

  valid_header <= Logical_Operator6_out1_1;

  valid_payload <= Logical_Operator7_out1_1;

END rtl;

