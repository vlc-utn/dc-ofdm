-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_OFDM_Equalizer.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_OFDM_Equalizer
-- Source Path: HDLRxDemodulator/rx_demodulator_full/channel_estimation_and_equalization/Channel Equalization/OFDM 
-- Equalize
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_OFDM_Equalizer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        hEst_re                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        hEst_im                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;
        hEstLen                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        loadhEst                          :   IN    std_logic;
        reset                             :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataOut_im                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validOut                          :   OUT   std_logic
        );
END rx_demod_ip_src_OFDM_Equalizer;


ARCHITECTURE rtl OF rx_demod_ip_src_OFDM_Equalizer IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din_re                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_din_im                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout_re                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          dout_im                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_SimpleDualPortRAM_generic
    USE ENTITY work.rx_demod_ip_src_SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL validIn_1                        : std_logic;
  SIGNAL out_rsvd                         : std_logic;
  SIGNAL out_rsvd_1                       : std_logic;
  SIGNAL out_rsvd_2                       : std_logic;
  SIGNAL out_rsvd_3                       : std_logic;
  SIGNAL Delay66_reg                      : std_logic_vector(90 DOWNTO 0);  -- ufix1 [91]
  SIGNAL Delay66_out1                     : std_logic;
  SIGNAL rst                              : std_logic;
  SIGNAL out_rsvd_4                       : std_logic;
  SIGNAL valid_with_reset_bypass_reg      : std_logic;  -- ufix1
  SIGNAL out_rsvd_5                       : std_logic;
  SIGNAL Logical_Operator9_out1           : std_logic;
  SIGNAL Logical_Operator9_out1_1         : std_logic;
  SIGNAL Logical_Operator9_out1_2         : std_logic;
  SIGNAL Logical_Operator9_out1_3         : std_logic;
  SIGNAL Logical_Operator9_out1_4         : std_logic;
  SIGNAL Logical_Operator9_out1_5         : std_logic;
  SIGNAL Logical_Operator9_out1_6         : std_logic;
  SIGNAL Logical_Operator9_out1_7         : std_logic;
  SIGNAL Logical_Operator9_out1_8         : std_logic;
  SIGNAL Logical_Operator9_out1_9         : std_logic;
  SIGNAL Logical_Operator9_out1_10        : std_logic;
  SIGNAL Logical_Operator9_out1_11        : std_logic;
  SIGNAL Logical_Operator9_out1_12        : std_logic;
  SIGNAL Logical_Operator9_out1_13        : std_logic;
  SIGNAL Logical_Operator9_out1_14        : std_logic;
  SIGNAL Logical_Operator9_out1_15        : std_logic;
  SIGNAL Logical_Operator9_out1_16        : std_logic;
  SIGNAL Logical_Operator9_out1_17        : std_logic;
  SIGNAL Logical_Operator9_out1_18        : std_logic;
  SIGNAL Logical_Operator9_out1_19        : std_logic;
  SIGNAL Logical_Operator9_out1_20        : std_logic;
  SIGNAL Logical_Operator9_out1_21        : std_logic;
  SIGNAL Logical_Operator9_out1_22        : std_logic;
  SIGNAL Logical_Operator9_out1_23        : std_logic;
  SIGNAL Logical_Operator9_out1_24        : std_logic;
  SIGNAL Logical_Operator9_out1_25        : std_logic;
  SIGNAL Logical_Operator9_out1_26        : std_logic;
  SIGNAL Logical_Operator9_out1_27        : std_logic;
  SIGNAL Logical_Operator9_out1_28        : std_logic;
  SIGNAL Logical_Operator9_out1_29        : std_logic;
  SIGNAL Logical_Operator9_out1_30        : std_logic;
  SIGNAL Logical_Operator9_out1_31        : std_logic;
  SIGNAL Logical_Operator9_out1_32        : std_logic;
  SIGNAL Logical_Operator9_out1_33        : std_logic;
  SIGNAL Logical_Operator9_out1_34        : std_logic;
  SIGNAL Logical_Operator9_out1_35        : std_logic;
  SIGNAL Logical_Operator9_out1_36        : std_logic;
  SIGNAL Logical_Operator9_out1_37        : std_logic;
  SIGNAL Logical_Operator9_out1_38        : std_logic;
  SIGNAL Logical_Operator9_out1_39        : std_logic;
  SIGNAL Logical_Operator9_out1_40        : std_logic;
  SIGNAL Logical_Operator9_out1_41        : std_logic;
  SIGNAL Logical_Operator9_out1_42        : std_logic;
  SIGNAL Logical_Operator9_out1_43        : std_logic;
  SIGNAL Logical_Operator9_out1_44        : std_logic;
  SIGNAL Logical_Operator9_out1_45        : std_logic;
  SIGNAL Logical_Operator9_out1_46        : std_logic;
  SIGNAL Logical_Operator9_out1_47        : std_logic;
  SIGNAL Logical_Operator9_out1_48        : std_logic;
  SIGNAL Logical_Operator9_out1_49        : std_logic;
  SIGNAL Logical_Operator9_out1_50        : std_logic;
  SIGNAL Logical_Operator9_out1_51        : std_logic;
  SIGNAL Logical_Operator9_out1_52        : std_logic;
  SIGNAL Logical_Operator9_out1_53        : std_logic;
  SIGNAL Logical_Operator9_out1_54        : std_logic;
  SIGNAL Logical_Operator9_out1_55        : std_logic;
  SIGNAL Logical_Operator9_out1_56        : std_logic;
  SIGNAL Logical_Operator9_out1_57        : std_logic;
  SIGNAL Logical_Operator9_out1_58        : std_logic;
  SIGNAL Logical_Operator9_out1_59        : std_logic;
  SIGNAL Logical_Operator9_out1_60        : std_logic;
  SIGNAL Logical_Operator9_out1_61        : std_logic;
  SIGNAL Logical_Operator9_out1_62        : std_logic;
  SIGNAL Logical_Operator9_out1_63        : std_logic;
  SIGNAL Logical_Operator9_out1_64        : std_logic;
  SIGNAL Logical_Operator9_out1_65        : std_logic;
  SIGNAL Logical_Operator9_out1_66        : std_logic;
  SIGNAL Logical_Operator9_out1_67        : std_logic;
  SIGNAL Logical_Operator9_out1_68        : std_logic;
  SIGNAL Logical_Operator9_out1_69        : std_logic;
  SIGNAL Logical_Operator9_out1_70        : std_logic;
  SIGNAL Logical_Operator9_out1_71        : std_logic;
  SIGNAL Logical_Operator9_out1_72        : std_logic;
  SIGNAL Logical_Operator9_out1_73        : std_logic;
  SIGNAL Logical_Operator9_out1_74        : std_logic;
  SIGNAL Logical_Operator9_out1_75        : std_logic;
  SIGNAL Logical_Operator9_out1_76        : std_logic;
  SIGNAL Logical_Operator9_out1_77        : std_logic;
  SIGNAL Logical_Operator9_out1_78        : std_logic;
  SIGNAL Logical_Operator9_out1_79        : std_logic;
  SIGNAL Logical_Operator9_out1_80        : std_logic;
  SIGNAL Logical_Operator9_out1_81        : std_logic;
  SIGNAL Logical_Operator9_out1_82        : std_logic;
  SIGNAL Logical_Operator9_out1_83        : std_logic;
  SIGNAL Logical_Operator9_out1_84        : std_logic;
  SIGNAL Logical_Operator9_out1_85        : std_logic;
  SIGNAL Logical_Operator9_out1_86        : std_logic;
  SIGNAL Logical_Operator9_out1_87        : std_logic;
  SIGNAL Logical_Operator9_out1_88        : std_logic;
  SIGNAL Logical_Operator9_out1_89        : std_logic;
  SIGNAL Logical_Operator9_out1_90        : std_logic;
  SIGNAL Logical_Operator9_out1_91        : std_logic;
  SIGNAL Logical_Operator9_out1_92        : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL Constant_out1_re                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant_out1_im                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL out_re                           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL out_im                           : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL out_re_1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL out_im_1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_reg_re                    : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay4_reg_im                    : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay45_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay45_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay45_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL out_rsvd_6                       : std_logic;
  SIGNAL out_rsvd_7                       : std_logic;
  SIGNAL Logical_Operator9_out1_93        : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;
  SIGNAL hEstLen_Sampler_out2             : std_logic;
  SIGNAL count_step                       : std_logic;  -- ufix1
  SIGNAL count_from                       : std_logic;  -- ufix1
  SIGNAL count_reset                      : std_logic;  -- ufix1
  SIGNAL hEstLen_sample_flag_out1         : std_logic;  -- ufix1
  SIGNAL count                            : std_logic;  -- ufix1
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL count_1                          : std_logic;  -- ufix1
  SIGNAL count_2                          : std_logic;  -- ufix1
  SIGNAL Equalization_method_out1         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL out_rsvd_8                       : std_logic;
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL hEst_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL hEst_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataOut_re_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataOut_im_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Compare_To_Zero1_out1            : std_logic;
  SIGNAL Logical_Operator1_out1_1         : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Equalization_method1_out1        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL noiseVar_out1                    : std_logic;  -- ufix1
  SIGNAL dataOutSelNVar                   : std_logic;  -- ufix1
  SIGNAL dataOutSelNVar_1                 : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL Constant1_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant1_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add_out1_re                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add_out1_im                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant_out1_re_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant_out1_im_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay10_reg_re                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay10_reg_im                   : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay10_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay10_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL RAM_Flag_ctrl_const_out          : std_logic;
  SIGNAL RAM_Flag_ctrl_delay_out          : std_logic;
  SIGNAL RAM_Flag_Initial_Val_out         : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL hEstLen_unsigned                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL out_rsvd_9                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion_out1        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL hEstLenOut                       : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL hEstLen_1                        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL hEstLen_next                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant_out1                    : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL Switch_out1                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL hEstLen_Sampler_out3             : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL count_step_1                     : std_logic;  -- ufix1
  SIGNAL count_from_1                     : std_logic;  -- ufix1
  SIGNAL count_reset_1                    : std_logic;  -- ufix1
  SIGNAL hEstLen_Flag_out1                : std_logic;  -- ufix1
  SIGNAL count_3                          : std_logic;  -- ufix1
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant2_out1_1      : std_logic;
  SIGNAL Logical_Operator8_out1_1         : std_logic;
  SIGNAL count_4                          : std_logic;  -- ufix1
  SIGNAL count_5                          : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL Logical_Operator3_out1_1         : std_logic;
  SIGNAL Logical_Operator11_out1          : std_logic;
  SIGNAL Logical_Operator12_out1          : std_logic;
  SIGNAL Logical_Operator13_out1          : std_logic;
  SIGNAL Logical_Operator14_out1          : std_logic;
  SIGNAL count_step_2                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from_2                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant_out1_1                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_reset_2                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL hEstLenCount_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Relational_Operator1_out1        : std_logic;
  SIGNAL count_6                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap_2                   : std_logic;
  SIGNAL count_value_2                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_7                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Logical_Operator4_out1_1         : std_logic;
  SIGNAL count_8                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Relational_Operator2_out1        : std_logic;
  SIGNAL Logical_Operator15_out1          : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL count_9                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL Logical_Operator2_out1_1         : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay14_out1                     : std_logic;
  SIGNAL Logical_Operator1_out1_2         : std_logic;
  SIGNAL count_step_3                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_from_3                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_reset_3                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL hEstLenCountDelayed_out1         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_10                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL need_to_wrap_3                   : std_logic;
  SIGNAL count_value_3                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL count_11                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL count_12                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL count_step_4                     : std_logic;  -- ufix1
  SIGNAL count_from_4                     : std_logic;  -- ufix1
  SIGNAL count_reset_4                    : std_logic;  -- ufix1
  SIGNAL RAM_Flag_out1                    : std_logic;  -- ufix1
  SIGNAL count_13                         : std_logic;  -- ufix1
  SIGNAL need_to_wrap_4                   : std_logic;
  SIGNAL count_value_4                    : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion_out1_1      : std_logic;
  SIGNAL Compare_To_Constant_out1_1       : std_logic;
  SIGNAL Logical_Operator2_out1_2         : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL count_14                         : std_logic;  -- ufix1
  SIGNAL count_15                         : std_logic;  -- ufix1
  SIGNAL RAM_Flag_out                     : std_logic;  -- ufix1
  SIGNAL Delay8_out1                      : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay5_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL out_rsvd_10                      : std_logic;
  SIGNAL Logical_Operator_out1_2          : std_logic;
  SIGNAL Logical_Operator_out1_3          : std_logic;
  SIGNAL Logical_Operator_out1_4          : std_logic;
  SIGNAL Logical_Operator1_out1_3         : std_logic;
  SIGNAL Logical_Operator3_out1_2         : std_logic;
  SIGNAL hEst_RAM_out1_re                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hEst_RAM_out1_im                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL hEst_RAM_out1_re_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL hEst_RAM_out1_im_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch2_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch2_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL conj_cast                        : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL conj_cast_1                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Conjugate1_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Conjugate1_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay1_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay1_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay1_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay43_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay43_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay43_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product1_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay49_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay56_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay56_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay56_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL reduced_reg                      : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Complex_to_Real_Imag3_out2       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay55_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay55_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay55_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay38_reg                      : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Delay38_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay48_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay48_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay48_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_sub_cast                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_sub_cast_1                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1                         : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1_1                       : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay57_reg                      : vector_of_signed33(0 TO 1);  -- sfix33 [2]
  SIGNAL Delay57_out1                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL dataOut                          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay44_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay44_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay44_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay41_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay41_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay41_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product5_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product5_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product5_out1_2                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay50_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay54_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay47_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay47_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay47_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay40_reg                      : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL Delay40_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay53_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay53_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay53_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product2_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay54_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay54_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add1_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_out1                        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_out1_1                      : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay58_reg                      : vector_of_signed33(0 TO 1);  -- sfix33 [2]
  SIGNAL Delay58_out1                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL dataOut_1                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay8_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay8_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay19_reg_re                   : vector_of_signed32(0 TO 69);  -- sfix32_En28 [70]
  SIGNAL Delay19_reg_im                   : vector_of_signed32(0 TO 69);  -- sfix32_En28 [70]
  SIGNAL Delay19_out1_re                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay19_out1_im                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay19_out1_re_1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay19_out1_im_1                : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product2_in0_buff_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay15_bypass_reg               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay15_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay15_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay15_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL trueFlag_1                       : std_logic;  -- ufix1
  SIGNAL initFlagDelay_reg                : std_logic_vector(66 DOWNTO 0);  -- ufix1 [67]
  SIGNAL initFlagenable                   : std_logic;  -- ufix1
  SIGNAL Constant4_out1                   : unsigned(62 DOWNTO 0);  -- ufix63_En62
  SIGNAL dividend_in_reg                  : unsigned(62 DOWNTO 0);  -- ufix63_En62
  SIGNAL In1_dtc_1                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL z_MSB                            : std_logic;  -- ufix1
  SIGNAL conj_cast_2                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL conj_cast_3                      : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Conjugate2_out1_re               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Conjugate2_out1_im               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay5_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay24_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay24_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay24_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay2_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay23_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay23_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay23_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product3_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay33_bypass_reg               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay33_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay42_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay42_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay42_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Complex_to_Real_Imag1_out2       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_out1_1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay25_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay31_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay31_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay31_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay26_reg                      : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay26_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay32_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay32_out1_1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay32_out1_2                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Product_out1_3                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add_sub_cast_2                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_sub_cast_3                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1_2                       : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add_out1_3                       : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay51_out1                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL dataOut_2                        : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Constant1_out1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Switch2_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL dataOutSelNVar_2                 : std_logic;  -- ufix1
  SIGNAL Delay59_reg                      : std_logic_vector(8 DOWNTO 0);  -- ufix1 [9]
  SIGNAL Delay59_out1                     : std_logic;  -- ufix1
  SIGNAL Add1_add_cast_2                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_add_cast_3                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add1_out1_2                      : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Delay11_reg                      : vector_of_signed33(0 TO 1);  -- sfix33 [2]
  SIGNAL Delay11_out1                     : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Constant3_out1                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Switch_out1_1                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL magSqrhEstPlusnVar               : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL divisor_in_reg                   : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL d_MSB                            : std_logic;  -- ufix1
  SIGNAL isSignsDiffer                    : std_logic;  -- ufix1
  SIGNAL signFlag_p_reg                   : std_logic_vector(65 DOWNTO 0);  -- ufix1 [66]
  SIGNAL signFlag_p_1                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL preCorrectionIn1_sig_dtc_1       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL preCorrectionIn1_sig_dtc_dtc     : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL z_neg_in0                        : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL z_neg_1                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL z_neg_dtc                        : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL corrected_z                      : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL corrected_z_p_1                  : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits                          : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x                                : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL preCorrectionIn2_sig_dtc_1       : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL preCorrectionIn2_sig_dtc_dtc     : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0                        : signed(34 DOWNTO 0);  -- sfix35
  SIGNAL d_neg_1                          : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL d_neg_dtc                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL corrected_d                      : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL corrected_d_p_1                  : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_1                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_3                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits                          : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit                      : std_logic;  -- ufix1
  SIGNAL qBit                             : std_logic;  -- ufix1
  SIGNAL rNextTemp                        : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r1                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r1_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_1                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_1                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit                           : std_logic;  -- ufix1
  SIGNAL rMSBitneg                        : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL d1_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_2                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_5                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_1                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_3                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_1                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_1                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_1                    : std_logic;  -- ufix1
  SIGNAL qBit_1                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_1                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r2                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r2_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_2                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_2                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_1                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_1                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL d2_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_3                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_7                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_3                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_4                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_2                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_2                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_2                    : std_logic;  -- ufix1
  SIGNAL qBit_2                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_2                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r3                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r3_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_3                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_3                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_2                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL d3_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_4                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_9                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_5                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_5                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_3                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_3                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_3                    : std_logic;  -- ufix1
  SIGNAL qBit_3                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_3                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r4                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r4_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_4                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_4                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_3                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_3                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL d4_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_5                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_11                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_7                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_6                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_4                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_4                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_4                    : std_logic;  -- ufix1
  SIGNAL qBit_4                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_4                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r5                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r5_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_5                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_5                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_4                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_4                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL d5_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_6                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_13                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_9                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_7                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_5                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_5                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_5                    : std_logic;  -- ufix1
  SIGNAL qBit_5                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_5                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r6                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r6_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_6                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_6                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_5                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_5                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL d6_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_7                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_15                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_11                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_8                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_6                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_6                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_6                    : std_logic;  -- ufix1
  SIGNAL qBit_6                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_6                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r7                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r7_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_7                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_7                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_6                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_6                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL d7_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_8                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_17                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_13                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_9                           : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_7                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_7                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_7                    : std_logic;  -- ufix1
  SIGNAL qBit_7                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_7                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r8                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r8_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_8                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_8                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_7                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_7                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL d8_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_9                      : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_19                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_15                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_10                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_8                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_8                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_8                    : std_logic;  -- ufix1
  SIGNAL qBit_8                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_8                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r9                               : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r9_p                             : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_9                        : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_9                              : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_8                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_8                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL d9_p                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_10                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_21                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_17                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_11                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_9                   : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_9                        : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_9                    : std_logic;  -- ufix1
  SIGNAL qBit_9                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_9                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r10                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r10_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_10                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_10                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_9                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_9                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL d10_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_11                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_23                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_19                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_12                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_10                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_10                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_10                   : std_logic;  -- ufix1
  SIGNAL qBit_10                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_10                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r11                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r11_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_11                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_11                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_10                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_10                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL d11_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_12                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_25                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_21                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_13                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_11                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_11                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_11                   : std_logic;  -- ufix1
  SIGNAL qBit_11                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_11                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r12                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r12_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_12                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_12                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_11                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_11                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL d12_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_13                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_27                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_23                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_14                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_12                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_12                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_12                   : std_logic;  -- ufix1
  SIGNAL qBit_12                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_12                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r13                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r13_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_13                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_13                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_12                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_12                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL d13_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_14                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_29                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_25                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_15                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_13                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_13                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_13                   : std_logic;  -- ufix1
  SIGNAL qBit_13                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_13                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r14                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r14_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_14                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_14                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_13                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_13                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL d14_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_15                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_31                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_27                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_16                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_14                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_14                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_14                   : std_logic;  -- ufix1
  SIGNAL qBit_14                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_14                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r15                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r15_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_15                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_15                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_14                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_14                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL d15_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_16                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_33                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_29                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_17                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_15                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_15                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_15                   : std_logic;  -- ufix1
  SIGNAL qBit_15                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_15                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r16                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r16_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_16                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_16                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_15                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_15                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL d16_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_17                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_35                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_31                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_18                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_16                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_16                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_16                   : std_logic;  -- ufix1
  SIGNAL qBit_16                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_16                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r17                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r17_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_17                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_17                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_16                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_16                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL d17_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_18                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_37                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_33                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_19                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_17                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_17                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_17                   : std_logic;  -- ufix1
  SIGNAL qBit_17                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_17                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r18                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r18_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_18                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_18                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_17                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_17                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL d18_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_19                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_39                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_35                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_20                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_18                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_18                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_18                   : std_logic;  -- ufix1
  SIGNAL qBit_18                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_18                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r19                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r19_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_19                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_19                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_18                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_18                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL d19_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_20                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_41                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_37                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_21                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_19                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_19                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_19                   : std_logic;  -- ufix1
  SIGNAL qBit_19                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_19                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r20                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r20_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_20                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_20                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_19                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_19                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL d20_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_21                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_43                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_39                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_22                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_20                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_20                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_20                   : std_logic;  -- ufix1
  SIGNAL qBit_20                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_20                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r21                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r21_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_21                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_21                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_20                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_20                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL d21_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_22                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_45                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_41                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_23                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_21                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_21                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_21                   : std_logic;  -- ufix1
  SIGNAL qBit_21                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_21                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r22                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r22_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_22                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_22                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_21                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_21                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL d22_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_23                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_47                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_43                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_24                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_22                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_22                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_22                   : std_logic;  -- ufix1
  SIGNAL qBit_22                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_22                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r23                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r23_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_23                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_23                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_22                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_22                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL d23_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_24                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_49                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_45                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_25                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_23                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_23                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_23                   : std_logic;  -- ufix1
  SIGNAL qBit_23                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_23                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r24                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r24_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_24                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_24                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_23                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_23                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL d24_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_25                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_51                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_47                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_26                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_24                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_24                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_24                   : std_logic;  -- ufix1
  SIGNAL qBit_24                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_24                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r25                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r25_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_25                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_25                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_24                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_24                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL d25_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_26                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_53                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_49                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_27                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_25                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_25                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_25                   : std_logic;  -- ufix1
  SIGNAL qBit_25                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_25                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r26                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r26_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_26                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_26                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_25                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_25                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL d26_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_27                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_55                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_51                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_28                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_26                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_26                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_26                   : std_logic;  -- ufix1
  SIGNAL qBit_26                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_26                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r27                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r27_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_27                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_27                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_26                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_26                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL d27_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_28                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_57                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_53                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_29                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_27                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_27                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_27                   : std_logic;  -- ufix1
  SIGNAL qBit_27                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_27                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r28                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r28_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_28                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_28                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_27                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_27                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL d28_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_29                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_59                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_55                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_30                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_28                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_28                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_28                   : std_logic;  -- ufix1
  SIGNAL qBit_28                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_28                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r29                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r29_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_29                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_29                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_28                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_28                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_32              : std_logic;
  SIGNAL d29_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_30                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_61                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_57                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_31                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_29                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_29                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_29                   : std_logic;  -- ufix1
  SIGNAL qBit_29                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_29                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r30                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r30_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_30                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_30                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_29                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_29                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_33              : std_logic;
  SIGNAL d30_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_31                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_63                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_59                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_32                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_30                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_30                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_30                   : std_logic;  -- ufix1
  SIGNAL qBit_30                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_30                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r31                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r31_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_31                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_31                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_30                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_30                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_34              : std_logic;
  SIGNAL d31_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_32                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_65                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_61                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_33                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_31                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_31                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_31                   : std_logic;  -- ufix1
  SIGNAL qBit_31                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_31                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r32                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r32_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_32                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_32                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_31                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_31                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_35              : std_logic;
  SIGNAL d32_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_33                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_67                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_63                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_34                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_32                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_32                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_32                   : std_logic;  -- ufix1
  SIGNAL qBit_32                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_32                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r33                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r33_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_33                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_33                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_32                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_32                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_36              : std_logic;
  SIGNAL d33_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_34                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_69                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_65                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_35                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_33                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_33                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_33                   : std_logic;  -- ufix1
  SIGNAL qBit_33                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_33                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r34                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r34_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_34                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_34                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_33                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_33                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_37              : std_logic;
  SIGNAL d34_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_35                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_71                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_67                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_36                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_34                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_34                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_34                   : std_logic;  -- ufix1
  SIGNAL qBit_34                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_34                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r35                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r35_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_35                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_35                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_34                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_34                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_38              : std_logic;
  SIGNAL d35_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_36                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_73                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_69                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_37                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_35                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_35                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_35                   : std_logic;  -- ufix1
  SIGNAL qBit_35                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_35                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r36                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r36_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_36                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_36                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_35                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_35                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_39              : std_logic;
  SIGNAL d36_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_37                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_75                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_71                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_38                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_36                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_36                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_36                   : std_logic;  -- ufix1
  SIGNAL qBit_36                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_36                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r37                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r37_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_37                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_37                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_36                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_36                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_40              : std_logic;
  SIGNAL d37_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_38                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_77                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_73                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_39                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_37                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_37                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_37                   : std_logic;  -- ufix1
  SIGNAL qBit_37                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_37                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r38                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r38_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_38                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_38                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_37                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_37                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_41              : std_logic;
  SIGNAL d38_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_39                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_79                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_75                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_40                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_38                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_38                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_38                   : std_logic;  -- ufix1
  SIGNAL qBit_38                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_38                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r39                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r39_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_39                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_39                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_38                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_38                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_42              : std_logic;
  SIGNAL d39_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_40                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_81                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_77                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_41                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_39                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_39                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_39                   : std_logic;  -- ufix1
  SIGNAL qBit_39                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_39                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r40                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r40_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_40                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_40                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_39                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_39                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_43              : std_logic;
  SIGNAL d40_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_41                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_83                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_79                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_42                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_40                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_40                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_40                   : std_logic;  -- ufix1
  SIGNAL qBit_40                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_40                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r41                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r41_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_41                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_41                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_40                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_40                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_44              : std_logic;
  SIGNAL d41_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_42                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_85                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_81                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_43                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_41                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_41                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_41                   : std_logic;  -- ufix1
  SIGNAL qBit_41                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_41                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r42                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r42_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_42                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_42                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_41                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_41                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_45              : std_logic;
  SIGNAL d42_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_43                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_87                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_83                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_44                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_42                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_42                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_42                   : std_logic;  -- ufix1
  SIGNAL qBit_42                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_42                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r43                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r43_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_43                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_43                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_42                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_42                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_46              : std_logic;
  SIGNAL d43_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_44                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_89                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_85                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_45                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_43                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_43                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_43                   : std_logic;  -- ufix1
  SIGNAL qBit_43                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_43                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r44                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r44_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_44                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_44                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_43                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_43                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_47              : std_logic;
  SIGNAL d44_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_45                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_91                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_87                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_46                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_44                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_44                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_44                   : std_logic;  -- ufix1
  SIGNAL qBit_44                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_44                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r45                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r45_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_45                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_45                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_44                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_44                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_48              : std_logic;
  SIGNAL d45_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_46                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_93                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_89                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_47                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_45                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_45                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_45                   : std_logic;  -- ufix1
  SIGNAL qBit_45                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_45                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r46                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r46_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_46                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_46                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_45                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_45                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_49              : std_logic;
  SIGNAL d46_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_47                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_95                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_91                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_48                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_46                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_46                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_46                   : std_logic;  -- ufix1
  SIGNAL qBit_46                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_46                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r47                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r47_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_47                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_47                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_46                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_46                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_50              : std_logic;
  SIGNAL d47_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_48                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_97                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_93                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_49                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_47                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_47                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_47                   : std_logic;  -- ufix1
  SIGNAL qBit_47                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_47                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r48                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r48_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_48                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_48                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_47                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_47                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_51              : std_logic;
  SIGNAL d48_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_49                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_99                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_95                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_50                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_48                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_48                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_48                   : std_logic;  -- ufix1
  SIGNAL qBit_48                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_48                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r49                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r49_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_49                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_49                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_48                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_48                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_52              : std_logic;
  SIGNAL d49_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_50                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_101                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_97                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_51                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_49                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_49                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_49                   : std_logic;  -- ufix1
  SIGNAL qBit_49                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_49                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r50                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r50_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_50                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_50                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_49                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_49                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_53              : std_logic;
  SIGNAL d50_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_51                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_103                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_99                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_52                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_50                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_50                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_50                   : std_logic;  -- ufix1
  SIGNAL qBit_50                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_50                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r51                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r51_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_51                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_51                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_50                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_50                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_54              : std_logic;
  SIGNAL d51_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_52                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_105                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_101                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_53                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_51                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_51                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_51                   : std_logic;  -- ufix1
  SIGNAL qBit_51                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_51                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r52                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r52_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_52                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_52                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_51                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_51                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_55              : std_logic;
  SIGNAL d52_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_53                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_107                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_103                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_54                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_52                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_52                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_52                   : std_logic;  -- ufix1
  SIGNAL qBit_52                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_52                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r53                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r53_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_53                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_53                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_52                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_52                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_56              : std_logic;
  SIGNAL d53_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_54                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_109                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_105                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_55                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_53                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_53                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_53                   : std_logic;  -- ufix1
  SIGNAL qBit_53                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_53                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r54                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r54_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_54                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_54                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_53                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_53                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_57              : std_logic;
  SIGNAL d54_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_55                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_111                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_107                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_56                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_54                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_54                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_54                   : std_logic;  -- ufix1
  SIGNAL qBit_54                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_54                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r55                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r55_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_55                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_55                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_54                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_54                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_58              : std_logic;
  SIGNAL d55_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_56                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_113                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_109                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_57                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_55                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_55                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_55                   : std_logic;  -- ufix1
  SIGNAL qBit_55                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_55                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r56                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r56_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_56                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_56                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_55                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_55                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_59              : std_logic;
  SIGNAL d56_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_57                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_115                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_111                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_58                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_56                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_56                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_56                   : std_logic;  -- ufix1
  SIGNAL qBit_56                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_56                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r57                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r57_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_57                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_57                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_56                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_56                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_60              : std_logic;
  SIGNAL d57_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_58                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_117                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_113                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_59                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_57                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_57                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_57                   : std_logic;  -- ufix1
  SIGNAL qBit_57                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_57                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r58                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r58_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_58                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_58                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_57                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_57                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_61              : std_logic;
  SIGNAL d58_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_59                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_119                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_115                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_60                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_58                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_58                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_58                   : std_logic;  -- ufix1
  SIGNAL qBit_58                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_58                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r59                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r59_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_59                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_59                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_58                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_58                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_62              : std_logic;
  SIGNAL d59_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_60                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_121                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_117                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_61                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_59                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_59                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_59                   : std_logic;  -- ufix1
  SIGNAL qBit_59                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_59                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r60                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r60_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_60                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_60                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_59                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_59                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_63              : std_logic;
  SIGNAL d60_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_61                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_123                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_119                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_62                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_60                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_60                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_60                   : std_logic;  -- ufix1
  SIGNAL qBit_60                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_60                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r61                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r61_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_61                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_61                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_60                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_60                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_64              : std_logic;
  SIGNAL d61_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_62                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_125                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_121                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_63                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_61                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_61                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_61                   : std_logic;  -- ufix1
  SIGNAL qBit_61                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_61                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r62                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r62_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_62                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_62                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_61                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_61                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_65              : std_logic;
  SIGNAL d62_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_63                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_127                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_123                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_64                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_62                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_62                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_62                   : std_logic;  -- ufix1
  SIGNAL qBit_62                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_62                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r63                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r63_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL rMSBits_63                       : unsigned(64 DOWNTO 0);  -- ufix65
  SIGNAL x_63                             : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBit_62                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_62                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_66              : std_logic;
  SIGNAL d63_p                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL d_neg_in0_64                     : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL d_neg_129                        : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL y_125                            : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL temp_65                          : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL rMSBNextBits_63                  : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL rLSBits_63                       : unsigned(62 DOWNTO 0);  -- ufix63
  SIGNAL tempSignBit_63                   : std_logic;  -- ufix1
  SIGNAL qBit_63                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_63                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL r64                              : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL r64_p                            : signed(127 DOWNTO 0);  -- sfix128
  SIGNAL qTemp                            : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL qtempExt                         : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL qtempExt_p_1                     : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL qin_neg_post_in0                 : signed(65 DOWNTO 0);  -- sfix66
  SIGNAL qin_neg_post_1                   : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL qtemp_post                       : signed(64 DOWNTO 0);  -- sfix65
  SIGNAL sel1                             : std_logic;  -- ufix1
  SIGNAL sel0                             : std_logic;  -- ufix1
  SIGNAL sel                              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL qtemp_dtc_post_1                 : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL ConstantSignalMax_1              : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL ConstantSignalMin_1              : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL ConstantSignal_1                 : signed(62 DOWNTO 0);  -- sfix63
  SIGNAL qtempPost                        : signed(63 DOWNTO 0);  -- sfix64
  SIGNAL postCorrectionSig2_1             : signed(62 DOWNTO 0);  -- sfix63
  SIGNAL qtempPost_1                      : signed(62 DOWNTO 0);  -- sfix63
  SIGNAL qtempPost_2                      : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL quotient                         : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Divide_out1                      : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Delay12_reg                      : vector_of_signed63(0 TO 36);  -- sfix63 [37]
  SIGNAL Delay12_out1                     : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Delay64_out1                     : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Delay64_out1_1                   : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Delay64_out1_2                   : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Product_out1_4                   : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Product_out1_5                   : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Product_out1_6                   : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Delay67_reg                      : vector_of_signed95(0 TO 7);  -- sfix95 [8]
  SIGNAL Delay67_out1                     : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Product2_in0_buff1_out1          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay63_bypass_reg               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay63_out1                     : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay63_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay63_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Delay65_out1                     : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Delay65_out1_1                   : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Delay65_out1_2                   : signed(62 DOWNTO 0);  -- sfix63_En34
  SIGNAL Product2_out1_2                  : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Product2_out1_3                  : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Product2_out1_4                  : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL Delay68_reg                      : vector_of_signed95(0 TO 7);  -- sfix95 [8]
  SIGNAL Delay68_out1                     : signed(94 DOWNTO 0);  -- sfix95_En62
  SIGNAL dataOut_re_2                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataOut_im_2                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataOut_re_3                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataOut_im_3                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch3_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch3_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  -- 1 = store channel
  -- 0 = retrieve channel
  -- 1 = write value
  -- 0 = read value

  u_hEst_RAM : rx_demod_ip_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 9,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din_re => std_logic_vector(Delay10_out1_re),
              wr_din_im => std_logic_vector(Delay10_out1_im),
              wr_addr => std_logic_vector(Delay8_out1),
              wr_en => Logical_Operator3_out1_2,
              rd_addr => std_logic_vector(hEstLenCountDelayed_out1),
              dout_re => hEst_RAM_out1_re,
              dout_im => hEst_RAM_out1_im
              );

  validIn_1 <= validIn;

  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/Equalizer/validInselector2/validInselector2'
  out_rsvd <= validIn_1;

  out_rsvd_1 <= out_rsvd;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        out_rsvd_2 <= '0';
      ELSIF enb = '1' THEN
        out_rsvd_2 <= out_rsvd_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay66_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        out_rsvd_3 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        out_rsvd_3 <= out_rsvd_2;
      END IF;
    END IF;
  END PROCESS Delay66_output_process;


  Delay66_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay66_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay66_reg(0) <= out_rsvd_3;
        Delay66_reg(90 DOWNTO 1) <= Delay66_reg(89 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay66_process;

  Delay66_out1 <= Delay66_reg(90);

  rst <= reset;

  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/Equalizer/resetInSelector3/resetInSelector3'
  out_rsvd_4 <= rst;

  valid_with_reset_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_with_reset_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        valid_with_reset_bypass_reg <= out_rsvd_4;
      END IF;
    END IF;
  END PROCESS valid_with_reset_bypass_process;

  
  out_rsvd_5 <= out_rsvd_4 WHEN enb_1_2_1 = '1' ELSE
      valid_with_reset_bypass_reg;

  Logical_Operator9_out1 <=  NOT out_rsvd_5;

  reduced_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_1 <= Logical_Operator9_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  reduced_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_2 <= Logical_Operator9_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  reduced_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_3 <= Logical_Operator9_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_2_process;


  reduced_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_4 <= Logical_Operator9_out1_3;
      END IF;
    END IF;
  END PROCESS reduced_3_process;


  reduced_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_5 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_5 <= Logical_Operator9_out1_4;
      END IF;
    END IF;
  END PROCESS reduced_4_process;


  reduced_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_6 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_6 <= Logical_Operator9_out1_5;
      END IF;
    END IF;
  END PROCESS reduced_5_process;


  reduced_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_7 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_7 <= Logical_Operator9_out1_6;
      END IF;
    END IF;
  END PROCESS reduced_6_process;


  reduced_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_8 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_8 <= Logical_Operator9_out1_7;
      END IF;
    END IF;
  END PROCESS reduced_7_process;


  reduced_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_9 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_9 <= Logical_Operator9_out1_8;
      END IF;
    END IF;
  END PROCESS reduced_8_process;


  reduced_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_10 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_10 <= Logical_Operator9_out1_9;
      END IF;
    END IF;
  END PROCESS reduced_9_process;


  reduced_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_11 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_11 <= Logical_Operator9_out1_10;
      END IF;
    END IF;
  END PROCESS reduced_10_process;


  reduced_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_12 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_12 <= Logical_Operator9_out1_11;
      END IF;
    END IF;
  END PROCESS reduced_11_process;


  reduced_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_13 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_13 <= Logical_Operator9_out1_12;
      END IF;
    END IF;
  END PROCESS reduced_12_process;


  reduced_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_14 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_14 <= Logical_Operator9_out1_13;
      END IF;
    END IF;
  END PROCESS reduced_13_process;


  reduced_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_15 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_15 <= Logical_Operator9_out1_14;
      END IF;
    END IF;
  END PROCESS reduced_14_process;


  reduced_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_16 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_16 <= Logical_Operator9_out1_15;
      END IF;
    END IF;
  END PROCESS reduced_15_process;


  reduced_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_17 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_17 <= Logical_Operator9_out1_16;
      END IF;
    END IF;
  END PROCESS reduced_16_process;


  reduced_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_18 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_18 <= Logical_Operator9_out1_17;
      END IF;
    END IF;
  END PROCESS reduced_17_process;


  reduced_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_19 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_19 <= Logical_Operator9_out1_18;
      END IF;
    END IF;
  END PROCESS reduced_18_process;


  reduced_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_20 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_20 <= Logical_Operator9_out1_19;
      END IF;
    END IF;
  END PROCESS reduced_19_process;


  reduced_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_21 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_21 <= Logical_Operator9_out1_20;
      END IF;
    END IF;
  END PROCESS reduced_20_process;


  reduced_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_22 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_22 <= Logical_Operator9_out1_21;
      END IF;
    END IF;
  END PROCESS reduced_21_process;


  reduced_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_23 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_23 <= Logical_Operator9_out1_22;
      END IF;
    END IF;
  END PROCESS reduced_22_process;


  reduced_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_24 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_24 <= Logical_Operator9_out1_23;
      END IF;
    END IF;
  END PROCESS reduced_23_process;


  reduced_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_25 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_25 <= Logical_Operator9_out1_24;
      END IF;
    END IF;
  END PROCESS reduced_24_process;


  reduced_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_26 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_26 <= Logical_Operator9_out1_25;
      END IF;
    END IF;
  END PROCESS reduced_25_process;


  reduced_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_27 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_27 <= Logical_Operator9_out1_26;
      END IF;
    END IF;
  END PROCESS reduced_26_process;


  reduced_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_28 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_28 <= Logical_Operator9_out1_27;
      END IF;
    END IF;
  END PROCESS reduced_27_process;


  reduced_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_29 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_29 <= Logical_Operator9_out1_28;
      END IF;
    END IF;
  END PROCESS reduced_28_process;


  reduced_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_30 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_30 <= Logical_Operator9_out1_29;
      END IF;
    END IF;
  END PROCESS reduced_29_process;


  reduced_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_31 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_31 <= Logical_Operator9_out1_30;
      END IF;
    END IF;
  END PROCESS reduced_30_process;


  reduced_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_32 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_32 <= Logical_Operator9_out1_31;
      END IF;
    END IF;
  END PROCESS reduced_31_process;


  reduced_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_33 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_33 <= Logical_Operator9_out1_32;
      END IF;
    END IF;
  END PROCESS reduced_32_process;


  reduced_33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_34 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_34 <= Logical_Operator9_out1_33;
      END IF;
    END IF;
  END PROCESS reduced_33_process;


  reduced_34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_35 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_35 <= Logical_Operator9_out1_34;
      END IF;
    END IF;
  END PROCESS reduced_34_process;


  reduced_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_36 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_36 <= Logical_Operator9_out1_35;
      END IF;
    END IF;
  END PROCESS reduced_35_process;


  reduced_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_37 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_37 <= Logical_Operator9_out1_36;
      END IF;
    END IF;
  END PROCESS reduced_36_process;


  reduced_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_38 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_38 <= Logical_Operator9_out1_37;
      END IF;
    END IF;
  END PROCESS reduced_37_process;


  reduced_38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_39 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_39 <= Logical_Operator9_out1_38;
      END IF;
    END IF;
  END PROCESS reduced_38_process;


  reduced_39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_40 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_40 <= Logical_Operator9_out1_39;
      END IF;
    END IF;
  END PROCESS reduced_39_process;


  reduced_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_41 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_41 <= Logical_Operator9_out1_40;
      END IF;
    END IF;
  END PROCESS reduced_40_process;


  reduced_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_42 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_42 <= Logical_Operator9_out1_41;
      END IF;
    END IF;
  END PROCESS reduced_41_process;


  reduced_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_43 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_43 <= Logical_Operator9_out1_42;
      END IF;
    END IF;
  END PROCESS reduced_42_process;


  reduced_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_44 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_44 <= Logical_Operator9_out1_43;
      END IF;
    END IF;
  END PROCESS reduced_43_process;


  reduced_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_45 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_45 <= Logical_Operator9_out1_44;
      END IF;
    END IF;
  END PROCESS reduced_44_process;


  reduced_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_46 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_46 <= Logical_Operator9_out1_45;
      END IF;
    END IF;
  END PROCESS reduced_45_process;


  reduced_46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_47 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_47 <= Logical_Operator9_out1_46;
      END IF;
    END IF;
  END PROCESS reduced_46_process;


  reduced_47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_48 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_48 <= Logical_Operator9_out1_47;
      END IF;
    END IF;
  END PROCESS reduced_47_process;


  reduced_48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_49 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_49 <= Logical_Operator9_out1_48;
      END IF;
    END IF;
  END PROCESS reduced_48_process;


  reduced_49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_50 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_50 <= Logical_Operator9_out1_49;
      END IF;
    END IF;
  END PROCESS reduced_49_process;


  reduced_50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_51 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_51 <= Logical_Operator9_out1_50;
      END IF;
    END IF;
  END PROCESS reduced_50_process;


  reduced_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_52 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_52 <= Logical_Operator9_out1_51;
      END IF;
    END IF;
  END PROCESS reduced_51_process;


  reduced_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_53 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_53 <= Logical_Operator9_out1_52;
      END IF;
    END IF;
  END PROCESS reduced_52_process;


  reduced_53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_54 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_54 <= Logical_Operator9_out1_53;
      END IF;
    END IF;
  END PROCESS reduced_53_process;


  reduced_54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_55 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_55 <= Logical_Operator9_out1_54;
      END IF;
    END IF;
  END PROCESS reduced_54_process;


  reduced_55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_56 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_56 <= Logical_Operator9_out1_55;
      END IF;
    END IF;
  END PROCESS reduced_55_process;


  reduced_56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_57 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_57 <= Logical_Operator9_out1_56;
      END IF;
    END IF;
  END PROCESS reduced_56_process;


  reduced_57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_58 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_58 <= Logical_Operator9_out1_57;
      END IF;
    END IF;
  END PROCESS reduced_57_process;


  reduced_58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_59 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_59 <= Logical_Operator9_out1_58;
      END IF;
    END IF;
  END PROCESS reduced_58_process;


  reduced_59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_60 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_60 <= Logical_Operator9_out1_59;
      END IF;
    END IF;
  END PROCESS reduced_59_process;


  reduced_60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_61 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_61 <= Logical_Operator9_out1_60;
      END IF;
    END IF;
  END PROCESS reduced_60_process;


  reduced_61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_62 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_62 <= Logical_Operator9_out1_61;
      END IF;
    END IF;
  END PROCESS reduced_61_process;


  reduced_62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_63 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_63 <= Logical_Operator9_out1_62;
      END IF;
    END IF;
  END PROCESS reduced_62_process;


  reduced_63_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_64 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_64 <= Logical_Operator9_out1_63;
      END IF;
    END IF;
  END PROCESS reduced_63_process;


  reduced_64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_65 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_65 <= Logical_Operator9_out1_64;
      END IF;
    END IF;
  END PROCESS reduced_64_process;


  reduced_65_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_66 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_66 <= Logical_Operator9_out1_65;
      END IF;
    END IF;
  END PROCESS reduced_65_process;


  reduced_66_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_67 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_67 <= Logical_Operator9_out1_66;
      END IF;
    END IF;
  END PROCESS reduced_66_process;


  reduced_67_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_68 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_68 <= Logical_Operator9_out1_67;
      END IF;
    END IF;
  END PROCESS reduced_67_process;


  reduced_68_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_69 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_69 <= Logical_Operator9_out1_68;
      END IF;
    END IF;
  END PROCESS reduced_68_process;


  reduced_69_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_70 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_70 <= Logical_Operator9_out1_69;
      END IF;
    END IF;
  END PROCESS reduced_69_process;


  reduced_70_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_71 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_71 <= Logical_Operator9_out1_70;
      END IF;
    END IF;
  END PROCESS reduced_70_process;


  reduced_71_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_72 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_72 <= Logical_Operator9_out1_71;
      END IF;
    END IF;
  END PROCESS reduced_71_process;


  reduced_72_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_73 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_73 <= Logical_Operator9_out1_72;
      END IF;
    END IF;
  END PROCESS reduced_72_process;


  reduced_73_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_74 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_74 <= Logical_Operator9_out1_73;
      END IF;
    END IF;
  END PROCESS reduced_73_process;


  reduced_74_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_75 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_75 <= Logical_Operator9_out1_74;
      END IF;
    END IF;
  END PROCESS reduced_74_process;


  reduced_75_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_76 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_76 <= Logical_Operator9_out1_75;
      END IF;
    END IF;
  END PROCESS reduced_75_process;


  reduced_76_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_77 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_77 <= Logical_Operator9_out1_76;
      END IF;
    END IF;
  END PROCESS reduced_76_process;


  reduced_77_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_78 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_78 <= Logical_Operator9_out1_77;
      END IF;
    END IF;
  END PROCESS reduced_77_process;


  reduced_78_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_79 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_79 <= Logical_Operator9_out1_78;
      END IF;
    END IF;
  END PROCESS reduced_78_process;


  reduced_79_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_80 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_80 <= Logical_Operator9_out1_79;
      END IF;
    END IF;
  END PROCESS reduced_79_process;


  reduced_80_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_81 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_81 <= Logical_Operator9_out1_80;
      END IF;
    END IF;
  END PROCESS reduced_80_process;


  reduced_81_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_82 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_82 <= Logical_Operator9_out1_81;
      END IF;
    END IF;
  END PROCESS reduced_81_process;


  reduced_82_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_83 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_83 <= Logical_Operator9_out1_82;
      END IF;
    END IF;
  END PROCESS reduced_82_process;


  reduced_83_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_84 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_84 <= Logical_Operator9_out1_83;
      END IF;
    END IF;
  END PROCESS reduced_83_process;


  reduced_84_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_85 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_85 <= Logical_Operator9_out1_84;
      END IF;
    END IF;
  END PROCESS reduced_84_process;


  reduced_85_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_86 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_86 <= Logical_Operator9_out1_85;
      END IF;
    END IF;
  END PROCESS reduced_85_process;


  reduced_86_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_87 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_87 <= Logical_Operator9_out1_86;
      END IF;
    END IF;
  END PROCESS reduced_86_process;


  reduced_87_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_88 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_88 <= Logical_Operator9_out1_87;
      END IF;
    END IF;
  END PROCESS reduced_87_process;


  reduced_88_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_89 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_89 <= Logical_Operator9_out1_88;
      END IF;
    END IF;
  END PROCESS reduced_88_process;


  reduced_89_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_90 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_90 <= Logical_Operator9_out1_89;
      END IF;
    END IF;
  END PROCESS reduced_89_process;


  reduced_90_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_91 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_91 <= Logical_Operator9_out1_90;
      END IF;
    END IF;
  END PROCESS reduced_90_process;


  reduced_91_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator9_out1_92 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator9_out1_92 <= Logical_Operator9_out1_91;
      END IF;
    END IF;
  END PROCESS reduced_91_process;


  Logical_Operator8_output : PROCESS (Delay66_out1, Logical_Operator9_out1_1, Logical_Operator9_out1_10,
       Logical_Operator9_out1_11, Logical_Operator9_out1_12,
       Logical_Operator9_out1_13, Logical_Operator9_out1_14,
       Logical_Operator9_out1_15, Logical_Operator9_out1_16,
       Logical_Operator9_out1_17, Logical_Operator9_out1_18,
       Logical_Operator9_out1_19, Logical_Operator9_out1_2,
       Logical_Operator9_out1_20, Logical_Operator9_out1_21,
       Logical_Operator9_out1_22, Logical_Operator9_out1_23,
       Logical_Operator9_out1_24, Logical_Operator9_out1_25,
       Logical_Operator9_out1_26, Logical_Operator9_out1_27,
       Logical_Operator9_out1_28, Logical_Operator9_out1_29,
       Logical_Operator9_out1_3, Logical_Operator9_out1_30,
       Logical_Operator9_out1_31, Logical_Operator9_out1_32,
       Logical_Operator9_out1_33, Logical_Operator9_out1_34,
       Logical_Operator9_out1_35, Logical_Operator9_out1_36,
       Logical_Operator9_out1_37, Logical_Operator9_out1_38,
       Logical_Operator9_out1_39, Logical_Operator9_out1_4,
       Logical_Operator9_out1_40, Logical_Operator9_out1_41,
       Logical_Operator9_out1_42, Logical_Operator9_out1_43,
       Logical_Operator9_out1_44, Logical_Operator9_out1_45,
       Logical_Operator9_out1_46, Logical_Operator9_out1_47,
       Logical_Operator9_out1_48, Logical_Operator9_out1_49,
       Logical_Operator9_out1_5, Logical_Operator9_out1_50,
       Logical_Operator9_out1_51, Logical_Operator9_out1_52,
       Logical_Operator9_out1_53, Logical_Operator9_out1_54,
       Logical_Operator9_out1_55, Logical_Operator9_out1_56,
       Logical_Operator9_out1_57, Logical_Operator9_out1_58,
       Logical_Operator9_out1_59, Logical_Operator9_out1_6,
       Logical_Operator9_out1_60, Logical_Operator9_out1_61,
       Logical_Operator9_out1_62, Logical_Operator9_out1_63,
       Logical_Operator9_out1_64, Logical_Operator9_out1_65,
       Logical_Operator9_out1_66, Logical_Operator9_out1_67,
       Logical_Operator9_out1_68, Logical_Operator9_out1_69,
       Logical_Operator9_out1_7, Logical_Operator9_out1_70,
       Logical_Operator9_out1_71, Logical_Operator9_out1_72,
       Logical_Operator9_out1_73, Logical_Operator9_out1_74,
       Logical_Operator9_out1_75, Logical_Operator9_out1_76,
       Logical_Operator9_out1_77, Logical_Operator9_out1_78,
       Logical_Operator9_out1_79, Logical_Operator9_out1_8,
       Logical_Operator9_out1_80, Logical_Operator9_out1_81,
       Logical_Operator9_out1_82, Logical_Operator9_out1_83,
       Logical_Operator9_out1_84, Logical_Operator9_out1_85,
       Logical_Operator9_out1_86, Logical_Operator9_out1_87,
       Logical_Operator9_out1_88, Logical_Operator9_out1_89,
       Logical_Operator9_out1_9, Logical_Operator9_out1_90,
       Logical_Operator9_out1_91, Logical_Operator9_out1_92)
    VARIABLE t : std_logic;
  BEGIN
    t := Logical_Operator9_out1_16 AND (Logical_Operator9_out1_15 AND (Logical_Operator9_out1_14 AND (Logical_Operator9_out1_13 AND (Logical_Operator9_out1_12 AND (Logical_Operator9_out1_11 AND (Logical_Operator9_out1_10 AND (Logical_Operator9_out1_9 AND (Logical_Operator9_out1_8 AND (Logical_Operator9_out1_7 AND (Logical_Operator9_out1_6 AND (Logical_Operator9_out1_5 AND (Logical_Operator9_out1_4 AND (Logical_Operator9_out1_3 AND (Logical_Operator9_out1_2 AND (Delay66_out1 AND Logical_Operator9_out1_1)))))))))))))));
    t := Logical_Operator9_out1_17 AND t;
    t := Logical_Operator9_out1_18 AND t;
    t := Logical_Operator9_out1_19 AND t;
    t := Logical_Operator9_out1_20 AND t;
    t := Logical_Operator9_out1_21 AND t;
    t := Logical_Operator9_out1_22 AND t;
    t := Logical_Operator9_out1_23 AND t;
    t := Logical_Operator9_out1_24 AND t;
    t := Logical_Operator9_out1_25 AND t;
    t := Logical_Operator9_out1_26 AND t;
    t := Logical_Operator9_out1_27 AND t;
    t := Logical_Operator9_out1_28 AND t;
    t := Logical_Operator9_out1_29 AND t;
    t := Logical_Operator9_out1_30 AND t;
    t := Logical_Operator9_out1_31 AND t;
    t := Logical_Operator9_out1_32 AND t;
    t := Logical_Operator9_out1_33 AND t;
    t := Logical_Operator9_out1_34 AND t;
    t := Logical_Operator9_out1_35 AND t;
    t := Logical_Operator9_out1_36 AND t;
    t := Logical_Operator9_out1_37 AND t;
    t := Logical_Operator9_out1_38 AND t;
    t := Logical_Operator9_out1_39 AND t;
    t := Logical_Operator9_out1_40 AND t;
    t := Logical_Operator9_out1_41 AND t;
    t := Logical_Operator9_out1_42 AND t;
    t := Logical_Operator9_out1_43 AND t;
    t := Logical_Operator9_out1_44 AND t;
    t := Logical_Operator9_out1_45 AND t;
    t := Logical_Operator9_out1_46 AND t;
    t := Logical_Operator9_out1_47 AND t;
    t := Logical_Operator9_out1_48 AND t;
    t := Logical_Operator9_out1_49 AND t;
    t := Logical_Operator9_out1_50 AND t;
    t := Logical_Operator9_out1_51 AND t;
    t := Logical_Operator9_out1_52 AND t;
    t := Logical_Operator9_out1_53 AND t;
    t := Logical_Operator9_out1_54 AND t;
    t := Logical_Operator9_out1_55 AND t;
    t := Logical_Operator9_out1_56 AND t;
    t := Logical_Operator9_out1_57 AND t;
    t := Logical_Operator9_out1_58 AND t;
    t := Logical_Operator9_out1_59 AND t;
    t := Logical_Operator9_out1_60 AND t;
    t := Logical_Operator9_out1_61 AND t;
    t := Logical_Operator9_out1_62 AND t;
    t := Logical_Operator9_out1_63 AND t;
    t := Logical_Operator9_out1_64 AND t;
    t := Logical_Operator9_out1_65 AND t;
    t := Logical_Operator9_out1_66 AND t;
    t := Logical_Operator9_out1_67 AND t;
    t := Logical_Operator9_out1_68 AND t;
    t := Logical_Operator9_out1_69 AND t;
    t := Logical_Operator9_out1_70 AND t;
    t := Logical_Operator9_out1_71 AND t;
    t := Logical_Operator9_out1_72 AND t;
    t := Logical_Operator9_out1_73 AND t;
    t := Logical_Operator9_out1_74 AND t;
    t := Logical_Operator9_out1_75 AND t;
    t := Logical_Operator9_out1_76 AND t;
    t := Logical_Operator9_out1_77 AND t;
    t := Logical_Operator9_out1_78 AND t;
    t := Logical_Operator9_out1_79 AND t;
    t := Logical_Operator9_out1_80 AND t;
    t := Logical_Operator9_out1_81 AND t;
    t := Logical_Operator9_out1_82 AND t;
    t := Logical_Operator9_out1_83 AND t;
    t := Logical_Operator9_out1_84 AND t;
    t := Logical_Operator9_out1_85 AND t;
    t := Logical_Operator9_out1_86 AND t;
    t := Logical_Operator9_out1_87 AND t;
    t := Logical_Operator9_out1_88 AND t;
    t := Logical_Operator9_out1_89 AND t;
    t := Logical_Operator9_out1_90 AND t;
    t := Logical_Operator9_out1_91 AND t;
    t := Logical_Operator9_out1_92 AND t;
    Logical_Operator8_out1 <= t;
  END PROCESS Logical_Operator8_output;


  Constant_out1_re <= to_signed(16#0000#, 16);
  Constant_out1_im <= to_signed(16#0000#, 16);

  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/datahEstConj Multiplier/Selector DataIn/Selector DataIn'
  out_re <= dataIn_re_signed;
  out_im <= dataIn_im_signed;

  out_re_1 <= out_re;

  out_im_1 <= out_im;

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay4_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_reg_im(0) <= out_im_1;
        Delay4_reg_im(1 TO 3) <= Delay4_reg_im(0 TO 2);
        Delay4_reg_re(0) <= out_re_1;
        Delay4_reg_re(1 TO 3) <= Delay4_reg_re(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(3);
  Delay4_out1_im <= Delay4_reg_im(3);

  Delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay45_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay45_out1 <= Delay4_out1_re;
      END IF;
    END IF;
  END PROCESS Delay45_process;


  Delay45_out1_1 <= Delay45_out1;

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay45_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay45_out1_2 <= Delay45_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/reset Selector'
  out_rsvd_6 <= reset;

  --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/LoadhEst Selector'
  out_rsvd_7 <= loadhEst;

  Logical_Operator9_out1_93 <=  NOT out_rsvd_6;

  Logical_Operator10_out1 <= out_rsvd_7 AND Logical_Operator9_out1_93;

  reduced_92_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLen_Sampler_out2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        hEstLen_Sampler_out2 <= Logical_Operator10_out1;
      END IF;
    END IF;
  END PROCESS reduced_92_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  count_step <= '1';

  count_from <= '0';

  count_reset <= '0';

  count <= hEstLen_sample_flag_out1 XOR count_step;

  
  need_to_wrap <= '1' WHEN hEstLen_sample_flag_out1 = '1' ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  Compare_To_Constant1_out1 <= '1' WHEN hEstLen_sample_flag_out1 = '0' ELSE
      '0';

  Logical_Operator1_out1 <= hEstLen_Sampler_out2 AND Compare_To_Constant1_out1;

  
  count_1 <= hEstLen_sample_flag_out1 WHEN Logical_Operator1_out1 = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN out_rsvd_6 = '0' ELSE
      count_reset;

  hEstLen_sample_flag_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLen_sample_flag_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        hEstLen_sample_flag_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS hEstLen_sample_flag_process;


  Equalization_method_out1 <= to_unsigned(16#1#, 2);

  
  Compare_To_Constant_out1 <= '1' WHEN Equalization_method_out1 = to_unsigned(16#1#, 2) ELSE
      '0';

  --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/ValidIn Selector'
  out_rsvd_8 <= validIn;

  
  Compare_To_Constant1_out1_1 <= '1' WHEN out_rsvd_8 = '1' ELSE
      '0';

  Logical_Operator_out1 <=  NOT out_rsvd_6;

  hEst_re_signed <= signed(hEst_re);

  hEst_im_signed <= signed(hEst_im);

  --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/hEst Selector'
  dataOut_re_1 <= hEst_re_signed;
  dataOut_im_1 <= hEst_im_signed;

  
  Compare_To_Zero1_out1 <= '1' WHEN (dataOut_re_1 = to_signed(16#0000#, 16)) AND (dataOut_im_1 = to_signed(16#0000#, 16)) ELSE
      '0';

  Logical_Operator1_out1_1 <= Compare_To_Zero1_out1 AND (Compare_To_Constant1_out1_1 AND Logical_Operator_out1);

  Logical_Operator3_out1 <= Compare_To_Constant_out1 AND Logical_Operator1_out1_1;

  Equalization_method1_out1 <= to_unsigned(16#1#, 2);

  
  Compare_To_Constant2_out1 <= '1' WHEN Equalization_method1_out1 = to_unsigned(16#2#, 2) ELSE
      '0';

  noiseVar_out1 <= '0';

  --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/nVar Selector/nVarSelector'
  dataOutSelNVar <= noiseVar_out1;

  dataOutSelNVar_1 <= dataOutSelNVar;

  
  Compare_To_Zero2_out1 <= '1' WHEN dataOutSelNVar_1 = '0' ELSE
      '0';

  Logical_Operator2_out1 <= Compare_To_Zero2_out1 AND (Logical_Operator1_out1_1 AND Compare_To_Constant2_out1);

  Logical_Operator4_out1 <= Logical_Operator3_out1 OR Logical_Operator2_out1;

  Constant1_out1_re <= to_signed(16#0000#, 16);
  Constant1_out1_im <= to_signed(16#0000#, 16);

  Add_out1_re <= dataOut_re_1 + Constant1_out1_re;
  Add_out1_im <= dataOut_im_1 + Constant1_out1_im;

  Constant_out1_re_1 <= to_signed(16#4000#, 16);
  Constant_out1_im_1 <= to_signed(16#0000#, 16);

  
  Switch_out1_re <= Add_out1_re WHEN Logical_Operator4_out1 = '0' ELSE
      Constant_out1_re_1;
  
  Switch_out1_im <= Add_out1_im WHEN Logical_Operator4_out1 = '0' ELSE
      Constant_out1_im_1;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay10_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay10_reg_im(0) <= Switch_out1_im;
        Delay10_reg_im(1) <= Delay10_reg_im(0);
        Delay10_reg_re(0) <= Switch_out1_re;
        Delay10_reg_re(1) <= Delay10_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay10_process;

  Delay10_out1_re <= Delay10_reg_re(1);
  Delay10_out1_im <= Delay10_reg_im(1);

  RAM_Flag_ctrl_const_out <= '1';

  RAM_Flag_ctrl_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        RAM_Flag_ctrl_delay_out <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        RAM_Flag_ctrl_delay_out <= RAM_Flag_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS RAM_Flag_ctrl_delay_process;


  RAM_Flag_Initial_Val_out <= '1';

  Logical_Operator7_out1 <= hEstLen_Sampler_out2 OR out_rsvd_6;

  hEstLen_unsigned <= unsigned(hEstLen);

  --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/hEstLen Selector'
  out_rsvd_9 <= hEstLen_unsigned;

  Data_Type_Conversion_out1 <= resize(out_rsvd_9, 17);

  whdlmod_c117_sample_hEstLen_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLen_1 <= to_unsigned(16#00001#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        hEstLen_1 <= hEstLen_next;
      END IF;
    END IF;
  END PROCESS whdlmod_c117_sample_hEstLen_process;

  whdlmod_c117_sample_hEstLen_output : PROCESS (Data_Type_Conversion_out1, Logical_Operator10_out1, hEstLen_1)
    VARIABLE sub_cast : unsigned(17 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(18 DOWNTO 0);
    VARIABLE sub_temp : signed(18 DOWNTO 0);
    VARIABLE cast : unsigned(17 DOWNTO 0);
    VARIABLE sub_cast_1 : unsigned(17 DOWNTO 0);
    VARIABLE sub_cast_2 : signed(18 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(18 DOWNTO 0);
    VARIABLE cast_0 : unsigned(17 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#00000#, 19);
    sub_temp_0 := to_signed(16#00000#, 19);
    sub_cast := to_unsigned(16#00000#, 18);
    sub_cast_0 := to_signed(16#00000#, 19);
    cast := to_unsigned(16#00000#, 18);
    sub_cast_1 := to_unsigned(16#00000#, 18);
    sub_cast_2 := to_signed(16#00000#, 19);
    cast_0 := to_unsigned(16#00000#, 18);
    hEstLen_next <= hEstLen_1;
    --MATLAB Function 'OFDM Equalizer/CtrlSignal Generator/hEstLen Sampler/hEstLen Generator/sample hEstLen'
    IF Logical_Operator10_out1 = '1' THEN 
      sub_cast := resize(Data_Type_Conversion_out1, 18);
      sub_cast_0 := signed(resize(sub_cast, 19));
      sub_temp := sub_cast_0 - to_signed(16#00001#, 19);
      IF sub_temp(18) = '1' THEN 
        cast := "000000000000000000";
      ELSE 
        cast := unsigned(sub_temp(17 DOWNTO 0));
      END IF;
      IF cast(17) /= '0' THEN 
        hEstLenOut <= "11111111111111111";
      ELSE 
        hEstLenOut <= cast(16 DOWNTO 0);
      END IF;
      sub_cast_1 := resize(Data_Type_Conversion_out1, 18);
      sub_cast_2 := signed(resize(sub_cast_1, 19));
      sub_temp_0 := sub_cast_2 - to_signed(16#00001#, 19);
      IF sub_temp_0(18) = '1' THEN 
        cast_0 := "000000000000000000";
      ELSE 
        cast_0 := unsigned(sub_temp_0(17 DOWNTO 0));
      END IF;
      IF cast_0(17) /= '0' THEN 
        hEstLen_next <= "11111111111111111";
      ELSE 
        hEstLen_next <= cast_0(16 DOWNTO 0);
      END IF;
    ELSE 
      hEstLenOut <= hEstLen_1;
    END IF;
  END PROCESS whdlmod_c117_sample_hEstLen_output;


  
  switch_compare_1 <= '1' WHEN hEstLenOut > to_unsigned(16#00000#, 17) ELSE
      '0';

  Constant_out1 <= to_unsigned(16#00001#, 17);

  
  Switch_out1 <= Constant_out1 WHEN switch_compare_1 = '0' ELSE
      hEstLenOut;

  reduced_93_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLen_Sampler_out3 <= to_unsigned(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        hEstLen_Sampler_out3 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS reduced_93_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  count_step_1 <= '1';

  count_from_1 <= '0';

  count_reset_1 <= '0';

  count_3 <= hEstLen_Flag_out1 XOR count_step_1;

  
  need_to_wrap_1 <= '1' WHEN hEstLen_Flag_out1 = '1' ELSE
      '0';

  
  count_value_1 <= count_3 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  Compare_To_Constant2_out1_1 <= '1' WHEN hEstLen_Flag_out1 = '0' ELSE
      '0';

  Logical_Operator8_out1_1 <= Logical_Operator10_out1 AND Compare_To_Constant2_out1_1;

  
  count_4 <= hEstLen_Flag_out1 WHEN Logical_Operator8_out1_1 = '0' ELSE
      count_value_1;

  
  count_5 <= count_4 WHEN out_rsvd_6 = '0' ELSE
      count_reset_1;

  hEstLen_Flag_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLen_Flag_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        hEstLen_Flag_out1 <= count_5;
      END IF;
    END IF;
  END PROCESS hEstLen_Flag_process;


  
  Compare_To_Constant4_out1 <= '1' WHEN hEstLen_Flag_out1 = '1' ELSE
      '0';

  Logical_Operator3_out1_1 <=  NOT out_rsvd_6;

  Logical_Operator11_out1 <= out_rsvd_8 AND (Compare_To_Constant4_out1 AND Logical_Operator3_out1_1);

  Logical_Operator12_out1 <=  NOT Compare_To_Constant4_out1;

  Logical_Operator13_out1 <= out_rsvd_7 AND (out_rsvd_8 AND (Logical_Operator12_out1 AND Logical_Operator3_out1_1));

  Logical_Operator14_out1 <= Logical_Operator11_out1 OR Logical_Operator13_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 204
  count_step_2 <= to_unsigned(16#001#, 9);

  count_from_2 <= to_unsigned(16#000#, 9);

  Constant_out1_1 <= to_unsigned(16#001#, 9);

  count_reset_2 <= to_unsigned(16#000#, 9);

  
  Relational_Operator1_out1 <= '1' WHEN resize(hEstLenCount_out1, 17) < hEstLen_Sampler_out3 ELSE
      '0';

  count_6 <= hEstLenCount_out1 + count_step_2;

  
  need_to_wrap_2 <= '1' WHEN hEstLenCount_out1 = to_unsigned(16#0CC#, 9) ELSE
      '0';

  
  count_value_2 <= count_6 WHEN need_to_wrap_2 = '0' ELSE
      count_from_2;

  
  count_7 <= hEstLenCount_out1 WHEN Logical_Operator14_out1 = '0' ELSE
      count_value_2;

  
  count_8 <= count_7 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Constant_out1_1;

  
  Relational_Operator2_out1 <= '1' WHEN Switch_out1 = resize(hEstLenCount_out1, 17) ELSE
      '0';

  Logical_Operator15_out1 <= Relational_Operator2_out1 AND Logical_Operator14_out1;

  Logical_Operator6_out1 <= Logical_Operator15_out1 OR out_rsvd_6;

  
  count_9 <= count_8 WHEN Logical_Operator6_out1 = '0' ELSE
      count_reset_2;

  hEstLenCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLenCount_out1 <= to_unsigned(16#000#, 9);
      ELSIF enb_1_2_0 = '1' THEN
        hEstLenCount_out1 <= count_9;
      END IF;
    END IF;
  END PROCESS hEstLenCount_process;


  
  Compare_To_Constant3_out1 <= '1' WHEN hEstLenCount_out1 > to_unsigned(16#000#, 9) ELSE
      '0';

  Logical_Operator4_out1_1 <= Relational_Operator1_out1 AND (Logical_Operator10_out1 AND Compare_To_Constant3_out1);

  Logical_Operator2_out1_1 <=  NOT out_rsvd_6;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= Logical_Operator2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay14_out1 <= Logical_Operator14_out1;
      END IF;
    END IF;
  END PROCESS Delay14_process;


  Logical_Operator1_out1_2 <= Delay1_out1 AND Delay14_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 204
  count_step_3 <= to_unsigned(16#001#, 9);

  count_from_3 <= to_unsigned(16#000#, 9);

  count_reset_3 <= to_unsigned(16#000#, 9);

  count_10 <= hEstLenCountDelayed_out1 + count_step_3;

  
  need_to_wrap_3 <= '1' WHEN hEstLenCountDelayed_out1 = to_unsigned(16#0CC#, 9) ELSE
      '0';

  
  count_value_3 <= count_10 WHEN need_to_wrap_3 = '0' ELSE
      count_from_3;

  
  count_11 <= hEstLenCountDelayed_out1 WHEN Logical_Operator1_out1_2 = '0' ELSE
      count_value_3;

  Logical_Operator5_out1 <= out_rsvd_6 OR (Logical_Operator_out1_1 OR Logical_Operator4_out1_1);

  
  count_12 <= count_11 WHEN Logical_Operator5_out1 = '0' ELSE
      count_reset_3;

  hEstLenCountDelayed_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        hEstLenCountDelayed_out1 <= to_unsigned(16#000#, 9);
      ELSIF enb_1_2_0 = '1' THEN
        hEstLenCountDelayed_out1 <= count_12;
      END IF;
    END IF;
  END PROCESS hEstLenCountDelayed_process;


  
  Relational_Operator_out1 <= '1' WHEN hEstLen_Sampler_out3 = resize(hEstLenCountDelayed_out1, 17) ELSE
      '0';

  Logical_Operator_out1_1 <= Relational_Operator_out1 AND Logical_Operator1_out1_2;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 0
  count_step_4 <= '1';

  count_from_4 <= '1';

  count_reset_4 <= '1';

  count_13 <= RAM_Flag_out1 XOR count_step_4;

  
  need_to_wrap_4 <= '1' WHEN RAM_Flag_out1 = '0' ELSE
      '0';

  
  count_value_4 <= count_13 WHEN need_to_wrap_4 = '0' ELSE
      count_from_4;

  
  Compare_To_Constant_out1_1 <= '1' WHEN Data_Type_Conversion_out1_1 = '1' ELSE
      '0';

  Logical_Operator2_out1_2 <= Logical_Operator_out1_1 AND Compare_To_Constant_out1_1;

  Delay1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1_1 <= Logical_Operator2_out1_2;
      END IF;
    END IF;
  END PROCESS Delay1_1_process;


  
  count_14 <= RAM_Flag_out1 WHEN Delay1_out1_1 = '0' ELSE
      count_value_4;

  
  count_15 <= count_14 WHEN Logical_Operator7_out1 = '0' ELSE
      count_reset_4;

  RAM_Flag_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        RAM_Flag_out <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        RAM_Flag_out <= count_15;
      END IF;
    END IF;
  END PROCESS RAM_Flag_process;


  
  RAM_Flag_out1 <= RAM_Flag_Initial_Val_out WHEN RAM_Flag_ctrl_delay_out = '0' ELSE
      RAM_Flag_out;

  Data_Type_Conversion_out1_1 <= RAM_Flag_out1;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_unsigned(16#000#, 9);
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1 <= hEstLenCountDelayed_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay5_reg(0) <= Logical_Operator14_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  --MATLAB Function 'OFDM Equalizer/Buffer Channel Estimates/Reset Selector'
  out_rsvd_10 <= reset;

  Logical_Operator_out1_2 <=  NOT out_rsvd_10;

  reduced_94_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator_out1_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator_out1_3 <= Logical_Operator_out1_2;
      END IF;
    END IF;
  END PROCESS reduced_94_process;


  reduced_95_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator_out1_4 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Logical_Operator_out1_4 <= Logical_Operator_out1_3;
      END IF;
    END IF;
  END PROCESS reduced_95_process;


  Logical_Operator1_out1_3 <= Logical_Operator_out1_4 AND (Delay5_out1 AND Logical_Operator_out1_3);

  Logical_Operator3_out1_2 <= Data_Type_Conversion_out1_1 AND Logical_Operator1_out1_3;

  hEst_RAM_out1_re_signed <= signed(hEst_RAM_out1_re);

  hEst_RAM_out1_im_signed <= signed(hEst_RAM_out1_im);

  
  Switch2_out1_re <= hEst_RAM_out1_re_signed WHEN Data_Type_Conversion_out1_1 = '0' ELSE
      Delay10_out1_re;
  
  Switch2_out1_im <= hEst_RAM_out1_im_signed WHEN Data_Type_Conversion_out1_1 = '0' ELSE
      Delay10_out1_im;

  
  Switch1_out1_re <= Delay10_out1_re WHEN hEstLen_sample_flag_out1 = '0' ELSE
      Switch2_out1_re;
  
  Switch1_out1_im <= Delay10_out1_im WHEN hEstLen_sample_flag_out1 = '0' ELSE
      Switch2_out1_im;

  Conjugate1_out1_re <= Switch1_out1_re;
  conj_cast <= resize(Switch1_out1_im, 17);
  conj_cast_1 <=  - (conj_cast);
  
  Conjugate1_out1_im <= X"7FFF" WHEN (conj_cast_1(16) = '0') AND (conj_cast_1(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_1(16) = '1') AND (conj_cast_1(15) /= '1') ELSE
      conj_cast_1(15 DOWNTO 0);

  Delay1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg_im(0) <= Conjugate1_out1_im;
        Delay1_reg_im(1) <= Delay1_reg_im(0);
        Delay1_reg_re(0) <= Conjugate1_out1_re;
        Delay1_reg_re(1) <= Delay1_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay1_2_process;

  Delay1_out1_re <= Delay1_reg_re(1);
  Delay1_out1_im <= Delay1_reg_im(1);

  Delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay43_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay43_out1 <= Delay1_out1_re;
      END IF;
    END IF;
  END PROCESS Delay43_process;


  Delay43_out1_1 <= Delay43_out1;

  HwModeRegister_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay43_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay43_out1_2 <= Delay43_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_1_process;


  Product1_out1 <= Delay45_out1_2 * Delay43_out1_2;

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product1_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Delay49_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product1_out1_2 <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Product1_out1_2 <= Product1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay49_output_process;


  Delay49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay49_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay49_out1 <= Product1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay49_process;


  Delay56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay56_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay56_out1 <= Delay49_out1;
      END IF;
    END IF;
  END PROCESS Delay56_process;


  Delay56_out1_1 <= Delay56_out1;

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay56_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay56_out1_2 <= Delay56_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  reduced_96_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        reduced_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        reduced_reg(0) <= Delay4_out1_im;
        reduced_reg(1 TO 2) <= reduced_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS reduced_96_process;

  Complex_to_Real_Imag3_out2 <= reduced_reg(2);

  Delay55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay55_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay55_out1 <= Complex_to_Real_Imag3_out2;
      END IF;
    END IF;
  END PROCESS Delay55_process;


  Delay55_out1_1 <= Delay55_out1;

  HwModeRegister_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay55_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay55_out1_2 <= Delay55_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_2_process;


  Delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay38_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay38_reg(0) <= Delay1_out1_im;
        Delay38_reg(1 TO 2) <= Delay38_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay38_process;

  Delay38_out1 <= Delay38_reg(2);

  Delay48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay48_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay48_out1 <= Delay38_out1;
      END IF;
    END IF;
  END PROCESS Delay48_process;


  Delay48_out1_1 <= Delay48_out1;

  HwModeRegister_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay48_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay48_out1_2 <= Delay48_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_3_process;


  Product_out1 <= Delay55_out1_2 * Delay48_out1_2;

  PipelineRegister_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product_out1_1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_1_process;


  Add_sub_cast <= resize(Delay56_out1_2, 33);
  Add_sub_cast_1 <= resize(Product_out1_1, 33);
  Add_out1 <= Add_sub_cast - Add_sub_cast_1;

  Delay57_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add_out1_1 <= to_signed(0, 33);
      ELSIF enb_1_2_1 = '1' THEN
        Add_out1_1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay57_output_process;


  Delay57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay57_reg <= (OTHERS => to_signed(0, 33));
      ELSIF enb_1_2_0 = '1' THEN
        Delay57_reg(0) <= Add_out1_1;
        Delay57_reg(1) <= Delay57_reg(0);
      END IF;
    END IF;
  END PROCESS Delay57_process;

  Delay57_out1 <= Delay57_reg(1);

  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/datahEstConj Multiplier/ReOutDTConverter'
  
  dataOut <= X"7FFFFFFF" WHEN (Delay57_out1(32) = '0') AND (Delay57_out1(31) /= '0') ELSE
      X"80000000" WHEN (Delay57_out1(32) = '1') AND (Delay57_out1(31) /= '1') ELSE
      Delay57_out1(31 DOWNTO 0);

  Delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay44_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay44_out1 <= Delay4_out1_re;
      END IF;
    END IF;
  END PROCESS Delay44_process;


  Delay44_out1_1 <= Delay44_out1;

  HwModeRegister_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay44_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay44_out1_2 <= Delay44_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_4_process;


  Delay41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay41_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay41_out1 <= Delay1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay41_process;


  Delay41_out1_1 <= Delay41_out1;

  HwModeRegister_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay41_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay41_out1_2 <= Delay41_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_5_process;


  Product5_out1 <= Delay44_out1_2 * Delay41_out1_2;

  PipelineRegister_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product5_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product5_out1_1 <= Product5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_2_process;


  Delay50_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product5_out1_2 <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Product5_out1_2 <= Product5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay50_output_process;


  Delay50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay50_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay50_out1 <= Product5_out1_2;
      END IF;
    END IF;
  END PROCESS Delay50_process;


  Delay54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay54_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay54_out1 <= Delay50_out1;
      END IF;
    END IF;
  END PROCESS Delay54_process;


  Delay47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay47_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay47_out1 <= Complex_to_Real_Imag3_out2;
      END IF;
    END IF;
  END PROCESS Delay47_process;


  Delay47_out1_1 <= Delay47_out1;

  HwModeRegister_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay47_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay47_out1_2 <= Delay47_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_6_process;


  Delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay40_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay40_reg(0) <= Delay1_out1_re;
        Delay40_reg(1 TO 2) <= Delay40_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS Delay40_process;

  Delay40_out1 <= Delay40_reg(2);

  Delay53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay53_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay53_out1 <= Delay40_out1;
      END IF;
    END IF;
  END PROCESS Delay53_process;


  Delay53_out1_1 <= Delay53_out1;

  HwModeRegister_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay53_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay53_out1_2 <= Delay53_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_7_process;


  Product2_out1 <= Delay47_out1_2 * Delay53_out1_2;

  PipelineRegister_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product2_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_3_process;


  Delay54_out1_1 <= Delay54_out1;

  delayMatch_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay54_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay54_out1_2 <= Delay54_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  Add1_add_cast <= resize(Product2_out1_1, 33);
  Add1_add_cast_1 <= resize(Delay54_out1_2, 33);
  Add1_out1 <= Add1_add_cast + Add1_add_cast_1;

  Delay58_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add1_out1_1 <= to_signed(0, 33);
      ELSIF enb_1_2_1 = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay58_output_process;


  Delay58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay58_reg <= (OTHERS => to_signed(0, 33));
      ELSIF enb_1_2_0 = '1' THEN
        Delay58_reg(0) <= Add1_out1_1;
        Delay58_reg(1) <= Delay58_reg(0);
      END IF;
    END IF;
  END PROCESS Delay58_process;

  Delay58_out1 <= Delay58_reg(1);

  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/datahEstConj Multiplier/ImagOutDTConverter'
  
  dataOut_1 <= X"7FFFFFFF" WHEN (Delay58_out1(32) = '0') AND (Delay58_out1(31) /= '0') ELSE
      X"80000000" WHEN (Delay58_out1(32) = '1') AND (Delay58_out1(31) /= '1') ELSE
      Delay58_out1(31 DOWNTO 0);

  Delay8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_re <= to_signed(0, 32);
        Delay8_out1_im <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_out1_re <= dataOut;
        Delay8_out1_im <= dataOut_1;
      END IF;
    END IF;
  END PROCESS Delay8_1_process;


  Delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay19_reg_re <= (OTHERS => to_signed(0, 32));
        Delay19_reg_im <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay19_reg_im(0) <= Delay8_out1_im;
        Delay19_reg_im(1 TO 69) <= Delay19_reg_im(0 TO 68);
        Delay19_reg_re(0) <= Delay8_out1_re;
        Delay19_reg_re(1 TO 69) <= Delay19_reg_re(0 TO 68);
      END IF;
    END IF;
  END PROCESS Delay19_process;

  Delay19_out1_re <= Delay19_reg_re(69);
  Delay19_out1_im <= Delay19_reg_im(69);

  Delay19_out1_re_1 <= Delay19_out1_re;

  crp_out_delay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product2_in0_buff_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product2_in0_buff_out1 <= Delay19_out1_re_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_1_process;


  Delay15_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay15_bypass_reg <= Product2_in0_buff_out1;
      END IF;
    END IF;
  END PROCESS Delay15_bypass_process;

  
  Delay15_out1 <= Product2_in0_buff_out1 WHEN enb_1_2_1 = '1' ELSE
      Delay15_bypass_reg;

  Delay15_out1_1 <= Delay15_out1;

  HwModeRegister_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay15_out1_2 <= Delay15_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_8_process;


  trueFlag_1 <= '1';

  initFlagDelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        initFlagDelay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        initFlagDelay_reg(0) <= trueFlag_1;
        initFlagDelay_reg(66 DOWNTO 1) <= initFlagDelay_reg(65 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS initFlagDelay_process;

  initFlagenable <= initFlagDelay_reg(66);

  Constant4_out1 <= unsigned'("100000000000000000000000000000000000000000000000000000000000000");

  z_p_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dividend_in_reg <= to_unsigned(0, 63);
      ELSIF enb = '1' THEN
        dividend_in_reg <= Constant4_out1;
      END IF;
    END IF;
  END PROCESS z_p_process;


  In1_dtc_1 <= signed(resize(dividend_in_reg, 64));

  z_MSB <= In1_dtc_1(63);

  Conjugate2_out1_re <= Switch1_out1_re;
  conj_cast_2 <= resize(Switch1_out1_im, 17);
  conj_cast_3 <=  - (conj_cast_2);
  
  Conjugate2_out1_im <= X"7FFF" WHEN (conj_cast_3(16) = '0') AND (conj_cast_3(15) /= '0') ELSE
      X"8000" WHEN (conj_cast_3(16) = '1') AND (conj_cast_3(15) /= '1') ELSE
      conj_cast_3(15 DOWNTO 0);

  Delay5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay5_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay5_reg_im(0) <= Conjugate2_out1_im;
        Delay5_reg_im(1) <= Delay5_reg_im(0);
        Delay5_reg_re(0) <= Conjugate2_out1_re;
        Delay5_reg_re(1) <= Delay5_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay5_1_process;

  Delay5_out1_re <= Delay5_reg_re(1);
  Delay5_out1_im <= Delay5_reg_im(1);

  Delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay24_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay24_out1 <= Delay5_out1_re;
      END IF;
    END IF;
  END PROCESS Delay24_process;


  Delay24_out1_1 <= Delay24_out1;

  HwModeRegister_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay24_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay24_out1_2 <= Delay24_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_9_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay2_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_reg_im(0) <= Switch1_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Switch1_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  Delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay23_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay23_out1 <= Delay2_out1_re;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  Delay23_out1_1 <= Delay23_out1;

  HwModeRegister_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay23_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay23_out1_2 <= Delay23_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_10_process;


  Product3_out1 <= Delay24_out1_2 * Delay23_out1_2;

  PipelineRegister_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product3_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product3_out1_1 <= Product3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_4_process;


  Delay33_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay33_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay33_bypass_reg <= Product3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay33_bypass_process;

  
  Delay33_out1 <= Product3_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay33_bypass_reg;

  Delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay42_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay42_out1 <= Delay33_out1;
      END IF;
    END IF;
  END PROCESS Delay42_process;


  Delay42_out1_1 <= Delay42_out1;

  delayMatch_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay42_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay42_out1_2 <= Delay42_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  reduced_97_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Complex_to_Real_Imag1_out2 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Complex_to_Real_Imag1_out2 <= Delay5_out1_im;
      END IF;
    END IF;
  END PROCESS reduced_97_process;


  Delay7_out1 <= Complex_to_Real_Imag1_out2;

  Delay25_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        Delay7_out1_1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay25_output_process;


  Delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay25_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay25_out1 <= Delay7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay25_process;


  Delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay31_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay31_out1 <= Delay25_out1;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  Delay31_out1_1 <= Delay31_out1;

  HwModeRegister_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay31_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay31_out1_2 <= Delay31_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_11_process;


  Delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay26_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        Delay26_reg(0) <= Delay2_out1_im;
        Delay26_reg(1) <= Delay26_reg(0);
      END IF;
    END IF;
  END PROCESS Delay26_process;

  Delay26_out1 <= Delay26_reg(1);

  Delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay32_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Delay32_out1 <= Delay26_out1;
      END IF;
    END IF;
  END PROCESS Delay32_process;


  Delay32_out1_1 <= Delay32_out1;

  HwModeRegister_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay32_out1_2 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay32_out1_2 <= Delay32_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_12_process;


  Product_out1_2 <= Delay31_out1_2 * Delay32_out1_2;

  PipelineRegister_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product_out1_3 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product_out1_3 <= Product_out1_2;
      END IF;
    END IF;
  END PROCESS PipelineRegister_5_process;


  Add_sub_cast_2 <= resize(Delay42_out1_2, 33);
  Add_sub_cast_3 <= resize(Product_out1_3, 33);
  Add_out1_2 <= Add_sub_cast_2 - Add_sub_cast_3;

  Delay51_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add_out1_3 <= to_signed(0, 33);
      ELSIF enb_1_2_1 = '1' THEN
        Add_out1_3 <= Add_out1_2;
      END IF;
    END IF;
  END PROCESS Delay51_output_process;


  Delay51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay51_out1 <= to_signed(0, 33);
      ELSIF enb_1_2_0 = '1' THEN
        Delay51_out1 <= Add_out1_3;
      END IF;
    END IF;
  END PROCESS Delay51_process;


  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/hEstMagSquare Calculator/RealOutDTConverter'
  
  dataOut_2 <= X"7FFFFFFF" WHEN (Delay51_out1(32) = '0') AND (Delay51_out1(31) /= '0') ELSE
      X"80000000" WHEN (Delay51_out1(32) = '1') AND (Delay51_out1(31) /= '1') ELSE
      Delay51_out1(31 DOWNTO 0);

  Constant1_out1 <= to_signed(268435456, 32);

  
  Switch2_out1 <= Constant1_out1 WHEN dataOut_2 = to_signed(0, 32) ELSE
      dataOut_2;

  dataOutSelNVar_2 <= dataOutSelNVar;

  Delay59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay59_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay59_reg(0) <= dataOutSelNVar_2;
        Delay59_reg(8 DOWNTO 1) <= Delay59_reg(7 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay59_process;

  Delay59_out1 <= Delay59_reg(8);

  Add1_add_cast_2 <= resize(Switch2_out1, 33);
  Add1_add_cast_3 <= signed(resize(unsigned'(Delay59_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 33));
  Add1_out1_2 <= Add1_add_cast_2 + Add1_add_cast_3;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg <= (OTHERS => to_signed(0, 33));
      ELSIF enb_1_2_0 = '1' THEN
        Delay11_reg(0) <= Add1_out1_2;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  Constant3_out1 <= to_signed(268435456, 33);

  
  Switch_out1_1 <= Constant3_out1 WHEN Delay11_out1 = to_signed(0, 33) ELSE
      Delay11_out1;

  magSqrhEstPlusnVar <= Switch_out1_1;

  d_p_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        divisor_in_reg <= to_signed(0, 33);
      ELSIF enb = '1' THEN
        divisor_in_reg <= magSqrhEstPlusnVar;
      END IF;
    END IF;
  END PROCESS d_p_process;


  d_MSB <= divisor_in_reg(32);

  isSignsDiffer <= z_MSB XOR d_MSB;

  signFlag_p_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        signFlag_p_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        signFlag_p_reg(0) <= isSignsDiffer;
        signFlag_p_reg(65 DOWNTO 1) <= signFlag_p_reg(64 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS signFlag_p_process;

  signFlag_p_1 <= signFlag_p_reg(65);

  
  switch_compare_1_1 <= '1' WHEN signFlag_p_1 > '0' ELSE
      '0';

  
  switch_compare_1_2 <= '1' WHEN z_MSB > '0' ELSE
      '0';

  preCorrectionIn1_sig_dtc_1 <= resize(In1_dtc_1, 65);

  preCorrectionIn1_sig_dtc_dtc <= resize(preCorrectionIn1_sig_dtc_1, 128);

  z_neg_in0 <=  - (resize(preCorrectionIn1_sig_dtc_1, 66));
  z_neg_1 <= z_neg_in0(64 DOWNTO 0);

  z_neg_dtc <= resize(z_neg_1, 128);

  
  corrected_z <= preCorrectionIn1_sig_dtc_dtc WHEN switch_compare_1_2 = '0' ELSE
      z_neg_dtc;

  corrected_z_p_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        corrected_z_p_1 <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        corrected_z_p_1 <= corrected_z;
      END IF;
    END IF;
  END PROCESS corrected_z_p_process;


  rMSBits <= unsigned(corrected_z_p_1(127 DOWNTO 63));

  x <= signed(rMSBits);

  
  switch_compare_1_3 <= '1' WHEN d_MSB > '0' ELSE
      '0';

  preCorrectionIn2_sig_dtc_1 <= resize(divisor_in_reg, 34);

  preCorrectionIn2_sig_dtc_dtc <= resize(preCorrectionIn2_sig_dtc_1, 65);

  d_neg_in0 <=  - (resize(preCorrectionIn2_sig_dtc_1, 35));
  d_neg_1 <= d_neg_in0(33 DOWNTO 0);

  d_neg_dtc <= resize(d_neg_1, 65);

  
  corrected_d <= preCorrectionIn2_sig_dtc_dtc WHEN switch_compare_1_3 = '0' ELSE
      d_neg_dtc;

  corrected_d_p_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        corrected_d_p_1 <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        corrected_d_p_1 <= corrected_d;
      END IF;
    END IF;
  END PROCESS corrected_d_p_process;


  d_neg_in0_1 <=  - (resize(corrected_d_p_1, 66));
  d_neg_3 <= d_neg_in0_1(64 DOWNTO 0);

  temp <= x + d_neg_3;

  rMSBNextBits <= unsigned(temp(63 DOWNTO 0));

  rLSBits <= unsigned(corrected_z_p_1(62 DOWNTO 0));

  tempSignBit <= temp(63);

  qBit <=  NOT tempSignBit;

  rNextTemp <= rMSBNextBits & rLSBits & qBit;

  r1 <= signed(rNextTemp);

  r_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r1_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r1_p <= r1;
      END IF;
    END IF;
  END PROCESS r_reg_process;


  rMSBits_1 <= unsigned(r1_p(127 DOWNTO 63));

  x_1 <= signed(rMSBits_1);

  rMSBit <= r1_p(127);

  rMSBitneg <=  NOT rMSBit;

  
  switch_compare_1_4 <= '1' WHEN rMSBitneg > '0' ELSE
      '0';

  d_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d1_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d1_p <= corrected_d_p_1;
      END IF;
    END IF;
  END PROCESS d_reg_process;


  d_neg_in0_2 <=  - (resize(d1_p, 66));
  d_neg_5 <= d_neg_in0_2(64 DOWNTO 0);

  
  y_1 <= d1_p WHEN switch_compare_1_4 = '0' ELSE
      d_neg_5;

  temp_3 <= x_1 + y_1;

  rMSBNextBits_1 <= unsigned(temp_3(63 DOWNTO 0));

  rLSBits_1 <= unsigned(r1_p(62 DOWNTO 0));

  tempSignBit_1 <= temp_3(63);

  qBit_1 <=  NOT tempSignBit_1;

  rNextTemp_1 <= rMSBNextBits_1 & rLSBits_1 & qBit_1;

  r2 <= signed(rNextTemp_1);

  r_reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r2_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r2_p <= r2;
      END IF;
    END IF;
  END PROCESS r_reg_1_process;


  rMSBits_2 <= unsigned(r2_p(127 DOWNTO 63));

  x_2 <= signed(rMSBits_2);

  rMSBit_1 <= r2_p(127);

  rMSBitneg_1 <=  NOT rMSBit_1;

  
  switch_compare_1_5 <= '1' WHEN rMSBitneg_1 > '0' ELSE
      '0';

  d_reg_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d2_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d2_p <= d1_p;
      END IF;
    END IF;
  END PROCESS d_reg_1_process;


  d_neg_in0_3 <=  - (resize(d2_p, 66));
  d_neg_7 <= d_neg_in0_3(64 DOWNTO 0);

  
  y_3 <= d2_p WHEN switch_compare_1_5 = '0' ELSE
      d_neg_7;

  temp_4 <= x_2 + y_3;

  rMSBNextBits_2 <= unsigned(temp_4(63 DOWNTO 0));

  rLSBits_2 <= unsigned(r2_p(62 DOWNTO 0));

  tempSignBit_2 <= temp_4(63);

  qBit_2 <=  NOT tempSignBit_2;

  rNextTemp_2 <= rMSBNextBits_2 & rLSBits_2 & qBit_2;

  r3 <= signed(rNextTemp_2);

  r_reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r3_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r3_p <= r3;
      END IF;
    END IF;
  END PROCESS r_reg_2_process;


  rMSBits_3 <= unsigned(r3_p(127 DOWNTO 63));

  x_3 <= signed(rMSBits_3);

  rMSBit_2 <= r3_p(127);

  rMSBitneg_2 <=  NOT rMSBit_2;

  
  switch_compare_1_6 <= '1' WHEN rMSBitneg_2 > '0' ELSE
      '0';

  d_reg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d3_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d3_p <= d2_p;
      END IF;
    END IF;
  END PROCESS d_reg_2_process;


  d_neg_in0_4 <=  - (resize(d3_p, 66));
  d_neg_9 <= d_neg_in0_4(64 DOWNTO 0);

  
  y_5 <= d3_p WHEN switch_compare_1_6 = '0' ELSE
      d_neg_9;

  temp_5 <= x_3 + y_5;

  rMSBNextBits_3 <= unsigned(temp_5(63 DOWNTO 0));

  rLSBits_3 <= unsigned(r3_p(62 DOWNTO 0));

  tempSignBit_3 <= temp_5(63);

  qBit_3 <=  NOT tempSignBit_3;

  rNextTemp_3 <= rMSBNextBits_3 & rLSBits_3 & qBit_3;

  r4 <= signed(rNextTemp_3);

  r_reg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r4_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r4_p <= r4;
      END IF;
    END IF;
  END PROCESS r_reg_3_process;


  rMSBits_4 <= unsigned(r4_p(127 DOWNTO 63));

  x_4 <= signed(rMSBits_4);

  rMSBit_3 <= r4_p(127);

  rMSBitneg_3 <=  NOT rMSBit_3;

  
  switch_compare_1_7 <= '1' WHEN rMSBitneg_3 > '0' ELSE
      '0';

  d_reg_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d4_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d4_p <= d3_p;
      END IF;
    END IF;
  END PROCESS d_reg_3_process;


  d_neg_in0_5 <=  - (resize(d4_p, 66));
  d_neg_11 <= d_neg_in0_5(64 DOWNTO 0);

  
  y_7 <= d4_p WHEN switch_compare_1_7 = '0' ELSE
      d_neg_11;

  temp_6 <= x_4 + y_7;

  rMSBNextBits_4 <= unsigned(temp_6(63 DOWNTO 0));

  rLSBits_4 <= unsigned(r4_p(62 DOWNTO 0));

  tempSignBit_4 <= temp_6(63);

  qBit_4 <=  NOT tempSignBit_4;

  rNextTemp_4 <= rMSBNextBits_4 & rLSBits_4 & qBit_4;

  r5 <= signed(rNextTemp_4);

  r_reg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r5_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r5_p <= r5;
      END IF;
    END IF;
  END PROCESS r_reg_4_process;


  rMSBits_5 <= unsigned(r5_p(127 DOWNTO 63));

  x_5 <= signed(rMSBits_5);

  rMSBit_4 <= r5_p(127);

  rMSBitneg_4 <=  NOT rMSBit_4;

  
  switch_compare_1_8 <= '1' WHEN rMSBitneg_4 > '0' ELSE
      '0';

  d_reg_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d5_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d5_p <= d4_p;
      END IF;
    END IF;
  END PROCESS d_reg_4_process;


  d_neg_in0_6 <=  - (resize(d5_p, 66));
  d_neg_13 <= d_neg_in0_6(64 DOWNTO 0);

  
  y_9 <= d5_p WHEN switch_compare_1_8 = '0' ELSE
      d_neg_13;

  temp_7 <= x_5 + y_9;

  rMSBNextBits_5 <= unsigned(temp_7(63 DOWNTO 0));

  rLSBits_5 <= unsigned(r5_p(62 DOWNTO 0));

  tempSignBit_5 <= temp_7(63);

  qBit_5 <=  NOT tempSignBit_5;

  rNextTemp_5 <= rMSBNextBits_5 & rLSBits_5 & qBit_5;

  r6 <= signed(rNextTemp_5);

  r_reg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r6_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r6_p <= r6;
      END IF;
    END IF;
  END PROCESS r_reg_5_process;


  rMSBits_6 <= unsigned(r6_p(127 DOWNTO 63));

  x_6 <= signed(rMSBits_6);

  rMSBit_5 <= r6_p(127);

  rMSBitneg_5 <=  NOT rMSBit_5;

  
  switch_compare_1_9 <= '1' WHEN rMSBitneg_5 > '0' ELSE
      '0';

  d_reg_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d6_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d6_p <= d5_p;
      END IF;
    END IF;
  END PROCESS d_reg_5_process;


  d_neg_in0_7 <=  - (resize(d6_p, 66));
  d_neg_15 <= d_neg_in0_7(64 DOWNTO 0);

  
  y_11 <= d6_p WHEN switch_compare_1_9 = '0' ELSE
      d_neg_15;

  temp_8 <= x_6 + y_11;

  rMSBNextBits_6 <= unsigned(temp_8(63 DOWNTO 0));

  rLSBits_6 <= unsigned(r6_p(62 DOWNTO 0));

  tempSignBit_6 <= temp_8(63);

  qBit_6 <=  NOT tempSignBit_6;

  rNextTemp_6 <= rMSBNextBits_6 & rLSBits_6 & qBit_6;

  r7 <= signed(rNextTemp_6);

  r_reg_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r7_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r7_p <= r7;
      END IF;
    END IF;
  END PROCESS r_reg_6_process;


  rMSBits_7 <= unsigned(r7_p(127 DOWNTO 63));

  x_7 <= signed(rMSBits_7);

  rMSBit_6 <= r7_p(127);

  rMSBitneg_6 <=  NOT rMSBit_6;

  
  switch_compare_1_10 <= '1' WHEN rMSBitneg_6 > '0' ELSE
      '0';

  d_reg_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d7_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d7_p <= d6_p;
      END IF;
    END IF;
  END PROCESS d_reg_6_process;


  d_neg_in0_8 <=  - (resize(d7_p, 66));
  d_neg_17 <= d_neg_in0_8(64 DOWNTO 0);

  
  y_13 <= d7_p WHEN switch_compare_1_10 = '0' ELSE
      d_neg_17;

  temp_9 <= x_7 + y_13;

  rMSBNextBits_7 <= unsigned(temp_9(63 DOWNTO 0));

  rLSBits_7 <= unsigned(r7_p(62 DOWNTO 0));

  tempSignBit_7 <= temp_9(63);

  qBit_7 <=  NOT tempSignBit_7;

  rNextTemp_7 <= rMSBNextBits_7 & rLSBits_7 & qBit_7;

  r8 <= signed(rNextTemp_7);

  r_reg_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r8_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r8_p <= r8;
      END IF;
    END IF;
  END PROCESS r_reg_7_process;


  rMSBits_8 <= unsigned(r8_p(127 DOWNTO 63));

  x_8 <= signed(rMSBits_8);

  rMSBit_7 <= r8_p(127);

  rMSBitneg_7 <=  NOT rMSBit_7;

  
  switch_compare_1_11 <= '1' WHEN rMSBitneg_7 > '0' ELSE
      '0';

  d_reg_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d8_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d8_p <= d7_p;
      END IF;
    END IF;
  END PROCESS d_reg_7_process;


  d_neg_in0_9 <=  - (resize(d8_p, 66));
  d_neg_19 <= d_neg_in0_9(64 DOWNTO 0);

  
  y_15 <= d8_p WHEN switch_compare_1_11 = '0' ELSE
      d_neg_19;

  temp_10 <= x_8 + y_15;

  rMSBNextBits_8 <= unsigned(temp_10(63 DOWNTO 0));

  rLSBits_8 <= unsigned(r8_p(62 DOWNTO 0));

  tempSignBit_8 <= temp_10(63);

  qBit_8 <=  NOT tempSignBit_8;

  rNextTemp_8 <= rMSBNextBits_8 & rLSBits_8 & qBit_8;

  r9 <= signed(rNextTemp_8);

  r_reg_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r9_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r9_p <= r9;
      END IF;
    END IF;
  END PROCESS r_reg_8_process;


  rMSBits_9 <= unsigned(r9_p(127 DOWNTO 63));

  x_9 <= signed(rMSBits_9);

  rMSBit_8 <= r9_p(127);

  rMSBitneg_8 <=  NOT rMSBit_8;

  
  switch_compare_1_12 <= '1' WHEN rMSBitneg_8 > '0' ELSE
      '0';

  d_reg_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d9_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d9_p <= d8_p;
      END IF;
    END IF;
  END PROCESS d_reg_8_process;


  d_neg_in0_10 <=  - (resize(d9_p, 66));
  d_neg_21 <= d_neg_in0_10(64 DOWNTO 0);

  
  y_17 <= d9_p WHEN switch_compare_1_12 = '0' ELSE
      d_neg_21;

  temp_11 <= x_9 + y_17;

  rMSBNextBits_9 <= unsigned(temp_11(63 DOWNTO 0));

  rLSBits_9 <= unsigned(r9_p(62 DOWNTO 0));

  tempSignBit_9 <= temp_11(63);

  qBit_9 <=  NOT tempSignBit_9;

  rNextTemp_9 <= rMSBNextBits_9 & rLSBits_9 & qBit_9;

  r10 <= signed(rNextTemp_9);

  r_reg_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r10_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r10_p <= r10;
      END IF;
    END IF;
  END PROCESS r_reg_9_process;


  rMSBits_10 <= unsigned(r10_p(127 DOWNTO 63));

  x_10 <= signed(rMSBits_10);

  rMSBit_9 <= r10_p(127);

  rMSBitneg_9 <=  NOT rMSBit_9;

  
  switch_compare_1_13 <= '1' WHEN rMSBitneg_9 > '0' ELSE
      '0';

  d_reg_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d10_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d10_p <= d9_p;
      END IF;
    END IF;
  END PROCESS d_reg_9_process;


  d_neg_in0_11 <=  - (resize(d10_p, 66));
  d_neg_23 <= d_neg_in0_11(64 DOWNTO 0);

  
  y_19 <= d10_p WHEN switch_compare_1_13 = '0' ELSE
      d_neg_23;

  temp_12 <= x_10 + y_19;

  rMSBNextBits_10 <= unsigned(temp_12(63 DOWNTO 0));

  rLSBits_10 <= unsigned(r10_p(62 DOWNTO 0));

  tempSignBit_10 <= temp_12(63);

  qBit_10 <=  NOT tempSignBit_10;

  rNextTemp_10 <= rMSBNextBits_10 & rLSBits_10 & qBit_10;

  r11 <= signed(rNextTemp_10);

  r_reg_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r11_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r11_p <= r11;
      END IF;
    END IF;
  END PROCESS r_reg_10_process;


  rMSBits_11 <= unsigned(r11_p(127 DOWNTO 63));

  x_11 <= signed(rMSBits_11);

  rMSBit_10 <= r11_p(127);

  rMSBitneg_10 <=  NOT rMSBit_10;

  
  switch_compare_1_14 <= '1' WHEN rMSBitneg_10 > '0' ELSE
      '0';

  d_reg_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d11_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d11_p <= d10_p;
      END IF;
    END IF;
  END PROCESS d_reg_10_process;


  d_neg_in0_12 <=  - (resize(d11_p, 66));
  d_neg_25 <= d_neg_in0_12(64 DOWNTO 0);

  
  y_21 <= d11_p WHEN switch_compare_1_14 = '0' ELSE
      d_neg_25;

  temp_13 <= x_11 + y_21;

  rMSBNextBits_11 <= unsigned(temp_13(63 DOWNTO 0));

  rLSBits_11 <= unsigned(r11_p(62 DOWNTO 0));

  tempSignBit_11 <= temp_13(63);

  qBit_11 <=  NOT tempSignBit_11;

  rNextTemp_11 <= rMSBNextBits_11 & rLSBits_11 & qBit_11;

  r12 <= signed(rNextTemp_11);

  r_reg_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r12_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r12_p <= r12;
      END IF;
    END IF;
  END PROCESS r_reg_11_process;


  rMSBits_12 <= unsigned(r12_p(127 DOWNTO 63));

  x_12 <= signed(rMSBits_12);

  rMSBit_11 <= r12_p(127);

  rMSBitneg_11 <=  NOT rMSBit_11;

  
  switch_compare_1_15 <= '1' WHEN rMSBitneg_11 > '0' ELSE
      '0';

  d_reg_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d12_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d12_p <= d11_p;
      END IF;
    END IF;
  END PROCESS d_reg_11_process;


  d_neg_in0_13 <=  - (resize(d12_p, 66));
  d_neg_27 <= d_neg_in0_13(64 DOWNTO 0);

  
  y_23 <= d12_p WHEN switch_compare_1_15 = '0' ELSE
      d_neg_27;

  temp_14 <= x_12 + y_23;

  rMSBNextBits_12 <= unsigned(temp_14(63 DOWNTO 0));

  rLSBits_12 <= unsigned(r12_p(62 DOWNTO 0));

  tempSignBit_12 <= temp_14(63);

  qBit_12 <=  NOT tempSignBit_12;

  rNextTemp_12 <= rMSBNextBits_12 & rLSBits_12 & qBit_12;

  r13 <= signed(rNextTemp_12);

  r_reg_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r13_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r13_p <= r13;
      END IF;
    END IF;
  END PROCESS r_reg_12_process;


  rMSBits_13 <= unsigned(r13_p(127 DOWNTO 63));

  x_13 <= signed(rMSBits_13);

  rMSBit_12 <= r13_p(127);

  rMSBitneg_12 <=  NOT rMSBit_12;

  
  switch_compare_1_16 <= '1' WHEN rMSBitneg_12 > '0' ELSE
      '0';

  d_reg_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d13_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d13_p <= d12_p;
      END IF;
    END IF;
  END PROCESS d_reg_12_process;


  d_neg_in0_14 <=  - (resize(d13_p, 66));
  d_neg_29 <= d_neg_in0_14(64 DOWNTO 0);

  
  y_25 <= d13_p WHEN switch_compare_1_16 = '0' ELSE
      d_neg_29;

  temp_15 <= x_13 + y_25;

  rMSBNextBits_13 <= unsigned(temp_15(63 DOWNTO 0));

  rLSBits_13 <= unsigned(r13_p(62 DOWNTO 0));

  tempSignBit_13 <= temp_15(63);

  qBit_13 <=  NOT tempSignBit_13;

  rNextTemp_13 <= rMSBNextBits_13 & rLSBits_13 & qBit_13;

  r14 <= signed(rNextTemp_13);

  r_reg_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r14_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r14_p <= r14;
      END IF;
    END IF;
  END PROCESS r_reg_13_process;


  rMSBits_14 <= unsigned(r14_p(127 DOWNTO 63));

  x_14 <= signed(rMSBits_14);

  rMSBit_13 <= r14_p(127);

  rMSBitneg_13 <=  NOT rMSBit_13;

  
  switch_compare_1_17 <= '1' WHEN rMSBitneg_13 > '0' ELSE
      '0';

  d_reg_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d14_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d14_p <= d13_p;
      END IF;
    END IF;
  END PROCESS d_reg_13_process;


  d_neg_in0_15 <=  - (resize(d14_p, 66));
  d_neg_31 <= d_neg_in0_15(64 DOWNTO 0);

  
  y_27 <= d14_p WHEN switch_compare_1_17 = '0' ELSE
      d_neg_31;

  temp_16 <= x_14 + y_27;

  rMSBNextBits_14 <= unsigned(temp_16(63 DOWNTO 0));

  rLSBits_14 <= unsigned(r14_p(62 DOWNTO 0));

  tempSignBit_14 <= temp_16(63);

  qBit_14 <=  NOT tempSignBit_14;

  rNextTemp_14 <= rMSBNextBits_14 & rLSBits_14 & qBit_14;

  r15 <= signed(rNextTemp_14);

  r_reg_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r15_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r15_p <= r15;
      END IF;
    END IF;
  END PROCESS r_reg_14_process;


  rMSBits_15 <= unsigned(r15_p(127 DOWNTO 63));

  x_15 <= signed(rMSBits_15);

  rMSBit_14 <= r15_p(127);

  rMSBitneg_14 <=  NOT rMSBit_14;

  
  switch_compare_1_18 <= '1' WHEN rMSBitneg_14 > '0' ELSE
      '0';

  d_reg_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d15_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d15_p <= d14_p;
      END IF;
    END IF;
  END PROCESS d_reg_14_process;


  d_neg_in0_16 <=  - (resize(d15_p, 66));
  d_neg_33 <= d_neg_in0_16(64 DOWNTO 0);

  
  y_29 <= d15_p WHEN switch_compare_1_18 = '0' ELSE
      d_neg_33;

  temp_17 <= x_15 + y_29;

  rMSBNextBits_15 <= unsigned(temp_17(63 DOWNTO 0));

  rLSBits_15 <= unsigned(r15_p(62 DOWNTO 0));

  tempSignBit_15 <= temp_17(63);

  qBit_15 <=  NOT tempSignBit_15;

  rNextTemp_15 <= rMSBNextBits_15 & rLSBits_15 & qBit_15;

  r16 <= signed(rNextTemp_15);

  r_reg_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r16_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r16_p <= r16;
      END IF;
    END IF;
  END PROCESS r_reg_15_process;


  rMSBits_16 <= unsigned(r16_p(127 DOWNTO 63));

  x_16 <= signed(rMSBits_16);

  rMSBit_15 <= r16_p(127);

  rMSBitneg_15 <=  NOT rMSBit_15;

  
  switch_compare_1_19 <= '1' WHEN rMSBitneg_15 > '0' ELSE
      '0';

  d_reg_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d16_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d16_p <= d15_p;
      END IF;
    END IF;
  END PROCESS d_reg_15_process;


  d_neg_in0_17 <=  - (resize(d16_p, 66));
  d_neg_35 <= d_neg_in0_17(64 DOWNTO 0);

  
  y_31 <= d16_p WHEN switch_compare_1_19 = '0' ELSE
      d_neg_35;

  temp_18 <= x_16 + y_31;

  rMSBNextBits_16 <= unsigned(temp_18(63 DOWNTO 0));

  rLSBits_16 <= unsigned(r16_p(62 DOWNTO 0));

  tempSignBit_16 <= temp_18(63);

  qBit_16 <=  NOT tempSignBit_16;

  rNextTemp_16 <= rMSBNextBits_16 & rLSBits_16 & qBit_16;

  r17 <= signed(rNextTemp_16);

  r_reg_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r17_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r17_p <= r17;
      END IF;
    END IF;
  END PROCESS r_reg_16_process;


  rMSBits_17 <= unsigned(r17_p(127 DOWNTO 63));

  x_17 <= signed(rMSBits_17);

  rMSBit_16 <= r17_p(127);

  rMSBitneg_16 <=  NOT rMSBit_16;

  
  switch_compare_1_20 <= '1' WHEN rMSBitneg_16 > '0' ELSE
      '0';

  d_reg_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d17_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d17_p <= d16_p;
      END IF;
    END IF;
  END PROCESS d_reg_16_process;


  d_neg_in0_18 <=  - (resize(d17_p, 66));
  d_neg_37 <= d_neg_in0_18(64 DOWNTO 0);

  
  y_33 <= d17_p WHEN switch_compare_1_20 = '0' ELSE
      d_neg_37;

  temp_19 <= x_17 + y_33;

  rMSBNextBits_17 <= unsigned(temp_19(63 DOWNTO 0));

  rLSBits_17 <= unsigned(r17_p(62 DOWNTO 0));

  tempSignBit_17 <= temp_19(63);

  qBit_17 <=  NOT tempSignBit_17;

  rNextTemp_17 <= rMSBNextBits_17 & rLSBits_17 & qBit_17;

  r18 <= signed(rNextTemp_17);

  r_reg_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r18_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r18_p <= r18;
      END IF;
    END IF;
  END PROCESS r_reg_17_process;


  rMSBits_18 <= unsigned(r18_p(127 DOWNTO 63));

  x_18 <= signed(rMSBits_18);

  rMSBit_17 <= r18_p(127);

  rMSBitneg_17 <=  NOT rMSBit_17;

  
  switch_compare_1_21 <= '1' WHEN rMSBitneg_17 > '0' ELSE
      '0';

  d_reg_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d18_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d18_p <= d17_p;
      END IF;
    END IF;
  END PROCESS d_reg_17_process;


  d_neg_in0_19 <=  - (resize(d18_p, 66));
  d_neg_39 <= d_neg_in0_19(64 DOWNTO 0);

  
  y_35 <= d18_p WHEN switch_compare_1_21 = '0' ELSE
      d_neg_39;

  temp_20 <= x_18 + y_35;

  rMSBNextBits_18 <= unsigned(temp_20(63 DOWNTO 0));

  rLSBits_18 <= unsigned(r18_p(62 DOWNTO 0));

  tempSignBit_18 <= temp_20(63);

  qBit_18 <=  NOT tempSignBit_18;

  rNextTemp_18 <= rMSBNextBits_18 & rLSBits_18 & qBit_18;

  r19 <= signed(rNextTemp_18);

  r_reg_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r19_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r19_p <= r19;
      END IF;
    END IF;
  END PROCESS r_reg_18_process;


  rMSBits_19 <= unsigned(r19_p(127 DOWNTO 63));

  x_19 <= signed(rMSBits_19);

  rMSBit_18 <= r19_p(127);

  rMSBitneg_18 <=  NOT rMSBit_18;

  
  switch_compare_1_22 <= '1' WHEN rMSBitneg_18 > '0' ELSE
      '0';

  d_reg_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d19_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d19_p <= d18_p;
      END IF;
    END IF;
  END PROCESS d_reg_18_process;


  d_neg_in0_20 <=  - (resize(d19_p, 66));
  d_neg_41 <= d_neg_in0_20(64 DOWNTO 0);

  
  y_37 <= d19_p WHEN switch_compare_1_22 = '0' ELSE
      d_neg_41;

  temp_21 <= x_19 + y_37;

  rMSBNextBits_19 <= unsigned(temp_21(63 DOWNTO 0));

  rLSBits_19 <= unsigned(r19_p(62 DOWNTO 0));

  tempSignBit_19 <= temp_21(63);

  qBit_19 <=  NOT tempSignBit_19;

  rNextTemp_19 <= rMSBNextBits_19 & rLSBits_19 & qBit_19;

  r20 <= signed(rNextTemp_19);

  r_reg_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r20_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r20_p <= r20;
      END IF;
    END IF;
  END PROCESS r_reg_19_process;


  rMSBits_20 <= unsigned(r20_p(127 DOWNTO 63));

  x_20 <= signed(rMSBits_20);

  rMSBit_19 <= r20_p(127);

  rMSBitneg_19 <=  NOT rMSBit_19;

  
  switch_compare_1_23 <= '1' WHEN rMSBitneg_19 > '0' ELSE
      '0';

  d_reg_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d20_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d20_p <= d19_p;
      END IF;
    END IF;
  END PROCESS d_reg_19_process;


  d_neg_in0_21 <=  - (resize(d20_p, 66));
  d_neg_43 <= d_neg_in0_21(64 DOWNTO 0);

  
  y_39 <= d20_p WHEN switch_compare_1_23 = '0' ELSE
      d_neg_43;

  temp_22 <= x_20 + y_39;

  rMSBNextBits_20 <= unsigned(temp_22(63 DOWNTO 0));

  rLSBits_20 <= unsigned(r20_p(62 DOWNTO 0));

  tempSignBit_20 <= temp_22(63);

  qBit_20 <=  NOT tempSignBit_20;

  rNextTemp_20 <= rMSBNextBits_20 & rLSBits_20 & qBit_20;

  r21 <= signed(rNextTemp_20);

  r_reg_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r21_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r21_p <= r21;
      END IF;
    END IF;
  END PROCESS r_reg_20_process;


  rMSBits_21 <= unsigned(r21_p(127 DOWNTO 63));

  x_21 <= signed(rMSBits_21);

  rMSBit_20 <= r21_p(127);

  rMSBitneg_20 <=  NOT rMSBit_20;

  
  switch_compare_1_24 <= '1' WHEN rMSBitneg_20 > '0' ELSE
      '0';

  d_reg_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d21_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d21_p <= d20_p;
      END IF;
    END IF;
  END PROCESS d_reg_20_process;


  d_neg_in0_22 <=  - (resize(d21_p, 66));
  d_neg_45 <= d_neg_in0_22(64 DOWNTO 0);

  
  y_41 <= d21_p WHEN switch_compare_1_24 = '0' ELSE
      d_neg_45;

  temp_23 <= x_21 + y_41;

  rMSBNextBits_21 <= unsigned(temp_23(63 DOWNTO 0));

  rLSBits_21 <= unsigned(r21_p(62 DOWNTO 0));

  tempSignBit_21 <= temp_23(63);

  qBit_21 <=  NOT tempSignBit_21;

  rNextTemp_21 <= rMSBNextBits_21 & rLSBits_21 & qBit_21;

  r22 <= signed(rNextTemp_21);

  r_reg_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r22_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r22_p <= r22;
      END IF;
    END IF;
  END PROCESS r_reg_21_process;


  rMSBits_22 <= unsigned(r22_p(127 DOWNTO 63));

  x_22 <= signed(rMSBits_22);

  rMSBit_21 <= r22_p(127);

  rMSBitneg_21 <=  NOT rMSBit_21;

  
  switch_compare_1_25 <= '1' WHEN rMSBitneg_21 > '0' ELSE
      '0';

  d_reg_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d22_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d22_p <= d21_p;
      END IF;
    END IF;
  END PROCESS d_reg_21_process;


  d_neg_in0_23 <=  - (resize(d22_p, 66));
  d_neg_47 <= d_neg_in0_23(64 DOWNTO 0);

  
  y_43 <= d22_p WHEN switch_compare_1_25 = '0' ELSE
      d_neg_47;

  temp_24 <= x_22 + y_43;

  rMSBNextBits_22 <= unsigned(temp_24(63 DOWNTO 0));

  rLSBits_22 <= unsigned(r22_p(62 DOWNTO 0));

  tempSignBit_22 <= temp_24(63);

  qBit_22 <=  NOT tempSignBit_22;

  rNextTemp_22 <= rMSBNextBits_22 & rLSBits_22 & qBit_22;

  r23 <= signed(rNextTemp_22);

  r_reg_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r23_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r23_p <= r23;
      END IF;
    END IF;
  END PROCESS r_reg_22_process;


  rMSBits_23 <= unsigned(r23_p(127 DOWNTO 63));

  x_23 <= signed(rMSBits_23);

  rMSBit_22 <= r23_p(127);

  rMSBitneg_22 <=  NOT rMSBit_22;

  
  switch_compare_1_26 <= '1' WHEN rMSBitneg_22 > '0' ELSE
      '0';

  d_reg_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d23_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d23_p <= d22_p;
      END IF;
    END IF;
  END PROCESS d_reg_22_process;


  d_neg_in0_24 <=  - (resize(d23_p, 66));
  d_neg_49 <= d_neg_in0_24(64 DOWNTO 0);

  
  y_45 <= d23_p WHEN switch_compare_1_26 = '0' ELSE
      d_neg_49;

  temp_25 <= x_23 + y_45;

  rMSBNextBits_23 <= unsigned(temp_25(63 DOWNTO 0));

  rLSBits_23 <= unsigned(r23_p(62 DOWNTO 0));

  tempSignBit_23 <= temp_25(63);

  qBit_23 <=  NOT tempSignBit_23;

  rNextTemp_23 <= rMSBNextBits_23 & rLSBits_23 & qBit_23;

  r24 <= signed(rNextTemp_23);

  r_reg_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r24_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r24_p <= r24;
      END IF;
    END IF;
  END PROCESS r_reg_23_process;


  rMSBits_24 <= unsigned(r24_p(127 DOWNTO 63));

  x_24 <= signed(rMSBits_24);

  rMSBit_23 <= r24_p(127);

  rMSBitneg_23 <=  NOT rMSBit_23;

  
  switch_compare_1_27 <= '1' WHEN rMSBitneg_23 > '0' ELSE
      '0';

  d_reg_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d24_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d24_p <= d23_p;
      END IF;
    END IF;
  END PROCESS d_reg_23_process;


  d_neg_in0_25 <=  - (resize(d24_p, 66));
  d_neg_51 <= d_neg_in0_25(64 DOWNTO 0);

  
  y_47 <= d24_p WHEN switch_compare_1_27 = '0' ELSE
      d_neg_51;

  temp_26 <= x_24 + y_47;

  rMSBNextBits_24 <= unsigned(temp_26(63 DOWNTO 0));

  rLSBits_24 <= unsigned(r24_p(62 DOWNTO 0));

  tempSignBit_24 <= temp_26(63);

  qBit_24 <=  NOT tempSignBit_24;

  rNextTemp_24 <= rMSBNextBits_24 & rLSBits_24 & qBit_24;

  r25 <= signed(rNextTemp_24);

  r_reg_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r25_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r25_p <= r25;
      END IF;
    END IF;
  END PROCESS r_reg_24_process;


  rMSBits_25 <= unsigned(r25_p(127 DOWNTO 63));

  x_25 <= signed(rMSBits_25);

  rMSBit_24 <= r25_p(127);

  rMSBitneg_24 <=  NOT rMSBit_24;

  
  switch_compare_1_28 <= '1' WHEN rMSBitneg_24 > '0' ELSE
      '0';

  d_reg_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d25_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d25_p <= d24_p;
      END IF;
    END IF;
  END PROCESS d_reg_24_process;


  d_neg_in0_26 <=  - (resize(d25_p, 66));
  d_neg_53 <= d_neg_in0_26(64 DOWNTO 0);

  
  y_49 <= d25_p WHEN switch_compare_1_28 = '0' ELSE
      d_neg_53;

  temp_27 <= x_25 + y_49;

  rMSBNextBits_25 <= unsigned(temp_27(63 DOWNTO 0));

  rLSBits_25 <= unsigned(r25_p(62 DOWNTO 0));

  tempSignBit_25 <= temp_27(63);

  qBit_25 <=  NOT tempSignBit_25;

  rNextTemp_25 <= rMSBNextBits_25 & rLSBits_25 & qBit_25;

  r26 <= signed(rNextTemp_25);

  r_reg_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r26_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r26_p <= r26;
      END IF;
    END IF;
  END PROCESS r_reg_25_process;


  rMSBits_26 <= unsigned(r26_p(127 DOWNTO 63));

  x_26 <= signed(rMSBits_26);

  rMSBit_25 <= r26_p(127);

  rMSBitneg_25 <=  NOT rMSBit_25;

  
  switch_compare_1_29 <= '1' WHEN rMSBitneg_25 > '0' ELSE
      '0';

  d_reg_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d26_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d26_p <= d25_p;
      END IF;
    END IF;
  END PROCESS d_reg_25_process;


  d_neg_in0_27 <=  - (resize(d26_p, 66));
  d_neg_55 <= d_neg_in0_27(64 DOWNTO 0);

  
  y_51 <= d26_p WHEN switch_compare_1_29 = '0' ELSE
      d_neg_55;

  temp_28 <= x_26 + y_51;

  rMSBNextBits_26 <= unsigned(temp_28(63 DOWNTO 0));

  rLSBits_26 <= unsigned(r26_p(62 DOWNTO 0));

  tempSignBit_26 <= temp_28(63);

  qBit_26 <=  NOT tempSignBit_26;

  rNextTemp_26 <= rMSBNextBits_26 & rLSBits_26 & qBit_26;

  r27 <= signed(rNextTemp_26);

  r_reg_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r27_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r27_p <= r27;
      END IF;
    END IF;
  END PROCESS r_reg_26_process;


  rMSBits_27 <= unsigned(r27_p(127 DOWNTO 63));

  x_27 <= signed(rMSBits_27);

  rMSBit_26 <= r27_p(127);

  rMSBitneg_26 <=  NOT rMSBit_26;

  
  switch_compare_1_30 <= '1' WHEN rMSBitneg_26 > '0' ELSE
      '0';

  d_reg_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d27_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d27_p <= d26_p;
      END IF;
    END IF;
  END PROCESS d_reg_26_process;


  d_neg_in0_28 <=  - (resize(d27_p, 66));
  d_neg_57 <= d_neg_in0_28(64 DOWNTO 0);

  
  y_53 <= d27_p WHEN switch_compare_1_30 = '0' ELSE
      d_neg_57;

  temp_29 <= x_27 + y_53;

  rMSBNextBits_27 <= unsigned(temp_29(63 DOWNTO 0));

  rLSBits_27 <= unsigned(r27_p(62 DOWNTO 0));

  tempSignBit_27 <= temp_29(63);

  qBit_27 <=  NOT tempSignBit_27;

  rNextTemp_27 <= rMSBNextBits_27 & rLSBits_27 & qBit_27;

  r28 <= signed(rNextTemp_27);

  r_reg_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r28_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r28_p <= r28;
      END IF;
    END IF;
  END PROCESS r_reg_27_process;


  rMSBits_28 <= unsigned(r28_p(127 DOWNTO 63));

  x_28 <= signed(rMSBits_28);

  rMSBit_27 <= r28_p(127);

  rMSBitneg_27 <=  NOT rMSBit_27;

  
  switch_compare_1_31 <= '1' WHEN rMSBitneg_27 > '0' ELSE
      '0';

  d_reg_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d28_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d28_p <= d27_p;
      END IF;
    END IF;
  END PROCESS d_reg_27_process;


  d_neg_in0_29 <=  - (resize(d28_p, 66));
  d_neg_59 <= d_neg_in0_29(64 DOWNTO 0);

  
  y_55 <= d28_p WHEN switch_compare_1_31 = '0' ELSE
      d_neg_59;

  temp_30 <= x_28 + y_55;

  rMSBNextBits_28 <= unsigned(temp_30(63 DOWNTO 0));

  rLSBits_28 <= unsigned(r28_p(62 DOWNTO 0));

  tempSignBit_28 <= temp_30(63);

  qBit_28 <=  NOT tempSignBit_28;

  rNextTemp_28 <= rMSBNextBits_28 & rLSBits_28 & qBit_28;

  r29 <= signed(rNextTemp_28);

  r_reg_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r29_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r29_p <= r29;
      END IF;
    END IF;
  END PROCESS r_reg_28_process;


  rMSBits_29 <= unsigned(r29_p(127 DOWNTO 63));

  x_29 <= signed(rMSBits_29);

  rMSBit_28 <= r29_p(127);

  rMSBitneg_28 <=  NOT rMSBit_28;

  
  switch_compare_1_32 <= '1' WHEN rMSBitneg_28 > '0' ELSE
      '0';

  d_reg_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d29_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d29_p <= d28_p;
      END IF;
    END IF;
  END PROCESS d_reg_28_process;


  d_neg_in0_30 <=  - (resize(d29_p, 66));
  d_neg_61 <= d_neg_in0_30(64 DOWNTO 0);

  
  y_57 <= d29_p WHEN switch_compare_1_32 = '0' ELSE
      d_neg_61;

  temp_31 <= x_29 + y_57;

  rMSBNextBits_29 <= unsigned(temp_31(63 DOWNTO 0));

  rLSBits_29 <= unsigned(r29_p(62 DOWNTO 0));

  tempSignBit_29 <= temp_31(63);

  qBit_29 <=  NOT tempSignBit_29;

  rNextTemp_29 <= rMSBNextBits_29 & rLSBits_29 & qBit_29;

  r30 <= signed(rNextTemp_29);

  r_reg_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r30_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r30_p <= r30;
      END IF;
    END IF;
  END PROCESS r_reg_29_process;


  rMSBits_30 <= unsigned(r30_p(127 DOWNTO 63));

  x_30 <= signed(rMSBits_30);

  rMSBit_29 <= r30_p(127);

  rMSBitneg_29 <=  NOT rMSBit_29;

  
  switch_compare_1_33 <= '1' WHEN rMSBitneg_29 > '0' ELSE
      '0';

  d_reg_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d30_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d30_p <= d29_p;
      END IF;
    END IF;
  END PROCESS d_reg_29_process;


  d_neg_in0_31 <=  - (resize(d30_p, 66));
  d_neg_63 <= d_neg_in0_31(64 DOWNTO 0);

  
  y_59 <= d30_p WHEN switch_compare_1_33 = '0' ELSE
      d_neg_63;

  temp_32 <= x_30 + y_59;

  rMSBNextBits_30 <= unsigned(temp_32(63 DOWNTO 0));

  rLSBits_30 <= unsigned(r30_p(62 DOWNTO 0));

  tempSignBit_30 <= temp_32(63);

  qBit_30 <=  NOT tempSignBit_30;

  rNextTemp_30 <= rMSBNextBits_30 & rLSBits_30 & qBit_30;

  r31 <= signed(rNextTemp_30);

  r_reg_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r31_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r31_p <= r31;
      END IF;
    END IF;
  END PROCESS r_reg_30_process;


  rMSBits_31 <= unsigned(r31_p(127 DOWNTO 63));

  x_31 <= signed(rMSBits_31);

  rMSBit_30 <= r31_p(127);

  rMSBitneg_30 <=  NOT rMSBit_30;

  
  switch_compare_1_34 <= '1' WHEN rMSBitneg_30 > '0' ELSE
      '0';

  d_reg_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d31_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d31_p <= d30_p;
      END IF;
    END IF;
  END PROCESS d_reg_30_process;


  d_neg_in0_32 <=  - (resize(d31_p, 66));
  d_neg_65 <= d_neg_in0_32(64 DOWNTO 0);

  
  y_61 <= d31_p WHEN switch_compare_1_34 = '0' ELSE
      d_neg_65;

  temp_33 <= x_31 + y_61;

  rMSBNextBits_31 <= unsigned(temp_33(63 DOWNTO 0));

  rLSBits_31 <= unsigned(r31_p(62 DOWNTO 0));

  tempSignBit_31 <= temp_33(63);

  qBit_31 <=  NOT tempSignBit_31;

  rNextTemp_31 <= rMSBNextBits_31 & rLSBits_31 & qBit_31;

  r32 <= signed(rNextTemp_31);

  r_reg_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r32_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r32_p <= r32;
      END IF;
    END IF;
  END PROCESS r_reg_31_process;


  rMSBits_32 <= unsigned(r32_p(127 DOWNTO 63));

  x_32 <= signed(rMSBits_32);

  rMSBit_31 <= r32_p(127);

  rMSBitneg_31 <=  NOT rMSBit_31;

  
  switch_compare_1_35 <= '1' WHEN rMSBitneg_31 > '0' ELSE
      '0';

  d_reg_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d32_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d32_p <= d31_p;
      END IF;
    END IF;
  END PROCESS d_reg_31_process;


  d_neg_in0_33 <=  - (resize(d32_p, 66));
  d_neg_67 <= d_neg_in0_33(64 DOWNTO 0);

  
  y_63 <= d32_p WHEN switch_compare_1_35 = '0' ELSE
      d_neg_67;

  temp_34 <= x_32 + y_63;

  rMSBNextBits_32 <= unsigned(temp_34(63 DOWNTO 0));

  rLSBits_32 <= unsigned(r32_p(62 DOWNTO 0));

  tempSignBit_32 <= temp_34(63);

  qBit_32 <=  NOT tempSignBit_32;

  rNextTemp_32 <= rMSBNextBits_32 & rLSBits_32 & qBit_32;

  r33 <= signed(rNextTemp_32);

  r_reg_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r33_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r33_p <= r33;
      END IF;
    END IF;
  END PROCESS r_reg_32_process;


  rMSBits_33 <= unsigned(r33_p(127 DOWNTO 63));

  x_33 <= signed(rMSBits_33);

  rMSBit_32 <= r33_p(127);

  rMSBitneg_32 <=  NOT rMSBit_32;

  
  switch_compare_1_36 <= '1' WHEN rMSBitneg_32 > '0' ELSE
      '0';

  d_reg_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d33_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d33_p <= d32_p;
      END IF;
    END IF;
  END PROCESS d_reg_32_process;


  d_neg_in0_34 <=  - (resize(d33_p, 66));
  d_neg_69 <= d_neg_in0_34(64 DOWNTO 0);

  
  y_65 <= d33_p WHEN switch_compare_1_36 = '0' ELSE
      d_neg_69;

  temp_35 <= x_33 + y_65;

  rMSBNextBits_33 <= unsigned(temp_35(63 DOWNTO 0));

  rLSBits_33 <= unsigned(r33_p(62 DOWNTO 0));

  tempSignBit_33 <= temp_35(63);

  qBit_33 <=  NOT tempSignBit_33;

  rNextTemp_33 <= rMSBNextBits_33 & rLSBits_33 & qBit_33;

  r34 <= signed(rNextTemp_33);

  r_reg_33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r34_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r34_p <= r34;
      END IF;
    END IF;
  END PROCESS r_reg_33_process;


  rMSBits_34 <= unsigned(r34_p(127 DOWNTO 63));

  x_34 <= signed(rMSBits_34);

  rMSBit_33 <= r34_p(127);

  rMSBitneg_33 <=  NOT rMSBit_33;

  
  switch_compare_1_37 <= '1' WHEN rMSBitneg_33 > '0' ELSE
      '0';

  d_reg_33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d34_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d34_p <= d33_p;
      END IF;
    END IF;
  END PROCESS d_reg_33_process;


  d_neg_in0_35 <=  - (resize(d34_p, 66));
  d_neg_71 <= d_neg_in0_35(64 DOWNTO 0);

  
  y_67 <= d34_p WHEN switch_compare_1_37 = '0' ELSE
      d_neg_71;

  temp_36 <= x_34 + y_67;

  rMSBNextBits_34 <= unsigned(temp_36(63 DOWNTO 0));

  rLSBits_34 <= unsigned(r34_p(62 DOWNTO 0));

  tempSignBit_34 <= temp_36(63);

  qBit_34 <=  NOT tempSignBit_34;

  rNextTemp_34 <= rMSBNextBits_34 & rLSBits_34 & qBit_34;

  r35 <= signed(rNextTemp_34);

  r_reg_34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r35_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r35_p <= r35;
      END IF;
    END IF;
  END PROCESS r_reg_34_process;


  rMSBits_35 <= unsigned(r35_p(127 DOWNTO 63));

  x_35 <= signed(rMSBits_35);

  rMSBit_34 <= r35_p(127);

  rMSBitneg_34 <=  NOT rMSBit_34;

  
  switch_compare_1_38 <= '1' WHEN rMSBitneg_34 > '0' ELSE
      '0';

  d_reg_34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d35_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d35_p <= d34_p;
      END IF;
    END IF;
  END PROCESS d_reg_34_process;


  d_neg_in0_36 <=  - (resize(d35_p, 66));
  d_neg_73 <= d_neg_in0_36(64 DOWNTO 0);

  
  y_69 <= d35_p WHEN switch_compare_1_38 = '0' ELSE
      d_neg_73;

  temp_37 <= x_35 + y_69;

  rMSBNextBits_35 <= unsigned(temp_37(63 DOWNTO 0));

  rLSBits_35 <= unsigned(r35_p(62 DOWNTO 0));

  tempSignBit_35 <= temp_37(63);

  qBit_35 <=  NOT tempSignBit_35;

  rNextTemp_35 <= rMSBNextBits_35 & rLSBits_35 & qBit_35;

  r36 <= signed(rNextTemp_35);

  r_reg_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r36_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r36_p <= r36;
      END IF;
    END IF;
  END PROCESS r_reg_35_process;


  rMSBits_36 <= unsigned(r36_p(127 DOWNTO 63));

  x_36 <= signed(rMSBits_36);

  rMSBit_35 <= r36_p(127);

  rMSBitneg_35 <=  NOT rMSBit_35;

  
  switch_compare_1_39 <= '1' WHEN rMSBitneg_35 > '0' ELSE
      '0';

  d_reg_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d36_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d36_p <= d35_p;
      END IF;
    END IF;
  END PROCESS d_reg_35_process;


  d_neg_in0_37 <=  - (resize(d36_p, 66));
  d_neg_75 <= d_neg_in0_37(64 DOWNTO 0);

  
  y_71 <= d36_p WHEN switch_compare_1_39 = '0' ELSE
      d_neg_75;

  temp_38 <= x_36 + y_71;

  rMSBNextBits_36 <= unsigned(temp_38(63 DOWNTO 0));

  rLSBits_36 <= unsigned(r36_p(62 DOWNTO 0));

  tempSignBit_36 <= temp_38(63);

  qBit_36 <=  NOT tempSignBit_36;

  rNextTemp_36 <= rMSBNextBits_36 & rLSBits_36 & qBit_36;

  r37 <= signed(rNextTemp_36);

  r_reg_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r37_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r37_p <= r37;
      END IF;
    END IF;
  END PROCESS r_reg_36_process;


  rMSBits_37 <= unsigned(r37_p(127 DOWNTO 63));

  x_37 <= signed(rMSBits_37);

  rMSBit_36 <= r37_p(127);

  rMSBitneg_36 <=  NOT rMSBit_36;

  
  switch_compare_1_40 <= '1' WHEN rMSBitneg_36 > '0' ELSE
      '0';

  d_reg_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d37_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d37_p <= d36_p;
      END IF;
    END IF;
  END PROCESS d_reg_36_process;


  d_neg_in0_38 <=  - (resize(d37_p, 66));
  d_neg_77 <= d_neg_in0_38(64 DOWNTO 0);

  
  y_73 <= d37_p WHEN switch_compare_1_40 = '0' ELSE
      d_neg_77;

  temp_39 <= x_37 + y_73;

  rMSBNextBits_37 <= unsigned(temp_39(63 DOWNTO 0));

  rLSBits_37 <= unsigned(r37_p(62 DOWNTO 0));

  tempSignBit_37 <= temp_39(63);

  qBit_37 <=  NOT tempSignBit_37;

  rNextTemp_37 <= rMSBNextBits_37 & rLSBits_37 & qBit_37;

  r38 <= signed(rNextTemp_37);

  r_reg_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r38_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r38_p <= r38;
      END IF;
    END IF;
  END PROCESS r_reg_37_process;


  rMSBits_38 <= unsigned(r38_p(127 DOWNTO 63));

  x_38 <= signed(rMSBits_38);

  rMSBit_37 <= r38_p(127);

  rMSBitneg_37 <=  NOT rMSBit_37;

  
  switch_compare_1_41 <= '1' WHEN rMSBitneg_37 > '0' ELSE
      '0';

  d_reg_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d38_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d38_p <= d37_p;
      END IF;
    END IF;
  END PROCESS d_reg_37_process;


  d_neg_in0_39 <=  - (resize(d38_p, 66));
  d_neg_79 <= d_neg_in0_39(64 DOWNTO 0);

  
  y_75 <= d38_p WHEN switch_compare_1_41 = '0' ELSE
      d_neg_79;

  temp_40 <= x_38 + y_75;

  rMSBNextBits_38 <= unsigned(temp_40(63 DOWNTO 0));

  rLSBits_38 <= unsigned(r38_p(62 DOWNTO 0));

  tempSignBit_38 <= temp_40(63);

  qBit_38 <=  NOT tempSignBit_38;

  rNextTemp_38 <= rMSBNextBits_38 & rLSBits_38 & qBit_38;

  r39 <= signed(rNextTemp_38);

  r_reg_38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r39_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r39_p <= r39;
      END IF;
    END IF;
  END PROCESS r_reg_38_process;


  rMSBits_39 <= unsigned(r39_p(127 DOWNTO 63));

  x_39 <= signed(rMSBits_39);

  rMSBit_38 <= r39_p(127);

  rMSBitneg_38 <=  NOT rMSBit_38;

  
  switch_compare_1_42 <= '1' WHEN rMSBitneg_38 > '0' ELSE
      '0';

  d_reg_38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d39_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d39_p <= d38_p;
      END IF;
    END IF;
  END PROCESS d_reg_38_process;


  d_neg_in0_40 <=  - (resize(d39_p, 66));
  d_neg_81 <= d_neg_in0_40(64 DOWNTO 0);

  
  y_77 <= d39_p WHEN switch_compare_1_42 = '0' ELSE
      d_neg_81;

  temp_41 <= x_39 + y_77;

  rMSBNextBits_39 <= unsigned(temp_41(63 DOWNTO 0));

  rLSBits_39 <= unsigned(r39_p(62 DOWNTO 0));

  tempSignBit_39 <= temp_41(63);

  qBit_39 <=  NOT tempSignBit_39;

  rNextTemp_39 <= rMSBNextBits_39 & rLSBits_39 & qBit_39;

  r40 <= signed(rNextTemp_39);

  r_reg_39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r40_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r40_p <= r40;
      END IF;
    END IF;
  END PROCESS r_reg_39_process;


  rMSBits_40 <= unsigned(r40_p(127 DOWNTO 63));

  x_40 <= signed(rMSBits_40);

  rMSBit_39 <= r40_p(127);

  rMSBitneg_39 <=  NOT rMSBit_39;

  
  switch_compare_1_43 <= '1' WHEN rMSBitneg_39 > '0' ELSE
      '0';

  d_reg_39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d40_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d40_p <= d39_p;
      END IF;
    END IF;
  END PROCESS d_reg_39_process;


  d_neg_in0_41 <=  - (resize(d40_p, 66));
  d_neg_83 <= d_neg_in0_41(64 DOWNTO 0);

  
  y_79 <= d40_p WHEN switch_compare_1_43 = '0' ELSE
      d_neg_83;

  temp_42 <= x_40 + y_79;

  rMSBNextBits_40 <= unsigned(temp_42(63 DOWNTO 0));

  rLSBits_40 <= unsigned(r40_p(62 DOWNTO 0));

  tempSignBit_40 <= temp_42(63);

  qBit_40 <=  NOT tempSignBit_40;

  rNextTemp_40 <= rMSBNextBits_40 & rLSBits_40 & qBit_40;

  r41 <= signed(rNextTemp_40);

  r_reg_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r41_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r41_p <= r41;
      END IF;
    END IF;
  END PROCESS r_reg_40_process;


  rMSBits_41 <= unsigned(r41_p(127 DOWNTO 63));

  x_41 <= signed(rMSBits_41);

  rMSBit_40 <= r41_p(127);

  rMSBitneg_40 <=  NOT rMSBit_40;

  
  switch_compare_1_44 <= '1' WHEN rMSBitneg_40 > '0' ELSE
      '0';

  d_reg_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d41_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d41_p <= d40_p;
      END IF;
    END IF;
  END PROCESS d_reg_40_process;


  d_neg_in0_42 <=  - (resize(d41_p, 66));
  d_neg_85 <= d_neg_in0_42(64 DOWNTO 0);

  
  y_81 <= d41_p WHEN switch_compare_1_44 = '0' ELSE
      d_neg_85;

  temp_43 <= x_41 + y_81;

  rMSBNextBits_41 <= unsigned(temp_43(63 DOWNTO 0));

  rLSBits_41 <= unsigned(r41_p(62 DOWNTO 0));

  tempSignBit_41 <= temp_43(63);

  qBit_41 <=  NOT tempSignBit_41;

  rNextTemp_41 <= rMSBNextBits_41 & rLSBits_41 & qBit_41;

  r42 <= signed(rNextTemp_41);

  r_reg_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r42_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r42_p <= r42;
      END IF;
    END IF;
  END PROCESS r_reg_41_process;


  rMSBits_42 <= unsigned(r42_p(127 DOWNTO 63));

  x_42 <= signed(rMSBits_42);

  rMSBit_41 <= r42_p(127);

  rMSBitneg_41 <=  NOT rMSBit_41;

  
  switch_compare_1_45 <= '1' WHEN rMSBitneg_41 > '0' ELSE
      '0';

  d_reg_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d42_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d42_p <= d41_p;
      END IF;
    END IF;
  END PROCESS d_reg_41_process;


  d_neg_in0_43 <=  - (resize(d42_p, 66));
  d_neg_87 <= d_neg_in0_43(64 DOWNTO 0);

  
  y_83 <= d42_p WHEN switch_compare_1_45 = '0' ELSE
      d_neg_87;

  temp_44 <= x_42 + y_83;

  rMSBNextBits_42 <= unsigned(temp_44(63 DOWNTO 0));

  rLSBits_42 <= unsigned(r42_p(62 DOWNTO 0));

  tempSignBit_42 <= temp_44(63);

  qBit_42 <=  NOT tempSignBit_42;

  rNextTemp_42 <= rMSBNextBits_42 & rLSBits_42 & qBit_42;

  r43 <= signed(rNextTemp_42);

  r_reg_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r43_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r43_p <= r43;
      END IF;
    END IF;
  END PROCESS r_reg_42_process;


  rMSBits_43 <= unsigned(r43_p(127 DOWNTO 63));

  x_43 <= signed(rMSBits_43);

  rMSBit_42 <= r43_p(127);

  rMSBitneg_42 <=  NOT rMSBit_42;

  
  switch_compare_1_46 <= '1' WHEN rMSBitneg_42 > '0' ELSE
      '0';

  d_reg_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d43_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d43_p <= d42_p;
      END IF;
    END IF;
  END PROCESS d_reg_42_process;


  d_neg_in0_44 <=  - (resize(d43_p, 66));
  d_neg_89 <= d_neg_in0_44(64 DOWNTO 0);

  
  y_85 <= d43_p WHEN switch_compare_1_46 = '0' ELSE
      d_neg_89;

  temp_45 <= x_43 + y_85;

  rMSBNextBits_43 <= unsigned(temp_45(63 DOWNTO 0));

  rLSBits_43 <= unsigned(r43_p(62 DOWNTO 0));

  tempSignBit_43 <= temp_45(63);

  qBit_43 <=  NOT tempSignBit_43;

  rNextTemp_43 <= rMSBNextBits_43 & rLSBits_43 & qBit_43;

  r44 <= signed(rNextTemp_43);

  r_reg_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r44_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r44_p <= r44;
      END IF;
    END IF;
  END PROCESS r_reg_43_process;


  rMSBits_44 <= unsigned(r44_p(127 DOWNTO 63));

  x_44 <= signed(rMSBits_44);

  rMSBit_43 <= r44_p(127);

  rMSBitneg_43 <=  NOT rMSBit_43;

  
  switch_compare_1_47 <= '1' WHEN rMSBitneg_43 > '0' ELSE
      '0';

  d_reg_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d44_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d44_p <= d43_p;
      END IF;
    END IF;
  END PROCESS d_reg_43_process;


  d_neg_in0_45 <=  - (resize(d44_p, 66));
  d_neg_91 <= d_neg_in0_45(64 DOWNTO 0);

  
  y_87 <= d44_p WHEN switch_compare_1_47 = '0' ELSE
      d_neg_91;

  temp_46 <= x_44 + y_87;

  rMSBNextBits_44 <= unsigned(temp_46(63 DOWNTO 0));

  rLSBits_44 <= unsigned(r44_p(62 DOWNTO 0));

  tempSignBit_44 <= temp_46(63);

  qBit_44 <=  NOT tempSignBit_44;

  rNextTemp_44 <= rMSBNextBits_44 & rLSBits_44 & qBit_44;

  r45 <= signed(rNextTemp_44);

  r_reg_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r45_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r45_p <= r45;
      END IF;
    END IF;
  END PROCESS r_reg_44_process;


  rMSBits_45 <= unsigned(r45_p(127 DOWNTO 63));

  x_45 <= signed(rMSBits_45);

  rMSBit_44 <= r45_p(127);

  rMSBitneg_44 <=  NOT rMSBit_44;

  
  switch_compare_1_48 <= '1' WHEN rMSBitneg_44 > '0' ELSE
      '0';

  d_reg_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d45_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d45_p <= d44_p;
      END IF;
    END IF;
  END PROCESS d_reg_44_process;


  d_neg_in0_46 <=  - (resize(d45_p, 66));
  d_neg_93 <= d_neg_in0_46(64 DOWNTO 0);

  
  y_89 <= d45_p WHEN switch_compare_1_48 = '0' ELSE
      d_neg_93;

  temp_47 <= x_45 + y_89;

  rMSBNextBits_45 <= unsigned(temp_47(63 DOWNTO 0));

  rLSBits_45 <= unsigned(r45_p(62 DOWNTO 0));

  tempSignBit_45 <= temp_47(63);

  qBit_45 <=  NOT tempSignBit_45;

  rNextTemp_45 <= rMSBNextBits_45 & rLSBits_45 & qBit_45;

  r46 <= signed(rNextTemp_45);

  r_reg_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r46_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r46_p <= r46;
      END IF;
    END IF;
  END PROCESS r_reg_45_process;


  rMSBits_46 <= unsigned(r46_p(127 DOWNTO 63));

  x_46 <= signed(rMSBits_46);

  rMSBit_45 <= r46_p(127);

  rMSBitneg_45 <=  NOT rMSBit_45;

  
  switch_compare_1_49 <= '1' WHEN rMSBitneg_45 > '0' ELSE
      '0';

  d_reg_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d46_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d46_p <= d45_p;
      END IF;
    END IF;
  END PROCESS d_reg_45_process;


  d_neg_in0_47 <=  - (resize(d46_p, 66));
  d_neg_95 <= d_neg_in0_47(64 DOWNTO 0);

  
  y_91 <= d46_p WHEN switch_compare_1_49 = '0' ELSE
      d_neg_95;

  temp_48 <= x_46 + y_91;

  rMSBNextBits_46 <= unsigned(temp_48(63 DOWNTO 0));

  rLSBits_46 <= unsigned(r46_p(62 DOWNTO 0));

  tempSignBit_46 <= temp_48(63);

  qBit_46 <=  NOT tempSignBit_46;

  rNextTemp_46 <= rMSBNextBits_46 & rLSBits_46 & qBit_46;

  r47 <= signed(rNextTemp_46);

  r_reg_46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r47_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r47_p <= r47;
      END IF;
    END IF;
  END PROCESS r_reg_46_process;


  rMSBits_47 <= unsigned(r47_p(127 DOWNTO 63));

  x_47 <= signed(rMSBits_47);

  rMSBit_46 <= r47_p(127);

  rMSBitneg_46 <=  NOT rMSBit_46;

  
  switch_compare_1_50 <= '1' WHEN rMSBitneg_46 > '0' ELSE
      '0';

  d_reg_46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d47_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d47_p <= d46_p;
      END IF;
    END IF;
  END PROCESS d_reg_46_process;


  d_neg_in0_48 <=  - (resize(d47_p, 66));
  d_neg_97 <= d_neg_in0_48(64 DOWNTO 0);

  
  y_93 <= d47_p WHEN switch_compare_1_50 = '0' ELSE
      d_neg_97;

  temp_49 <= x_47 + y_93;

  rMSBNextBits_47 <= unsigned(temp_49(63 DOWNTO 0));

  rLSBits_47 <= unsigned(r47_p(62 DOWNTO 0));

  tempSignBit_47 <= temp_49(63);

  qBit_47 <=  NOT tempSignBit_47;

  rNextTemp_47 <= rMSBNextBits_47 & rLSBits_47 & qBit_47;

  r48 <= signed(rNextTemp_47);

  r_reg_47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r48_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r48_p <= r48;
      END IF;
    END IF;
  END PROCESS r_reg_47_process;


  rMSBits_48 <= unsigned(r48_p(127 DOWNTO 63));

  x_48 <= signed(rMSBits_48);

  rMSBit_47 <= r48_p(127);

  rMSBitneg_47 <=  NOT rMSBit_47;

  
  switch_compare_1_51 <= '1' WHEN rMSBitneg_47 > '0' ELSE
      '0';

  d_reg_47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d48_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d48_p <= d47_p;
      END IF;
    END IF;
  END PROCESS d_reg_47_process;


  d_neg_in0_49 <=  - (resize(d48_p, 66));
  d_neg_99 <= d_neg_in0_49(64 DOWNTO 0);

  
  y_95 <= d48_p WHEN switch_compare_1_51 = '0' ELSE
      d_neg_99;

  temp_50 <= x_48 + y_95;

  rMSBNextBits_48 <= unsigned(temp_50(63 DOWNTO 0));

  rLSBits_48 <= unsigned(r48_p(62 DOWNTO 0));

  tempSignBit_48 <= temp_50(63);

  qBit_48 <=  NOT tempSignBit_48;

  rNextTemp_48 <= rMSBNextBits_48 & rLSBits_48 & qBit_48;

  r49 <= signed(rNextTemp_48);

  r_reg_48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r49_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r49_p <= r49;
      END IF;
    END IF;
  END PROCESS r_reg_48_process;


  rMSBits_49 <= unsigned(r49_p(127 DOWNTO 63));

  x_49 <= signed(rMSBits_49);

  rMSBit_48 <= r49_p(127);

  rMSBitneg_48 <=  NOT rMSBit_48;

  
  switch_compare_1_52 <= '1' WHEN rMSBitneg_48 > '0' ELSE
      '0';

  d_reg_48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d49_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d49_p <= d48_p;
      END IF;
    END IF;
  END PROCESS d_reg_48_process;


  d_neg_in0_50 <=  - (resize(d49_p, 66));
  d_neg_101 <= d_neg_in0_50(64 DOWNTO 0);

  
  y_97 <= d49_p WHEN switch_compare_1_52 = '0' ELSE
      d_neg_101;

  temp_51 <= x_49 + y_97;

  rMSBNextBits_49 <= unsigned(temp_51(63 DOWNTO 0));

  rLSBits_49 <= unsigned(r49_p(62 DOWNTO 0));

  tempSignBit_49 <= temp_51(63);

  qBit_49 <=  NOT tempSignBit_49;

  rNextTemp_49 <= rMSBNextBits_49 & rLSBits_49 & qBit_49;

  r50 <= signed(rNextTemp_49);

  r_reg_49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r50_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r50_p <= r50;
      END IF;
    END IF;
  END PROCESS r_reg_49_process;


  rMSBits_50 <= unsigned(r50_p(127 DOWNTO 63));

  x_50 <= signed(rMSBits_50);

  rMSBit_49 <= r50_p(127);

  rMSBitneg_49 <=  NOT rMSBit_49;

  
  switch_compare_1_53 <= '1' WHEN rMSBitneg_49 > '0' ELSE
      '0';

  d_reg_49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d50_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d50_p <= d49_p;
      END IF;
    END IF;
  END PROCESS d_reg_49_process;


  d_neg_in0_51 <=  - (resize(d50_p, 66));
  d_neg_103 <= d_neg_in0_51(64 DOWNTO 0);

  
  y_99 <= d50_p WHEN switch_compare_1_53 = '0' ELSE
      d_neg_103;

  temp_52 <= x_50 + y_99;

  rMSBNextBits_50 <= unsigned(temp_52(63 DOWNTO 0));

  rLSBits_50 <= unsigned(r50_p(62 DOWNTO 0));

  tempSignBit_50 <= temp_52(63);

  qBit_50 <=  NOT tempSignBit_50;

  rNextTemp_50 <= rMSBNextBits_50 & rLSBits_50 & qBit_50;

  r51 <= signed(rNextTemp_50);

  r_reg_50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r51_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r51_p <= r51;
      END IF;
    END IF;
  END PROCESS r_reg_50_process;


  rMSBits_51 <= unsigned(r51_p(127 DOWNTO 63));

  x_51 <= signed(rMSBits_51);

  rMSBit_50 <= r51_p(127);

  rMSBitneg_50 <=  NOT rMSBit_50;

  
  switch_compare_1_54 <= '1' WHEN rMSBitneg_50 > '0' ELSE
      '0';

  d_reg_50_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d51_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d51_p <= d50_p;
      END IF;
    END IF;
  END PROCESS d_reg_50_process;


  d_neg_in0_52 <=  - (resize(d51_p, 66));
  d_neg_105 <= d_neg_in0_52(64 DOWNTO 0);

  
  y_101 <= d51_p WHEN switch_compare_1_54 = '0' ELSE
      d_neg_105;

  temp_53 <= x_51 + y_101;

  rMSBNextBits_51 <= unsigned(temp_53(63 DOWNTO 0));

  rLSBits_51 <= unsigned(r51_p(62 DOWNTO 0));

  tempSignBit_51 <= temp_53(63);

  qBit_51 <=  NOT tempSignBit_51;

  rNextTemp_51 <= rMSBNextBits_51 & rLSBits_51 & qBit_51;

  r52 <= signed(rNextTemp_51);

  r_reg_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r52_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r52_p <= r52;
      END IF;
    END IF;
  END PROCESS r_reg_51_process;


  rMSBits_52 <= unsigned(r52_p(127 DOWNTO 63));

  x_52 <= signed(rMSBits_52);

  rMSBit_51 <= r52_p(127);

  rMSBitneg_51 <=  NOT rMSBit_51;

  
  switch_compare_1_55 <= '1' WHEN rMSBitneg_51 > '0' ELSE
      '0';

  d_reg_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d52_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d52_p <= d51_p;
      END IF;
    END IF;
  END PROCESS d_reg_51_process;


  d_neg_in0_53 <=  - (resize(d52_p, 66));
  d_neg_107 <= d_neg_in0_53(64 DOWNTO 0);

  
  y_103 <= d52_p WHEN switch_compare_1_55 = '0' ELSE
      d_neg_107;

  temp_54 <= x_52 + y_103;

  rMSBNextBits_52 <= unsigned(temp_54(63 DOWNTO 0));

  rLSBits_52 <= unsigned(r52_p(62 DOWNTO 0));

  tempSignBit_52 <= temp_54(63);

  qBit_52 <=  NOT tempSignBit_52;

  rNextTemp_52 <= rMSBNextBits_52 & rLSBits_52 & qBit_52;

  r53 <= signed(rNextTemp_52);

  r_reg_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r53_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r53_p <= r53;
      END IF;
    END IF;
  END PROCESS r_reg_52_process;


  rMSBits_53 <= unsigned(r53_p(127 DOWNTO 63));

  x_53 <= signed(rMSBits_53);

  rMSBit_52 <= r53_p(127);

  rMSBitneg_52 <=  NOT rMSBit_52;

  
  switch_compare_1_56 <= '1' WHEN rMSBitneg_52 > '0' ELSE
      '0';

  d_reg_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d53_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d53_p <= d52_p;
      END IF;
    END IF;
  END PROCESS d_reg_52_process;


  d_neg_in0_54 <=  - (resize(d53_p, 66));
  d_neg_109 <= d_neg_in0_54(64 DOWNTO 0);

  
  y_105 <= d53_p WHEN switch_compare_1_56 = '0' ELSE
      d_neg_109;

  temp_55 <= x_53 + y_105;

  rMSBNextBits_53 <= unsigned(temp_55(63 DOWNTO 0));

  rLSBits_53 <= unsigned(r53_p(62 DOWNTO 0));

  tempSignBit_53 <= temp_55(63);

  qBit_53 <=  NOT tempSignBit_53;

  rNextTemp_53 <= rMSBNextBits_53 & rLSBits_53 & qBit_53;

  r54 <= signed(rNextTemp_53);

  r_reg_53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r54_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r54_p <= r54;
      END IF;
    END IF;
  END PROCESS r_reg_53_process;


  rMSBits_54 <= unsigned(r54_p(127 DOWNTO 63));

  x_54 <= signed(rMSBits_54);

  rMSBit_53 <= r54_p(127);

  rMSBitneg_53 <=  NOT rMSBit_53;

  
  switch_compare_1_57 <= '1' WHEN rMSBitneg_53 > '0' ELSE
      '0';

  d_reg_53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d54_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d54_p <= d53_p;
      END IF;
    END IF;
  END PROCESS d_reg_53_process;


  d_neg_in0_55 <=  - (resize(d54_p, 66));
  d_neg_111 <= d_neg_in0_55(64 DOWNTO 0);

  
  y_107 <= d54_p WHEN switch_compare_1_57 = '0' ELSE
      d_neg_111;

  temp_56 <= x_54 + y_107;

  rMSBNextBits_54 <= unsigned(temp_56(63 DOWNTO 0));

  rLSBits_54 <= unsigned(r54_p(62 DOWNTO 0));

  tempSignBit_54 <= temp_56(63);

  qBit_54 <=  NOT tempSignBit_54;

  rNextTemp_54 <= rMSBNextBits_54 & rLSBits_54 & qBit_54;

  r55 <= signed(rNextTemp_54);

  r_reg_54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r55_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r55_p <= r55;
      END IF;
    END IF;
  END PROCESS r_reg_54_process;


  rMSBits_55 <= unsigned(r55_p(127 DOWNTO 63));

  x_55 <= signed(rMSBits_55);

  rMSBit_54 <= r55_p(127);

  rMSBitneg_54 <=  NOT rMSBit_54;

  
  switch_compare_1_58 <= '1' WHEN rMSBitneg_54 > '0' ELSE
      '0';

  d_reg_54_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d55_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d55_p <= d54_p;
      END IF;
    END IF;
  END PROCESS d_reg_54_process;


  d_neg_in0_56 <=  - (resize(d55_p, 66));
  d_neg_113 <= d_neg_in0_56(64 DOWNTO 0);

  
  y_109 <= d55_p WHEN switch_compare_1_58 = '0' ELSE
      d_neg_113;

  temp_57 <= x_55 + y_109;

  rMSBNextBits_55 <= unsigned(temp_57(63 DOWNTO 0));

  rLSBits_55 <= unsigned(r55_p(62 DOWNTO 0));

  tempSignBit_55 <= temp_57(63);

  qBit_55 <=  NOT tempSignBit_55;

  rNextTemp_55 <= rMSBNextBits_55 & rLSBits_55 & qBit_55;

  r56 <= signed(rNextTemp_55);

  r_reg_55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r56_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r56_p <= r56;
      END IF;
    END IF;
  END PROCESS r_reg_55_process;


  rMSBits_56 <= unsigned(r56_p(127 DOWNTO 63));

  x_56 <= signed(rMSBits_56);

  rMSBit_55 <= r56_p(127);

  rMSBitneg_55 <=  NOT rMSBit_55;

  
  switch_compare_1_59 <= '1' WHEN rMSBitneg_55 > '0' ELSE
      '0';

  d_reg_55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d56_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d56_p <= d55_p;
      END IF;
    END IF;
  END PROCESS d_reg_55_process;


  d_neg_in0_57 <=  - (resize(d56_p, 66));
  d_neg_115 <= d_neg_in0_57(64 DOWNTO 0);

  
  y_111 <= d56_p WHEN switch_compare_1_59 = '0' ELSE
      d_neg_115;

  temp_58 <= x_56 + y_111;

  rMSBNextBits_56 <= unsigned(temp_58(63 DOWNTO 0));

  rLSBits_56 <= unsigned(r56_p(62 DOWNTO 0));

  tempSignBit_56 <= temp_58(63);

  qBit_56 <=  NOT tempSignBit_56;

  rNextTemp_56 <= rMSBNextBits_56 & rLSBits_56 & qBit_56;

  r57 <= signed(rNextTemp_56);

  r_reg_56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r57_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r57_p <= r57;
      END IF;
    END IF;
  END PROCESS r_reg_56_process;


  rMSBits_57 <= unsigned(r57_p(127 DOWNTO 63));

  x_57 <= signed(rMSBits_57);

  rMSBit_56 <= r57_p(127);

  rMSBitneg_56 <=  NOT rMSBit_56;

  
  switch_compare_1_60 <= '1' WHEN rMSBitneg_56 > '0' ELSE
      '0';

  d_reg_56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d57_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d57_p <= d56_p;
      END IF;
    END IF;
  END PROCESS d_reg_56_process;


  d_neg_in0_58 <=  - (resize(d57_p, 66));
  d_neg_117 <= d_neg_in0_58(64 DOWNTO 0);

  
  y_113 <= d57_p WHEN switch_compare_1_60 = '0' ELSE
      d_neg_117;

  temp_59 <= x_57 + y_113;

  rMSBNextBits_57 <= unsigned(temp_59(63 DOWNTO 0));

  rLSBits_57 <= unsigned(r57_p(62 DOWNTO 0));

  tempSignBit_57 <= temp_59(63);

  qBit_57 <=  NOT tempSignBit_57;

  rNextTemp_57 <= rMSBNextBits_57 & rLSBits_57 & qBit_57;

  r58 <= signed(rNextTemp_57);

  r_reg_57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r58_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r58_p <= r58;
      END IF;
    END IF;
  END PROCESS r_reg_57_process;


  rMSBits_58 <= unsigned(r58_p(127 DOWNTO 63));

  x_58 <= signed(rMSBits_58);

  rMSBit_57 <= r58_p(127);

  rMSBitneg_57 <=  NOT rMSBit_57;

  
  switch_compare_1_61 <= '1' WHEN rMSBitneg_57 > '0' ELSE
      '0';

  d_reg_57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d58_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d58_p <= d57_p;
      END IF;
    END IF;
  END PROCESS d_reg_57_process;


  d_neg_in0_59 <=  - (resize(d58_p, 66));
  d_neg_119 <= d_neg_in0_59(64 DOWNTO 0);

  
  y_115 <= d58_p WHEN switch_compare_1_61 = '0' ELSE
      d_neg_119;

  temp_60 <= x_58 + y_115;

  rMSBNextBits_58 <= unsigned(temp_60(63 DOWNTO 0));

  rLSBits_58 <= unsigned(r58_p(62 DOWNTO 0));

  tempSignBit_58 <= temp_60(63);

  qBit_58 <=  NOT tempSignBit_58;

  rNextTemp_58 <= rMSBNextBits_58 & rLSBits_58 & qBit_58;

  r59 <= signed(rNextTemp_58);

  r_reg_58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r59_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r59_p <= r59;
      END IF;
    END IF;
  END PROCESS r_reg_58_process;


  rMSBits_59 <= unsigned(r59_p(127 DOWNTO 63));

  x_59 <= signed(rMSBits_59);

  rMSBit_58 <= r59_p(127);

  rMSBitneg_58 <=  NOT rMSBit_58;

  
  switch_compare_1_62 <= '1' WHEN rMSBitneg_58 > '0' ELSE
      '0';

  d_reg_58_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d59_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d59_p <= d58_p;
      END IF;
    END IF;
  END PROCESS d_reg_58_process;


  d_neg_in0_60 <=  - (resize(d59_p, 66));
  d_neg_121 <= d_neg_in0_60(64 DOWNTO 0);

  
  y_117 <= d59_p WHEN switch_compare_1_62 = '0' ELSE
      d_neg_121;

  temp_61 <= x_59 + y_117;

  rMSBNextBits_59 <= unsigned(temp_61(63 DOWNTO 0));

  rLSBits_59 <= unsigned(r59_p(62 DOWNTO 0));

  tempSignBit_59 <= temp_61(63);

  qBit_59 <=  NOT tempSignBit_59;

  rNextTemp_59 <= rMSBNextBits_59 & rLSBits_59 & qBit_59;

  r60 <= signed(rNextTemp_59);

  r_reg_59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r60_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r60_p <= r60;
      END IF;
    END IF;
  END PROCESS r_reg_59_process;


  rMSBits_60 <= unsigned(r60_p(127 DOWNTO 63));

  x_60 <= signed(rMSBits_60);

  rMSBit_59 <= r60_p(127);

  rMSBitneg_59 <=  NOT rMSBit_59;

  
  switch_compare_1_63 <= '1' WHEN rMSBitneg_59 > '0' ELSE
      '0';

  d_reg_59_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d60_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d60_p <= d59_p;
      END IF;
    END IF;
  END PROCESS d_reg_59_process;


  d_neg_in0_61 <=  - (resize(d60_p, 66));
  d_neg_123 <= d_neg_in0_61(64 DOWNTO 0);

  
  y_119 <= d60_p WHEN switch_compare_1_63 = '0' ELSE
      d_neg_123;

  temp_62 <= x_60 + y_119;

  rMSBNextBits_60 <= unsigned(temp_62(63 DOWNTO 0));

  rLSBits_60 <= unsigned(r60_p(62 DOWNTO 0));

  tempSignBit_60 <= temp_62(63);

  qBit_60 <=  NOT tempSignBit_60;

  rNextTemp_60 <= rMSBNextBits_60 & rLSBits_60 & qBit_60;

  r61 <= signed(rNextTemp_60);

  r_reg_60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r61_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r61_p <= r61;
      END IF;
    END IF;
  END PROCESS r_reg_60_process;


  rMSBits_61 <= unsigned(r61_p(127 DOWNTO 63));

  x_61 <= signed(rMSBits_61);

  rMSBit_60 <= r61_p(127);

  rMSBitneg_60 <=  NOT rMSBit_60;

  
  switch_compare_1_64 <= '1' WHEN rMSBitneg_60 > '0' ELSE
      '0';

  d_reg_60_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d61_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d61_p <= d60_p;
      END IF;
    END IF;
  END PROCESS d_reg_60_process;


  d_neg_in0_62 <=  - (resize(d61_p, 66));
  d_neg_125 <= d_neg_in0_62(64 DOWNTO 0);

  
  y_121 <= d61_p WHEN switch_compare_1_64 = '0' ELSE
      d_neg_125;

  temp_63 <= x_61 + y_121;

  rMSBNextBits_61 <= unsigned(temp_63(63 DOWNTO 0));

  rLSBits_61 <= unsigned(r61_p(62 DOWNTO 0));

  tempSignBit_61 <= temp_63(63);

  qBit_61 <=  NOT tempSignBit_61;

  rNextTemp_61 <= rMSBNextBits_61 & rLSBits_61 & qBit_61;

  r62 <= signed(rNextTemp_61);

  r_reg_61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r62_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r62_p <= r62;
      END IF;
    END IF;
  END PROCESS r_reg_61_process;


  rMSBits_62 <= unsigned(r62_p(127 DOWNTO 63));

  x_62 <= signed(rMSBits_62);

  rMSBit_61 <= r62_p(127);

  rMSBitneg_61 <=  NOT rMSBit_61;

  
  switch_compare_1_65 <= '1' WHEN rMSBitneg_61 > '0' ELSE
      '0';

  d_reg_61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d62_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d62_p <= d61_p;
      END IF;
    END IF;
  END PROCESS d_reg_61_process;


  d_neg_in0_63 <=  - (resize(d62_p, 66));
  d_neg_127 <= d_neg_in0_63(64 DOWNTO 0);

  
  y_123 <= d62_p WHEN switch_compare_1_65 = '0' ELSE
      d_neg_127;

  temp_64 <= x_62 + y_123;

  rMSBNextBits_62 <= unsigned(temp_64(63 DOWNTO 0));

  rLSBits_62 <= unsigned(r62_p(62 DOWNTO 0));

  tempSignBit_62 <= temp_64(63);

  qBit_62 <=  NOT tempSignBit_62;

  rNextTemp_62 <= rMSBNextBits_62 & rLSBits_62 & qBit_62;

  r63 <= signed(rNextTemp_62);

  r_reg_62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r63_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r63_p <= r63;
      END IF;
    END IF;
  END PROCESS r_reg_62_process;


  rMSBits_63 <= unsigned(r63_p(127 DOWNTO 63));

  x_63 <= signed(rMSBits_63);

  rMSBit_62 <= r63_p(127);

  rMSBitneg_62 <=  NOT rMSBit_62;

  
  switch_compare_1_66 <= '1' WHEN rMSBitneg_62 > '0' ELSE
      '0';

  d_reg_62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        d63_p <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        d63_p <= d62_p;
      END IF;
    END IF;
  END PROCESS d_reg_62_process;


  d_neg_in0_64 <=  - (resize(d63_p, 66));
  d_neg_129 <= d_neg_in0_64(64 DOWNTO 0);

  
  y_125 <= d63_p WHEN switch_compare_1_66 = '0' ELSE
      d_neg_129;

  temp_65 <= x_63 + y_125;

  rMSBNextBits_63 <= unsigned(temp_65(63 DOWNTO 0));

  rLSBits_63 <= unsigned(r63_p(62 DOWNTO 0));

  tempSignBit_63 <= temp_65(63);

  qBit_63 <=  NOT tempSignBit_63;

  rNextTemp_63 <= rMSBNextBits_63 & rLSBits_63 & qBit_63;

  r64 <= signed(rNextTemp_63);

  r_reg_63_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        r64_p <= to_signed(0, 128);
      ELSIF enb = '1' THEN
        r64_p <= r64;
      END IF;
    END IF;
  END PROCESS r_reg_63_process;


  qTemp <= unsigned(r64_p(63 DOWNTO 0));

  qtempExt <= signed(resize(qTemp, 65));

  qtempExt_p_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        qtempExt_p_1 <= to_signed(0, 65);
      ELSIF enb = '1' THEN
        qtempExt_p_1 <= qtempExt;
      END IF;
    END IF;
  END PROCESS qtempExt_p_process;


  qin_neg_post_in0 <=  - (resize(qtempExt_p_1, 66));
  qin_neg_post_1 <= qin_neg_post_in0(64 DOWNTO 0);

  
  qtemp_post <= qtempExt_p_1 WHEN switch_compare_1_1 = '0' ELSE
      qin_neg_post_1;

  sel1 <= qtemp_post(64);

  sel0 <= qtemp_post(63);

  sel <= unsigned'(sel1 & sel0);

  qtemp_dtc_post_1 <= qtemp_post(63 DOWNTO 0);

  ConstantSignalMax_1 <= signed'(X"7FFFFFFFFFFFFFFF");

  ConstantSignalMin_1 <= signed'(X"8000000000000000");

  ConstantSignal_1 <= to_signed(0, 63);

  post_q_Multiport_Switch_output : PROCESS (ConstantSignalMax_1, ConstantSignalMin_1, qtemp_dtc_post_1, sel)
  BEGIN
    CASE sel IS
      WHEN "00" =>
        qtempPost <= qtemp_dtc_post_1;
      WHEN "01" =>
        qtempPost <= ConstantSignalMax_1;
      WHEN "10" =>
        qtempPost <= ConstantSignalMin_1;
      WHEN OTHERS => 
        qtempPost <= qtemp_dtc_post_1;
    END CASE;
  END PROCESS post_q_Multiport_Switch_output;


  
  postCorrectionSig2_1 <= "011111111111111111111111111111111111111111111111111111111111111" WHEN (qtempPost(63) = '0') AND (qtempPost(62) /= '0') ELSE
      "100000000000000000000000000000000000000000000000000000000000000" WHEN (qtempPost(63) = '1') AND (qtempPost(62) /= '1') ELSE
      qtempPost(62 DOWNTO 0);

  
  qtempPost_1 <= ConstantSignal_1 WHEN initFlagenable = '0' ELSE
      postCorrectionSig2_1;

  qtempPost_2 <= qtempPost_1;

  q_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        quotient <= to_signed(0, 63);
      ELSIF enb = '1' THEN
        quotient <= qtempPost_2;
      END IF;
    END IF;
  END PROCESS q_process;


  Delay1_output_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Divide_out1 <= to_signed(0, 63);
      ELSIF enb_1_2_1 = '1' THEN
        Divide_out1 <= quotient;
      END IF;
    END IF;
  END PROCESS Delay1_output_1_process;


  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_reg <= (OTHERS => to_signed(0, 63));
      ELSIF enb_1_2_0 = '1' THEN
        Delay12_reg(0) <= Divide_out1;
        Delay12_reg(1 TO 36) <= Delay12_reg(0 TO 35);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(36);

  Delay64_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay64_out1 <= to_signed(0, 63);
      ELSIF enb_1_2_0 = '1' THEN
        Delay64_out1 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay64_process;


  Delay64_out1_1 <= Delay64_out1;

  HwModeRegister_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay64_out1_2 <= to_signed(0, 63);
      ELSIF enb = '1' THEN
        Delay64_out1_2 <= Delay64_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_13_process;


  Product_out1_4 <= Delay15_out1_2 * Delay64_out1_2;

  PipelineRegister_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product_out1_5 <= to_signed(0, 95);
      ELSIF enb = '1' THEN
        Product_out1_5 <= Product_out1_4;
      END IF;
    END IF;
  END PROCESS PipelineRegister_6_process;


  Delay67_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product_out1_6 <= to_signed(0, 95);
      ELSIF enb_1_2_1 = '1' THEN
        Product_out1_6 <= Product_out1_5;
      END IF;
    END IF;
  END PROCESS Delay67_output_process;


  Delay67_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay67_reg <= (OTHERS => to_signed(0, 95));
      ELSIF enb_1_2_0 = '1' THEN
        Delay67_reg(0) <= Product_out1_6;
        Delay67_reg(1 TO 7) <= Delay67_reg(0 TO 6);
      END IF;
    END IF;
  END PROCESS Delay67_process;

  Delay67_out1 <= Delay67_reg(7);

  Delay19_out1_im_1 <= Delay19_out1_im;

  crp_out_delay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product2_in0_buff1_out1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Product2_in0_buff1_out1 <= Delay19_out1_im_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_2_process;


  Delay63_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay63_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay63_bypass_reg <= Product2_in0_buff1_out1;
      END IF;
    END IF;
  END PROCESS Delay63_bypass_process;

  
  Delay63_out1 <= Product2_in0_buff1_out1 WHEN enb_1_2_1 = '1' ELSE
      Delay63_bypass_reg;

  Delay63_out1_1 <= Delay63_out1;

  HwModeRegister_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay63_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay63_out1_2 <= Delay63_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_14_process;


  Delay65_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay65_out1 <= to_signed(0, 63);
      ELSIF enb_1_2_0 = '1' THEN
        Delay65_out1 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay65_process;


  Delay65_out1_1 <= Delay65_out1;

  HwModeRegister_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay65_out1_2 <= to_signed(0, 63);
      ELSIF enb = '1' THEN
        Delay65_out1_2 <= Delay65_out1_1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_15_process;


  Product2_out1_2 <= Delay63_out1_2 * Delay65_out1_2;

  PipelineRegister_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product2_out1_3 <= to_signed(0, 95);
      ELSIF enb = '1' THEN
        Product2_out1_3 <= Product2_out1_2;
      END IF;
    END IF;
  END PROCESS PipelineRegister_7_process;


  Delay68_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product2_out1_4 <= to_signed(0, 95);
      ELSIF enb_1_2_1 = '1' THEN
        Product2_out1_4 <= Product2_out1_3;
      END IF;
    END IF;
  END PROCESS Delay68_output_process;


  Delay68_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay68_reg <= (OTHERS => to_signed(0, 95));
      ELSIF enb_1_2_0 = '1' THEN
        Delay68_reg(0) <= Product2_out1_4;
        Delay68_reg(1 TO 7) <= Delay68_reg(0 TO 6);
      END IF;
    END IF;
  END PROCESS Delay68_process;

  Delay68_out1 <= Delay68_reg(7);

  --MATLAB Function 'OFDM Equalizer/ZF and MMSE Equalizer/Data Type Control/OutDT Converter/output DT Converter'
  
  dataOut_re_2 <= X"7FFF" WHEN ((Delay67_out1(94) = '0') AND (Delay67_out1(93 DOWNTO 63) /= "0000000000000000000000000000000")) OR ((Delay67_out1(94) = '0') AND (Delay67_out1(63 DOWNTO 48) = X"7FFF")) ELSE
      X"8000" WHEN (Delay67_out1(94) = '1') AND (Delay67_out1(93 DOWNTO 63) /= "1111111111111111111111111111111") ELSE
      Delay67_out1(63 DOWNTO 48) + ('0' & Delay67_out1(47));
  
  dataOut_im_2 <= X"7FFF" WHEN ((Delay68_out1(94) = '0') AND (Delay68_out1(93 DOWNTO 63) /= "0000000000000000000000000000000")) OR ((Delay68_out1(94) = '0') AND (Delay68_out1(63 DOWNTO 48) = X"7FFF")) ELSE
      X"8000" WHEN (Delay68_out1(94) = '1') AND (Delay68_out1(93 DOWNTO 63) /= "1111111111111111111111111111111") ELSE
      Delay68_out1(63 DOWNTO 48) + ('0' & Delay68_out1(47));

  dataOut_re_3 <= dataOut_re_2;

  dataOut_im_3 <= dataOut_im_2;

  
  Switch3_out1_re <= Constant_out1_re WHEN Logical_Operator8_out1 = '0' ELSE
      dataOut_re_3;
  
  Switch3_out1_im <= Constant_out1_im WHEN Logical_Operator8_out1 = '0' ELSE
      dataOut_im_3;

  dataOut_re <= std_logic_vector(Switch3_out1_re);

  dataOut_im <= std_logic_vector(Switch3_out1_im);




  validOut <= Logical_Operator8_out1;

END rtl;

