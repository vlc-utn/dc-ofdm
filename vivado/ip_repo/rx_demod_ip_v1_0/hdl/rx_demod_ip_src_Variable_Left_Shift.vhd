-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_Variable_Left_Shift.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_Variable_Left_Shift
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/m_cox/Real Divide HDL Optimized/ForEach - Real 
-- Divide/Shift and cast to output type/Variable Left Shif
-- Hierarchy Level: 6
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_Variable_Left_Shift IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        x                                 :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        leftShift                         :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        y                                 :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En30
        );
END rx_demod_ip_src_Variable_Left_Shift;


ARCHITECTURE rtl OF rx_demod_ip_src_Variable_Left_Shift IS

  -- Signals
  SIGNAL leftShift_1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice8_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1_1                : std_logic;  -- ufix1
  SIGNAL Delay2_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay2_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1_1                : std_logic;  -- ufix1
  SIGNAL Delay1_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay1_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL x_1                              : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Bit_Shift_out1                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch1_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Bit_Shift1_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch2_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch2_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch2_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Bit_Shift2_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch3_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Bit_Shift3_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch4_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch4_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Delay_bypass_reg                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Bit_Shift4_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch5_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Delay3_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay3_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Shift5_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch6_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Delay4_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay4_out1                      : std_logic;  -- ufix1
  SIGNAL Bit_Shift6_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch7_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Bit_Shift7_out1                  : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL Switch8_out1                     : signed(31 DOWNTO 0);  -- sfix32_En30

BEGIN
  leftShift_1 <= signed(leftShift);

  Bit_Slice8_out1 <= leftShift_1(7);

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Slice8_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Bit_Slice8_out1_1 <= Bit_Slice8_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Bit_Slice7_out1 <= leftShift_1(6);

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Slice7_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Bit_Slice7_out1_1 <= Bit_Slice7_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Bit_Slice6_out1 <= leftShift_1(5);

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Slice6_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Bit_Slice6_out1_1 <= Bit_Slice6_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_reg <= Bit_Slice6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= Bit_Slice6_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg;

  Bit_Slice5_out1 <= leftShift_1(4);

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Slice5_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Bit_Slice5_out1_1 <= Bit_Slice5_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg <= Bit_Slice5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= Bit_Slice5_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg;

  Bit_Slice4_out1 <= leftShift_1(3);

  rd_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Slice4_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Bit_Slice4_out1_1 <= Bit_Slice4_out1;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  Bit_Slice3_out1 <= leftShift_1(2);

  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Slice3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Bit_Slice3_out1_1 <= Bit_Slice3_out1;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  Bit_Slice2_out1 <= leftShift_1(1);

  Bit_Slice1_out1 <= leftShift_1(0);

  x_1 <= signed(x);

  Bit_Shift_out1 <= x_1 sll 1;

  
  Switch1_out1 <= x_1 WHEN Bit_Slice1_out1 = '0' ELSE
      Bit_Shift_out1;

  Bit_Shift1_out1 <= Switch1_out1 sll 2;

  
  Switch2_out1 <= Switch1_out1 WHEN Bit_Slice2_out1 = '0' ELSE
      Bit_Shift1_out1;

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch2_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Switch2_out1_1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch2_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Switch2_out1_2 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  Bit_Shift2_out1 <= Switch2_out1_2 sll 4;

  
  Switch3_out1 <= Switch2_out1_1 WHEN Bit_Slice3_out1_1 = '0' ELSE
      Bit_Shift2_out1;

  Bit_Shift3_out1 <= Switch3_out1 sll 8;

  
  Switch4_out1 <= Switch3_out1 WHEN Bit_Slice4_out1_1 = '0' ELSE
      Bit_Shift3_out1;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch4_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Switch4_out1_1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg <= Switch4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= Switch4_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg;

  Bit_Shift4_out1 <= Delay_out1 sll 16;

  
  Switch5_out1 <= Delay_out1 WHEN Delay1_out1 = '0' ELSE
      Bit_Shift4_out1;

  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Bit_Slice7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Bit_Slice7_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  Bit_Shift5_out1 <= to_signed(0, 32);

  
  Switch6_out1 <= Switch5_out1 WHEN Delay2_out1 = '0' ELSE
      Bit_Shift5_out1;

  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay4_bypass_reg <= Bit_Slice8_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  Delay4_out1 <= Bit_Slice8_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay4_bypass_reg;

  Bit_Shift6_out1 <= to_signed(0, 32);

  
  Switch7_out1 <= Switch6_out1 WHEN Delay3_out1 = '0' ELSE
      Bit_Shift6_out1;

  Bit_Shift7_out1 <= to_signed(0, 32);

  
  Switch8_out1 <= Switch7_out1 WHEN Delay4_out1 = '0' ELSE
      Bit_Shift7_out1;

  y <= std_logic_vector(Switch8_out1);

END rtl;

