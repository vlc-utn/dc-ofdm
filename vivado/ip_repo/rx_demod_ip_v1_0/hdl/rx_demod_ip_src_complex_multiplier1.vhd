-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_complex_multiplier1.vhd
-- Created: 2024-09-22 18:53:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_complex_multiplier1
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/m_cox/calculate_P/complex_multiplier1
-- Hierarchy Level: 4
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_complex_multiplier1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        in_a_re                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        in_a_im                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        in_b_re                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        in_b_im                           :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        a_times_b_re                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        a_times_b_im                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END rx_demod_ip_src_complex_multiplier1;


ARCHITECTURE rtl OF rx_demod_ip_src_complex_multiplier1 IS

  -- Signals
  SIGNAL in_a_re_signed                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL in_a_im_signed                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay6_reg                       : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay6_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay6_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister6_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay6_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL in_b_re_signed                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL in_b_im_signed                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay8_reg                       : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay8_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay8_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister7_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay8_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp                 : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL crp_out_delay5_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Product_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_bypass_reg                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay4_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay7_reg                       : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay7_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay7_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay7_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay9_reg                       : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay9_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay9_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister1_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay9_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL crp_out_delay2_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Product1_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_bypass_reg                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add2_out1                        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add2_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_bypass_reg                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister4_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay7_out1_3                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister5_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay8_out1_3                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product3_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL crp_out_delay4_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Product3_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_bypass_reg                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay3_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister2_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay6_out1_3                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister3_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay9_out1_3                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL crp_out_delay3_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Product2_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_bypass_reg                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_out1_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add3_out1                        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add3_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay_bypass_reg                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay_out1                       : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay10_out1_re                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay10_out1_im                  : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  in_a_re_signed <= signed(in_a_re);

  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay6_reg(0) <= in_a_re_signed;
        Delay6_reg(1) <= Delay6_reg(0);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(1);

  Delay6_out1_1 <= Delay6_out1;

  HwModeRegister6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister6_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister6_reg(0) <= Delay6_out1_1;
        HwModeRegister6_reg(1) <= HwModeRegister6_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;

  Delay6_out1_2 <= HwModeRegister6_reg(1);

  in_b_re_signed <= signed(in_b_re);

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay8_reg(0) <= in_b_re_signed;
        Delay8_reg(1) <= Delay8_reg(0);
      END IF;
    END IF;
  END PROCESS Delay8_process;

  Delay8_out1 <= Delay8_reg(1);

  Delay8_out1_1 <= Delay8_out1;

  HwModeRegister7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister7_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister7_reg(0) <= Delay8_out1_1;
        HwModeRegister7_reg(1) <= HwModeRegister7_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;

  Delay8_out1_2 <= HwModeRegister7_reg(1);

  Product_mul_temp <= Delay6_out1_2 * Delay8_out1_2;
  Product_out1 <= Product_mul_temp(55 DOWNTO 24);

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay5_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        crp_out_delay5_reg(0) <= Product_out1;
        crp_out_delay5_reg(1) <= crp_out_delay5_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;

  Product_out1_1 <= crp_out_delay5_reg(1);

  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay4_bypass_reg <= Product_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;

  
  Delay4_out1 <= Product_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay4_bypass_reg;

  Delay4_out1_1 <= Delay4_out1;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay4_out1_2 <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  in_a_im_signed <= signed(in_a_im);

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay7_reg(0) <= in_a_im_signed;
        Delay7_reg(1) <= Delay7_reg(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1 <= Delay7_reg(1);

  Delay7_out1_1 <= Delay7_out1;

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister_reg(0) <= Delay7_out1_1;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  Delay7_out1_2 <= HwModeRegister_reg(1);

  in_b_im_signed <= signed(in_b_im);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay9_reg(0) <= in_b_im_signed;
        Delay9_reg(1) <= Delay9_reg(0);
      END IF;
    END IF;
  END PROCESS Delay9_process;

  Delay9_out1 <= Delay9_reg(1);

  Delay9_out1_1 <= Delay9_out1;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister1_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister1_reg(0) <= Delay9_out1_1;
        HwModeRegister1_reg(1) <= HwModeRegister1_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  Delay9_out1_2 <= HwModeRegister1_reg(1);

  Product1_mul_temp <= Delay7_out1_2 * Delay9_out1_2;
  Product1_out1 <= Product1_mul_temp(55 DOWNTO 24);

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay2_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        crp_out_delay2_reg(0) <= Product1_out1;
        crp_out_delay2_reg(1) <= crp_out_delay2_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;

  Product1_out1_1 <= crp_out_delay2_reg(1);

  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay5_bypass_reg <= Product1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;

  
  Delay5_out1 <= Product1_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay5_bypass_reg;

  Delay5_out1_1 <= Delay5_out1;

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay5_out1_2 <= Delay5_out1_1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  Add2_out1 <= Delay4_out1_2 - Delay5_out1_2;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add2_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Add2_out1_1 <= Add2_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg <= Add2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= Add2_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg;

  HwModeRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister4_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister4_reg(0) <= Delay7_out1_1;
        HwModeRegister4_reg(1) <= HwModeRegister4_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;

  Delay7_out1_3 <= HwModeRegister4_reg(1);

  HwModeRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister5_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister5_reg(0) <= Delay8_out1_1;
        HwModeRegister5_reg(1) <= HwModeRegister5_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;

  Delay8_out1_3 <= HwModeRegister5_reg(1);

  Product3_mul_temp <= Delay7_out1_3 * Delay8_out1_3;
  Product3_out1 <= Product3_mul_temp(55 DOWNTO 24);

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay4_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        crp_out_delay4_reg(0) <= Product3_out1;
        crp_out_delay4_reg(1) <= crp_out_delay4_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;

  Product3_out1_1 <= crp_out_delay4_reg(1);

  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Product3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Product3_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay3_out1_1 <= Delay3_out1;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister2_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister2_reg(0) <= Delay6_out1_1;
        HwModeRegister2_reg(1) <= HwModeRegister2_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;

  Delay6_out1_3 <= HwModeRegister2_reg(1);

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister3_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister3_reg(0) <= Delay9_out1_1;
        HwModeRegister3_reg(1) <= HwModeRegister3_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;

  Delay9_out1_3 <= HwModeRegister3_reg(1);

  Product2_mul_temp <= Delay6_out1_3 * Delay9_out1_3;
  Product2_out1 <= Product2_mul_temp(55 DOWNTO 24);

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay3_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        crp_out_delay3_reg(0) <= Product2_out1;
        crp_out_delay3_reg(1) <= crp_out_delay3_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;

  Product2_out1_1 <= crp_out_delay3_reg(1);

  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_reg <= Product2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= Product2_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay2_out1_1 <= Delay2_out1;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  Add3_out1 <= Delay3_out1_2 + Delay2_out1_2;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add3_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Add3_out1_1 <= Add3_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg <= Add3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= Add3_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg;

  Delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1_re <= to_signed(0, 32);
        Delay10_out1_im <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay10_out1_re <= Delay1_out1;
        Delay10_out1_im <= Delay_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  a_times_b_re <= std_logic_vector(Delay10_out1_re);

  a_times_b_im <= std_logic_vector(Delay10_out1_im);

END rtl;

