-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_Quadrant_Mapper.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_Quadrant_Mapper
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/frequency_offset_calculator/HDL_CMA_core/Quadrant_Mapper
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_Quadrant_Mapper IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        xin                               :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
        yin                               :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
        xout                              :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
        yout                              :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
        QA_Control                        :   OUT   std_logic_vector(4 DOWNTO 0)  -- ufix5
        );
END rx_demod_ip_src_Quadrant_Mapper;


ARCHITECTURE rtl OF rx_demod_ip_src_Quadrant_Mapper IS

  -- Signals
  SIGNAL xin_1                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin_2                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL abs1_y                           : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL abs1_cast                        : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL xAbs                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xAbs_1                           : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL DelayxAbs_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xAbsReg                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin_1                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin_2                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL abs_rsvd_y                       : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL abs_rsvd_cast                    : signed(17 DOWNTO 0);  -- sfix18_En12
  SIGNAL yAbs                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yAbs_1                           : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL DelayyAbs_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yAbsReg                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL XGreaterThanY                    : std_logic;  -- ufix1
  SIGNAL xout_1                           : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout_1                           : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin_3                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL in2reg                           : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yZero                            : std_logic;  -- ufix1
  SIGNAL xin_3                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL in1reg                           : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xPositive                        : std_logic;  -- ufix1
  SIGNAL yZeroXPositive                   : std_logic;  -- ufix1
  SIGNAL xNegative                        : std_logic;  -- ufix1
  SIGNAL yZeroXNegative                   : std_logic;  -- ufix1
  SIGNAL yNegative                        : std_logic;  -- ufix1
  SIGNAL qcControl                        : unsigned(4 DOWNTO 0);  -- ufix5

BEGIN
  xin_1 <= signed(xin);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xin_2 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xin_2 <= xin_1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  abs1_cast <= resize(xin_2, 18);
  
  abs1_y <=  - (abs1_cast) WHEN xin_2 < to_signed(16#00000#, 17) ELSE
      resize(xin_2, 18);
  xAbs <= abs1_y(16 DOWNTO 0);

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xAbs_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xAbs_1 <= xAbs;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  DelayxAbs_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        DelayxAbs_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        DelayxAbs_bypass_reg <= xAbs_1;
      END IF;
    END IF;
  END PROCESS DelayxAbs_bypass_process;

  
  xAbsReg <= xAbs_1 WHEN enb_1_2_1 = '1' ELSE
      DelayxAbs_bypass_reg;

  yin_1 <= signed(yin);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yin_2 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yin_2 <= yin_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  abs_rsvd_cast <= resize(yin_2, 18);
  
  abs_rsvd_y <=  - (abs_rsvd_cast) WHEN yin_2 < to_signed(16#00000#, 17) ELSE
      resize(yin_2, 18);
  yAbs <= abs_rsvd_y(16 DOWNTO 0);

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yAbs_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yAbs_1 <= yAbs;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  DelayyAbs_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        DelayyAbs_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        DelayyAbs_bypass_reg <= yAbs_1;
      END IF;
    END IF;
  END PROCESS DelayyAbs_bypass_process;

  
  yAbsReg <= yAbs_1 WHEN enb_1_2_1 = '1' ELSE
      DelayyAbs_bypass_reg;

  
  XGreaterThanY <= '1' WHEN xAbsReg > yAbsReg ELSE
      '0';

  
  xout_1 <= yAbsReg WHEN XGreaterThanY = '0' ELSE
      xAbsReg;

  xout <= std_logic_vector(xout_1);

  
  yout_1 <= xAbsReg WHEN XGreaterThanY = '0' ELSE
      yAbsReg;

  yout <= std_logic_vector(yout_1);

  Delayin21_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yin_3 <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        yin_3 <= yin_1;
      END IF;
    END IF;
  END PROCESS Delayin21_output_process;


  Delayin2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in2reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        in2reg <= yin_3;
      END IF;
    END IF;
  END PROCESS Delayin2_process;


  
  yZero <= '1' WHEN in2reg = to_signed(16#00000#, 17) ELSE
      '0';

  Delayin11_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xin_3 <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        xin_3 <= xin_1;
      END IF;
    END IF;
  END PROCESS Delayin11_output_process;


  Delayin1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in1reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        in1reg <= xin_3;
      END IF;
    END IF;
  END PROCESS Delayin1_process;


  
  xPositive <= '1' WHEN in1reg >= to_signed(16#00000#, 17) ELSE
      '0';

  yZeroXPositive <= yZero AND xPositive;

  
  xNegative <= '1' WHEN in1reg < to_signed(16#00000#, 17) ELSE
      '0';

  yZeroXNegative <= yZero AND xNegative;

  
  yNegative <= '1' WHEN in2reg < to_signed(16#00000#, 17) ELSE
      '0';

  qcControl <= unsigned'(yZeroXPositive & yZeroXNegative & XGreaterThanY & xNegative & yNegative);

  QA_Control <= std_logic_vector(qcControl);

END rtl;

