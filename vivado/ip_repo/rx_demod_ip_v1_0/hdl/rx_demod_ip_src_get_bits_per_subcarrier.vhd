-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_get_bits_per_subcarrier.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_get_bits_per_subcarrier
-- Source Path: HDLRxDemodulator/rx_demodulator_full/get_bits_per_subcarrier
-- Hierarchy Level: 1
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_get_bits_per_subcarrier IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        payload_bits_per_sub              :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_header                      :   IN    std_logic;
        qam_demod_bits                    :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
        );
END rx_demod_ip_src_get_bits_per_subcarrier;


ARCHITECTURE rtl OF rx_demod_ip_src_get_bits_per_subcarrier IS

  -- Signals
  SIGNAL rd_0_reg                         : std_logic_vector(102 DOWNTO 0);  -- ufix1 [103]
  SIGNAL valid_header_1                   : std_logic;
  SIGNAL payload_bits_per_sub_unsigned    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion2_out1       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Data_Type_Conversion7_out1       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Switch1_out1                     : unsigned(3 DOWNTO 0);  -- ufix4

BEGIN
  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_0_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_0_reg(0) <= valid_header;
        rd_0_reg(102 DOWNTO 1) <= rd_0_reg(101 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_0_process;

  valid_header_1 <= rd_0_reg(102);

  payload_bits_per_sub_unsigned <= unsigned(payload_bits_per_sub);

  Data_Type_Conversion2_out1 <= payload_bits_per_sub_unsigned(3 DOWNTO 0);

  Constant3_out1 <= to_unsigned(16#02#, 8);

  Data_Type_Conversion7_out1 <= Constant3_out1(3 DOWNTO 0);

  
  Switch1_out1 <= Data_Type_Conversion2_out1 WHEN valid_header_1 = '0' ELSE
      Data_Type_Conversion7_out1;

  qam_demod_bits <= std_logic_vector(Switch1_out1);

END rtl;

