-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_decimator.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_decimator
-- Source Path: HDLRxDemodulator/rx_demodulator_full/decimator
-- Hierarchy Level: 1
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_decimator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END rx_demod_ip_src_decimator;


ARCHITECTURE rtl OF rx_demod_ip_src_decimator IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_rising_edge_detector_block5
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_FIR_Decimator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validIn                         :   IN    std_logic;
          softReset                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_rising_edge_detector_block5
    USE ENTITY work.rx_demod_ip_src_rising_edge_detector_block5(rtl);

  FOR ALL : rx_demod_ip_src_FIR_Decimator
    USE ENTITY work.rx_demod_ip_src_FIR_Decimator(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL rd_1_reg_re                      : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL rd_1_reg_im                      : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL data_in_re_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL rd_2_reg                         : std_logic_vector(78 DOWNTO 0);  -- ufix1 [79]
  SIGNAL valid_in_2                       : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Logical_Operator_out1_1          : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL data_out_re_1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_im_1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_out                        : std_logic;
  SIGNAL data_out_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_out_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_re_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_im_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_after_down_re               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_after_down_im               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL rd_5_reg_re                      : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL rd_5_reg_im                      : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL data_after_down_re_1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_after_down_im_1             : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  -- The data out from this blocks is "valid" one sample, and invalid four samples.
  -- This blocks makes sure that the data is valid the five cycles.
  -- What happens is that the ZOH might sample the signal when is valid or invalid.

  u_rising_edge_detector : rx_demod_ip_src_rising_edge_detector_block5
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => valid_in,
              Out_rsvd => rising_edge_detector_out1
              );

  u_FIR_Decimator : rx_demod_ip_src_FIR_Decimator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => std_logic_vector(data_in_re_1),  -- sfix16_En14
              dataIn_im => std_logic_vector(data_in_im_1),  -- sfix16_En14
              validIn => Logical_Operator_out1_1,
              softReset => rising_edge_detector_out1,
              dataOut_re => data_out_re_1,  -- sfix16_En14
              dataOut_im => data_out_im_1,  -- sfix16_En14
              validOut => valid_out
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_1_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        rd_1_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        rd_1_reg_im(0) <= data_in_im_signed;
        rd_1_reg_im(1) <= rd_1_reg_im(0);
        rd_1_reg_re(0) <= data_in_re_signed;
        rd_1_reg_re(1) <= rd_1_reg_re(0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  data_in_re_1 <= rd_1_reg_re(1);
  data_in_im_1 <= rd_1_reg_im(1);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_in_1 <= '0';
      ELSIF enb = '1' THEN
        valid_in_1 <= valid_in;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_2_reg(0) <= valid_in;
        rd_2_reg(78 DOWNTO 1) <= rd_2_reg(77 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_2_process;

  valid_in_2 <= rd_2_reg(78);

  Logical_Operator_out1 <= valid_in_1 OR valid_in_2;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Logical_Operator_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Logical_Operator_out1_1 <= Logical_Operator_out1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch_out1_re_1 <= to_signed(16#0000#, 16);
        Switch_out1_im_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Switch_out1_re_1 <= Switch_out1_re;
        Switch_out1_im_1 <= Switch_out1_im;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  
  Switch_out1_re <= Switch_out1_re_1 WHEN valid_out = '0' ELSE
      data_out_re_signed;
  
  Switch_out1_im <= Switch_out1_im_1 WHEN valid_out = '0' ELSE
      data_out_im_signed;

  -- Downsample by 2 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_after_down_re <= to_signed(16#0000#, 16);
        data_after_down_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        data_after_down_re <= Switch_out1_re;
        data_after_down_im <= Switch_out1_im;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_5_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        rd_5_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0 = '1' THEN
        rd_5_reg_im(0) <= data_after_down_im;
        rd_5_reg_im(1) <= rd_5_reg_im(0);
        rd_5_reg_re(0) <= data_after_down_re;
        rd_5_reg_re(1) <= rd_5_reg_re(0);
      END IF;
    END IF;
  END PROCESS rd_5_process;

  data_after_down_re_1 <= rd_5_reg_re(1);
  data_after_down_im_1 <= rd_5_reg_im(1);

  data_out_re <= std_logic_vector(data_after_down_re_1);

  data_out_im <= std_logic_vector(data_after_down_im_1);

END rtl;

