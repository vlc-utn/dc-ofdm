-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_symDemodBPSKVector.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_symDemodBPSKVector
-- Source Path: HDLRxDemodulator/rx_demodulator_full/qam_demod/Symbol Demodulator/symDemodBPSKVector
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- BPSK vector Demodulation
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_symDemodBPSKVector IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dataIn_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        validIn                           :   IN    std_logic;  -- ufix1
        dataOut                           :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En14
        );
END rx_demod_ip_src_symDemodBPSKVector;


ARCHITECTURE rtl OF rx_demod_ip_src_symDemodBPSKVector IS

  -- Signals
  SIGNAL in_1_pipe_out1                   : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL delayMatch_out1                  : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL cos_out1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister4_out1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_re_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_im_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL in_0_pipe_out1_re                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL in_0_pipe_out1_im                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister5_out1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL PipelineRegister2_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL HwModeRegister6_out1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL sin_out1                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister7_out1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product5_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL PipelineRegister3_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add2_sub_cast                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add2_sub_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add2_out1                        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Data_Type_Conversion10_out1      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL LUT21_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add6_sub_cast                    : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add6_sub_cast_1                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add6_out1                        : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion3_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister_out1              : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister1_out1             : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Product10_out1                   : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL HwModeRegister10_out1            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister11_out1            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product7_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL PipelineRegister5_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL HwModeRegister8_out1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister9_out1             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product6_out1                    : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL PipelineRegister4_out1           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL Add3_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add3_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Add3_out1                        : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Data_Type_Conversion2_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL LUT22_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add4_sub_cast                    : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add4_sub_cast_1                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add4_out1                        : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion4_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister12_out1            : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister13_out1            : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Product8_out1                    : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL LUT11_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add7_sub_cast                    : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_sub_cast_1                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add7_out1                        : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion5_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister2_out1             : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister3_out1             : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Product11_out1                   : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL LUT12_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Add5_sub_cast                    : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add5_sub_cast_1                  : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Add5_out1                        : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion11_out1      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister14_out1            : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister15_out1            : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Product9_out1                    : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Constant1_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL PipelineRegister_out1            : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Data_Type_Conversion6_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL PipelineRegister6_out1           : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Data_Type_Conversion7_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Subtract5_add_cast               : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Subtract5_add_cast_1             : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Subtract5_out1                   : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion12_out1      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL PipelineRegister1_out1           : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Data_Type_Conversion8_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL PipelineRegister7_out1           : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Data_Type_Conversion9_out1       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Subtract6_add_cast               : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Subtract6_add_cast_1             : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Subtract6_out1                   : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion13_out1      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Subtract2_sub_cast               : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Subtract2_sub_cast_1             : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Subtract2_out1                   : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion14_out1      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Switch1_out1                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Delay_out1                       : signed(19 DOWNTO 0);  -- sfix20_En14

BEGIN
  in_1_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in_1_pipe_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        in_1_pipe_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= in_1_pipe_out1;
        delayMatch_reg(3 DOWNTO 1) <= delayMatch_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  delayMatch_out1 <= delayMatch_reg(3);

  
  switch_compare_1 <= '1' WHEN delayMatch_out1 > '0' ELSE
      '0';

  cos_out1 <= to_signed(16#0000#, 16);

  HwModeRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister4_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister4_out1 <= cos_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  in_0_pipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        in_0_pipe_out1_re <= to_signed(16#0000#, 16);
        in_0_pipe_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        in_0_pipe_out1_re <= dataIn_re_signed;
        in_0_pipe_out1_im <= dataIn_im_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  HwModeRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister5_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister5_out1 <= in_0_pipe_out1_re;
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;


  Product4_out1 <= HwModeRegister4_out1 * HwModeRegister5_out1;

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister2_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister2_out1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  HwModeRegister6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister6_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister6_out1 <= in_0_pipe_out1_im;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  sin_out1 <= to_signed(16#4000#, 16);

  HwModeRegister7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister7_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister7_out1 <= sin_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;


  Product5_out1 <= HwModeRegister6_out1 * HwModeRegister7_out1;

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister3_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister3_out1 <= Product5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Add2_sub_cast <= resize(PipelineRegister2_out1, 33);
  Add2_sub_cast_1 <= resize(PipelineRegister3_out1, 33);
  Add2_out1 <= Add2_sub_cast - Add2_sub_cast_1;

  Data_Type_Conversion10_out1 <= resize(Add2_out1(32 DOWNTO 14), 20);

  LUT21_out1 <= to_signed(-16#0001#, 16);

  Add6_sub_cast <= resize(Data_Type_Conversion10_out1, 21);
  Add6_sub_cast_1 <= resize(LUT21_out1, 21);
  Add6_out1 <= Add6_sub_cast - Add6_sub_cast_1;

  Data_Type_Conversion3_out1 <= Add6_out1(19 DOWNTO 0);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister_out1 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister1_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister1_out1 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Product10_out1 <= HwModeRegister_out1 * HwModeRegister1_out1;

  HwModeRegister10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister10_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister10_out1 <= cos_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;


  HwModeRegister11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister11_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister11_out1 <= in_0_pipe_out1_im;
      END IF;
    END IF;
  END PROCESS HwModeRegister11_process;


  Product7_out1 <= HwModeRegister10_out1 * HwModeRegister11_out1;

  PipelineRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister5_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister5_out1 <= Product7_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  HwModeRegister8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister8_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister8_out1 <= in_0_pipe_out1_re;
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;


  HwModeRegister9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister9_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister9_out1 <= sin_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister9_process;


  Product6_out1 <= HwModeRegister8_out1 * HwModeRegister9_out1;

  PipelineRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister4_out1 <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister4_out1 <= Product6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  Add3_add_cast <= resize(PipelineRegister5_out1, 33);
  Add3_add_cast_1 <= resize(PipelineRegister4_out1, 33);
  Add3_out1 <= Add3_add_cast + Add3_add_cast_1;

  Data_Type_Conversion2_out1 <= resize(Add3_out1(32 DOWNTO 14), 20);

  LUT22_out1 <= to_signed(-16#4000#, 16);

  Add4_sub_cast <= resize(Data_Type_Conversion2_out1, 21);
  Add4_sub_cast_1 <= resize(LUT22_out1, 21);
  Add4_out1 <= Add4_sub_cast - Add4_sub_cast_1;

  Data_Type_Conversion4_out1 <= Add4_out1(19 DOWNTO 0);

  HwModeRegister12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister12_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister12_out1 <= Data_Type_Conversion4_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister12_process;


  HwModeRegister13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister13_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister13_out1 <= Data_Type_Conversion4_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister13_process;


  Product8_out1 <= HwModeRegister12_out1 * HwModeRegister13_out1;

  LUT11_out1 <= to_signed(16#0000#, 16);

  Add7_sub_cast <= resize(Data_Type_Conversion10_out1, 21);
  Add7_sub_cast_1 <= resize(LUT11_out1, 21);
  Add7_out1 <= Add7_sub_cast - Add7_sub_cast_1;

  Data_Type_Conversion5_out1 <= Add7_out1(19 DOWNTO 0);

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister2_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister2_out1 <= Data_Type_Conversion5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister3_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister3_out1 <= Data_Type_Conversion5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Product11_out1 <= HwModeRegister2_out1 * HwModeRegister3_out1;

  LUT12_out1 <= to_signed(16#4000#, 16);

  Add5_sub_cast <= resize(Data_Type_Conversion2_out1, 21);
  Add5_sub_cast_1 <= resize(LUT12_out1, 21);
  Add5_out1 <= Add5_sub_cast - Add5_sub_cast_1;

  Data_Type_Conversion11_out1 <= Add5_out1(19 DOWNTO 0);

  HwModeRegister14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister14_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister14_out1 <= Data_Type_Conversion11_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister14_process;


  HwModeRegister15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister15_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        HwModeRegister15_out1 <= Data_Type_Conversion11_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister15_process;


  Product9_out1 <= HwModeRegister14_out1 * HwModeRegister15_out1;

  Constant1_out1 <= to_signed(16#00000#, 20);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister_out1 <= to_signed(0, 40);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister_out1 <= Product10_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Data_Type_Conversion6_out1 <= PipelineRegister_out1(33 DOWNTO 14);

  PipelineRegister6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister6_out1 <= to_signed(0, 40);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister6_out1 <= Product8_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister6_process;


  Data_Type_Conversion7_out1 <= PipelineRegister6_out1(33 DOWNTO 14);

  Subtract5_add_cast <= resize(Data_Type_Conversion6_out1, 21);
  Subtract5_add_cast_1 <= resize(Data_Type_Conversion7_out1, 21);
  Subtract5_out1 <= Subtract5_add_cast + Subtract5_add_cast_1;

  Data_Type_Conversion12_out1 <= Subtract5_out1(19 DOWNTO 0);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister1_out1 <= to_signed(0, 40);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister1_out1 <= Product11_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Data_Type_Conversion8_out1 <= PipelineRegister1_out1(33 DOWNTO 14);

  PipelineRegister7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        PipelineRegister7_out1 <= to_signed(0, 40);
      ELSIF enb_1_2_0 = '1' THEN
        PipelineRegister7_out1 <= Product9_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister7_process;


  Data_Type_Conversion9_out1 <= PipelineRegister7_out1(33 DOWNTO 14);

  Subtract6_add_cast <= resize(Data_Type_Conversion8_out1, 21);
  Subtract6_add_cast_1 <= resize(Data_Type_Conversion9_out1, 21);
  Subtract6_out1 <= Subtract6_add_cast + Subtract6_add_cast_1;

  Data_Type_Conversion13_out1 <= Subtract6_out1(19 DOWNTO 0);

  Subtract2_sub_cast <= resize(Data_Type_Conversion12_out1, 21);
  Subtract2_sub_cast_1 <= resize(Data_Type_Conversion13_out1, 21);
  Subtract2_out1 <= Subtract2_sub_cast - Subtract2_sub_cast_1;

  Data_Type_Conversion14_out1 <= Subtract2_out1(19 DOWNTO 0);

  
  Switch1_out1 <= Constant1_out1 WHEN switch_compare_1 = '0' ELSE
      Data_Type_Conversion14_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(16#00000#, 20);
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  dataOut <= std_logic_vector(Delay_out1);

END rtl;

