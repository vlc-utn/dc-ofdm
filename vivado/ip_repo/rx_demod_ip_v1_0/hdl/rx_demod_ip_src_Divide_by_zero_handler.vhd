-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_Divide_by_zero_handler.vhd
-- Created: 2024-09-22 18:53:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_Divide_by_zero_handler
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/m_cox/Real Divide HDL Optimized/ForEach - Real 
-- Divide/Divide by zero handle
-- Hierarchy Level: 5
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_Divide_by_zero_handler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        yIn                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
        yOut                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END rx_demod_ip_src_Divide_by_zero_handler;


ARCHITECTURE rtl OF rx_demod_ip_src_Divide_by_zero_handler IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_Compare_To_Zero
    PORT( u                               :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En30
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_Compare_To_Zero
    USE ENTITY work.rx_demod_ip_src_Compare_To_Zero(rtl);

  -- Signals
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL Delay13_out1                     : std_logic;
  SIGNAL Delay13_out1_1                   : std_logic;
  SIGNAL Delay13_out1_2                   : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant3_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant3_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant4_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant4_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch_out1_1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay3_bypass_reg                : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  u_Compare_To_Zero : rx_demod_ip_src_Compare_To_Zero
    PORT MAP( u => yIn,  -- sfix32_En30
              y => Compare_To_Zero_out1
              );

  Delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay13_out1 <= Compare_To_Zero_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  Delay13_out1_1 <= Delay13_out1;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay13_out1_2 <= Delay13_out1_1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  
  switch_compare_1 <= '1' WHEN Delay13_out1_2 > '0' ELSE
      '0';

  Constant3_out1 <= to_signed(-16#8000#, 16);

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Constant3_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Constant3_out1_1 <= Constant3_out1;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Constant4_out1 <= to_signed(16#7FFF#, 16);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Constant4_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Constant4_out1_1 <= Constant4_out1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  Switch_out1 <= Constant3_out1_1 WHEN switch_compare_1 = '0' ELSE
      Constant4_out1_1;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch_out1_1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Switch_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  yOut <= std_logic_vector(Delay3_out1);

END rtl;

