-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_sync_constellation_scrambler.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_sync_constellation_scrambler
-- Source Path: HDLRxDemodulator/rx_demodulator_full/constellation_descrambler/sync_constellation_scrambler
-- Hierarchy Level: 2
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_sync_constellation_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_symbol                   :   IN    std_logic;
        s1                                :   OUT   std_logic;
        s2                                :   OUT   std_logic
        );
END rx_demod_ip_src_sync_constellation_scrambler;


ARCHITECTURE rtl OF rx_demod_ip_src_sync_constellation_scrambler IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_Synchronous_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_ofdm_symbol                 :   IN    std_logic;
          s1_out                          :   OUT   std_logic;
          s2_out                          :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_Synchronous_constellation_scrambler
    USE ENTITY work.rx_demod_ip_src_Synchronous_constellation_scrambler(rtl);

  -- Signals
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL s1_1                             : std_logic;
  SIGNAL s2_1                             : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  u_Synchronous_constellation_scrambler : rx_demod_ip_src_Synchronous_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              valid_in => Logical_Operator_out1,
              init => init,  -- boolean [13]
              new_ofdm_symbol => new_ofdm_symbol,
              s1_out => s1_1,
              s2_out => s2_1
              );

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Logical_Operator_out1 <= valid_in OR Delay2_out1;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay_out1 <= s1_1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_out1 <= s2_1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  s1 <= Delay_out1;

  s2 <= Delay1_out1;

END rtl;

