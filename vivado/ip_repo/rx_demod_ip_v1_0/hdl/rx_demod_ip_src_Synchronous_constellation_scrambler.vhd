-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_Synchronous_constellation_scrambler.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_Synchronous_constellation_scrambler
-- Source Path: HDLRxDemodulator/rx_demodulator_full/constellation_descrambler/sync_constellation_scrambler/Synchronous 
-- constellation scramble
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_Synchronous_constellation_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_symbol                   :   IN    std_logic;
        s1_out                            :   OUT   std_logic;
        s2_out                            :   OUT   std_logic
        );
END rx_demod_ip_src_Synchronous_constellation_scrambler;


ARCHITECTURE rtl OF rx_demod_ip_src_Synchronous_constellation_scrambler IS

  -- Signals
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL From41_out1                      : std_logic;
  SIGNAL new_ofdm_symbol_1                : std_logic;
  SIGNAL From39_out1                      : std_logic;
  SIGNAL From33_out1                      : std_logic;
  SIGNAL From24_out1                      : std_logic;
  SIGNAL From21_out1                      : std_logic;
  SIGNAL From12_out1                      : std_logic;
  SIGNAL From3_out1                       : std_logic;
  SIGNAL From1_out1                       : std_logic;
  SIGNAL From36_out1                      : std_logic;
  SIGNAL From30_out1                      : std_logic;
  SIGNAL From28_out1                      : std_logic;
  SIGNAL From18_out1                      : std_logic;
  SIGNAL From16_out1                      : std_logic;
  SIGNAL init_1                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_2                           : std_logic;
  SIGNAL init_4                           : std_logic;
  SIGNAL init_6                           : std_logic;
  SIGNAL init_8                           : std_logic;
  SIGNAL init_10                          : std_logic;
  SIGNAL init_12                          : std_logic;
  SIGNAL init_1_1                         : std_logic;
  SIGNAL From2_out1                       : std_logic;
  SIGNAL init_3                           : std_logic;
  SIGNAL init_5                           : std_logic;
  SIGNAL init_7                           : std_logic;
  SIGNAL init_9                           : std_logic;
  SIGNAL init_11                          : std_logic;
  SIGNAL init_0                           : std_logic;
  SIGNAL From40_out1                      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL From55_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL From59_out1                      : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL s1_1                             : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Delay2_delOut                    : std_logic;
  SIGNAL Delay2_ectrl                     : std_logic;
  SIGNAL Delay2_ectrl_1                   : std_logic;
  SIGNAL Delay2_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay2_delOut_1                  : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_out1_1                    : std_logic;
  SIGNAL Delay2_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay2_last_value                : std_logic;
  SIGNAL Delay2_last_value_1              : std_logic;
  SIGNAL Switch4_out1                     : std_logic;
  SIGNAL Switch4_out1_1                   : std_logic;
  SIGNAL Delay4_delOut                    : std_logic;
  SIGNAL Delay4_delOut_1                  : std_logic;
  SIGNAL Delay4_ectrl                     : std_logic;
  SIGNAL Delay4_ectrl_1                   : std_logic;
  SIGNAL Delay4_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay4_delOut_2                  : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay4_out1_1                    : std_logic;
  SIGNAL Delay4_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay4_last_value                : std_logic;
  SIGNAL Delay4_last_value_1              : std_logic;
  SIGNAL Switch6_out1                     : std_logic;
  SIGNAL Switch6_out1_1                   : std_logic;
  SIGNAL Delay6_delOut                    : std_logic;
  SIGNAL Delay6_delOut_1                  : std_logic;
  SIGNAL Delay6_ectrl                     : std_logic;
  SIGNAL Delay6_ectrl_1                   : std_logic;
  SIGNAL Delay6_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay6_delOut_2                  : std_logic;
  SIGNAL Delay6_out1_1                    : std_logic;
  SIGNAL Delay6_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay6_last_value                : std_logic;
  SIGNAL Delay6_last_value_1              : std_logic;
  SIGNAL Switch8_out1                     : std_logic;
  SIGNAL Switch8_out1_1                   : std_logic;
  SIGNAL Delay8_delOut                    : std_logic;
  SIGNAL Delay8_delOut_1                  : std_logic;
  SIGNAL Delay8_ectrl                     : std_logic;
  SIGNAL Delay8_ectrl_1                   : std_logic;
  SIGNAL Delay8_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay8_delOut_2                  : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay8_out1_1                    : std_logic;
  SIGNAL Delay8_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay8_last_value                : std_logic;
  SIGNAL Delay8_last_value_1              : std_logic;
  SIGNAL Switch10_out1                    : std_logic;
  SIGNAL Switch10_out1_1                  : std_logic;
  SIGNAL Delay10_delOut                   : std_logic;
  SIGNAL Delay10_delOut_1                 : std_logic;
  SIGNAL Delay10_ectrl                    : std_logic;
  SIGNAL Delay10_ectrl_1                  : std_logic;
  SIGNAL Delay10_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay10_delOut_2                 : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay10_out1_1                   : std_logic;
  SIGNAL Delay10_bypass_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay10_last_value               : std_logic;
  SIGNAL Delay10_last_value_1             : std_logic;
  SIGNAL Switch12_out1                    : std_logic;
  SIGNAL Switch12_out1_1                  : std_logic;
  SIGNAL Delay12_delOut                   : std_logic;
  SIGNAL Delay12_delOut_1                 : std_logic;
  SIGNAL Delay12_ectrl                    : std_logic;
  SIGNAL Delay12_ectrl_1                  : std_logic;
  SIGNAL Delay12_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay12_delOut_2                 : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay12_out1_1                   : std_logic;
  SIGNAL Delay12_bypass_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay12_last_value               : std_logic;
  SIGNAL Delay12_last_value_1             : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL XOR3_out1                        : std_logic;
  SIGNAL XOR4_out1                        : std_logic;
  SIGNAL XOR4_out1_1                      : std_logic;
  SIGNAL XOR5_out1                        : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Delay1_delOut                    : std_logic;
  SIGNAL Delay1_delOut_1                  : std_logic;
  SIGNAL Delay1_ectrl                     : std_logic;
  SIGNAL Delay1_ectrl_1                   : std_logic;
  SIGNAL Delay1_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay1_delOut_2                  : std_logic;
  SIGNAL s2                               : std_logic;
  SIGNAL s2_1                             : std_logic;
  SIGNAL Delay1_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay1_last_value                : std_logic;
  SIGNAL Delay1_last_value_1              : std_logic;
  SIGNAL s2_2                             : std_logic;
  SIGNAL Switch3_out1                     : std_logic;
  SIGNAL Delay3_delOut                    : std_logic;
  SIGNAL Delay3_ectrl                     : std_logic;
  SIGNAL Delay3_ectrl_1                   : std_logic;
  SIGNAL Delay3_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay3_delOut_1                  : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay3_out1_1                    : std_logic;
  SIGNAL Delay3_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay3_last_value                : std_logic;
  SIGNAL Delay3_last_value_1              : std_logic;
  SIGNAL Switch5_out1                     : std_logic;
  SIGNAL Switch5_out1_1                   : std_logic;
  SIGNAL Delay5_delOut                    : std_logic;
  SIGNAL Delay5_delOut_1                  : std_logic;
  SIGNAL Delay5_ectrl                     : std_logic;
  SIGNAL Delay5_ectrl_1                   : std_logic;
  SIGNAL Delay5_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay5_delOut_2                  : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay5_out1_1                    : std_logic;
  SIGNAL Delay5_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay5_last_value                : std_logic;
  SIGNAL Delay5_last_value_1              : std_logic;
  SIGNAL Switch7_out1                     : std_logic;
  SIGNAL Switch7_out1_1                   : std_logic;
  SIGNAL Delay7_delOut                    : std_logic;
  SIGNAL Delay7_delOut_1                  : std_logic;
  SIGNAL Delay7_ectrl                     : std_logic;
  SIGNAL Delay7_ectrl_1                   : std_logic;
  SIGNAL Delay7_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay7_delOut_2                  : std_logic;
  SIGNAL Delay7_out1_1                    : std_logic;
  SIGNAL Delay7_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay7_last_value                : std_logic;
  SIGNAL Delay7_last_value_1              : std_logic;
  SIGNAL Switch9_out1                     : std_logic;
  SIGNAL Switch9_out1_1                   : std_logic;
  SIGNAL Delay9_delOut                    : std_logic;
  SIGNAL Delay9_delOut_1                  : std_logic;
  SIGNAL Delay9_ectrl                     : std_logic;
  SIGNAL Delay9_ectrl_1                   : std_logic;
  SIGNAL Delay9_lowered_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay9_delOut_2                  : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay9_out1_1                    : std_logic;
  SIGNAL Delay9_bypass_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay9_last_value                : std_logic;
  SIGNAL Delay9_last_value_1              : std_logic;
  SIGNAL Switch11_out1                    : std_logic;
  SIGNAL Switch11_out1_1                  : std_logic;
  SIGNAL Delay11_delOut                   : std_logic;
  SIGNAL Delay11_delOut_1                 : std_logic;
  SIGNAL Delay11_ectrl                    : std_logic;
  SIGNAL Delay11_ectrl_1                  : std_logic;
  SIGNAL Delay11_lowered_bypass_reg       : std_logic;  -- ufix1
  SIGNAL Delay11_delOut_2                 : std_logic;
  SIGNAL Delay11_out1_1                   : std_logic;
  SIGNAL Delay11_bypass_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay11_last_value               : std_logic;
  SIGNAL Delay11_last_value_1             : std_logic;
  SIGNAL XOR_out1                         : std_logic;
  SIGNAL XOR1_out1                        : std_logic;
  SIGNAL XOR1_out1_1                      : std_logic;
  SIGNAL XOR2_out1                        : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Delay_delOut                     : std_logic;
  SIGNAL Delay_delOut_1                   : std_logic;
  SIGNAL Delay_ectrl                      : std_logic;
  SIGNAL Delay_ectrl_1                    : std_logic;
  SIGNAL Delay_lowered_bypass_reg         : std_logic;  -- ufix1
  SIGNAL Delay_delOut_2                   : std_logic;
  SIGNAL s1_2                             : std_logic;
  SIGNAL Delay_bypass_bypass_reg          : std_logic;  -- ufix1
  SIGNAL Delay_last_value                 : std_logic;
  SIGNAL Delay_last_value_1               : std_logic;
  SIGNAL t1_bypass_reg                    : std_logic;  -- ufix1
  SIGNAL s1_3                             : std_logic;
  SIGNAL t_bypass_reg                     : std_logic;  -- ufix1
  SIGNAL s2_3                             : std_logic;

BEGIN
  valid_in_1 <= valid_in;

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From41_out1 <= '0';
      ELSIF enb = '1' THEN
        From41_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  new_ofdm_symbol_1 <= new_ofdm_symbol;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From39_out1 <= '0';
      ELSIF enb = '1' THEN
        From39_out1 <= new_ofdm_symbol_1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  rd_46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From33_out1 <= '0';
      ELSIF enb = '1' THEN
        From33_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_46_process;


  rd_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From24_out1 <= '0';
      ELSIF enb = '1' THEN
        From24_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  rd_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From21_out1 <= '0';
      ELSIF enb = '1' THEN
        From21_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  rd_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From12_out1 <= '0';
      ELSIF enb = '1' THEN
        From12_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_31_process;


  rd_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From3_out1 <= '0';
      ELSIF enb = '1' THEN
        From3_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_24_process;


  rd_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From1_out1 <= '0';
      ELSIF enb = '1' THEN
        From1_out1 <= new_ofdm_symbol_1;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  rd_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From36_out1 <= '0';
      ELSIF enb = '1' THEN
        From36_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_52_process;


  rd_56_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From30_out1 <= '0';
      ELSIF enb = '1' THEN
        From30_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_56_process;


  rd_62_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From28_out1 <= '0';
      ELSIF enb = '1' THEN
        From28_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_62_process;


  rd_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From18_out1 <= '0';
      ELSIF enb = '1' THEN
        From18_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From16_out1 <= '0';
      ELSIF enb = '1' THEN
        From16_out1 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  init_1 <= init;

  init_2 <= init_1(2);

  init_4 <= init_1(4);

  init_6 <= init_1(6);

  init_8 <= init_1(8);

  init_10 <= init_1(10);

  init_12 <= init_1(12);

  init_1_1 <= init_1(1);

  rd_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From2_out1 <= '0';
      ELSIF enb = '1' THEN
        From2_out1 <= init_1_1;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  init_3 <= init_1(3);

  init_5 <= init_1(5);

  init_7 <= init_1(7);

  init_9 <= init_1(9);

  init_11 <= init_1(11);

  init_0 <= init_1(0);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From40_out1 <= '0';
      ELSIF enb = '1' THEN
        From40_out1 <= init_0;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From55_out1 <= '0';
      ELSIF enb = '1' THEN
        From55_out1 <= Delay6_out1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  rd_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        From59_out1 <= '0';
      ELSIF enb = '1' THEN
        From59_out1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  s1_1 <= s1;

  
  Switch2_out1 <= s1_1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_2;

  
  Delay2_ectrl <= Delay2_delOut WHEN valid_in_1 = '0' ELSE
      Switch2_out1;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_ectrl_1 <= Delay2_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay2_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_lowered_bypass_reg <= Delay2_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_bypass_process;

  
  Delay2_delOut_1 <= Delay2_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay2_lowered_bypass_reg;

  Delay2_delOut <= Delay2_delOut_1;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1_1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay2_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_bypass_reg <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_bypass_process;

  
  Delay2_last_value <= Delay2_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_bypass_reg;

  Delay2_last_value_1 <= Delay2_last_value;

  
  Delay2_out1 <= Delay2_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay2_delOut;

  
  Switch4_out1 <= Delay2_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_4;

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch4_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch4_out1_1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_delOut_1 <= Delay4_delOut;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  
  Delay4_ectrl <= Delay4_delOut_1 WHEN From16_out1 = '0' ELSE
      Switch4_out1_1;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_ectrl_1 <= Delay4_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay4_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay4_lowered_bypass_reg <= Delay4_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay4_lowered_bypass_process;

  
  Delay4_delOut_2 <= Delay4_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay4_lowered_bypass_reg;

  Delay4_delOut <= Delay4_delOut_2;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1_1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay4_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay4_bypass_bypass_reg <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_bypass_process;

  
  Delay4_last_value <= Delay4_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay4_bypass_bypass_reg;

  Delay4_last_value_1 <= Delay4_last_value;

  
  Delay4_out1 <= Delay4_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay4_delOut;

  
  Switch6_out1 <= Delay4_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_6;

  rd_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch6_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch6_out1_1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS rd_15_process;


  rd_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_delOut_1 <= Delay6_delOut;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  
  Delay6_ectrl <= Delay6_delOut_1 WHEN From18_out1 = '0' ELSE
      Switch6_out1_1;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_ectrl_1 <= Delay6_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Delay6_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay6_lowered_bypass_reg <= Delay6_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay6_lowered_bypass_process;

  
  Delay6_delOut_2 <= Delay6_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay6_lowered_bypass_reg;

  Delay6_delOut <= Delay6_delOut_2;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1_1 <= Delay6_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Delay6_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay6_bypass_bypass_reg <= Delay6_out1_1;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_bypass_process;

  
  Delay6_last_value <= Delay6_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay6_bypass_bypass_reg;

  Delay6_last_value_1 <= Delay6_last_value;

  
  Delay6_out1 <= Delay6_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay6_delOut;

  
  Switch8_out1 <= Delay6_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_8;

  rd_61_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch8_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch8_out1_1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS rd_61_process;


  rd_63_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_delOut_1 <= Delay8_delOut;
      END IF;
    END IF;
  END PROCESS rd_63_process;


  
  Delay8_ectrl <= Delay8_delOut_1 WHEN From28_out1 = '0' ELSE
      Switch8_out1_1;

  crp_out_delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_ectrl_1 <= Delay8_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay25_process;


  Delay8_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay8_lowered_bypass_reg <= Delay8_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay8_lowered_bypass_process;

  
  Delay8_delOut_2 <= Delay8_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay8_lowered_bypass_reg;

  Delay8_delOut <= Delay8_delOut_2;

  crp_out_delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay8_out1_1 <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay24_process;


  Delay8_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay8_bypass_bypass_reg <= Delay8_out1_1;
      END IF;
    END IF;
  END PROCESS Delay8_bypass_bypass_process;

  
  Delay8_last_value <= Delay8_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay8_bypass_bypass_reg;

  Delay8_last_value_1 <= Delay8_last_value;

  
  Delay8_out1 <= Delay8_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay8_delOut;

  
  Switch10_out1 <= Delay8_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_10;

  rd_55_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch10_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch10_out1_1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS rd_55_process;


  rd_57_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_delOut_1 <= Delay10_delOut;
      END IF;
    END IF;
  END PROCESS rd_57_process;


  
  Delay10_ectrl <= Delay10_delOut_1 WHEN From30_out1 = '0' ELSE
      Switch10_out1_1;

  crp_out_delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_ectrl_1 <= Delay10_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay22_process;


  Delay10_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay10_lowered_bypass_reg <= Delay10_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay10_lowered_bypass_process;

  
  Delay10_delOut_2 <= Delay10_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay10_lowered_bypass_reg;

  Delay10_delOut <= Delay10_delOut_2;

  crp_out_delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay10_out1_1 <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay23_process;


  Delay10_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay10_bypass_bypass_reg <= Delay10_out1_1;
      END IF;
    END IF;
  END PROCESS Delay10_bypass_bypass_process;

  
  Delay10_last_value <= Delay10_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay10_bypass_bypass_reg;

  Delay10_last_value_1 <= Delay10_last_value;

  
  Delay10_out1 <= Delay10_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay10_delOut;

  
  Switch12_out1 <= Delay10_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_12;

  rd_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch12_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch12_out1_1 <= Switch12_out1;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  rd_53_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_delOut_1 <= Delay12_delOut;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  
  Delay12_ectrl <= Delay12_delOut_1 WHEN From36_out1 = '0' ELSE
      Switch12_out1_1;

  crp_out_delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_ectrl_1 <= Delay12_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay21_process;


  Delay12_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay12_lowered_bypass_reg <= Delay12_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay12_lowered_bypass_process;

  
  Delay12_delOut_2 <= Delay12_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay12_lowered_bypass_reg;

  Delay12_delOut <= Delay12_delOut_2;

  crp_out_delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay12_out1_1 <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay20_process;


  Delay12_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay12_bypass_bypass_reg <= Delay12_out1_1;
      END IF;
    END IF;
  END PROCESS Delay12_bypass_bypass_process;

  
  Delay12_last_value <= Delay12_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay12_bypass_bypass_reg;

  Delay12_last_value_1 <= Delay12_last_value;

  
  Delay12_out1 <= Delay12_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay12_delOut;

  XOR3_out1 <= Delay12_out1 XOR Delay11_out1;

  XOR4_out1 <= XOR3_out1 XOR Delay10_out1;

  rd_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        XOR4_out1_1 <= '0';
      ELSIF enb = '1' THEN
        XOR4_out1_1 <= XOR4_out1;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  XOR5_out1 <= XOR4_out1_1 XOR From59_out1;

  
  Switch1_out1 <= XOR5_out1 WHEN From1_out1 = '0' ELSE
      From2_out1;

  rd_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_delOut_1 <= Delay1_delOut;
      END IF;
    END IF;
  END PROCESS rd_25_process;


  
  Delay1_ectrl <= Delay1_delOut_1 WHEN From3_out1 = '0' ELSE
      Switch1_out1;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_ectrl_1 <= Delay1_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay1_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_lowered_bypass_reg <= Delay1_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_bypass_process;

  
  Delay1_delOut_2 <= Delay1_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay1_lowered_bypass_reg;

  Delay1_delOut <= Delay1_delOut_2;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s2_1 <= '0';
      ELSIF enb = '1' THEN
        s2_1 <= s2;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay1_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_bypass_reg <= s2_1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_bypass_process;

  
  Delay1_last_value <= s2_1 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_bypass_reg;

  Delay1_last_value_1 <= Delay1_last_value;

  
  s2 <= Delay1_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay1_delOut;

  s2_2 <= s2;

  
  Switch3_out1 <= s2_2 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_3;

  
  Delay3_ectrl <= Delay3_delOut WHEN valid_in_1 = '0' ELSE
      Switch3_out1;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_ectrl_1 <= Delay3_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay3_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_lowered_bypass_reg <= Delay3_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay3_lowered_bypass_process;

  
  Delay3_delOut_1 <= Delay3_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay3_lowered_bypass_reg;

  Delay3_delOut <= Delay3_delOut_1;

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Delay3_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_bypass_reg <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_bypass_process;

  
  Delay3_last_value <= Delay3_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_bypass_reg;

  Delay3_last_value_1 <= Delay3_last_value;

  
  Delay3_out1 <= Delay3_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay3_delOut;

  
  Switch5_out1 <= Delay3_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_5;

  rd_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch5_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch5_out1_1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS rd_30_process;


  rd_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_delOut_1 <= Delay5_delOut;
      END IF;
    END IF;
  END PROCESS rd_32_process;


  
  Delay5_ectrl <= Delay5_delOut_1 WHEN From12_out1 = '0' ELSE
      Switch5_out1_1;

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_ectrl_1 <= Delay5_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Delay5_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay5_lowered_bypass_reg <= Delay5_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay5_lowered_bypass_process;

  
  Delay5_delOut_2 <= Delay5_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay5_lowered_bypass_reg;

  Delay5_delOut <= Delay5_delOut_2;

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1_1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  Delay5_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay5_bypass_bypass_reg <= Delay5_out1_1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_bypass_process;

  
  Delay5_last_value <= Delay5_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay5_bypass_bypass_reg;

  Delay5_last_value_1 <= Delay5_last_value;

  
  Delay5_out1 <= Delay5_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay5_delOut;

  
  Switch7_out1 <= Delay5_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_7;

  rd_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch7_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch7_out1_1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  rd_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_delOut_1 <= Delay7_delOut;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  
  Delay7_ectrl <= Delay7_delOut_1 WHEN From21_out1 = '0' ELSE
      Switch7_out1_1;

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_ectrl_1 <= Delay7_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Delay7_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay7_lowered_bypass_reg <= Delay7_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay7_lowered_bypass_process;

  
  Delay7_delOut_2 <= Delay7_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay7_lowered_bypass_reg;

  Delay7_delOut <= Delay7_delOut_2;

  crp_out_delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1_1 <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay15_process;


  Delay7_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay7_bypass_bypass_reg <= Delay7_out1_1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_bypass_process;

  
  Delay7_last_value <= Delay7_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay7_bypass_bypass_reg;

  Delay7_last_value_1 <= Delay7_last_value;

  
  Delay7_out1 <= Delay7_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay7_delOut;

  
  Switch9_out1 <= Delay7_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_9;

  rd_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch9_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch9_out1_1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  rd_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_delOut_1 <= Delay9_delOut;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  
  Delay9_ectrl <= Delay9_delOut_1 WHEN From24_out1 = '0' ELSE
      Switch9_out1_1;

  crp_out_delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_ectrl_1 <= Delay9_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay16_process;


  Delay9_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay9_lowered_bypass_reg <= Delay9_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay9_lowered_bypass_process;

  
  Delay9_delOut_2 <= Delay9_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay9_lowered_bypass_reg;

  Delay9_delOut <= Delay9_delOut_2;

  crp_out_delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay9_out1_1 <= Delay9_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay17_process;


  Delay9_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay9_bypass_bypass_reg <= Delay9_out1_1;
      END IF;
    END IF;
  END PROCESS Delay9_bypass_bypass_process;

  
  Delay9_last_value <= Delay9_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay9_bypass_bypass_reg;

  Delay9_last_value_1 <= Delay9_last_value;

  
  Delay9_out1 <= Delay9_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay9_delOut;

  
  Switch11_out1 <= Delay9_out1 WHEN new_ofdm_symbol_1 = '0' ELSE
      init_11;

  rd_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch11_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch11_out1_1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  rd_47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_delOut_1 <= Delay11_delOut;
      END IF;
    END IF;
  END PROCESS rd_47_process;


  
  Delay11_ectrl <= Delay11_delOut_1 WHEN From33_out1 = '0' ELSE
      Switch11_out1_1;

  crp_out_delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_ectrl_1 <= Delay11_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay18_process;


  Delay11_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay11_lowered_bypass_reg <= Delay11_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay11_lowered_bypass_process;

  
  Delay11_delOut_2 <= Delay11_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay11_lowered_bypass_reg;

  Delay11_delOut <= Delay11_delOut_2;

  crp_out_delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Delay11_out1_1 <= Delay11_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay19_process;


  Delay11_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay11_bypass_bypass_reg <= Delay11_out1_1;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_bypass_process;

  
  Delay11_last_value <= Delay11_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay11_bypass_bypass_reg;

  Delay11_last_value_1 <= Delay11_last_value;

  
  Delay11_out1 <= Delay11_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay11_delOut;

  XOR_out1 <= Delay11_out1 XOR Delay10_out1;

  XOR1_out1 <= XOR_out1 XOR Delay9_out1;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        XOR1_out1_1 <= '0';
      ELSIF enb = '1' THEN
        XOR1_out1_1 <= XOR1_out1;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  XOR2_out1 <= XOR1_out1_1 XOR From55_out1;

  
  Switch_out1 <= XOR2_out1 WHEN From39_out1 = '0' ELSE
      From40_out1;

  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_delOut_1 <= '0';
      ELSIF enb = '1' THEN
        Delay_delOut_1 <= Delay_delOut;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  
  Delay_ectrl <= Delay_delOut_1 WHEN From41_out1 = '0' ELSE
      Switch_out1;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_ectrl_1 <= '0';
      ELSIF enb = '1' THEN
        Delay_ectrl_1 <= Delay_ectrl;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay_lowered_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_lowered_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay_lowered_bypass_reg <= Delay_ectrl_1;
      END IF;
    END IF;
  END PROCESS Delay_lowered_bypass_process;

  
  Delay_delOut_2 <= Delay_ectrl_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_lowered_bypass_reg;

  Delay_delOut <= Delay_delOut_2;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        s1_2 <= '0';
      ELSIF enb = '1' THEN
        s1_2 <= s1;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_bypass_reg <= s1_2;
      END IF;
    END IF;
  END PROCESS Delay_bypass_bypass_process;

  
  Delay_last_value <= s1_2 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_bypass_reg;

  Delay_last_value_1 <= Delay_last_value;

  
  s1 <= Delay_last_value_1 WHEN valid_in_1 = '0' ELSE
      Delay_delOut;

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t1_bypass_reg <= s1;
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  s1_3 <= s1 WHEN enb_1_2_1 = '1' ELSE
      t1_bypass_reg;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t_bypass_reg <= s2;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  s2_3 <= s2 WHEN enb_1_2_1 = '1' ELSE
      t_bypass_reg;

  s1_out <= s1_3;

  s2_out <= s2_3;

END rtl;

