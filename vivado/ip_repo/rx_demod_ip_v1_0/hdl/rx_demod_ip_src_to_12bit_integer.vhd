-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_to_12bit_integer.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_to_12bit_integer
-- Source Path: HDLRxDemodulator/rx_demodulator_full/qam_demod/to_12bit_integer
-- Hierarchy Level: 2
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_to_12bit_integer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        alpha1bit                         :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En14
        alpha2bit                         :   IN    vector_of_std_logic_vector20(0 TO 1);  -- sfix20_En14 [2]
        alpha4bit                         :   IN    vector_of_std_logic_vector20(0 TO 3);  -- sfix20_En14 [4]
        alpha1bit_out                     :   OUT   vector_of_std_logic_vector20(0 TO 3);  -- sfix20_En14 [4]
        alpha2bit_out                     :   OUT   vector_of_std_logic_vector20(0 TO 3);  -- sfix20_En14 [4]
        alpha4bit_out                     :   OUT   vector_of_std_logic_vector20(0 TO 3)  -- sfix20_En14 [4]
        );
END rx_demod_ip_src_to_12bit_integer;


ARCHITECTURE rtl OF rx_demod_ip_src_to_12bit_integer IS

  -- Signals
  SIGNAL Constant2_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Constant1_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Constant_out1                    : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Vector_Concatenate2_out1         : vector_of_signed20(0 TO 3);  -- sfix20_En14 [4]
  SIGNAL Constant14_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Constant12_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL alpha2bit_signed                 : vector_of_signed20(0 TO 1);  -- sfix20_En14 [2]
  SIGNAL alpha2bit_1                      : vector_of_signed20(0 TO 1);  -- sfix20_En14 [2]
  SIGNAL Vector_Concatenate1_out1         : vector_of_signed20(0 TO 3);  -- sfix20_En14 [4]

BEGIN
  Constant2_out1 <= to_signed(16#00000#, 20);

  Constant1_out1 <= to_signed(16#00000#, 20);

  Constant_out1 <= to_signed(16#00000#, 20);

  Vector_Concatenate2_out1(0) <= Constant2_out1;
  Vector_Concatenate2_out1(1) <= Constant1_out1;
  Vector_Concatenate2_out1(2) <= Constant_out1;
  Vector_Concatenate2_out1(3) <= signed(alpha1bit);

  outputgen2: FOR k IN 0 TO 3 GENERATE
    alpha1bit_out(k) <= std_logic_vector(Vector_Concatenate2_out1(k));
  END GENERATE;

  Constant14_out1 <= to_signed(16#00000#, 20);

  Constant12_out1 <= to_signed(16#00000#, 20);

  outputgen1: FOR k IN 0 TO 1 GENERATE
    alpha2bit_signed(k) <= signed(alpha2bit(k));
  END GENERATE;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        alpha2bit_1 <= (OTHERS => to_signed(16#00000#, 20));
      ELSIF enb = '1' THEN
        alpha2bit_1 <= alpha2bit_signed;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  Vector_Concatenate1_out1(0) <= Constant14_out1;
  Vector_Concatenate1_out1(1) <= Constant12_out1;
  Vector_Concatenate1_out1(2) <= alpha2bit_1(0);
  Vector_Concatenate1_out1(3) <= alpha2bit_1(1);

  outputgen: FOR k IN 0 TO 3 GENERATE
    alpha2bit_out(k) <= std_logic_vector(Vector_Concatenate1_out1(k));
  END GENERATE;

  alpha4bit_out <= alpha4bit;

END rtl;

