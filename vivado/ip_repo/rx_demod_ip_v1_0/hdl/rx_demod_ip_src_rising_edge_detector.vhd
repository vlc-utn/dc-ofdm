-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_rising_edge_detector.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_rising_edge_detector
-- Source Path: HDLRxDemodulator/rx_demodulator_full/channel_estimation_and_equalization/Channel Equalization/rising_edge_detector
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY rx_demod_ip_src_rising_edge_detector IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        In_rsvd                           :   IN    std_logic;
        Out_rsvd                          :   OUT   std_logic
        );
END rx_demod_ip_src_rising_edge_detector;


ARCHITECTURE rtl OF rx_demod_ip_src_rising_edge_detector IS

  -- Signals
  SIGNAL rd_0_reg                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL In_rsvd_1                        : std_logic;
  SIGNAL rd_1_reg                         : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL In_rsvd_2                        : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;

BEGIN
  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_0_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_0_reg(0) <= In_rsvd;
        rd_0_reg(2 DOWNTO 1) <= rd_0_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_0_process;

  In_rsvd_1 <= rd_0_reg(2);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        rd_1_reg(0) <= In_rsvd;
        rd_1_reg(3 DOWNTO 1) <= rd_1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  In_rsvd_2 <= rd_1_reg(3);

  Logical_Operator2_out1 <=  NOT In_rsvd_2;

  Logical_Operator1_out1 <= In_rsvd_1 AND Logical_Operator2_out1;

  Out_rsvd <= Logical_Operator1_out1;

END rtl;

