-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_calculate_P.vhd
-- Created: 2024-09-22 18:53:33
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_calculate_P
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/m_cox/calculate_P
-- Hierarchy Level: 3
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_calculate_P IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        r_d_re                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        r_d_im                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        alphaP_d_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        P_d_re                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        P_d_im                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END rx_demod_ip_src_calculate_P;


ARCHITECTURE rtl OF rx_demod_ip_src_calculate_P IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_SimpleDualPortRAM_generic_block1
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_complex_multiplier
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          in_a_re                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          in_a_im                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          in_b_re                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          in_b_im                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          a_times_b_re                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          a_times_b_im                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_complex_multiplier1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          in_a_re                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          in_a_im                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          in_b_re                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          in_b_im                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          a_times_b_re                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
          a_times_b_im                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_SimpleDualPortRAM_generic_block1
    USE ENTITY work.rx_demod_ip_src_SimpleDualPortRAM_generic_block1(rtl);

  FOR ALL : rx_demod_ip_src_complex_multiplier
    USE ENTITY work.rx_demod_ip_src_complex_multiplier(rtl);

  FOR ALL : rx_demod_ip_src_complex_multiplier1
    USE ENTITY work.rx_demod_ip_src_complex_multiplier1(rtl);

  -- Signals
  SIGNAL r_d_re_signed                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_im_signed                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL mergedDelay_waddr                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL mergedDelay_wrenb                : std_logic;  -- ufix1
  SIGNAL mergedDelay_raddr                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL mergedOutput                     : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL imagOutput                       : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_L_im                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_L_re                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL mergedInput                      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regin                : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout               : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL mergedDelay_regout_unsigned      : unsigned(127 DOWNTO 0);  -- ufix128
  SIGNAL slicedInput_1                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL realOutput                       : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL conj_cast                        : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL conj_cast_1                      : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Conjugate1_out1_re               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Conjugate1_out1_im               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL complex_multiplier_out1_re       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL complex_multiplier_out1_im       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL slicedInput_2                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL realOutput_1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_re_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_im_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL slicedInput_3                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL imagOutput_1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL conj_cast_2                      : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL conj_cast_3                      : signed(32 DOWNTO 0);  -- sfix33_En24
  SIGNAL Conjugate2_out1_re               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Conjugate2_out1_im               : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL complex_multiplier1_out1_re      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL complex_multiplier1_out1_im      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL complex_multiplier_out1_re_1     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL complex_multiplier_out1_im_1     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL complex_multiplier1_out1_re_1    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL complex_multiplier1_out1_im_1    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract1_out1_re                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract1_out1_im                : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract1_out1_re_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract1_out1_im_1              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_2                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_2                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_3                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_3                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1_re                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1_im                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1_re_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1_im_1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay_bypass_reg_re              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay_bypass_reg_im              : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_4                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_4                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay15_reg                      : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay15_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay15_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay15_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister1_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay15_out1_3                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product3_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product3_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL crp_out_delay2_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Product3_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay12_bypass_reg               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay12_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay12_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay12_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay14_reg                      : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay14_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay14_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister2_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay14_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL HwModeRegister3_reg              : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Delay14_out1_3                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL crp_out_delay3_reg               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL Product2_out1_1                  : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay11_bypass_reg               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay11_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay11_out1_1                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay11_out1_2                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add1_out1_1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay13_bypass_reg               : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Delay13_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_5                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_5                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_re_6                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL P_d_im_6                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_reg_re                    : vector_of_signed32(0 TO 3);  -- sfix32_En24 [4]
  SIGNAL Delay3_reg_im                    : vector_of_signed32(0 TO 3);  -- sfix32_En24 [4]
  SIGNAL Delay3_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_re_1                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_im_1                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_re_2                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay3_out1_im_2                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay4_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  u_ShiftRegisterRAM : rx_demod_ip_src_SimpleDualPortRAM_generic_block1
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 128
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din => std_logic_vector(mergedDelay_regin),
              wr_addr => std_logic_vector(mergedDelay_waddr),
              wr_en => mergedDelay_wrenb,  -- ufix1
              rd_addr => std_logic_vector(mergedDelay_raddr),
              dout => mergedDelay_regout
              );

  u_complex_multiplier : rx_demod_ip_src_complex_multiplier
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              in_a_re => r_d_re,  -- sfix32_En24
              in_a_im => r_d_im,  -- sfix32_En24
              in_b_re => std_logic_vector(Conjugate1_out1_re),  -- sfix32_En24
              in_b_im => std_logic_vector(Conjugate1_out1_im),  -- sfix32_En24
              a_times_b_re => complex_multiplier_out1_re,  -- sfix32_En24
              a_times_b_im => complex_multiplier_out1_im  -- sfix32_En24
              );

  u_complex_multiplier1 : rx_demod_ip_src_complex_multiplier1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              in_a_re => std_logic_vector(realOutput),  -- sfix32_En24
              in_a_im => std_logic_vector(imagOutput),  -- sfix32_En24
              in_b_re => std_logic_vector(Conjugate2_out1_re),  -- sfix32_En24
              in_b_im => std_logic_vector(Conjugate2_out1_im),  -- sfix32_En24
              a_times_b_re => complex_multiplier1_out1_re,  -- sfix32_En24
              a_times_b_im => complex_multiplier1_out1_im  -- sfix32_En24
              );

  r_d_re_signed <= signed(r_d_re);

  r_d_im_signed <= signed(r_d_im);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1287
  -- Write address counter for RAM-based shift register mergedDelay
  mergedDelay_wr_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_waddr <= to_unsigned(16#000#, 11);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_waddr >= to_unsigned(16#507#, 11) THEN 
          mergedDelay_waddr <= to_unsigned(16#000#, 11);
        ELSE 
          mergedDelay_waddr <= mergedDelay_waddr + to_unsigned(16#001#, 11);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_wr_process;


  mergedDelay_wrenb <= '1';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 1287
  -- Read address counter for RAM-based shift register mergedDelay
  mergedDelay_rd_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_raddr <= to_unsigned(16#001#, 11);
      ELSIF enb_1_2_0 = '1' THEN
        IF mergedDelay_raddr >= to_unsigned(16#507#, 11) THEN 
          mergedDelay_raddr <= to_unsigned(16#000#, 11);
        ELSE 
          mergedDelay_raddr <= mergedDelay_raddr + to_unsigned(16#001#, 11);
        END IF;
      END IF;
    END IF;
  END PROCESS mergedDelay_rd_process;


  slicedInput <= mergedOutput(95 DOWNTO 64);

  imagOutput <= signed(slicedInput);

  r_d_L_im <= imagOutput;

  mergedInput <= unsigned(r_d_re_signed) & unsigned(r_d_im_signed) & unsigned(r_d_L_re) & unsigned(r_d_L_im);

  -- Input register for RAM-based shift register mergedDelay
  mergedDelay_reginc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedDelay_regin <= to_unsigned(0, 128);
      ELSIF enb_1_2_0 = '1' THEN
        mergedDelay_regin <= mergedInput;
      END IF;
    END IF;
  END PROCESS mergedDelay_reginc_process;


  mergedDelay_regout_unsigned <= unsigned(mergedDelay_regout);

  -- Output register for RAM-based shift register mergedDelay
  mergedDelay_regoutc_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        mergedOutput <= to_unsigned(0, 128);
      ELSIF enb_1_2_0 = '1' THEN
        mergedOutput <= mergedDelay_regout_unsigned;
      END IF;
    END IF;
  END PROCESS mergedDelay_regoutc_process;


  slicedInput_1 <= mergedOutput(127 DOWNTO 96);

  realOutput <= signed(slicedInput_1);

  r_d_L_re <= realOutput;

  Conjugate1_out1_re <= r_d_L_re;
  conj_cast <= resize(r_d_L_im, 33);
  conj_cast_1 <=  - (conj_cast);
  
  Conjugate1_out1_im <= X"7FFFFFFF" WHEN (conj_cast_1(32) = '0') AND (conj_cast_1(31) /= '0') ELSE
      X"80000000" WHEN (conj_cast_1(32) = '1') AND (conj_cast_1(31) /= '1') ELSE
      conj_cast_1(31 DOWNTO 0);

  slicedInput_2 <= mergedOutput(63 DOWNTO 32);

  realOutput_1 <= signed(slicedInput_2);

  r_d_re_1 <= realOutput_1;

  slicedInput_3 <= mergedOutput(31 DOWNTO 0);

  imagOutput_1 <= signed(slicedInput_3);

  r_d_im_1 <= imagOutput_1;

  Conjugate2_out1_re <= r_d_re_1;
  conj_cast_2 <= resize(r_d_im_1, 33);
  conj_cast_3 <=  - (conj_cast_2);
  
  Conjugate2_out1_im <= X"7FFFFFFF" WHEN (conj_cast_3(32) = '0') AND (conj_cast_3(31) /= '0') ELSE
      X"80000000" WHEN (conj_cast_3(32) = '1') AND (conj_cast_3(31) /= '1') ELSE
      conj_cast_3(31 DOWNTO 0);

  complex_multiplier_out1_re_1 <= signed(complex_multiplier_out1_re);

  complex_multiplier_out1_im_1 <= signed(complex_multiplier_out1_im);

  complex_multiplier1_out1_re_1 <= signed(complex_multiplier1_out1_re);

  complex_multiplier1_out1_im_1 <= signed(complex_multiplier1_out1_im);

  Subtract1_out1_re <= complex_multiplier_out1_re_1 - complex_multiplier1_out1_re_1;
  Subtract1_out1_im <= complex_multiplier_out1_im_1 - complex_multiplier1_out1_im_1;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Subtract1_out1_re_1 <= to_signed(0, 32);
        Subtract1_out1_im_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Subtract1_out1_re_1 <= Subtract1_out1_re;
        Subtract1_out1_im_1 <= Subtract1_out1_im;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  P_d_im_2 <= P_d_im_1;

  P_d_re_2 <= P_d_re_1;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        P_d_re_3 <= to_signed(0, 32);
        P_d_im_3 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        P_d_re_3 <= P_d_re_2;
        P_d_im_3 <= P_d_im_2;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  Add_out1_re <= Subtract1_out1_re_1 + P_d_re_3;
  Add_out1_im <= Subtract1_out1_im_1 + P_d_im_3;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add_out1_re_1 <= to_signed(0, 32);
        Add_out1_im_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Add_out1_re_1 <= Add_out1_re;
        Add_out1_im_1 <= Add_out1_im;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg_re <= to_signed(0, 32);
        Delay_bypass_reg_im <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg_im <= Add_out1_im_1;
        Delay_bypass_reg_re <= Add_out1_re_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  P_d_re_1 <= Add_out1_re_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg_re;
  
  P_d_im_1 <= Add_out1_im_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg_im;

  P_d_re_4 <= P_d_re_1;

  Delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay15_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay15_reg(0) <= P_d_re_4;
        Delay15_reg(1) <= Delay15_reg(0);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out1 <= Delay15_reg(1);

  Delay15_out1_1 <= Delay15_out1;

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister_reg(0) <= Delay15_out1_1;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  Delay15_out1_2 <= HwModeRegister_reg(1);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister1_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister1_reg(0) <= Delay15_out1_1;
        HwModeRegister1_reg(1) <= HwModeRegister1_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  Delay15_out1_3 <= HwModeRegister1_reg(1);

  Product3_mul_temp <= Delay15_out1_2 * Delay15_out1_3;
  Product3_out1 <= Product3_mul_temp(55 DOWNTO 24);

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay2_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        crp_out_delay2_reg(0) <= Product3_out1;
        crp_out_delay2_reg(1) <= crp_out_delay2_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;

  Product3_out1_1 <= crp_out_delay2_reg(1);

  Delay12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay12_bypass_reg <= Product3_out1_1;
      END IF;
    END IF;
  END PROCESS Delay12_bypass_process;

  
  Delay12_out1 <= Product3_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay12_bypass_reg;

  Delay12_out1_1 <= Delay12_out1;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay12_out1_2 <= Delay12_out1_1;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  P_d_im_4 <= P_d_im_1;

  Delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay14_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay14_reg(0) <= P_d_im_4;
        Delay14_reg(1) <= Delay14_reg(0);
      END IF;
    END IF;
  END PROCESS Delay14_process;

  Delay14_out1 <= Delay14_reg(1);

  Delay14_out1_1 <= Delay14_out1;

  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister2_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister2_reg(0) <= Delay14_out1_1;
        HwModeRegister2_reg(1) <= HwModeRegister2_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;

  Delay14_out1_2 <= HwModeRegister2_reg(1);

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister3_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister3_reg(0) <= Delay14_out1_1;
        HwModeRegister3_reg(1) <= HwModeRegister3_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;

  Delay14_out1_3 <= HwModeRegister3_reg(1);

  Product2_mul_temp <= Delay14_out1_2 * Delay14_out1_3;
  Product2_out1 <= Product2_mul_temp(55 DOWNTO 24);

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay3_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        crp_out_delay3_reg(0) <= Product2_out1;
        crp_out_delay3_reg(1) <= crp_out_delay3_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;

  Product2_out1_1 <= crp_out_delay3_reg(1);

  Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay11_bypass_reg <= Product2_out1_1;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_process;

  
  Delay11_out1 <= Product2_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay11_bypass_reg;

  Delay11_out1_1 <= Delay11_out1;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_out1_2 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Delay11_out1_2 <= Delay11_out1_1;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Add1_out1 <= Delay12_out1_2 + Delay11_out1_2;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Add1_out1_1 <= to_signed(0, 32);
      ELSIF enb = '1' THEN
        Add1_out1_1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay13_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay13_bypass_reg <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay13_bypass_reg <= Add1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay13_bypass_process;

  
  Delay13_out1 <= Add1_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay13_bypass_reg;

  alphaP_d_2 <= std_logic_vector(Delay13_out1);

  P_d_re_5 <= P_d_re_1;

  P_d_im_5 <= P_d_im_1;

  Delay16_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        P_d_re_6 <= to_signed(0, 32);
        P_d_im_6 <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        P_d_re_6 <= P_d_re_5;
        P_d_im_6 <= P_d_im_5;
      END IF;
    END IF;
  END PROCESS Delay16_output_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg_re <= (OTHERS => to_signed(0, 32));
        Delay3_reg_im <= (OTHERS => to_signed(0, 32));
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_reg_im(0) <= P_d_im_6;
        Delay3_reg_im(1 TO 3) <= Delay3_reg_im(0 TO 2);
        Delay3_reg_re(0) <= P_d_re_6;
        Delay3_reg_re(1 TO 3) <= Delay3_reg_re(0 TO 2);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1_re <= Delay3_reg_re(3);
  Delay3_out1_im <= Delay3_reg_im(3);

  Delay3_out1_re_1 <= Delay3_out1_re;

  Delay3_out1_im_1 <= Delay3_out1_im;

  Delay41_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_re_2 <= to_signed(0, 32);
        Delay3_out1_im_2 <= to_signed(0, 32);
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_out1_re_2 <= Delay3_out1_re_1;
        Delay3_out1_im_2 <= Delay3_out1_im_1;
      END IF;
    END IF;
  END PROCESS Delay41_output_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_re <= to_signed(0, 32);
        Delay4_out1_im <= to_signed(0, 32);
      ELSIF enb_1_2_0 = '1' THEN
        Delay4_out1_re <= Delay3_out1_re_2;
        Delay4_out1_im <= Delay3_out1_im_2;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  P_d_re <= std_logic_vector(Delay4_out1_re);

  P_d_im <= std_logic_vector(Delay4_out1_im);

END rtl;

