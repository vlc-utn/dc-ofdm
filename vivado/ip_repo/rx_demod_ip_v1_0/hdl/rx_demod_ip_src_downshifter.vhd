-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_downshifter.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_downshifter
-- Source Path: HDLRxDemodulator/rx_demodulator_full/downshifter
-- Hierarchy Level: 1
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_downshifter IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        valid_in                          :   IN    std_logic;
        frequency_offset                  :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic
        );
END rx_demod_ip_src_downshifter;


ARCHITECTURE rtl OF rx_demod_ip_src_downshifter IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_rising_edge_detector_block4
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_NCO
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          inc                             :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          resetPhase                      :   IN    std_logic;
          validIn                         :   IN    std_logic;
          complexexp_re                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          complexexp_im                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_digital_carrier_receiver
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          ncoIn_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          ncoIn_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_rising_edge_detector_block4
    USE ENTITY work.rx_demod_ip_src_rising_edge_detector_block4(rtl);

  FOR ALL : rx_demod_ip_src_NCO
    USE ENTITY work.rx_demod_ip_src_NCO(rtl);

  FOR ALL : rx_demod_ip_src_digital_carrier_receiver
    USE ENTITY work.rx_demod_ip_src_digital_carrier_receiver(rtl);

  -- Signals
  SIGNAL data_in_signed                   : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL rd_0_reg                         : vector_of_signed14(0 TO 9);  -- sfix14 [10]
  SIGNAL data_in_1                        : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL kconst                           : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL kconst_1                         : unsigned(31 DOWNTO 0);  -- ufix32_En32
  SIGNAL Constant_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL frequency_offset_signed          : signed(15 DOWNTO 0);  -- int16
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL HwModeRegister1_reg              : vector_of_signed32(0 TO 2);  -- sfix32 [3]
  SIGNAL Add_out1_1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Gain_cast                        : signed(32 DOWNTO 0);  -- sfix33_En32
  SIGNAL Gain_mul_temp                    : signed(64 DOWNTO 0);  -- sfix65_En32
  SIGNAL Gain_out1                        : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL Gain_out1_1                      : signed(63 DOWNTO 0);  -- sfix64_En32
  SIGNAL inc                              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL inc_1                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL rd_2_reg                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL rd_3_reg                         : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL valid_1                          : std_logic;
  SIGNAL NCO_out1_re                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out1_im                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL NCO_out2                         : std_logic;
  SIGNAL digital_carrier_receiver_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL digital_carrier_receiver_out1_im : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_rising_edge_detector : rx_demod_ip_src_rising_edge_detector_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => valid_in_1,
              Out_rsvd => rising_edge_detector_out1
              );

  u_NCO : rx_demod_ip_src_NCO
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              inc => std_logic_vector(inc_1),  -- uint32
              resetPhase => rising_edge_detector_out1,
              validIn => valid_1,
              complexexp_re => NCO_out1_re,  -- sfix16_En14
              complexexp_im => NCO_out1_im,  -- sfix16_En14
              validOut => NCO_out2
              );

  u_digital_carrier_receiver : rx_demod_ip_src_digital_carrier_receiver
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(data_in_1),  -- sfix14_En13
              ncoIn_re => NCO_out1_re,  -- sfix16_En14
              ncoIn_im => NCO_out1_im,  -- sfix16_En14
              data_out_re => digital_carrier_receiver_out1_re,  -- sfix16_En14
              data_out_im => digital_carrier_receiver_out1_im  -- sfix16_En14
              );

  data_in_signed <= signed(data_in);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_0_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        rd_0_reg(0) <= data_in_signed;
        rd_0_reg(1 TO 9) <= rd_0_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS rd_0_process;

  data_in_1 <= rd_0_reg(9);

  kconst <= to_unsigned(1152921505, 32);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        kconst_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Constant_out1 <= to_signed(31250000, 32);

  frequency_offset_signed <= signed(frequency_offset);

  Add_out1 <= Constant_out1 + resize(frequency_offset_signed, 32);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister1_reg <= (OTHERS => to_signed(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister1_reg(0) <= Add_out1;
        HwModeRegister1_reg(1 TO 2) <= HwModeRegister1_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  Add_out1_1 <= HwModeRegister1_reg(2);

  Gain_cast <= signed(resize(kconst_1, 33));
  Gain_mul_temp <= Gain_cast * Add_out1_1;
  Gain_out1 <= Gain_mul_temp(63 DOWNTO 0);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Gain_out1_1 <= to_signed(0, 64);
      ELSIF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  inc <= unsigned(Gain_out1_1(63 DOWNTO 32)) + ('0' & (Gain_out1_1(31) AND (( NOT Gain_out1_1(63)) OR (Gain_out1_1(30) OR Gain_out1_1(29) OR Gain_out1_1(28) OR Gain_out1_1(27) OR Gain_out1_1(26) OR Gain_out1_1(25) OR Gain_out1_1(24) OR Gain_out1_1(23) OR Gain_out1_1(22) OR Gain_out1_1(21) OR Gain_out1_1(20) OR Gain_out1_1(19) OR Gain_out1_1(18) OR Gain_out1_1(17) OR Gain_out1_1(16) OR Gain_out1_1(15) OR Gain_out1_1(14) OR Gain_out1_1(13) OR Gain_out1_1(12) OR Gain_out1_1(11) OR Gain_out1_1(10) OR Gain_out1_1(9) OR Gain_out1_1(8) OR Gain_out1_1(7) OR Gain_out1_1(6) OR Gain_out1_1(5) OR Gain_out1_1(4) OR Gain_out1_1(3) OR Gain_out1_1(2) OR Gain_out1_1(1) OR Gain_out1_1(0)))));

  inc_1 <= inc;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_2_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_2_reg(0) <= valid_in;
        rd_2_reg(2 DOWNTO 1) <= rd_2_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_2_process;

  valid_in_1 <= rd_2_reg(2);

  valid <= valid_in;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_3_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_3_reg(0) <= valid;
        rd_3_reg(3 DOWNTO 1) <= rd_3_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_3_process;

  valid_1 <= rd_3_reg(3);

  data_out_re <= digital_carrier_receiver_out1_re;

  data_out_im <= digital_carrier_receiver_out1_im;

  valid_out <= NCO_out2;

END rtl;

