-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxDemodulator/rx_demod_ip_src_frequency_offset_calculator.vhd
-- Created: 2024-09-22 18:53:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: rx_demod_ip_src_frequency_offset_calculator
-- Source Path: HDLRxDemodulator/rx_demodulator_full/ofdm_symbol_sync/frequency_offset_calculator
-- Hierarchy Level: 2
-- Model version: 1.58
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.rx_demod_ip_src_rx_demodulator_full_pac.ALL;

ENTITY rx_demod_ip_src_frequency_offset_calculator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        peak_sync                         :   IN    std_logic;
        P_d_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        P_d_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        frequency_offset                  :   OUT   std_logic_vector(15 DOWNTO 0)  -- int16
        );
END rx_demod_ip_src_frequency_offset_calculator;


ARCHITECTURE rtl OF rx_demod_ip_src_frequency_offset_calculator IS

  -- Component Declarations
  COMPONENT rx_demod_ip_src_Quadrant_Mapper
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          QA_Control                      :   OUT   std_logic_vector(4 DOWNTO 0)  -- ufix5
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block12
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block13
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block3
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block4
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block5
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block6
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block7
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block8
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block9
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          xout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block10
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          xin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          idx                             :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          yout                            :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_CordicKernelMag_block11
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          yin                             :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En12
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          lut_value                       :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En18
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  COMPONENT rx_demod_ip_src_Quadrant_Correction
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          zin                             :   IN    std_logic_vector(18 DOWNTO 0);  -- sfix19_En18
          QA_Control                      :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          zout                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En18
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : rx_demod_ip_src_Quadrant_Mapper
    USE ENTITY work.rx_demod_ip_src_Quadrant_Mapper(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block12
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block12(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block13
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block13(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block1
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block1(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block2
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block2(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block3
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block3(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block4
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block4(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block5
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block5(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block6
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block6(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block7
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block7(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block8
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block8(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block9
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block9(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block10
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block10(rtl);

  FOR ALL : rx_demod_ip_src_CordicKernelMag_block11
    USE ENTITY work.rx_demod_ip_src_CordicKernelMag_block11(rtl);

  FOR ALL : rx_demod_ip_src_Quadrant_Correction
    USE ENTITY work.rx_demod_ip_src_Quadrant_Correction(rtl);

  -- Signals
  SIGNAL peak_sync_1                      : std_logic;
  SIGNAL peak_sync_2                      : std_logic;
  SIGNAL Delay_ValidIn_reg                : std_logic_vector(16 DOWNTO 0);  -- ufix1 [17]
  SIGNAL ValidOutDelayed                  : std_logic;
  SIGNAL ValidOutDelayed_1                : std_logic;
  SIGNAL ValidOutDelayed_2                : std_logic;
  SIGNAL validOut                         : std_logic;
  SIGNAL validOut_1                       : std_logic;
  SIGNAL Complex_to_Magnitude_Angle_out2  : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL kconst                           : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL HwModeRegister_reg               : vector_of_unsigned32(0 TO 1);  -- ufix32 [2]
  SIGNAL kconst_1                         : unsigned(31 DOWNTO 0);  -- ufix32_En16
  SIGNAL ValidOutDelayed_3                : std_logic;
  SIGNAL reset_outval                     : std_logic;
  SIGNAL P_d_re_signed                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL P_d_im_signed                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL qMapReal                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL qMapImag                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL In1Register                      : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL In2Register                      : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL XQMapped                         : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yQMapped                         : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL ControlQC                        : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL XQMapped_signed                  : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yQMapped_signed                  : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin1                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin1_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yin1                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin1_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zin1                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL lut_value1                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift1                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout1                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout1                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout1                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout1_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout1_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout1_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout1_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout1_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout1_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline1_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin2                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin2_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline16_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin2                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin2_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline17_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin2                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin2_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value2                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift2                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout2                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout2                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout2                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout2_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout2_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout2_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout2_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout2_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout2_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline2_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin3                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin3_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline21_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin3                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin3_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline22_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin3                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin3_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value3                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift3                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout3                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout3                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout3                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout3_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout3_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout3_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout3_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout3_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout3_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline3_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin4                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin4_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline31_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin4                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin4_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline32_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin4                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin4_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value4                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift4                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout4                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout4                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout4                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout4_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout4_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout4_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout4_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout4_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout4_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline4_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin5                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin5_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline41_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin5                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin5_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline42_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin5                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin5_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value5                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift5                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout5                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout5                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout5                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout5_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout5_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout5_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout5_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout5_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout5_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline5_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin6                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin6_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline51_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin6                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin6_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline52_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin6                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin6_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value6                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift6                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout6                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout6                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout6                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout6_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout6_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout6_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout6_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout6_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout6_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline6_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin7                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin7_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline61_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin7                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin7_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline62_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin7                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin7_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value7                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift7                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout7                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout7                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout7                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout7_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout7_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout7_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout7_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout7_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout7_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline7_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin8                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin8_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline71_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin8                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin8_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline72_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin8                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin8_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value8                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift8                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout8                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout8                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout8                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout8_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout8_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout8_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout8_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout8_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout8_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline8_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin9                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin9_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline81_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin9                             : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin9_1                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline82_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin9                             : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin9_1                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value9                       : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift9                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout9                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout9                            : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout9                            : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout9_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout9_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout9_signed                     : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout9_1                          : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout9_signed                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout9_1                          : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline9_bypass_reg             : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin10                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin10_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline91_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin10                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin10_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline92_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin10                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin10_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value10                      : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift10                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout10                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout10                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout10                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout10_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout10_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout10_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout10_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout10_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout10_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline10_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin11                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin11_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline101_bypass_reg           : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin11                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin11_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline102_bypass_reg           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin11                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin11_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value11                      : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift11                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout11                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout11                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout11                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout11_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout11_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout11_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout11_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout11_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout11_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline11_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin12                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin12_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline111_bypass_reg           : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin12                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin12_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline112_bypass_reg           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin12                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin12_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value12                      : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift12                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout12                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout12                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout12                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout12_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout12_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout12_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout12_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout12_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout12_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline12_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin13                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin13_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline121_bypass_reg           : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin13                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin13_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline122_bypass_reg           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin13                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin13_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value13                      : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift13                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL xout13                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL yout13                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout13                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL xout13_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xout13_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout13_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout13_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout13_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout13_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline13_bypass_reg            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL xin14                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL xin14_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline131_bypass_reg           : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin14                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin14_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline132_bypass_reg           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin14                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin14_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value14                      : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL shift14                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL yout14                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL zout14                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL yout14_signed                    : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yout14_1                         : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL zout14_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout14_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Pipeline141_bypass_reg           : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL yin15                            : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL yin15_1                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Pipeline142_bypass_reg           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin15                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin15_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL lut_value15                      : unsigned(15 DOWNTO 0);  -- ufix16_En18
  SIGNAL zout15                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout15_signed                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zout15_1                         : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL ControlQC_1                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL ControlQC_2                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL ControlQC_3                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Pipeline15_bypass_reg            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zin16                            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zin16_1                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL DelayQC_Control_reg              : vector_of_unsigned5(0 TO 14);  -- ufix5 [15]
  SIGNAL ControlQCDelay                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL ControlQCDelay_1                 : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL rd_1_reg                         : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL reset_outval_1                   : std_logic;
  SIGNAL zout_corrected                   : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL zout_corrected_signed            : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL zeroCA                           : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL outSwitchAng                     : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Output_Register_bypass_reg       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL zout_corrected_1                 : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Delay2_reg                       : vector_of_signed19(0 TO 1);  -- sfix19 [2]
  SIGNAL Delay2_out1                      : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Delay2_out1_1                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL HwModeRegister1_reg              : vector_of_signed19(0 TO 1);  -- sfix19 [2]
  SIGNAL Delay2_out1_2                    : signed(18 DOWNTO 0);  -- sfix19_En18
  SIGNAL Gain_cast                        : signed(32 DOWNTO 0);  -- sfix33_En16
  SIGNAL Gain_mul_temp                    : signed(51 DOWNTO 0);  -- sfix52_En34
  SIGNAL Gain_cast_1                      : signed(50 DOWNTO 0);  -- sfix51_En34
  SIGNAL Gain_out1                        : signed(15 DOWNTO 0);  -- int16
  SIGNAL crp_out_delay37_reg              : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Gain_out1_1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Delay_bypass_reg                 : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL Switch_out1                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Unit_Delay_out1                  : signed(15 DOWNTO 0);  -- int16

BEGIN
  u_QuadrantMapper : rx_demod_ip_src_Quadrant_Mapper
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              xin => std_logic_vector(In1Register),  -- sfix17_En12
              yin => std_logic_vector(In2Register),  -- sfix17_En12
              xout => XQMapped,  -- sfix17_En12
              yout => yQMapped,  -- sfix17_En12
              QA_Control => ControlQC  -- ufix5
              );

  u_Iteration13 : rx_demod_ip_src_CordicKernelMag_block12
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin1_1,  -- sfix17_En12
              yin => yin1_1,  -- sfix17_En12
              zin => std_logic_vector(zin1),  -- sfix19_En18
              lut_value => std_logic_vector(lut_value1),  -- ufix16_En18
              idx => std_logic_vector(shift1),  -- ufix5
              xout => xout1,  -- sfix17_En12
              yout => yout1,  -- sfix17_En12
              zout => zout1  -- sfix19_En18
              );

  u_Iteration14 : rx_demod_ip_src_CordicKernelMag_block13
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin2_1,  -- sfix17_En12
              yin => yin2_1,  -- sfix17_En12
              zin => zin2_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value2),  -- ufix16_En18
              idx => std_logic_vector(shift2),  -- ufix5
              xout => xout2,  -- sfix17_En12
              yout => yout2,  -- sfix17_En12
              zout => zout2  -- sfix19_En18
              );

  u_Iteration : rx_demod_ip_src_CordicKernelMag
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin3_1,  -- sfix17_En12
              yin => yin3_1,  -- sfix17_En12
              zin => zin3_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value3),  -- ufix16_En18
              idx => std_logic_vector(shift3),  -- ufix5
              xout => xout3,  -- sfix17_En12
              yout => yout3,  -- sfix17_En12
              zout => zout3  -- sfix19_En18
              );

  u_Iteration1 : rx_demod_ip_src_CordicKernelMag_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin4_1,  -- sfix17_En12
              yin => yin4_1,  -- sfix17_En12
              zin => zin4_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value4),  -- ufix16_En18
              idx => std_logic_vector(shift4),  -- ufix5
              xout => xout4,  -- sfix17_En12
              yout => yout4,  -- sfix17_En12
              zout => zout4  -- sfix19_En18
              );

  u_Iteration2 : rx_demod_ip_src_CordicKernelMag_block1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin5_1,  -- sfix17_En12
              yin => yin5_1,  -- sfix17_En12
              zin => zin5_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value5),  -- ufix16_En18
              idx => std_logic_vector(shift5),  -- ufix5
              xout => xout5,  -- sfix17_En12
              yout => yout5,  -- sfix17_En12
              zout => zout5  -- sfix19_En18
              );

  u_Iteration3 : rx_demod_ip_src_CordicKernelMag_block2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin6_1,  -- sfix17_En12
              yin => yin6_1,  -- sfix17_En12
              zin => zin6_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value6),  -- ufix16_En18
              idx => std_logic_vector(shift6),  -- ufix5
              xout => xout6,  -- sfix17_En12
              yout => yout6,  -- sfix17_En12
              zout => zout6  -- sfix19_En18
              );

  u_Iteration4 : rx_demod_ip_src_CordicKernelMag_block3
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin7_1,  -- sfix17_En12
              yin => yin7_1,  -- sfix17_En12
              zin => zin7_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value7),  -- ufix16_En18
              idx => std_logic_vector(shift7),  -- ufix5
              xout => xout7,  -- sfix17_En12
              yout => yout7,  -- sfix17_En12
              zout => zout7  -- sfix19_En18
              );

  u_Iteration5 : rx_demod_ip_src_CordicKernelMag_block4
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin8_1,  -- sfix17_En12
              yin => yin8_1,  -- sfix17_En12
              zin => zin8_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value8),  -- ufix16_En18
              idx => std_logic_vector(shift8),  -- ufix5
              xout => xout8,  -- sfix17_En12
              yout => yout8,  -- sfix17_En12
              zout => zout8  -- sfix19_En18
              );

  u_Iteration6 : rx_demod_ip_src_CordicKernelMag_block5
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin9_1,  -- sfix17_En12
              yin => yin9_1,  -- sfix17_En12
              zin => zin9_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value9),  -- ufix16_En18
              idx => std_logic_vector(shift9),  -- ufix5
              xout => xout9,  -- sfix17_En12
              yout => yout9,  -- sfix17_En12
              zout => zout9  -- sfix19_En18
              );

  u_Iteration7 : rx_demod_ip_src_CordicKernelMag_block6
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin10_1,  -- sfix17_En12
              yin => yin10_1,  -- sfix17_En12
              zin => zin10_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value10),  -- ufix16_En18
              idx => std_logic_vector(shift10),  -- ufix5
              xout => xout10,  -- sfix17_En12
              yout => yout10,  -- sfix17_En12
              zout => zout10  -- sfix19_En18
              );

  u_Iteration8 : rx_demod_ip_src_CordicKernelMag_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin11_1,  -- sfix17_En12
              yin => yin11_1,  -- sfix17_En12
              zin => zin11_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value11),  -- ufix16_En18
              idx => std_logic_vector(shift11),  -- ufix5
              xout => xout11,  -- sfix17_En12
              yout => yout11,  -- sfix17_En12
              zout => zout11  -- sfix19_En18
              );

  u_Iteration9 : rx_demod_ip_src_CordicKernelMag_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin12_1,  -- sfix17_En12
              yin => yin12_1,  -- sfix17_En12
              zin => zin12_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value12),  -- ufix16_En18
              idx => std_logic_vector(shift12),  -- ufix5
              xout => xout12,  -- sfix17_En12
              yout => yout12,  -- sfix17_En12
              zout => zout12  -- sfix19_En18
              );

  u_Iteration10 : rx_demod_ip_src_CordicKernelMag_block9
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin13_1,  -- sfix17_En12
              yin => yin13_1,  -- sfix17_En12
              zin => zin13_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value13),  -- ufix16_En18
              idx => std_logic_vector(shift13),  -- ufix5
              xout => xout13,  -- sfix17_En12
              yout => yout13,  -- sfix17_En12
              zout => zout13  -- sfix19_En18
              );

  u_Iteration11 : rx_demod_ip_src_CordicKernelMag_block10
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              xin => xin14_1,  -- sfix17_En12
              yin => yin14_1,  -- sfix17_En12
              zin => zin14_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value14),  -- ufix16_En18
              idx => std_logic_vector(shift14),  -- ufix5
              yout => yout14,  -- sfix17_En12
              zout => zout14  -- sfix19_En18
              );

  u_Iteration12 : rx_demod_ip_src_CordicKernelMag_block11
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              yin => yin15_1,  -- sfix17_En12
              zin => zin15_1,  -- sfix19_En18
              lut_value => std_logic_vector(lut_value15),  -- ufix16_En18
              zout => zout15  -- sfix19_En18
              );

  u_QuadrantCorrection : rx_demod_ip_src_Quadrant_Correction
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              zin => zin16_1,  -- sfix19_En18
              QA_Control => ControlQCDelay_1,  -- ufix5
              zout => zout_corrected  -- sfix19_En18
              );

  crp_out_delay39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        peak_sync_1 <= '0';
      ELSIF enb = '1' THEN
        peak_sync_1 <= peak_sync;
      END IF;
    END IF;
  END PROCESS crp_out_delay39_process;


  Delay_ValidIn1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        peak_sync_2 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        peak_sync_2 <= peak_sync_1;
      END IF;
    END IF;
  END PROCESS Delay_ValidIn1_output_process;


  Delay_ValidIn_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_ValidIn_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay_ValidIn_reg(0) <= peak_sync_2;
        Delay_ValidIn_reg(16 DOWNTO 1) <= Delay_ValidIn_reg(15 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay_ValidIn_process;

  ValidOutDelayed <= Delay_ValidIn_reg(16);

  ValidOutDelayed_1 <= ValidOutDelayed;

  DelayValidOut1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ValidOutDelayed_2 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        ValidOutDelayed_2 <= ValidOutDelayed_1;
      END IF;
    END IF;
  END PROCESS DelayValidOut1_output_process;


  DelayValidOut_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        validOut <= ValidOutDelayed_2;
      END IF;
    END IF;
  END PROCESS DelayValidOut_process;


  validOut_1 <= validOut;

  Delay31_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Complex_to_Magnitude_Angle_out2 <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Complex_to_Magnitude_Angle_out2 <= validOut_1;
      END IF;
    END IF;
  END PROCESS Delay31_output_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        Delay1_reg(0) <= Complex_to_Magnitude_Angle_out2;
        Delay1_reg(3 DOWNTO 1) <= Delay1_reg(2 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(3);

  kconst <= to_unsigned(1587596899, 32);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister_reg <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' THEN
        HwModeRegister_reg(0) <= kconst;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  kconst_1 <= HwModeRegister_reg(1);

  ValidOutDelayed_3 <= ValidOutDelayed;

  reset_outval <=  NOT ValidOutDelayed_3;

  -- Complex to Magnitude-Angle
  P_d_re_signed <= signed(P_d_re);

  qMapReal <= resize(P_d_re_signed, 17);

  P_d_im_signed <= signed(P_d_im);

  qMapImag <= resize(P_d_im_signed, 17);

  DelayRealInput_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        In1Register <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        In1Register <= qMapReal;
      END IF;
    END IF;
  END PROCESS DelayRealInput_process;


  DelayImagInput_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        In2Register <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        In2Register <= qMapImag;
      END IF;
    END IF;
  END PROCESS DelayImagInput_process;


  XQMapped_signed <= signed(XQMapped);

  yQMapped_signed <= signed(yQMapped);

  DelayQuadMapper1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xin1 <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        xin1 <= XQMapped_signed;
      END IF;
    END IF;
  END PROCESS DelayQuadMapper1_process;


  xin1_1 <= std_logic_vector(xin1);

  DelayQuadMapper2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yin1 <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_0 = '1' THEN
        yin1 <= yQMapped_signed;
      END IF;
    END IF;
  END PROCESS DelayQuadMapper2_process;


  yin1_1 <= std_logic_vector(yin1);

  zin1 <= to_signed(16#00000#, 19);

  lut_value1 <= to_unsigned(16#9720#, 16);

  shift1 <= to_unsigned(16#01#, 5);

  xout1_signed <= signed(xout1);

  crp_out_delay40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout1_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout1_1 <= xout1_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay40_process;


  yout1_signed <= signed(yout1);

  crp_out_delay41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout1_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout1_1 <= yout1_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay41_process;


  zout1_signed <= signed(zout1);

  crp_out_delay42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout1_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout1_1 <= zout1_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay42_process;


  Pipeline1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline1_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline1_bypass_reg <= xout1_1;
      END IF;
    END IF;
  END PROCESS Pipeline1_bypass_process;

  
  xin2 <= xout1_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline1_bypass_reg;

  xin2_1 <= std_logic_vector(xin2);

  Pipeline16_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline16_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline16_bypass_reg <= yout1_1;
      END IF;
    END IF;
  END PROCESS Pipeline16_bypass_process;

  
  yin2 <= yout1_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline16_bypass_reg;

  yin2_1 <= std_logic_vector(yin2);

  Pipeline17_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline17_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline17_bypass_reg <= zout1_1;
      END IF;
    END IF;
  END PROCESS Pipeline17_bypass_process;

  
  zin2 <= zout1_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline17_bypass_reg;

  zin2_1 <= std_logic_vector(zin2);

  lut_value2 <= to_unsigned(16#4FDA#, 16);

  shift2 <= to_unsigned(16#02#, 5);

  xout2_signed <= signed(xout2);

  crp_out_delay43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout2_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout2_1 <= xout2_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay43_process;


  yout2_signed <= signed(yout2);

  crp_out_delay44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout2_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout2_1 <= yout2_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay44_process;


  zout2_signed <= signed(zout2);

  crp_out_delay45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout2_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout2_1 <= zout2_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay45_process;


  Pipeline2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline2_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline2_bypass_reg <= xout2_1;
      END IF;
    END IF;
  END PROCESS Pipeline2_bypass_process;

  
  xin3 <= xout2_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline2_bypass_reg;

  xin3_1 <= std_logic_vector(xin3);

  Pipeline21_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline21_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline21_bypass_reg <= yout2_1;
      END IF;
    END IF;
  END PROCESS Pipeline21_bypass_process;

  
  yin3 <= yout2_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline21_bypass_reg;

  yin3_1 <= std_logic_vector(yin3);

  Pipeline22_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline22_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline22_bypass_reg <= zout2_1;
      END IF;
    END IF;
  END PROCESS Pipeline22_bypass_process;

  
  zin3 <= zout2_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline22_bypass_reg;

  zin3_1 <= std_logic_vector(zin3);

  lut_value3 <= to_unsigned(16#2889#, 16);

  shift3 <= to_unsigned(16#03#, 5);

  xout3_signed <= signed(xout3);

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout3_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout3_1 <= xout3_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  yout3_signed <= signed(yout3);

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout3_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout3_1 <= yout3_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  zout3_signed <= signed(zout3);

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout3_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout3_1 <= zout3_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Pipeline3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline3_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline3_bypass_reg <= xout3_1;
      END IF;
    END IF;
  END PROCESS Pipeline3_bypass_process;

  
  xin4 <= xout3_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline3_bypass_reg;

  xin4_1 <= std_logic_vector(xin4);

  Pipeline31_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline31_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline31_bypass_reg <= yout3_1;
      END IF;
    END IF;
  END PROCESS Pipeline31_bypass_process;

  
  yin4 <= yout3_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline31_bypass_reg;

  yin4_1 <= std_logic_vector(yin4);

  Pipeline32_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline32_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline32_bypass_reg <= zout3_1;
      END IF;
    END IF;
  END PROCESS Pipeline32_bypass_process;

  
  zin4 <= zout3_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline32_bypass_reg;

  zin4_1 <= std_logic_vector(zin4);

  lut_value4 <= to_unsigned(16#1458#, 16);

  shift4 <= to_unsigned(16#04#, 5);

  xout4_signed <= signed(xout4);

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout4_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout4_1 <= xout4_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  yout4_signed <= signed(yout4);

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout4_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout4_1 <= yout4_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  zout4_signed <= signed(zout4);

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout4_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout4_1 <= zout4_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Pipeline4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline4_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline4_bypass_reg <= xout4_1;
      END IF;
    END IF;
  END PROCESS Pipeline4_bypass_process;

  
  xin5 <= xout4_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline4_bypass_reg;

  xin5_1 <= std_logic_vector(xin5);

  Pipeline41_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline41_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline41_bypass_reg <= yout4_1;
      END IF;
    END IF;
  END PROCESS Pipeline41_bypass_process;

  
  yin5 <= yout4_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline41_bypass_reg;

  yin5_1 <= std_logic_vector(yin5);

  Pipeline42_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline42_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline42_bypass_reg <= zout4_1;
      END IF;
    END IF;
  END PROCESS Pipeline42_bypass_process;

  
  zin5 <= zout4_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline42_bypass_reg;

  zin5_1 <= std_logic_vector(zin5);

  lut_value5 <= to_unsigned(16#0A2F#, 16);

  shift5 <= to_unsigned(16#05#, 5);

  xout5_signed <= signed(xout5);

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout5_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout5_1 <= xout5_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  yout5_signed <= signed(yout5);

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout5_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout5_1 <= yout5_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  zout5_signed <= signed(zout5);

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout5_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout5_1 <= zout5_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Pipeline5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline5_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline5_bypass_reg <= xout5_1;
      END IF;
    END IF;
  END PROCESS Pipeline5_bypass_process;

  
  xin6 <= xout5_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline5_bypass_reg;

  xin6_1 <= std_logic_vector(xin6);

  Pipeline51_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline51_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline51_bypass_reg <= yout5_1;
      END IF;
    END IF;
  END PROCESS Pipeline51_bypass_process;

  
  yin6 <= yout5_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline51_bypass_reg;

  yin6_1 <= std_logic_vector(yin6);

  Pipeline52_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline52_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline52_bypass_reg <= zout5_1;
      END IF;
    END IF;
  END PROCESS Pipeline52_bypass_process;

  
  zin6 <= zout5_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline52_bypass_reg;

  zin6_1 <= std_logic_vector(zin6);

  lut_value6 <= to_unsigned(16#0518#, 16);

  shift6 <= to_unsigned(16#06#, 5);

  xout6_signed <= signed(xout6);

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout6_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout6_1 <= xout6_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  yout6_signed <= signed(yout6);

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout6_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout6_1 <= yout6_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  zout6_signed <= signed(zout6);

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout6_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout6_1 <= zout6_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Pipeline6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline6_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline6_bypass_reg <= xout6_1;
      END IF;
    END IF;
  END PROCESS Pipeline6_bypass_process;

  
  xin7 <= xout6_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline6_bypass_reg;

  xin7_1 <= std_logic_vector(xin7);

  Pipeline61_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline61_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline61_bypass_reg <= yout6_1;
      END IF;
    END IF;
  END PROCESS Pipeline61_bypass_process;

  
  yin7 <= yout6_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline61_bypass_reg;

  yin7_1 <= std_logic_vector(yin7);

  Pipeline62_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline62_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline62_bypass_reg <= zout6_1;
      END IF;
    END IF;
  END PROCESS Pipeline62_bypass_process;

  
  zin7 <= zout6_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline62_bypass_reg;

  zin7_1 <= std_logic_vector(zin7);

  lut_value7 <= to_unsigned(16#028C#, 16);

  shift7 <= to_unsigned(16#07#, 5);

  xout7_signed <= signed(xout7);

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout7_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout7_1 <= xout7_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  yout7_signed <= signed(yout7);

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout7_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout7_1 <= yout7_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  zout7_signed <= signed(zout7);

  crp_out_delay14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout7_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout7_1 <= zout7_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay14_process;


  Pipeline7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline7_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline7_bypass_reg <= xout7_1;
      END IF;
    END IF;
  END PROCESS Pipeline7_bypass_process;

  
  xin8 <= xout7_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline7_bypass_reg;

  xin8_1 <= std_logic_vector(xin8);

  Pipeline71_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline71_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline71_bypass_reg <= yout7_1;
      END IF;
    END IF;
  END PROCESS Pipeline71_bypass_process;

  
  yin8 <= yout7_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline71_bypass_reg;

  yin8_1 <= std_logic_vector(yin8);

  Pipeline72_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline72_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline72_bypass_reg <= zout7_1;
      END IF;
    END IF;
  END PROCESS Pipeline72_bypass_process;

  
  zin8 <= zout7_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline72_bypass_reg;

  zin8_1 <= std_logic_vector(zin8);

  lut_value8 <= to_unsigned(16#0146#, 16);

  shift8 <= to_unsigned(16#08#, 5);

  xout8_signed <= signed(xout8);

  crp_out_delay15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout8_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout8_1 <= xout8_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay15_process;


  yout8_signed <= signed(yout8);

  crp_out_delay16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout8_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout8_1 <= yout8_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay16_process;


  zout8_signed <= signed(zout8);

  crp_out_delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout8_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout8_1 <= zout8_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay17_process;


  Pipeline8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline8_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline8_bypass_reg <= xout8_1;
      END IF;
    END IF;
  END PROCESS Pipeline8_bypass_process;

  
  xin9 <= xout8_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline8_bypass_reg;

  xin9_1 <= std_logic_vector(xin9);

  Pipeline81_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline81_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline81_bypass_reg <= yout8_1;
      END IF;
    END IF;
  END PROCESS Pipeline81_bypass_process;

  
  yin9 <= yout8_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline81_bypass_reg;

  yin9_1 <= std_logic_vector(yin9);

  Pipeline82_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline82_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline82_bypass_reg <= zout8_1;
      END IF;
    END IF;
  END PROCESS Pipeline82_bypass_process;

  
  zin9 <= zout8_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline82_bypass_reg;

  zin9_1 <= std_logic_vector(zin9);

  lut_value9 <= to_unsigned(16#00A3#, 16);

  shift9 <= to_unsigned(16#09#, 5);

  xout9_signed <= signed(xout9);

  crp_out_delay18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout9_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout9_1 <= xout9_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay18_process;


  yout9_signed <= signed(yout9);

  crp_out_delay19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout9_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout9_1 <= yout9_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay19_process;


  zout9_signed <= signed(zout9);

  crp_out_delay20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout9_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout9_1 <= zout9_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay20_process;


  Pipeline9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline9_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline9_bypass_reg <= xout9_1;
      END IF;
    END IF;
  END PROCESS Pipeline9_bypass_process;

  
  xin10 <= xout9_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline9_bypass_reg;

  xin10_1 <= std_logic_vector(xin10);

  Pipeline91_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline91_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline91_bypass_reg <= yout9_1;
      END IF;
    END IF;
  END PROCESS Pipeline91_bypass_process;

  
  yin10 <= yout9_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline91_bypass_reg;

  yin10_1 <= std_logic_vector(yin10);

  Pipeline92_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline92_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline92_bypass_reg <= zout9_1;
      END IF;
    END IF;
  END PROCESS Pipeline92_bypass_process;

  
  zin10 <= zout9_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline92_bypass_reg;

  zin10_1 <= std_logic_vector(zin10);

  lut_value10 <= to_unsigned(16#0051#, 16);

  shift10 <= to_unsigned(16#0A#, 5);

  xout10_signed <= signed(xout10);

  crp_out_delay21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout10_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout10_1 <= xout10_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay21_process;


  yout10_signed <= signed(yout10);

  crp_out_delay22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout10_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout10_1 <= yout10_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay22_process;


  zout10_signed <= signed(zout10);

  crp_out_delay23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout10_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout10_1 <= zout10_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay23_process;


  Pipeline10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline10_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline10_bypass_reg <= xout10_1;
      END IF;
    END IF;
  END PROCESS Pipeline10_bypass_process;

  
  xin11 <= xout10_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline10_bypass_reg;

  xin11_1 <= std_logic_vector(xin11);

  Pipeline101_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline101_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline101_bypass_reg <= yout10_1;
      END IF;
    END IF;
  END PROCESS Pipeline101_bypass_process;

  
  yin11 <= yout10_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline101_bypass_reg;

  yin11_1 <= std_logic_vector(yin11);

  Pipeline102_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline102_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline102_bypass_reg <= zout10_1;
      END IF;
    END IF;
  END PROCESS Pipeline102_bypass_process;

  
  zin11 <= zout10_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline102_bypass_reg;

  zin11_1 <= std_logic_vector(zin11);

  lut_value11 <= to_unsigned(16#0029#, 16);

  shift11 <= to_unsigned(16#0B#, 5);

  xout11_signed <= signed(xout11);

  crp_out_delay24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout11_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout11_1 <= xout11_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay24_process;


  yout11_signed <= signed(yout11);

  crp_out_delay25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout11_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout11_1 <= yout11_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay25_process;


  zout11_signed <= signed(zout11);

  crp_out_delay26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout11_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout11_1 <= zout11_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay26_process;


  Pipeline11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline11_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline11_bypass_reg <= xout11_1;
      END IF;
    END IF;
  END PROCESS Pipeline11_bypass_process;

  
  xin12 <= xout11_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline11_bypass_reg;

  xin12_1 <= std_logic_vector(xin12);

  Pipeline111_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline111_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline111_bypass_reg <= yout11_1;
      END IF;
    END IF;
  END PROCESS Pipeline111_bypass_process;

  
  yin12 <= yout11_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline111_bypass_reg;

  yin12_1 <= std_logic_vector(yin12);

  Pipeline112_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline112_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline112_bypass_reg <= zout11_1;
      END IF;
    END IF;
  END PROCESS Pipeline112_bypass_process;

  
  zin12 <= zout11_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline112_bypass_reg;

  zin12_1 <= std_logic_vector(zin12);

  lut_value12 <= to_unsigned(16#0014#, 16);

  shift12 <= to_unsigned(16#0C#, 5);

  xout12_signed <= signed(xout12);

  crp_out_delay27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout12_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout12_1 <= xout12_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay27_process;


  yout12_signed <= signed(yout12);

  crp_out_delay28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout12_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout12_1 <= yout12_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay28_process;


  zout12_signed <= signed(zout12);

  crp_out_delay29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout12_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout12_1 <= zout12_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay29_process;


  Pipeline12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline12_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline12_bypass_reg <= xout12_1;
      END IF;
    END IF;
  END PROCESS Pipeline12_bypass_process;

  
  xin13 <= xout12_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline12_bypass_reg;

  xin13_1 <= std_logic_vector(xin13);

  Pipeline121_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline121_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline121_bypass_reg <= yout12_1;
      END IF;
    END IF;
  END PROCESS Pipeline121_bypass_process;

  
  yin13 <= yout12_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline121_bypass_reg;

  yin13_1 <= std_logic_vector(yin13);

  Pipeline122_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline122_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline122_bypass_reg <= zout12_1;
      END IF;
    END IF;
  END PROCESS Pipeline122_bypass_process;

  
  zin13 <= zout12_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline122_bypass_reg;

  zin13_1 <= std_logic_vector(zin13);

  lut_value13 <= to_unsigned(16#000A#, 16);

  shift13 <= to_unsigned(16#0D#, 5);

  xout13_signed <= signed(xout13);

  crp_out_delay30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        xout13_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        xout13_1 <= xout13_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay30_process;


  yout13_signed <= signed(yout13);

  crp_out_delay31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout13_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout13_1 <= yout13_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay31_process;


  zout13_signed <= signed(zout13);

  crp_out_delay32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout13_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout13_1 <= zout13_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay32_process;


  Pipeline13_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline13_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline13_bypass_reg <= xout13_1;
      END IF;
    END IF;
  END PROCESS Pipeline13_bypass_process;

  
  xin14 <= xout13_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline13_bypass_reg;

  xin14_1 <= std_logic_vector(xin14);

  Pipeline131_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline131_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline131_bypass_reg <= yout13_1;
      END IF;
    END IF;
  END PROCESS Pipeline131_bypass_process;

  
  yin14 <= yout13_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline131_bypass_reg;

  yin14_1 <= std_logic_vector(yin14);

  Pipeline132_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline132_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline132_bypass_reg <= zout13_1;
      END IF;
    END IF;
  END PROCESS Pipeline132_bypass_process;

  
  zin14 <= zout13_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline132_bypass_reg;

  zin14_1 <= std_logic_vector(zin14);

  lut_value14 <= to_unsigned(16#0005#, 16);

  shift14 <= to_unsigned(16#0E#, 5);

  yout14_signed <= signed(yout14);

  crp_out_delay34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        yout14_1 <= to_signed(16#00000#, 17);
      ELSIF enb = '1' THEN
        yout14_1 <= yout14_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay34_process;


  zout14_signed <= signed(zout14);

  crp_out_delay35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout14_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout14_1 <= zout14_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay35_process;


  Pipeline141_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline141_bypass_reg <= to_signed(16#00000#, 17);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline141_bypass_reg <= yout14_1;
      END IF;
    END IF;
  END PROCESS Pipeline141_bypass_process;

  
  yin15 <= yout14_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline141_bypass_reg;

  yin15_1 <= std_logic_vector(yin15);

  Pipeline142_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline142_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline142_bypass_reg <= zout14_1;
      END IF;
    END IF;
  END PROCESS Pipeline142_bypass_process;

  
  zin15 <= zout14_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline142_bypass_reg;

  zin15_1 <= std_logic_vector(zin15);

  lut_value15 <= to_unsigned(16#0003#, 16);

  zout15_signed <= signed(zout15);

  crp_out_delay36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        zout15_1 <= to_signed(16#00000#, 19);
      ELSIF enb = '1' THEN
        zout15_1 <= zout15_signed;
      END IF;
    END IF;
  END PROCESS crp_out_delay36_process;


  ControlQC_1 <= unsigned(ControlQC);

  crp_out_delay38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ControlQC_2 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        ControlQC_2 <= ControlQC_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay38_process;


  DelayQC_Control1_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ControlQC_3 <= to_unsigned(16#00#, 5);
      ELSIF enb_1_2_1 = '1' THEN
        ControlQC_3 <= ControlQC_2;
      END IF;
    END IF;
  END PROCESS DelayQC_Control1_output_process;


  Pipeline15_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Pipeline15_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Pipeline15_bypass_reg <= zout15_1;
      END IF;
    END IF;
  END PROCESS Pipeline15_bypass_process;

  
  zin16 <= zout15_1 WHEN enb_1_2_1 = '1' ELSE
      Pipeline15_bypass_reg;

  zin16_1 <= std_logic_vector(zin16);

  DelayQC_Control_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        DelayQC_Control_reg <= (OTHERS => to_unsigned(16#00#, 5));
      ELSIF enb_1_2_0 = '1' THEN
        DelayQC_Control_reg(0) <= ControlQC_3;
        DelayQC_Control_reg(1 TO 14) <= DelayQC_Control_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS DelayQC_Control_process;

  ControlQCDelay <= DelayQC_Control_reg(14);

  ControlQCDelay_1 <= std_logic_vector(ControlQCDelay);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_1_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_1_reg(0) <= reset_outval;
        rd_1_reg(1) <= rd_1_reg(0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  reset_outval_1 <= rd_1_reg(1);

  zout_corrected_signed <= signed(zout_corrected);

  zeroCA <= to_signed(16#00000#, 19);

  
  outSwitchAng <= zout_corrected_signed WHEN reset_outval_1 = '0' ELSE
      zeroCA;

  Output_Register_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Output_Register_bypass_reg <= to_signed(16#00000#, 19);
      ELSIF enb_1_2_1 = '1' THEN
        Output_Register_bypass_reg <= outSwitchAng;
      END IF;
    END IF;
  END PROCESS Output_Register_bypass_process;

  
  zout_corrected_1 <= outSwitchAng WHEN enb_1_2_1 = '1' ELSE
      Output_Register_bypass_reg;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(16#00000#, 19));
      ELSIF enb_1_2_0 = '1' THEN
        Delay2_reg(0) <= zout_corrected_1;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Delay2_out1_1 <= Delay2_out1;

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister1_reg <= (OTHERS => to_signed(16#00000#, 19));
      ELSIF enb = '1' THEN
        HwModeRegister1_reg(0) <= Delay2_out1_1;
        HwModeRegister1_reg(1) <= HwModeRegister1_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  Delay2_out1_2 <= HwModeRegister1_reg(1);

  Gain_cast <= signed(resize(kconst_1, 33));
  Gain_mul_temp <= Gain_cast * Delay2_out1_2;
  Gain_cast_1 <= Gain_mul_temp(50 DOWNTO 0);
  Gain_out1 <= Gain_cast_1(49 DOWNTO 34);

  crp_out_delay37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        crp_out_delay37_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        crp_out_delay37_reg(0) <= Gain_out1;
        crp_out_delay37_reg(1) <= crp_out_delay37_reg(0);
      END IF;
    END IF;
  END PROCESS crp_out_delay37_process;

  Gain_out1_1 <= crp_out_delay37_reg(1);

  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg <= Gain_out1_1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= Gain_out1_1 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg;

  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1 <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        Unit_Delay_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  
  Switch_out1 <= Unit_Delay_out1 WHEN Delay1_out1 = '0' ELSE
      Delay_out1;

  frequency_offset <= std_logic_vector(Switch_out1);



END rtl;

