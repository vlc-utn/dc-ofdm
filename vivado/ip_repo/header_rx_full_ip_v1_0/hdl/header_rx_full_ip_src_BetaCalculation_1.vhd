-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxHeader/header_rx_full_ip_src_BetaCalculation_1.vhd
-- Created: 2024-10-03 10:46:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: header_rx_full_ip_src_BetaCalculation_1
-- Source Path: HDLRxHeader/h_rx_full/LDPC_Deco_Hc_12H/DecoderCore/FunctionalUnit/BetaDecompress_1/BetaCalculation_1
-- Hierarchy Level: 5
-- Model version: 1.36
-- 
-- Beta Calculation Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.header_rx_full_ip_src_h_rx_full_pac.ALL;

ENTITY header_rx_full_ip_src_BetaCalculation_1 IS
  PORT( signs                             :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix1 [14]
        prodsign                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix1 [14]
        minidx                            :   IN    vector_of_std_logic_vector3(0 TO 13);  -- ufix3 [14]
        min1                              :   IN    vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
        min2                              :   IN    vector_of_std_logic_vector4(0 TO 13);  -- ufix4 [14]
        count                             :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
        beta                              :   OUT   vector_of_std_logic_vector4(0 TO 13)  -- sfix4 [14]
        );
END header_rx_full_ip_src_BetaCalculation_1;


ARCHITECTURE rtl OF header_rx_full_ip_src_BetaCalculation_1 IS

  -- Signals
  SIGNAL prodsign_0                       : std_logic;  -- ufix1
  SIGNAL signs_0                          : std_logic;  -- ufix1
  SIGNAL prodsign_0_1                     : std_logic;  -- ufix1
  SIGNAL count_unsigned                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL minidx_unsigned                  : vector_of_unsigned3(0 TO 13);  -- ufix3 [14]
  SIGNAL const1                           : std_logic;  -- ufix1
  SIGNAL AddComp_add_cast                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL countIdx                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL minind                           : std_logic_vector(13 DOWNTO 0);  -- ufix1 [14]
  SIGNAL minind_0                         : std_logic;  -- ufix1
  SIGNAL min1_0                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_0                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_1                         : std_logic;  -- ufix1
  SIGNAL min1_1                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_1                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_2                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_2                         : std_logic;  -- ufix1
  SIGNAL min1_2                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_2                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_3                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_3                         : std_logic;  -- ufix1
  SIGNAL min1_3                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_3                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_4                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_4                         : std_logic;  -- ufix1
  SIGNAL min1_4                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_4                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_5                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_5                         : std_logic;  -- ufix1
  SIGNAL min1_5                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_5                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_6                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_6                         : std_logic;  -- ufix1
  SIGNAL min1_6                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_6                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_7                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_7                         : std_logic;  -- ufix1
  SIGNAL min1_7                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_7                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_8                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_8                         : std_logic;  -- ufix1
  SIGNAL min1_8                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_8                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_9                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_9                         : std_logic;  -- ufix1
  SIGNAL min1_9                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_9                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_10                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_10                        : std_logic;  -- ufix1
  SIGNAL min1_10                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_10                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_11                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_11                        : std_logic;  -- ufix1
  SIGNAL min1_11                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_11                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_12                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_12                        : std_logic;  -- ufix1
  SIGNAL min1_12                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_12                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_13                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL minind_13                        : std_logic;  -- ufix1
  SIGNAL min1_13                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL min2_13                          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag_array_14                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL mag                              : vector_of_unsigned4(0 TO 13);  -- ufix4 [14]
  SIGNAL mag_dtc                          : vector_of_signed4(0 TO 13);  -- sfix4 [14]
  SIGNAL uminusComp_in0                   : vector_of_signed5(0 TO 13);  -- sfix5 [14]
  SIGNAL smag                             : vector_of_signed4(0 TO 13);  -- sfix4 [14]
  SIGNAL smag_0                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_1                       : std_logic;  -- ufix1
  SIGNAL signs_1                          : std_logic;  -- ufix1
  SIGNAL prodsign_1_1                     : std_logic;  -- ufix1
  SIGNAL smag_1                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_2                       : std_logic;  -- ufix1
  SIGNAL signs_2                          : std_logic;  -- ufix1
  SIGNAL prodsign_2_1                     : std_logic;  -- ufix1
  SIGNAL smag_2                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_3                       : std_logic;  -- ufix1
  SIGNAL signs_3                          : std_logic;  -- ufix1
  SIGNAL prodsign_3_1                     : std_logic;  -- ufix1
  SIGNAL smag_3                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_4                       : std_logic;  -- ufix1
  SIGNAL signs_4                          : std_logic;  -- ufix1
  SIGNAL prodsign_4_1                     : std_logic;  -- ufix1
  SIGNAL smag_4                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_5                       : std_logic;  -- ufix1
  SIGNAL signs_5                          : std_logic;  -- ufix1
  SIGNAL prodsign_5_1                     : std_logic;  -- ufix1
  SIGNAL smag_5                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_6                       : std_logic;  -- ufix1
  SIGNAL signs_6                          : std_logic;  -- ufix1
  SIGNAL prodsign_6_1                     : std_logic;  -- ufix1
  SIGNAL smag_6                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_7                       : std_logic;  -- ufix1
  SIGNAL signs_7                          : std_logic;  -- ufix1
  SIGNAL prodsign_7_1                     : std_logic;  -- ufix1
  SIGNAL smag_7                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_8                       : std_logic;  -- ufix1
  SIGNAL signs_8                          : std_logic;  -- ufix1
  SIGNAL prodsign_8_1                     : std_logic;  -- ufix1
  SIGNAL smag_8                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_9                       : std_logic;  -- ufix1
  SIGNAL signs_9                          : std_logic;  -- ufix1
  SIGNAL prodsign_9_1                     : std_logic;  -- ufix1
  SIGNAL smag_9                           : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_10                      : std_logic;  -- ufix1
  SIGNAL signs_10                         : std_logic;  -- ufix1
  SIGNAL prodsign_10_1                    : std_logic;  -- ufix1
  SIGNAL smag_10                          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_11                      : std_logic;  -- ufix1
  SIGNAL signs_11                         : std_logic;  -- ufix1
  SIGNAL prodsign_11_1                    : std_logic;  -- ufix1
  SIGNAL smag_11                          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_12                      : std_logic;  -- ufix1
  SIGNAL signs_12                         : std_logic;  -- ufix1
  SIGNAL prodsign_12_1                    : std_logic;  -- ufix1
  SIGNAL smag_12                          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL prodsign_13                      : std_logic;  -- ufix1
  SIGNAL signs_13                         : std_logic;  -- ufix1
  SIGNAL prodsign_13_1                    : std_logic;  -- ufix1
  SIGNAL smag_13                          : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_0                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_1                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_1                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_2                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_2                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_3                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_3                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_4                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_4                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_5                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_5                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_6                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_6                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_7                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_7                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_8                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_8                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_9                    : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_9                        : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_10                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_10                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_11                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_11                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_12                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_12                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_13                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL mag_dtc_13                       : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betad_array_14                   : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL betaD                            : vector_of_signed4(0 TO 13);  -- sfix4 [14]

BEGIN
  prodsign_0 <= prodsign(0);

  signs_0 <= signs(0);

  prodsign_0_1 <=  NOT (prodsign_0 XOR signs_0);

  count_unsigned <= unsigned(count);

  outputgen1: FOR k IN 0 TO 13 GENERATE
    minidx_unsigned(k) <= unsigned(minidx(k));
  END GENERATE;

  const1 <= '1';

  AddComp_add_cast <= '0' & '0' & const1;
  countIdx <= count_unsigned + AddComp_add_cast;


  minind_gen: FOR t_0 IN 0 TO 13 GENERATE
    
    minind(t_0) <= '1' WHEN minidx_unsigned(t_0) = countIdx ELSE
        '0';
  END GENERATE minind_gen;


  minind_0 <= minind(0);

  min1_0 <= unsigned(min1(0));

  min2_0 <= unsigned(min2(0));

  
  mag_array_1 <= min1_0 WHEN minind_0 = '0' ELSE
      min2_0;

  minind_1 <= minind(1);

  min1_1 <= unsigned(min1(1));

  min2_1 <= unsigned(min2(1));

  
  mag_array_2 <= min1_1 WHEN minind_1 = '0' ELSE
      min2_1;

  minind_2 <= minind(2);

  min1_2 <= unsigned(min1(2));

  min2_2 <= unsigned(min2(2));

  
  mag_array_3 <= min1_2 WHEN minind_2 = '0' ELSE
      min2_2;

  minind_3 <= minind(3);

  min1_3 <= unsigned(min1(3));

  min2_3 <= unsigned(min2(3));

  
  mag_array_4 <= min1_3 WHEN minind_3 = '0' ELSE
      min2_3;

  minind_4 <= minind(4);

  min1_4 <= unsigned(min1(4));

  min2_4 <= unsigned(min2(4));

  
  mag_array_5 <= min1_4 WHEN minind_4 = '0' ELSE
      min2_4;

  minind_5 <= minind(5);

  min1_5 <= unsigned(min1(5));

  min2_5 <= unsigned(min2(5));

  
  mag_array_6 <= min1_5 WHEN minind_5 = '0' ELSE
      min2_5;

  minind_6 <= minind(6);

  min1_6 <= unsigned(min1(6));

  min2_6 <= unsigned(min2(6));

  
  mag_array_7 <= min1_6 WHEN minind_6 = '0' ELSE
      min2_6;

  minind_7 <= minind(7);

  min1_7 <= unsigned(min1(7));

  min2_7 <= unsigned(min2(7));

  
  mag_array_8 <= min1_7 WHEN minind_7 = '0' ELSE
      min2_7;

  minind_8 <= minind(8);

  min1_8 <= unsigned(min1(8));

  min2_8 <= unsigned(min2(8));

  
  mag_array_9 <= min1_8 WHEN minind_8 = '0' ELSE
      min2_8;

  minind_9 <= minind(9);

  min1_9 <= unsigned(min1(9));

  min2_9 <= unsigned(min2(9));

  
  mag_array_10 <= min1_9 WHEN minind_9 = '0' ELSE
      min2_9;

  minind_10 <= minind(10);

  min1_10 <= unsigned(min1(10));

  min2_10 <= unsigned(min2(10));

  
  mag_array_11 <= min1_10 WHEN minind_10 = '0' ELSE
      min2_10;

  minind_11 <= minind(11);

  min1_11 <= unsigned(min1(11));

  min2_11 <= unsigned(min2(11));

  
  mag_array_12 <= min1_11 WHEN minind_11 = '0' ELSE
      min2_11;

  minind_12 <= minind(12);

  min1_12 <= unsigned(min1(12));

  min2_12 <= unsigned(min2(12));

  
  mag_array_13 <= min1_12 WHEN minind_12 = '0' ELSE
      min2_12;

  minind_13 <= minind(13);

  min1_13 <= unsigned(min1(13));

  min2_13 <= unsigned(min2(13));

  
  mag_array_14 <= min1_13 WHEN minind_13 = '0' ELSE
      min2_13;

  mag(0) <= mag_array_1;
  mag(1) <= mag_array_2;
  mag(2) <= mag_array_3;
  mag(3) <= mag_array_4;
  mag(4) <= mag_array_5;
  mag(5) <= mag_array_6;
  mag(6) <= mag_array_7;
  mag(7) <= mag_array_8;
  mag(8) <= mag_array_9;
  mag(9) <= mag_array_10;
  mag(10) <= mag_array_11;
  mag(11) <= mag_array_12;
  mag(12) <= mag_array_13;
  mag(13) <= mag_array_14;


  mag_dtc_gen: FOR ii IN 0 TO 13 GENERATE
    mag_dtc(ii) <= signed(mag(ii));
  END GENERATE mag_dtc_gen;



  smag_gen: FOR t_01 IN 0 TO 13 GENERATE
    uminusComp_in0(t_01) <=  - (resize(mag_dtc(t_01), 5));
    smag(t_01) <= uminusComp_in0(t_01)(3 DOWNTO 0);
  END GENERATE smag_gen;


  smag_0 <= smag(0);

  prodsign_1 <= prodsign(1);

  signs_1 <= signs(1);

  prodsign_1_1 <=  NOT (prodsign_1 XOR signs_1);

  smag_1 <= smag(1);

  prodsign_2 <= prodsign(2);

  signs_2 <= signs(2);

  prodsign_2_1 <=  NOT (prodsign_2 XOR signs_2);

  smag_2 <= smag(2);

  prodsign_3 <= prodsign(3);

  signs_3 <= signs(3);

  prodsign_3_1 <=  NOT (prodsign_3 XOR signs_3);

  smag_3 <= smag(3);

  prodsign_4 <= prodsign(4);

  signs_4 <= signs(4);

  prodsign_4_1 <=  NOT (prodsign_4 XOR signs_4);

  smag_4 <= smag(4);

  prodsign_5 <= prodsign(5);

  signs_5 <= signs(5);

  prodsign_5_1 <=  NOT (prodsign_5 XOR signs_5);

  smag_5 <= smag(5);

  prodsign_6 <= prodsign(6);

  signs_6 <= signs(6);

  prodsign_6_1 <=  NOT (prodsign_6 XOR signs_6);

  smag_6 <= smag(6);

  prodsign_7 <= prodsign(7);

  signs_7 <= signs(7);

  prodsign_7_1 <=  NOT (prodsign_7 XOR signs_7);

  smag_7 <= smag(7);

  prodsign_8 <= prodsign(8);

  signs_8 <= signs(8);

  prodsign_8_1 <=  NOT (prodsign_8 XOR signs_8);

  smag_8 <= smag(8);

  prodsign_9 <= prodsign(9);

  signs_9 <= signs(9);

  prodsign_9_1 <=  NOT (prodsign_9 XOR signs_9);

  smag_9 <= smag(9);

  prodsign_10 <= prodsign(10);

  signs_10 <= signs(10);

  prodsign_10_1 <=  NOT (prodsign_10 XOR signs_10);

  smag_10 <= smag(10);

  prodsign_11 <= prodsign(11);

  signs_11 <= signs(11);

  prodsign_11_1 <=  NOT (prodsign_11 XOR signs_11);

  smag_11 <= smag(11);

  prodsign_12 <= prodsign(12);

  signs_12 <= signs(12);

  prodsign_12_1 <=  NOT (prodsign_12 XOR signs_12);

  smag_12 <= smag(12);

  prodsign_13 <= prodsign(13);

  signs_13 <= signs(13);

  prodsign_13_1 <=  NOT (prodsign_13 XOR signs_13);

  smag_13 <= smag(13);

  mag_dtc_0 <= mag_dtc(0);

  
  betad_array_1 <= smag_0 WHEN prodsign_0_1 = '0' ELSE
      mag_dtc_0;

  mag_dtc_1 <= mag_dtc(1);

  
  betad_array_2 <= smag_1 WHEN prodsign_1_1 = '0' ELSE
      mag_dtc_1;

  mag_dtc_2 <= mag_dtc(2);

  
  betad_array_3 <= smag_2 WHEN prodsign_2_1 = '0' ELSE
      mag_dtc_2;

  mag_dtc_3 <= mag_dtc(3);

  
  betad_array_4 <= smag_3 WHEN prodsign_3_1 = '0' ELSE
      mag_dtc_3;

  mag_dtc_4 <= mag_dtc(4);

  
  betad_array_5 <= smag_4 WHEN prodsign_4_1 = '0' ELSE
      mag_dtc_4;

  mag_dtc_5 <= mag_dtc(5);

  
  betad_array_6 <= smag_5 WHEN prodsign_5_1 = '0' ELSE
      mag_dtc_5;

  mag_dtc_6 <= mag_dtc(6);

  
  betad_array_7 <= smag_6 WHEN prodsign_6_1 = '0' ELSE
      mag_dtc_6;

  mag_dtc_7 <= mag_dtc(7);

  
  betad_array_8 <= smag_7 WHEN prodsign_7_1 = '0' ELSE
      mag_dtc_7;

  mag_dtc_8 <= mag_dtc(8);

  
  betad_array_9 <= smag_8 WHEN prodsign_8_1 = '0' ELSE
      mag_dtc_8;

  mag_dtc_9 <= mag_dtc(9);

  
  betad_array_10 <= smag_9 WHEN prodsign_9_1 = '0' ELSE
      mag_dtc_9;

  mag_dtc_10 <= mag_dtc(10);

  
  betad_array_11 <= smag_10 WHEN prodsign_10_1 = '0' ELSE
      mag_dtc_10;

  mag_dtc_11 <= mag_dtc(11);

  
  betad_array_12 <= smag_11 WHEN prodsign_11_1 = '0' ELSE
      mag_dtc_11;

  mag_dtc_12 <= mag_dtc(12);

  
  betad_array_13 <= smag_12 WHEN prodsign_12_1 = '0' ELSE
      mag_dtc_12;

  mag_dtc_13 <= mag_dtc(13);

  
  betad_array_14 <= smag_13 WHEN prodsign_13_1 = '0' ELSE
      mag_dtc_13;

  betaD(0) <= betad_array_1;
  betaD(1) <= betad_array_2;
  betaD(2) <= betad_array_3;
  betaD(3) <= betad_array_4;
  betaD(4) <= betad_array_5;
  betaD(5) <= betad_array_6;
  betaD(6) <= betad_array_7;
  betaD(7) <= betad_array_8;
  betaD(8) <= betad_array_9;
  betaD(9) <= betad_array_10;
  betaD(10) <= betad_array_11;
  betaD(11) <= betad_array_12;
  betaD(12) <= betad_array_13;
  betaD(13) <= betad_array_14;

  outputgen: FOR k IN 0 TO 13 GENERATE
    beta(k) <= std_logic_vector(betaD(k));
  END GENERATE;

END rtl;

