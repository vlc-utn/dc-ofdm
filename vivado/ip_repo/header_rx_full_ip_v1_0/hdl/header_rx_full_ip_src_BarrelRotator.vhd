-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxHeader/header_rx_full_ip_src_BarrelRotator.vhd
-- Created: 2024-10-03 10:46:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: header_rx_full_ip_src_BarrelRotator
-- Source Path: HDLRxHeader/h_rx_full/LDPC_Deco_Hc_12H/DecoderCore/BarrelRotator
-- Hierarchy Level: 3
-- Model version: 1.36
-- 
-- Barrel Rotator Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.header_rx_full_ip_src_h_rx_full_pac.ALL;

ENTITY header_rx_full_ip_src_BarrelRotator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    vector_of_std_logic_vector6(0 TO 13);  -- sfix6 [14]
        shift                             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        shiftData                         :   OUT   vector_of_std_logic_vector6(0 TO 13)  -- sfix6 [14]
        );
END header_rx_full_ip_src_BarrelRotator;


ARCHITECTURE rtl OF header_rx_full_ip_src_BarrelRotator IS

  -- Signals
  SIGNAL shift_unsigned                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL vShift_4                         : std_logic;  -- ufix1
  SIGNAL vShift_3                         : std_logic;  -- ufix1
  SIGNAL vShift_2                         : std_logic;  -- ufix1
  SIGNAL vShift_1                         : std_logic;  -- ufix1
  SIGNAL data_0                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_1                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_2                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_3                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_4                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_5                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_6                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_7                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_8                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_9                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_10                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_11                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_12                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_13                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL sDataReg                         : vector_of_signed6(0 TO 13);  -- sfix6 [14]
  SIGNAL shiftData_tmp                    : vector_of_signed6(0 TO 13);  -- sfix6 [14]

BEGIN
  shift_unsigned <= unsigned(shift);

  vShift_4 <= shift_unsigned(3);

  vShift_3 <= shift_unsigned(2);

  vShift_2 <= shift_unsigned(1);

  vShift_1 <= shift_unsigned(0);

  data_0 <= signed(data(0));

  data_1 <= signed(data(1));

  
  dout_stage1_1 <= data_0 WHEN vShift_1 = '0' ELSE
      data_1;

  data_2 <= signed(data(2));

  data_3 <= signed(data(3));

  
  dout_stage1_3 <= data_2 WHEN vShift_1 = '0' ELSE
      data_3;

  
  dout_stage2_1 <= dout_stage1_1 WHEN vShift_2 = '0' ELSE
      dout_stage1_3;

  data_4 <= signed(data(4));

  data_5 <= signed(data(5));

  
  dout_stage1_5 <= data_4 WHEN vShift_1 = '0' ELSE
      data_5;

  data_6 <= signed(data(6));

  data_7 <= signed(data(7));

  
  dout_stage1_7 <= data_6 WHEN vShift_1 = '0' ELSE
      data_7;

  
  dout_stage2_5 <= dout_stage1_5 WHEN vShift_2 = '0' ELSE
      dout_stage1_7;

  
  dout_stage3_1 <= dout_stage2_1 WHEN vShift_3 = '0' ELSE
      dout_stage2_5;

  data_8 <= signed(data(8));

  data_9 <= signed(data(9));

  
  dout_stage1_9 <= data_8 WHEN vShift_1 = '0' ELSE
      data_9;

  data_10 <= signed(data(10));

  data_11 <= signed(data(11));

  
  dout_stage1_11 <= data_10 WHEN vShift_1 = '0' ELSE
      data_11;

  
  dout_stage2_9 <= dout_stage1_9 WHEN vShift_2 = '0' ELSE
      dout_stage1_11;

  data_12 <= signed(data(12));

  data_13 <= signed(data(13));

  
  dout_stage1_13 <= data_12 WHEN vShift_1 = '0' ELSE
      data_13;

  
  dout_stage2_13 <= dout_stage1_13 WHEN vShift_2 = '0' ELSE
      dout_stage1_1;

  
  dout_stage3_9 <= dout_stage2_9 WHEN vShift_3 = '0' ELSE
      dout_stage2_13;

  
  dout_stage4_1 <= dout_stage3_1 WHEN vShift_4 = '0' ELSE
      dout_stage3_9;

  
  dout_stage1_2 <= data_1 WHEN vShift_1 = '0' ELSE
      data_2;

  
  dout_stage1_4 <= data_3 WHEN vShift_1 = '0' ELSE
      data_4;

  
  dout_stage2_2 <= dout_stage1_2 WHEN vShift_2 = '0' ELSE
      dout_stage1_4;

  
  dout_stage1_6 <= data_5 WHEN vShift_1 = '0' ELSE
      data_6;

  
  dout_stage1_8 <= data_7 WHEN vShift_1 = '0' ELSE
      data_8;

  
  dout_stage2_6 <= dout_stage1_6 WHEN vShift_2 = '0' ELSE
      dout_stage1_8;

  
  dout_stage3_2 <= dout_stage2_2 WHEN vShift_3 = '0' ELSE
      dout_stage2_6;

  
  dout_stage1_10 <= data_9 WHEN vShift_1 = '0' ELSE
      data_10;

  
  dout_stage1_12 <= data_11 WHEN vShift_1 = '0' ELSE
      data_12;

  
  dout_stage2_10 <= dout_stage1_10 WHEN vShift_2 = '0' ELSE
      dout_stage1_12;

  
  dout_stage1_14 <= data_13 WHEN vShift_1 = '0' ELSE
      data_0;

  
  dout_stage2_14 <= dout_stage1_14 WHEN vShift_2 = '0' ELSE
      dout_stage1_2;

  
  dout_stage3_10 <= dout_stage2_10 WHEN vShift_3 = '0' ELSE
      dout_stage2_14;

  
  dout_stage4_2 <= dout_stage3_2 WHEN vShift_4 = '0' ELSE
      dout_stage3_10;

  
  dout_stage2_3 <= dout_stage1_3 WHEN vShift_2 = '0' ELSE
      dout_stage1_5;

  
  dout_stage2_7 <= dout_stage1_7 WHEN vShift_2 = '0' ELSE
      dout_stage1_9;

  
  dout_stage3_3 <= dout_stage2_3 WHEN vShift_3 = '0' ELSE
      dout_stage2_7;

  
  dout_stage2_11 <= dout_stage1_11 WHEN vShift_2 = '0' ELSE
      dout_stage1_13;

  
  dout_stage3_11 <= dout_stage2_11 WHEN vShift_3 = '0' ELSE
      dout_stage2_1;

  
  dout_stage4_3 <= dout_stage3_3 WHEN vShift_4 = '0' ELSE
      dout_stage3_11;

  
  dout_stage2_4 <= dout_stage1_4 WHEN vShift_2 = '0' ELSE
      dout_stage1_6;

  
  dout_stage2_8 <= dout_stage1_8 WHEN vShift_2 = '0' ELSE
      dout_stage1_10;

  
  dout_stage3_4 <= dout_stage2_4 WHEN vShift_3 = '0' ELSE
      dout_stage2_8;

  
  dout_stage2_12 <= dout_stage1_12 WHEN vShift_2 = '0' ELSE
      dout_stage1_14;

  
  dout_stage3_12 <= dout_stage2_12 WHEN vShift_3 = '0' ELSE
      dout_stage2_2;

  
  dout_stage4_4 <= dout_stage3_4 WHEN vShift_4 = '0' ELSE
      dout_stage3_12;

  
  dout_stage3_5 <= dout_stage2_5 WHEN vShift_3 = '0' ELSE
      dout_stage2_9;

  
  dout_stage3_13 <= dout_stage2_13 WHEN vShift_3 = '0' ELSE
      dout_stage2_3;

  
  dout_stage4_5 <= dout_stage3_5 WHEN vShift_4 = '0' ELSE
      dout_stage3_13;

  
  dout_stage3_6 <= dout_stage2_6 WHEN vShift_3 = '0' ELSE
      dout_stage2_10;

  
  dout_stage3_14 <= dout_stage2_14 WHEN vShift_3 = '0' ELSE
      dout_stage2_4;

  
  dout_stage4_6 <= dout_stage3_6 WHEN vShift_4 = '0' ELSE
      dout_stage3_14;

  
  dout_stage3_7 <= dout_stage2_7 WHEN vShift_3 = '0' ELSE
      dout_stage2_11;

  
  dout_stage4_7 <= dout_stage3_7 WHEN vShift_4 = '0' ELSE
      dout_stage3_1;

  
  dout_stage3_8 <= dout_stage2_8 WHEN vShift_3 = '0' ELSE
      dout_stage2_12;

  
  dout_stage4_8 <= dout_stage3_8 WHEN vShift_4 = '0' ELSE
      dout_stage3_2;

  
  dout_stage4_9 <= dout_stage3_9 WHEN vShift_4 = '0' ELSE
      dout_stage3_3;

  
  dout_stage4_10 <= dout_stage3_10 WHEN vShift_4 = '0' ELSE
      dout_stage3_4;

  
  dout_stage4_11 <= dout_stage3_11 WHEN vShift_4 = '0' ELSE
      dout_stage3_5;

  
  dout_stage4_12 <= dout_stage3_12 WHEN vShift_4 = '0' ELSE
      dout_stage3_6;

  
  dout_stage4_13 <= dout_stage3_13 WHEN vShift_4 = '0' ELSE
      dout_stage3_7;

  
  dout_stage4_14 <= dout_stage3_14 WHEN vShift_4 = '0' ELSE
      dout_stage3_8;

  sDataReg(0) <= dout_stage4_1;
  sDataReg(1) <= dout_stage4_2;
  sDataReg(2) <= dout_stage4_3;
  sDataReg(3) <= dout_stage4_4;
  sDataReg(4) <= dout_stage4_5;
  sDataReg(5) <= dout_stage4_6;
  sDataReg(6) <= dout_stage4_7;
  sDataReg(7) <= dout_stage4_8;
  sDataReg(8) <= dout_stage4_9;
  sDataReg(9) <= dout_stage4_10;
  sDataReg(10) <= dout_stage4_11;
  sDataReg(11) <= dout_stage4_12;
  sDataReg(12) <= dout_stage4_13;
  sDataReg(13) <= dout_stage4_14;

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        shiftData_tmp <= (OTHERS => to_signed(16#00#, 6));
      ELSIF enb = '1' THEN
        shiftData_tmp <= sDataReg;
      END IF;
    END IF;
  END PROCESS c_process;


  outputgen: FOR k IN 0 TO 13 GENERATE
    shiftData(k) <= std_logic_vector(shiftData_tmp(k));
  END GENERATE;

END rtl;

