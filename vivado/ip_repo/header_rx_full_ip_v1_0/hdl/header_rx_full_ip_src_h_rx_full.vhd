-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxHeader/header_rx_full_ip_src_h_rx_full.vhd
-- Created: 2024-10-03 10:46:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 8e-09
-- Target subsystem base rate: 8e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        6.4e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- psdu_size_0                   ce_out        6.4e-08
-- psdu_size_1                   ce_out        6.4e-08
-- psdu_size_2                   ce_out        6.4e-08
-- psdu_size_3                   ce_out        6.4e-08
-- psdu_size_4                   ce_out        6.4e-08
-- psdu_size_5                   ce_out        6.4e-08
-- psdu_size_6                   ce_out        6.4e-08
-- psdu_size_7                   ce_out        6.4e-08
-- psdu_size_8                   ce_out        6.4e-08
-- psdu_size_9                   ce_out        6.4e-08
-- psdu_size_10                  ce_out        6.4e-08
-- psdu_size_11                  ce_out        6.4e-08
-- psdu_size_12                  ce_out        6.4e-08
-- psdu_size_13                  ce_out        6.4e-08
-- psdu_size_14                  ce_out        6.4e-08
-- psdu_size_15                  ce_out        6.4e-08
-- psdu_size_16                  ce_out        6.4e-08
-- psdu_size_17                  ce_out        6.4e-08
-- psdu_size_18                  ce_out        6.4e-08
-- psdu_size_19                  ce_out        6.4e-08
-- psdu_size_20                  ce_out        6.4e-08
-- psdu_size_21                  ce_out        6.4e-08
-- psdu_size_22                  ce_out        6.4e-08
-- psdu_size_23                  ce_out        6.4e-08
-- msg_duration_0                ce_out        6.4e-08
-- msg_duration_1                ce_out        6.4e-08
-- msg_duration_2                ce_out        6.4e-08
-- msg_duration_3                ce_out        6.4e-08
-- msg_duration_4                ce_out        6.4e-08
-- msg_duration_5                ce_out        6.4e-08
-- msg_duration_6                ce_out        6.4e-08
-- msg_duration_7                ce_out        6.4e-08
-- msg_duration_8                ce_out        6.4e-08
-- msg_duration_9                ce_out        6.4e-08
-- msg_duration_10               ce_out        6.4e-08
-- msg_duration_11               ce_out        6.4e-08
-- msg_duration_12               ce_out        6.4e-08
-- msg_duration_13               ce_out        6.4e-08
-- msg_duration_14               ce_out        6.4e-08
-- msg_duration_15               ce_out        6.4e-08
-- block_size_0                  ce_out        6.4e-08
-- block_size_1                  ce_out        6.4e-08
-- fec_rate_0                    ce_out        6.4e-08
-- fec_rate_1                    ce_out        6.4e-08
-- fec_rate_2                    ce_out        6.4e-08
-- rep_number_0                  ce_out        6.4e-08
-- rep_number_1                  ce_out        6.4e-08
-- rep_number_2                  ce_out        6.4e-08
-- concat_factor_0               ce_out        6.4e-08
-- concat_factor_1               ce_out        6.4e-08
-- concat_factor_2               ce_out        6.4e-08
-- scrambler_init_0              ce_out        6.4e-08
-- scrambler_init_1              ce_out        6.4e-08
-- scrambler_init_2              ce_out        6.4e-08
-- scrambler_init_3              ce_out        6.4e-08
-- bat_id_0                      ce_out        6.4e-08
-- bat_id_1                      ce_out        6.4e-08
-- bat_id_2                      ce_out        6.4e-08
-- bat_id_3                      ce_out        6.4e-08
-- bat_id_4                      ce_out        6.4e-08
-- cp_id_0                       ce_out        6.4e-08
-- cp_id_1                       ce_out        6.4e-08
-- cp_id_2                       ce_out        6.4e-08
-- mimo_spacing_0                ce_out        6.4e-08
-- mimo_spacing_1                ce_out        6.4e-08
-- mimo_spacing_2                ce_out        6.4e-08
-- mimo_number_0                 ce_out        6.4e-08
-- mimo_number_1                 ce_out        6.4e-08
-- mimo_number_2                 ce_out        6.4e-08
-- end_rsvd                      ce_out        6.4e-08
-- err                           ce_out        6.4e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: header_rx_full_ip_src_h_rx_full
-- Source Path: HDLRxHeader/h_rx_full
-- Hierarchy Level: 0
-- Model version: 1.36
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY header_rx_full_ip_src_h_rx_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
        start_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        psdu_size_0                       :   OUT   std_logic;  -- ufix1
        psdu_size_1                       :   OUT   std_logic;  -- ufix1
        psdu_size_2                       :   OUT   std_logic;  -- ufix1
        psdu_size_3                       :   OUT   std_logic;  -- ufix1
        psdu_size_4                       :   OUT   std_logic;  -- ufix1
        psdu_size_5                       :   OUT   std_logic;  -- ufix1
        psdu_size_6                       :   OUT   std_logic;  -- ufix1
        psdu_size_7                       :   OUT   std_logic;  -- ufix1
        psdu_size_8                       :   OUT   std_logic;  -- ufix1
        psdu_size_9                       :   OUT   std_logic;  -- ufix1
        psdu_size_10                      :   OUT   std_logic;  -- ufix1
        psdu_size_11                      :   OUT   std_logic;  -- ufix1
        psdu_size_12                      :   OUT   std_logic;  -- ufix1
        psdu_size_13                      :   OUT   std_logic;  -- ufix1
        psdu_size_14                      :   OUT   std_logic;  -- ufix1
        psdu_size_15                      :   OUT   std_logic;  -- ufix1
        psdu_size_16                      :   OUT   std_logic;  -- ufix1
        psdu_size_17                      :   OUT   std_logic;  -- ufix1
        psdu_size_18                      :   OUT   std_logic;  -- ufix1
        psdu_size_19                      :   OUT   std_logic;  -- ufix1
        psdu_size_20                      :   OUT   std_logic;  -- ufix1
        psdu_size_21                      :   OUT   std_logic;  -- ufix1
        psdu_size_22                      :   OUT   std_logic;  -- ufix1
        psdu_size_23                      :   OUT   std_logic;  -- ufix1
        msg_duration_0                    :   OUT   std_logic;  -- ufix1
        msg_duration_1                    :   OUT   std_logic;  -- ufix1
        msg_duration_2                    :   OUT   std_logic;  -- ufix1
        msg_duration_3                    :   OUT   std_logic;  -- ufix1
        msg_duration_4                    :   OUT   std_logic;  -- ufix1
        msg_duration_5                    :   OUT   std_logic;  -- ufix1
        msg_duration_6                    :   OUT   std_logic;  -- ufix1
        msg_duration_7                    :   OUT   std_logic;  -- ufix1
        msg_duration_8                    :   OUT   std_logic;  -- ufix1
        msg_duration_9                    :   OUT   std_logic;  -- ufix1
        msg_duration_10                   :   OUT   std_logic;  -- ufix1
        msg_duration_11                   :   OUT   std_logic;  -- ufix1
        msg_duration_12                   :   OUT   std_logic;  -- ufix1
        msg_duration_13                   :   OUT   std_logic;  -- ufix1
        msg_duration_14                   :   OUT   std_logic;  -- ufix1
        msg_duration_15                   :   OUT   std_logic;  -- ufix1
        block_size_0                      :   OUT   std_logic;  -- ufix1
        block_size_1                      :   OUT   std_logic;  -- ufix1
        fec_rate_0                        :   OUT   std_logic;  -- ufix1
        fec_rate_1                        :   OUT   std_logic;  -- ufix1
        fec_rate_2                        :   OUT   std_logic;  -- ufix1
        rep_number_0                      :   OUT   std_logic;  -- ufix1
        rep_number_1                      :   OUT   std_logic;  -- ufix1
        rep_number_2                      :   OUT   std_logic;  -- ufix1
        concat_factor_0                   :   OUT   std_logic;  -- ufix1
        concat_factor_1                   :   OUT   std_logic;  -- ufix1
        concat_factor_2                   :   OUT   std_logic;  -- ufix1
        scrambler_init_0                  :   OUT   std_logic;  -- ufix1
        scrambler_init_1                  :   OUT   std_logic;  -- ufix1
        scrambler_init_2                  :   OUT   std_logic;  -- ufix1
        scrambler_init_3                  :   OUT   std_logic;  -- ufix1
        bat_id_0                          :   OUT   std_logic;  -- ufix1
        bat_id_1                          :   OUT   std_logic;  -- ufix1
        bat_id_2                          :   OUT   std_logic;  -- ufix1
        bat_id_3                          :   OUT   std_logic;  -- ufix1
        bat_id_4                          :   OUT   std_logic;  -- ufix1
        cp_id_0                           :   OUT   std_logic;  -- ufix1
        cp_id_1                           :   OUT   std_logic;  -- ufix1
        cp_id_2                           :   OUT   std_logic;  -- ufix1
        mimo_spacing_0                    :   OUT   std_logic;  -- ufix1
        mimo_spacing_1                    :   OUT   std_logic;  -- ufix1
        mimo_spacing_2                    :   OUT   std_logic;  -- ufix1
        mimo_number_0                     :   OUT   std_logic;  -- ufix1
        mimo_number_1                     :   OUT   std_logic;  -- ufix1
        mimo_number_2                     :   OUT   std_logic;  -- ufix1
        end_rsvd                          :   OUT   std_logic;
        err                               :   OUT   std_logic
        );
END header_rx_full_ip_src_h_rx_full;


ARCHITECTURE rtl OF header_rx_full_ip_src_h_rx_full IS

  -- Component Declarations
  COMPONENT header_rx_full_ip_src_h_rx_full_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_8_0                       :   OUT   std_logic;
          enb_1_8_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_h_remove_repetition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          start_in                        :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_LDPC_Deco_Hc_12H
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4
          in1_start                       :   IN    std_logic;
          in1_end                         :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          out0                            :   OUT   std_logic;
          out1_start                      :   OUT   std_logic;
          out1_end                        :   OUT   std_logic;
          out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_h_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_h_crc_rx
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic;
          err                             :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_h_separate
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          enb_1_8_1                       :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          psdu_size                       :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          msg_duration                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
          block_size                      :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
          fec_rate                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          rep_number                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          concat_factor                   :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          scrambler_init                  :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          bat_id                          :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
          cp_id                           :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_spacing                    :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          mimo_number                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
          end_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : header_rx_full_ip_src_h_rx_full_tc
    USE ENTITY work.header_rx_full_ip_src_h_rx_full_tc(rtl);

  FOR ALL : header_rx_full_ip_src_h_remove_repetition
    USE ENTITY work.header_rx_full_ip_src_h_remove_repetition(rtl);

  FOR ALL : header_rx_full_ip_src_LDPC_Deco_Hc_12H
    USE ENTITY work.header_rx_full_ip_src_LDPC_Deco_Hc_12H(rtl);

  FOR ALL : header_rx_full_ip_src_h_scrambler
    USE ENTITY work.header_rx_full_ip_src_h_scrambler(rtl);

  FOR ALL : header_rx_full_ip_src_h_crc_rx
    USE ENTITY work.header_rx_full_ip_src_h_crc_rx(rtl);

  FOR ALL : header_rx_full_ip_src_h_separate
    USE ENTITY work.header_rx_full_ip_src_h_separate(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_8_0                        : std_logic;
  SIGNAL enb_1_8_1                        : std_logic;
  SIGNAL h_remove_repetition_out1         : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL h_remove_repetition_out2_start   : std_logic;
  SIGNAL h_remove_repetition_out2_end     : std_logic;
  SIGNAL h_remove_repetition_out2_valid   : std_logic;
  SIGNAL h_remove_repetition_out1_signed  : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Delay1_out1                      : signed(3 DOWNTO 0);  -- sfix4
  SIGNAL Delay_out1_start                 : std_logic;
  SIGNAL Delay_out1_end                   : std_logic;
  SIGNAL Delay_out1_valid                 : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out1            : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out2_start      : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out2_end        : std_logic;
  SIGNAL LDPC_Deco_Hc_12H_out2_valid      : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_out1_start                : std_logic;
  SIGNAL Delay3_out1_end                  : std_logic;
  SIGNAL Delay3_out1_valid                : std_logic;
  SIGNAL h_scrambler_out1                 : std_logic;
  SIGNAL h_scrambler_out2_start           : std_logic;
  SIGNAL h_scrambler_out2_end             : std_logic;
  SIGNAL h_scrambler_out2_valid           : std_logic;
  SIGNAL h_crc_rx_out1                    : std_logic;
  SIGNAL h_crc_rx_out2_start              : std_logic;
  SIGNAL h_crc_rx_out2_valid              : std_logic;
  SIGNAL h_crc_rx_out3                    : std_logic;
  SIGNAL h_separate_out1                  : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL h_separate_out2                  : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL h_separate_out3                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL h_separate_out4                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out5                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out6                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out7                  : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL h_separate_out8                  : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL h_separate_out9                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out10                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out11                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL h_separate_out12                 : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay5_out1_1                    : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay4_out1_1                    : std_logic;
  SIGNAL Delay4_out1_2                    : std_logic;

BEGIN
  u_h_rx_full_tc : header_rx_full_ip_src_h_rx_full_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1
              );

  u_h_remove_repetition : header_rx_full_ip_src_h_remove_repetition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => data_in,  -- sfix4
              start_in => start_in,
              data_out => h_remove_repetition_out1,  -- sfix4
              ctrl_out_start => h_remove_repetition_out2_start,
              ctrl_out_end => h_remove_repetition_out2_end,
              ctrl_out_valid => h_remove_repetition_out2_valid
              );

  u_LDPC_Deco_Hc_12H : header_rx_full_ip_src_LDPC_Deco_Hc_12H
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              in0 => std_logic_vector(Delay1_out1),  -- sfix4
              in1_start => Delay_out1_start,
              in1_end => Delay_out1_end,
              in1_valid => Delay_out1_valid,
              out0 => LDPC_Deco_Hc_12H_out1,
              out1_start => LDPC_Deco_Hc_12H_out2_start,
              out1_end => LDPC_Deco_Hc_12H_out2_end,
              out1_valid => LDPC_Deco_Hc_12H_out2_valid
              );

  u_h_scrambler : header_rx_full_ip_src_h_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => Delay2_out1,
              ctrl_in_start => Delay3_out1_start,
              ctrl_in_end => Delay3_out1_end,
              ctrl_in_valid => Delay3_out1_valid,
              data_out => h_scrambler_out1,
              ctrl_out_start => h_scrambler_out2_start,
              ctrl_out_end => h_scrambler_out2_end,
              ctrl_out_valid => h_scrambler_out2_valid
              );

  u_h_crc_rx : header_rx_full_ip_src_h_crc_rx
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => h_scrambler_out1,
              ctrl_in_start => h_scrambler_out2_start,
              ctrl_in_end => h_scrambler_out2_end,
              ctrl_in_valid => h_scrambler_out2_valid,
              data_out => h_crc_rx_out1,
              ctrl_out_start => h_crc_rx_out2_start,
              ctrl_out_valid => h_crc_rx_out2_valid,
              err => h_crc_rx_out3
              );

  u_h_separate : header_rx_full_ip_src_h_separate
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1,
              data_in => h_crc_rx_out1,
              ctrl_in_start => h_crc_rx_out2_start,
              ctrl_in_valid => h_crc_rx_out2_valid,
              psdu_size => h_separate_out1,  -- ufix1 [24]
              msg_duration => h_separate_out2,  -- ufix1 [16]
              block_size => h_separate_out3,  -- ufix1 [2]
              fec_rate => h_separate_out4,  -- ufix1 [3]
              rep_number => h_separate_out5,  -- ufix1 [3]
              concat_factor => h_separate_out6,  -- ufix1 [3]
              scrambler_init => h_separate_out7,  -- ufix1 [4]
              bat_id => h_separate_out8,  -- ufix1 [5]
              cp_id => h_separate_out9,  -- ufix1 [3]
              mimo_spacing => h_separate_out10,  -- ufix1 [3]
              mimo_number => h_separate_out11,  -- ufix1 [3]
              end_rsvd => h_separate_out12
              );

  h_remove_repetition_out1_signed <= signed(h_remove_repetition_out1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        Delay1_out1 <= h_remove_repetition_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_start <= '0';
      ELSIF enb = '1' THEN
        Delay_out1_start <= h_remove_repetition_out2_start;
      END IF;
    END IF;
  END PROCESS c_process;


  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_end <= '0';
      ELSIF enb = '1' THEN
        Delay_out1_end <= h_remove_repetition_out2_end;
      END IF;
    END IF;
  END PROCESS c_1_process;


  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_valid <= '0';
      ELSIF enb = '1' THEN
        Delay_out1_valid <= h_remove_repetition_out2_valid;
      END IF;
    END IF;
  END PROCESS c_2_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= LDPC_Deco_Hc_12H_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_start <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_start <= LDPC_Deco_Hc_12H_out2_start;
      END IF;
    END IF;
  END PROCESS c_3_process;


  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_end <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_end <= LDPC_Deco_Hc_12H_out2_end;
      END IF;
    END IF;
  END PROCESS c_4_process;


  c_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_valid <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_valid <= LDPC_Deco_Hc_12H_out2_valid;
      END IF;
    END IF;
  END PROCESS c_5_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Delay5_out1 <= h_separate_out12;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Delay5_out1_1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Rate_Transition_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Delay4_out1 <= h_crc_rx_out3;
      END IF;
    END IF;
  END PROCESS Rate_Transition_output_process;


  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Delay4_out1_1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1_2 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Delay4_out1_2 <= Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  ce_out <= enb_1_8_1;

  psdu_size_0 <= h_separate_out1(0);

  psdu_size_1 <= h_separate_out1(1);

  psdu_size_2 <= h_separate_out1(2);

  psdu_size_3 <= h_separate_out1(3);

  psdu_size_4 <= h_separate_out1(4);

  psdu_size_5 <= h_separate_out1(5);

  psdu_size_6 <= h_separate_out1(6);

  psdu_size_7 <= h_separate_out1(7);

  psdu_size_8 <= h_separate_out1(8);

  psdu_size_9 <= h_separate_out1(9);

  psdu_size_10 <= h_separate_out1(10);

  psdu_size_11 <= h_separate_out1(11);

  psdu_size_12 <= h_separate_out1(12);

  psdu_size_13 <= h_separate_out1(13);

  psdu_size_14 <= h_separate_out1(14);

  psdu_size_15 <= h_separate_out1(15);

  psdu_size_16 <= h_separate_out1(16);

  psdu_size_17 <= h_separate_out1(17);

  psdu_size_18 <= h_separate_out1(18);

  psdu_size_19 <= h_separate_out1(19);

  psdu_size_20 <= h_separate_out1(20);

  psdu_size_21 <= h_separate_out1(21);

  psdu_size_22 <= h_separate_out1(22);

  psdu_size_23 <= h_separate_out1(23);

  msg_duration_0 <= h_separate_out2(0);

  msg_duration_1 <= h_separate_out2(1);

  msg_duration_2 <= h_separate_out2(2);

  msg_duration_3 <= h_separate_out2(3);

  msg_duration_4 <= h_separate_out2(4);

  msg_duration_5 <= h_separate_out2(5);

  msg_duration_6 <= h_separate_out2(6);

  msg_duration_7 <= h_separate_out2(7);

  msg_duration_8 <= h_separate_out2(8);

  msg_duration_9 <= h_separate_out2(9);

  msg_duration_10 <= h_separate_out2(10);

  msg_duration_11 <= h_separate_out2(11);

  msg_duration_12 <= h_separate_out2(12);

  msg_duration_13 <= h_separate_out2(13);

  msg_duration_14 <= h_separate_out2(14);

  msg_duration_15 <= h_separate_out2(15);

  block_size_0 <= h_separate_out3(0);

  block_size_1 <= h_separate_out3(1);

  fec_rate_0 <= h_separate_out4(0);

  fec_rate_1 <= h_separate_out4(1);

  fec_rate_2 <= h_separate_out4(2);

  rep_number_0 <= h_separate_out5(0);

  rep_number_1 <= h_separate_out5(1);

  rep_number_2 <= h_separate_out5(2);

  concat_factor_0 <= h_separate_out6(0);

  concat_factor_1 <= h_separate_out6(1);

  concat_factor_2 <= h_separate_out6(2);

  scrambler_init_0 <= h_separate_out7(0);

  scrambler_init_1 <= h_separate_out7(1);

  scrambler_init_2 <= h_separate_out7(2);

  scrambler_init_3 <= h_separate_out7(3);

  bat_id_0 <= h_separate_out8(0);

  bat_id_1 <= h_separate_out8(1);

  bat_id_2 <= h_separate_out8(2);

  bat_id_3 <= h_separate_out8(3);

  bat_id_4 <= h_separate_out8(4);

  cp_id_0 <= h_separate_out9(0);

  cp_id_1 <= h_separate_out9(1);

  cp_id_2 <= h_separate_out9(2);

  mimo_spacing_0 <= h_separate_out10(0);

  mimo_spacing_1 <= h_separate_out10(1);

  mimo_spacing_2 <= h_separate_out10(2);

  mimo_number_0 <= h_separate_out11(0);

  mimo_number_1 <= h_separate_out11(1);

  mimo_number_2 <= h_separate_out11(2);

  end_rsvd <= Delay5_out1_1;

  err <= Delay4_out1_2;

END rtl;

