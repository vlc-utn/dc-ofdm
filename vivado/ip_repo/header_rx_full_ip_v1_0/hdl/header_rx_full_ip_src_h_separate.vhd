-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRxHeader/header_rx_full_ip_src_h_separate.vhd
-- Created: 2024-10-03 10:46:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: header_rx_full_ip_src_h_separate
-- Source Path: HDLRxHeader/h_rx_full/h_separate
-- Hierarchy Level: 1
-- Model version: 1.36
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY header_rx_full_ip_src_h_separate IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        data_in                           :   IN    std_logic;
        ctrl_in_start                     :   IN    std_logic;
        ctrl_in_valid                     :   IN    std_logic;
        psdu_size                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
        msg_duration                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
        block_size                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
        fec_rate                          :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        rep_number                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        concat_factor                     :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        scrambler_init                    :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
        bat_id                            :   OUT   std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
        cp_id                             :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_spacing                      :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        mimo_number                       :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
        end_rsvd                          :   OUT   std_logic
        );
END header_rx_full_ip_src_h_separate;


ARCHITECTURE rtl OF header_rx_full_ip_src_h_separate IS

  -- Component Declarations
  COMPONENT header_rx_full_ip_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_Compare_To_Constant1
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_Compare_To_Constant2
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_Compare_To_Constant3
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_Compare_To_Constant4
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_Compare_To_Constant5
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_Compare_To_Constant6
    PORT( u                               :   IN    std_logic_vector(4 DOWNTO 0);  -- ufix5
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT header_rx_full_ip_src_rising_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : header_rx_full_ip_src_Compare_To_Constant
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant(rtl);

  FOR ALL : header_rx_full_ip_src_Compare_To_Constant1
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant1(rtl);

  FOR ALL : header_rx_full_ip_src_Compare_To_Constant2
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant2(rtl);

  FOR ALL : header_rx_full_ip_src_Compare_To_Constant3
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant3(rtl);

  FOR ALL : header_rx_full_ip_src_Compare_To_Constant4
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant4(rtl);

  FOR ALL : header_rx_full_ip_src_Compare_To_Constant5
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant5(rtl);

  FOR ALL : header_rx_full_ip_src_Compare_To_Constant6
    USE ENTITY work.header_rx_full_ip_src_Compare_To_Constant6(rtl);

  FOR ALL : header_rx_full_ip_src_rising_edge_detector
    USE ENTITY work.header_rx_full_ip_src_rising_edge_detector(rtl);

  -- Signals
  SIGNAL serial                           : std_logic;
  SIGNAL stateControl                     : std_logic;
  SIGNAL delayMatch20_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL start                            : std_logic;
  SIGNAL start_1                          : std_logic;
  SIGNAL Tapped_Delay_reg                 : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL Tapped_Delay_out1                : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Tapped_Delay_out1_0              : std_logic;
  SIGNAL Tapped_Delay_out1_1              : std_logic;
  SIGNAL Tapped_Delay_out1_2              : std_logic;
  SIGNAL Tapped_Delay_out1_3              : std_logic;
  SIGNAL Tapped_Delay_out1_4              : std_logic;
  SIGNAL Tapped_Delay_out1_5              : std_logic;
  SIGNAL Tapped_Delay_out1_6              : std_logic;
  SIGNAL Tapped_Delay_out1_7              : std_logic;
  SIGNAL Bitwise_Operator_out1            : std_logic;
  SIGNAL Rate_Transition_out1             : std_logic;
  SIGNAL Rate_Transition_out1_1           : std_logic;
  SIGNAL Rate_Transition_out1_2           : std_logic;
  SIGNAL rd_15_reg                        : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Rate_Transition_out1_3           : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL Deserializer1D_contl_cnt         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntGlobal   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cnt_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntGlobal_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_hOutSignalsContl  : std_logic;
  SIGNAL Deserializer1D_deserInnerOut     : std_logic;
  SIGNAL Deserializer1D_OutRegComp_reg    : std_logic;  -- ufix1
  SIGNAL Deserializer1D_out2              : std_logic;
  SIGNAL Deserializer1D_out2_1            : std_logic;
  SIGNAL rd_14_reg                        : std_logic_vector(8 DOWNTO 0);  -- ufix1 [9]
  SIGNAL Deserializer1D_out2_2            : std_logic;
  SIGNAL count_step                       : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_reset                      : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count                            : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_1                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_2                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_3                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_4                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_5                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_6                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_7                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL HDL_Counter1_bypass_reg          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_8                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_9                          : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_last_value                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL count_10                         : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL delayMatch17_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_4                   : std_logic;
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL delayMatch30_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL Deserializer1D_tapout            : std_logic_vector(6 DOWNTO 0);  -- boolean [7]
  SIGNAL Deserializer1D_muxOut            : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Deserializer1D_deserInnerOut_1   : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Deserializer1D_OutRegComp_reg_1  : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL parallel                         : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL parallel_1                       : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL delayMatch16_reg                 : std_logic_vector(63 DOWNTO 0);  -- ufix1 [64]
  SIGNAL parallel_2                       : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL parallel_3                       : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay2_bypass_reg                : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL Delay_out1                       : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay_out1_1                     : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay_out1_last_value            : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay1_out1                      : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay_out1_2                     : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay1_out1_1                    : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Delay_out1_3                     : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Vector_Concatenate_out1          : std_logic_vector(23 DOWNTO 0);  -- boolean [24]
  SIGNAL Switch_out1                      : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Switch_out1_1                    : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Unit_Delay_bypass_reg            : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Unit_Delay_out1                  : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Unit_Delay_out1_1                : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Unit_Delay_out1_last_value       : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Unit_Delay_out1_2                : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL t_bypass_reg                     : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL Switch_out1_2                    : std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
  SIGNAL count_11                         : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant1_out1        : std_logic;
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL Vector_Concatenate1_out1         : std_logic_vector(15 DOWNTO 0);  -- boolean [16]
  SIGNAL Switch1_out1                     : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Switch1_out1_1                   : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Unit_Delay1_bypass_reg           : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Unit_Delay1_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Unit_Delay1_out1_1               : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Unit_Delay1_out1_last_value      : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Unit_Delay1_out1_2               : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL t1_bypass_reg                    : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL Switch1_out1_2                   : std_logic_vector(15 DOWNTO 0);  -- ufix1 [16]
  SIGNAL count_12                         : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL delayMatch29_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL Vector_Concatenate2_out1         : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Switch2_out1                     : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Switch2_out1_1                   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay2_bypass_reg           : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay2_out1                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay2_out1_1               : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay2_out1_last_value      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Unit_Delay2_out1_2               : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL t3_bypass_reg                    : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Switch2_out1_2                   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL delayMatch28_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL Vector_Concatenate3_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch3_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch3_out1_1                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay3_bypass_reg           : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay3_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay3_out1_1               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay3_out1_last_value      : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay3_out1_2               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL t4_bypass_reg                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch3_out1_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_15                  : std_logic;
  SIGNAL delayMatch27_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_16                  : std_logic;
  SIGNAL Vector_Concatenate4_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch4_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch4_out1_1                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay4_bypass_reg           : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay4_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay4_out1_1               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay4_out1_last_value      : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay4_out1_2               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL t2_bypass_reg                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch4_out1_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL count_13                         : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant3_out1        : std_logic;
  SIGNAL stateControl_17                  : std_logic;
  SIGNAL delayMatch26_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_18                  : std_logic;
  SIGNAL Vector_Concatenate5_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch5_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch5_out1_1                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay5_bypass_reg           : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out1_1               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out1_last_value      : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay5_out1_2               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL t6_bypass_reg                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch5_out1_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_19                  : std_logic;
  SIGNAL delayMatch25_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_20                  : std_logic;
  SIGNAL Vector_Concatenate6_out1         : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Switch6_out1                     : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Switch6_out1_1                   : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Unit_Delay6_bypass_reg           : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Unit_Delay6_out1                 : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Unit_Delay6_out1_1               : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Unit_Delay6_out1_last_value      : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Unit_Delay6_out1_2               : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL t5_bypass_reg                    : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL Switch6_out1_2                   : std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
  SIGNAL count_14                         : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant4_out1        : std_logic;
  SIGNAL stateControl_21                  : std_logic;
  SIGNAL delayMatch24_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_22                  : std_logic;
  SIGNAL Vector_Concatenate7_out1         : std_logic_vector(4 DOWNTO 0);  -- boolean [5]
  SIGNAL Switch7_out1                     : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Switch7_out1_1                   : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Unit_Delay7_bypass_reg           : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Unit_Delay7_out1                 : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Unit_Delay7_out1_1               : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Unit_Delay7_out1_last_value      : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Unit_Delay7_out1_2               : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL t7_bypass_reg                    : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL Switch7_out1_2                   : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL count_15                         : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant5_out1        : std_logic;
  SIGNAL stateControl_23                  : std_logic;
  SIGNAL delayMatch23_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_24                  : std_logic;
  SIGNAL Vector_Concatenate8_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch8_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch8_out1_1                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay8_bypass_reg           : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay8_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay8_out1_1               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay8_out1_last_value      : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay8_out1_2               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL t9_bypass_reg                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch8_out1_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL stateControl_25                  : std_logic;
  SIGNAL delayMatch22_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_26                  : std_logic;
  SIGNAL Vector_Concatenate9_out1         : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch9_out1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch9_out1_1                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay9_bypass_reg           : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay9_out1                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay9_out1_1               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay9_out1_last_value      : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay9_out1_2               : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL t8_bypass_reg                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch9_out1_2                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL count_16                         : std_logic_vector(4 DOWNTO 0);  -- ufix5
  SIGNAL Compare_To_Constant6_out1        : std_logic;
  SIGNAL stateControl_27                  : std_logic;
  SIGNAL delayMatch21_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_28                  : std_logic;
  SIGNAL Vector_Concatenate10_out1        : std_logic_vector(2 DOWNTO 0);  -- boolean [3]
  SIGNAL Switch10_out1                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch10_out1_1                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay10_bypass_reg          : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay10_out1                : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay10_out1_1              : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay10_out1_last_value     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Unit_Delay10_out1_2              : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL t10_bypass_reg                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Switch10_out1_2                  : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL stateControl_29                  : std_logic;
  SIGNAL delayMatch19_reg                 : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL stateControl_30                  : std_logic;
  SIGNAL Switch11_out1                    : std_logic;
  SIGNAL Switch11_out1_1                  : std_logic;
  SIGNAL Unit_Delay11_bypass_reg          : std_logic;  -- ufix1
  SIGNAL Unit_Delay11_out1                : std_logic;
  SIGNAL Unit_Delay11_out1_1              : std_logic;
  SIGNAL Unit_Delay11_out1_last_value     : std_logic;
  SIGNAL Unit_Delay11_out1_2              : std_logic;
  SIGNAL rising_edge_detector1_bypass_reg : std_logic;  -- ufix1
  SIGNAL Switch11_out1_2                  : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_Compare_To_Constant : header_rx_full_ip_src_Compare_To_Constant
    PORT MAP( u => count_10,  -- ufix5
              y => Compare_To_Constant_out1
              );

  u_Compare_To_Constant1 : header_rx_full_ip_src_Compare_To_Constant1
    PORT MAP( u => count_11,  -- ufix5
              y => Compare_To_Constant1_out1
              );

  u_Compare_To_Constant2 : header_rx_full_ip_src_Compare_To_Constant2
    PORT MAP( u => std_logic_vector(count_12),  -- ufix5
              y => Compare_To_Constant2_out1
              );

  u_Compare_To_Constant3 : header_rx_full_ip_src_Compare_To_Constant3
    PORT MAP( u => count_13,  -- ufix5
              y => Compare_To_Constant3_out1
              );

  u_Compare_To_Constant4 : header_rx_full_ip_src_Compare_To_Constant4
    PORT MAP( u => count_14,  -- ufix5
              y => Compare_To_Constant4_out1
              );

  u_Compare_To_Constant5 : header_rx_full_ip_src_Compare_To_Constant5
    PORT MAP( u => count_15,  -- ufix5
              y => Compare_To_Constant5_out1
              );

  u_Compare_To_Constant6 : header_rx_full_ip_src_Compare_To_Constant6
    PORT MAP( u => count_16,  -- ufix5
              y => Compare_To_Constant6_out1
              );

  u_rising_edge_detector : header_rx_full_ip_src_rising_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_8_0 => enb_1_8_0,
              In_rsvd => Switch11_out1_2,
              Out_rsvd => Delay2_out1
              );

  serial <= data_in;

  stateControl <= '1';

  delayMatch20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch20_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch20_reg(0) <= stateControl;
        delayMatch20_reg(1) <= delayMatch20_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch20_process;

  stateControl_1 <= delayMatch20_reg(1);

  start <= ctrl_in_start;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        start_1 <= '0';
      ELSIF enb = '1' THEN
        start_1 <= start;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Tapped_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Tapped_Delay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Tapped_Delay_reg(6) <= start_1;
        Tapped_Delay_reg(5 DOWNTO 0) <= Tapped_Delay_reg(6 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS Tapped_Delay_process;

  Tapped_Delay_out1(6 DOWNTO 0) <= Tapped_Delay_reg(6 DOWNTO 0);
  Tapped_Delay_out1(7) <= start_1;

  Tapped_Delay_out1_0 <= Tapped_Delay_out1(0);

  Tapped_Delay_out1_1 <= Tapped_Delay_out1(1);

  Tapped_Delay_out1_2 <= Tapped_Delay_out1(2);

  Tapped_Delay_out1_3 <= Tapped_Delay_out1(3);

  Tapped_Delay_out1_4 <= Tapped_Delay_out1(4);

  Tapped_Delay_out1_5 <= Tapped_Delay_out1(5);

  Tapped_Delay_out1_6 <= Tapped_Delay_out1(6);

  Tapped_Delay_out1_7 <= Tapped_Delay_out1(7);

  Bitwise_Operator_out1 <= Tapped_Delay_out1_7 OR (Tapped_Delay_out1_6 OR (Tapped_Delay_out1_5 OR (Tapped_Delay_out1_4 OR (Tapped_Delay_out1_3 OR (Tapped_Delay_out1_2 OR (Tapped_Delay_out1_0 OR Tapped_Delay_out1_1))))));

  Rate_Transition_output_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1 <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Rate_Transition_out1 <= Bitwise_Operator_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition_output_process;


  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1_1 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Rate_Transition_out1_1 <= Rate_Transition_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Rate_Transition_out1_2 <= Rate_Transition_out1_1;

  rd_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_15_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_15_reg(0) <= Rate_Transition_out1_2;
        rd_15_reg(1) <= rd_15_reg(0);
      END IF;
    END IF;
  END PROCESS rd_15_process;

  Rate_Transition_out1_3 <= rd_15_reg(1);

  valid <= ctrl_in_valid;

  Deserializer1D_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_contl_cnt <= to_unsigned(16#0#, 4);
        Deserializer1D_contl_cntGlobal <= to_unsigned(16#0#, 4);
        Deserializer1D_contl_cntInnerRegCtrol <= to_unsigned(16#8#, 4);
      ELSIF enb = '1' THEN
        Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt_next;
        Deserializer1D_contl_cntGlobal <= Deserializer1D_contl_cntGlobal_next;
        Deserializer1D_contl_cntInnerRegCtrol <= Deserializer1D_contl_cntInnerRegCtrol_next;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_contl_output : PROCESS (Deserializer1D_contl_cnt, Deserializer1D_contl_cntGlobal,
       Deserializer1D_contl_cntInnerRegCtrol, valid)
    VARIABLE out0 : std_logic;
    VARIABLE validOutput : std_logic;
    VARIABLE cntInnerRegCtrol_temp : unsigned(3 DOWNTO 0);
  BEGIN
    cntInnerRegCtrol_temp := Deserializer1D_contl_cntInnerRegCtrol;
    Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt;
    Deserializer1D_tapDelayEn <= valid;
    Deserializer1D_hOutSignalsContl <= '0';
    out0 := '0';
    Deserializer1D_innerRegCtrolEn <= '0';
    validOutput := '0';
    IF (valid /= '0') AND (Deserializer1D_contl_cnt = to_unsigned(16#7#, 4)) THEN 
      validOutput := '1';
    END IF;
    IF validOutput = '1' THEN 
      Deserializer1D_hOutSignalsContl <= '1';
      out0 := '1';
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := Deserializer1D_contl_cntGlobal;
    END IF;
    IF ( NOT out0) = '1' AND (Deserializer1D_contl_cntGlobal = cntInnerRegCtrol_temp) THEN 
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := to_unsigned(16#8#, 4);
    END IF;
    IF valid /= '0' THEN 
      IF Deserializer1D_contl_cnt = to_unsigned(16#7#, 4) THEN 
        Deserializer1D_contl_cnt_next <= to_unsigned(16#0#, 4);
      ELSE 
        Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt + to_unsigned(16#1#, 4);
      END IF;
    END IF;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#7#, 4) THEN 
      Deserializer1D_contl_cntGlobal_next <= to_unsigned(16#0#, 4);
    ELSE 
      Deserializer1D_contl_cntGlobal_next <= Deserializer1D_contl_cntGlobal + to_unsigned(16#1#, 4);
    END IF;
    Deserializer1D_innerRegEn <= out0;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#0#, 4) THEN 
      Deserializer1D_outBypassEn <= '1';
    ELSE 
      Deserializer1D_outBypassEn <= '0';
    END IF;
    Deserializer1D_contl_cntInnerRegCtrol_next <= cntInnerRegCtrol_temp;
  END PROCESS Deserializer1D_contl_output;


  Deserializer1D_innerRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut <= '0';
      ELSIF enb = '1' AND Deserializer1D_innerRegCtrolEn = '1' THEN
        Deserializer1D_deserInnerOut <= Deserializer1D_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_process;


  Deserializer1D_OutRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg <= '0';
      ELSIF Deserializer1D_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D_OutRegComp_reg <= Deserializer1D_deserInnerOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_process;

  
  Deserializer1D_out2 <= Deserializer1D_deserInnerOut WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg;

  Deserializer1D_out2_1 <= Deserializer1D_out2;

  rd_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_14_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        rd_14_reg(0) <= Deserializer1D_out2_1;
        rd_14_reg(8 DOWNTO 1) <= rd_14_reg(7 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS rd_14_process;

  Deserializer1D_out2_2 <= rd_14_reg(8);

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#01#, 5);

  count_reset <= to_unsigned(16#00#, 5);

  count_1 <= count + count_step;

  rd_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_2 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        count_2 <= count_1;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  rd_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_3 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        count_3 <= count;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  
  count_4 <= count_3 WHEN Deserializer1D_out2_2 = '0' ELSE
      count_2;

  rd_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_5 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        count_5 <= count_4;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  
  count_6 <= count_5 WHEN Rate_Transition_out1_3 = '0' ELSE
      count_reset;

  crp_out_delay13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_7 <= to_unsigned(16#00#, 5);
      ELSIF enb = '1' THEN
        count_7 <= count_6;
      END IF;
    END IF;
  END PROCESS crp_out_delay13_process;


  HDL_Counter1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HDL_Counter1_bypass_reg <= to_unsigned(16#00#, 5);
      ELSIF enb_1_8_1 = '1' THEN
        HDL_Counter1_bypass_reg <= count_7;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_bypass_process;

  
  count_8 <= count_7 WHEN enb_1_8_1 = '1' ELSE
      HDL_Counter1_bypass_reg;

  out0_bypass3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        count_last_value <= to_unsigned(16#00#, 5);
      ELSIF enb_1_8_0 = '1' THEN
        count_last_value <= count_9;
      END IF;
    END IF;
  END PROCESS out0_bypass3_process;


  
  count_9 <= count_last_value WHEN stateControl_1 = '0' ELSE
      count_8;

  count <= count_9;

  count_10 <= std_logic_vector(count);

  stateControl_3 <= '1';

  delayMatch17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch17_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch17_reg(0) <= stateControl_3;
        delayMatch17_reg(1) <= delayMatch17_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  stateControl_4 <= delayMatch17_reg(1);

  stateControl_5 <= '1';

  delayMatch14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_6 <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        stateControl_6 <= stateControl_5;
      END IF;
    END IF;
  END PROCESS delayMatch14_process;


  stateControl_7 <= '1';

  delayMatch30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch30_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch30_reg(0) <= stateControl_7;
        delayMatch30_reg(1) <= delayMatch30_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch30_process;

  stateControl_8 <= delayMatch30_reg(1);

  Deserializer1D_tapDelayEn_1 <= enb AND Deserializer1D_tapDelayEn;

  Deserializer1D_tapDelayComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_tapout <= (OTHERS => '0');
      ELSIF enb = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout(6) <= serial;
        Deserializer1D_tapout(5 DOWNTO 0) <= Deserializer1D_tapout(6 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  Deserializer1D_muxOut_gen: FOR idx0 IN 0 TO 6 GENERATE
    Deserializer1D_muxOut(idx0) <= Deserializer1D_tapout(idx0);
  END GENERATE;
  Deserializer1D_muxOut(7) <= serial;

  Deserializer1D_innerRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut_1 <= (OTHERS => '0');
      ELSIF enb = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_deserInnerOut_1 <= Deserializer1D_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_1_process;


  Deserializer1D_OutRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= (OTHERS => '0');
      ELSIF Deserializer1D_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= Deserializer1D_deserInnerOut_1;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_1_process;

  
  parallel <= Deserializer1D_deserInnerOut_1 WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg_1;

  parallel_1 <= parallel;

  delayMatch16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch16_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        delayMatch16_reg(7 DOWNTO 0) <= parallel_1(7 DOWNTO 0);
        delayMatch16_reg(63 DOWNTO 8) <= delayMatch16_reg(55 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  parallel_2(7 DOWNTO 0) <= delayMatch16_reg(63 DOWNTO 56);

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        parallel_3 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        parallel_3 <= parallel_2;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Delay2_bypass_reg <= parallel_3;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay_out1 <= parallel_3 WHEN enb_1_8_1 = '1' ELSE
      Delay2_bypass_reg;

  out0_bypass13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Delay_out1_last_value <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass13_process;


  
  Delay_out1_1 <= Delay_out1_last_value WHEN stateControl_8 = '0' ELSE
      Delay_out1;

  
  Delay_out1_2 <= Delay1_out1 WHEN stateControl_6 = '0' ELSE
      Delay_out1_1;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Delay1_out1 <= Delay_out1_2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay1_out1_1 <= Delay1_out1;

  Delay_out1_3 <= Delay_out1_1;

  Vector_Concatenate_out1_gen: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate_out1(idx0) <= Delay1_out1_1(idx0);
  END GENERATE;
  Vector_Concatenate_out1_gen1: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate_out1(idx0 + 8) <= Delay_out1_3(idx0);
  END GENERATE;
  Vector_Concatenate_out1_gen2: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate_out1(idx0 + 16) <= parallel_2(idx0);
  END GENERATE;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Unit_Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay_bypass_reg <= Switch_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_bypass_process;

  
  Unit_Delay_out1 <= Switch_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay_bypass_reg;

  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay_out1_last_value <= Unit_Delay_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  Unit_Delay_out1_1 <= Unit_Delay_out1_last_value WHEN stateControl_4 = '0' ELSE
      Unit_Delay_out1;

  Unit_Delay_out1_2 <= Unit_Delay_out1_1;

  
  Switch_out1 <= Unit_Delay_out1_2 WHEN Compare_To_Constant_out1 = '0' ELSE
      Vector_Concatenate_out1;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t_bypass_reg <= Switch_out1;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  Switch_out1_2 <= Switch_out1 WHEN enb_1_8_1 = '1' ELSE
      t_bypass_reg;

  count_11 <= std_logic_vector(count);

  stateControl_9 <= '1';

  delayMatch18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch18_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch18_reg(0) <= stateControl_9;
        delayMatch18_reg(1) <= delayMatch18_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  stateControl_10 <= delayMatch18_reg(1);

  Vector_Concatenate1_out1_gen: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate1_out1(idx0) <= Delay_out1_3(idx0);
  END GENERATE;
  Vector_Concatenate1_out1_gen1: FOR idx0 IN 0 TO 7 GENERATE
    Vector_Concatenate1_out1(idx0 + 8) <= parallel_2(idx0);
  END GENERATE;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch1_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch1_out1_1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Unit_Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay1_bypass_reg <= Switch1_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_bypass_process;

  
  Unit_Delay1_out1 <= Switch1_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay1_bypass_reg;

  out0_bypass1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay1_out1_last_value <= Unit_Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass1_process;


  
  Unit_Delay1_out1_1 <= Unit_Delay1_out1_last_value WHEN stateControl_10 = '0' ELSE
      Unit_Delay1_out1;

  Unit_Delay1_out1_2 <= Unit_Delay1_out1_1;

  
  Switch1_out1 <= Unit_Delay1_out1_2 WHEN Compare_To_Constant1_out1 = '0' ELSE
      Vector_Concatenate1_out1;

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t1_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t1_bypass_reg <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  Switch1_out1_2 <= Switch1_out1 WHEN enb_1_8_1 = '1' ELSE
      t1_bypass_reg;

  count_12 <= count;

  stateControl_11 <= '1';

  delayMatch29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch29_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch29_reg(0) <= stateControl_11;
        delayMatch29_reg(1) <= delayMatch29_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch29_process;

  stateControl_12 <= delayMatch29_reg(1);

  Vector_Concatenate2_out1(0) <= parallel_2(0);
  Vector_Concatenate2_out1(1) <= parallel_2(1);

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch2_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch2_out1_1 <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Unit_Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay2_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay2_bypass_reg <= Switch2_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_bypass_process;

  
  Unit_Delay2_out1 <= Switch2_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay2_bypass_reg;

  out0_bypass12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay2_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay2_out1_last_value <= Unit_Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass12_process;


  
  Unit_Delay2_out1_1 <= Unit_Delay2_out1_last_value WHEN stateControl_12 = '0' ELSE
      Unit_Delay2_out1;

  Unit_Delay2_out1_2 <= Unit_Delay2_out1_1;

  
  Switch2_out1 <= Unit_Delay2_out1_2 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Vector_Concatenate2_out1;

  t3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t3_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t3_bypass_reg <= Switch2_out1;
      END IF;
    END IF;
  END PROCESS t3_bypass_process;

  
  Switch2_out1_2 <= Switch2_out1 WHEN enb_1_8_1 = '1' ELSE
      t3_bypass_reg;

  stateControl_13 <= '1';

  delayMatch28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch28_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch28_reg(0) <= stateControl_13;
        delayMatch28_reg(1) <= delayMatch28_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  stateControl_14 <= delayMatch28_reg(1);

  Vector_Concatenate3_out1(0) <= parallel_2(2);
  Vector_Concatenate3_out1(1) <= parallel_2(3);
  Vector_Concatenate3_out1(2) <= parallel_2(4);

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch3_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch3_out1_1 <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Unit_Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay3_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay3_bypass_reg <= Switch3_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_bypass_process;

  
  Unit_Delay3_out1 <= Switch3_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay3_bypass_reg;

  out0_bypass11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay3_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay3_out1_last_value <= Unit_Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass11_process;


  
  Unit_Delay3_out1_1 <= Unit_Delay3_out1_last_value WHEN stateControl_14 = '0' ELSE
      Unit_Delay3_out1;

  Unit_Delay3_out1_2 <= Unit_Delay3_out1_1;

  
  Switch3_out1 <= Unit_Delay3_out1_2 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Vector_Concatenate3_out1;

  t4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t4_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t4_bypass_reg <= Switch3_out1;
      END IF;
    END IF;
  END PROCESS t4_bypass_process;

  
  Switch3_out1_2 <= Switch3_out1 WHEN enb_1_8_1 = '1' ELSE
      t4_bypass_reg;

  stateControl_15 <= '1';

  delayMatch27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch27_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch27_reg(0) <= stateControl_15;
        delayMatch27_reg(1) <= delayMatch27_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch27_process;

  stateControl_16 <= delayMatch27_reg(1);

  Vector_Concatenate4_out1(0) <= parallel_2(5);
  Vector_Concatenate4_out1(1) <= parallel_2(6);
  Vector_Concatenate4_out1(2) <= parallel_2(7);

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch4_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch4_out1_1 <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Unit_Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay4_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay4_bypass_reg <= Switch4_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_bypass_process;

  
  Unit_Delay4_out1 <= Switch4_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay4_bypass_reg;

  out0_bypass10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay4_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay4_out1_last_value <= Unit_Delay4_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass10_process;


  
  Unit_Delay4_out1_1 <= Unit_Delay4_out1_last_value WHEN stateControl_16 = '0' ELSE
      Unit_Delay4_out1;

  Unit_Delay4_out1_2 <= Unit_Delay4_out1_1;

  
  Switch4_out1 <= Unit_Delay4_out1_2 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Vector_Concatenate4_out1;

  t2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t2_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t2_bypass_reg <= Switch4_out1;
      END IF;
    END IF;
  END PROCESS t2_bypass_process;

  
  Switch4_out1_2 <= Switch4_out1 WHEN enb_1_8_1 = '1' ELSE
      t2_bypass_reg;

  count_13 <= std_logic_vector(count);

  stateControl_17 <= '1';

  delayMatch26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch26_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch26_reg(0) <= stateControl_17;
        delayMatch26_reg(1) <= delayMatch26_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch26_process;

  stateControl_18 <= delayMatch26_reg(1);

  Vector_Concatenate5_out1(0) <= parallel_2(0);
  Vector_Concatenate5_out1(1) <= parallel_2(1);
  Vector_Concatenate5_out1(2) <= parallel_2(2);

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch5_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch5_out1_1 <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  Unit_Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay5_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay5_bypass_reg <= Switch5_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay5_bypass_process;

  
  Unit_Delay5_out1 <= Switch5_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay5_bypass_reg;

  out0_bypass9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay5_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay5_out1_last_value <= Unit_Delay5_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass9_process;


  
  Unit_Delay5_out1_1 <= Unit_Delay5_out1_last_value WHEN stateControl_18 = '0' ELSE
      Unit_Delay5_out1;

  Unit_Delay5_out1_2 <= Unit_Delay5_out1_1;

  
  Switch5_out1 <= Unit_Delay5_out1_2 WHEN Compare_To_Constant3_out1 = '0' ELSE
      Vector_Concatenate5_out1;

  t6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t6_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t6_bypass_reg <= Switch5_out1;
      END IF;
    END IF;
  END PROCESS t6_bypass_process;

  
  Switch5_out1_2 <= Switch5_out1 WHEN enb_1_8_1 = '1' ELSE
      t6_bypass_reg;

  stateControl_19 <= '1';

  delayMatch25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch25_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch25_reg(0) <= stateControl_19;
        delayMatch25_reg(1) <= delayMatch25_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch25_process;

  stateControl_20 <= delayMatch25_reg(1);

  Vector_Concatenate6_out1(0) <= parallel_2(3);
  Vector_Concatenate6_out1(1) <= parallel_2(4);
  Vector_Concatenate6_out1(2) <= parallel_2(5);
  Vector_Concatenate6_out1(3) <= parallel_2(6);

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch6_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch6_out1_1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  Unit_Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay6_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay6_bypass_reg <= Switch6_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay6_bypass_process;

  
  Unit_Delay6_out1 <= Switch6_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay6_bypass_reg;

  out0_bypass8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay6_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay6_out1_last_value <= Unit_Delay6_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass8_process;


  
  Unit_Delay6_out1_1 <= Unit_Delay6_out1_last_value WHEN stateControl_20 = '0' ELSE
      Unit_Delay6_out1;

  Unit_Delay6_out1_2 <= Unit_Delay6_out1_1;

  
  Switch6_out1 <= Unit_Delay6_out1_2 WHEN Compare_To_Constant3_out1 = '0' ELSE
      Vector_Concatenate6_out1;

  t5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t5_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t5_bypass_reg <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS t5_bypass_process;

  
  Switch6_out1_2 <= Switch6_out1 WHEN enb_1_8_1 = '1' ELSE
      t5_bypass_reg;

  count_14 <= std_logic_vector(count);

  stateControl_21 <= '1';

  delayMatch24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch24_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch24_reg(0) <= stateControl_21;
        delayMatch24_reg(1) <= delayMatch24_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch24_process;

  stateControl_22 <= delayMatch24_reg(1);

  Vector_Concatenate7_out1(0) <= parallel_2(0);
  Vector_Concatenate7_out1(1) <= parallel_2(1);
  Vector_Concatenate7_out1(2) <= parallel_2(2);
  Vector_Concatenate7_out1(3) <= parallel_2(3);
  Vector_Concatenate7_out1(4) <= parallel_2(4);

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch7_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch7_out1_1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Unit_Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay7_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay7_bypass_reg <= Switch7_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_bypass_process;

  
  Unit_Delay7_out1 <= Switch7_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay7_bypass_reg;

  out0_bypass7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay7_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay7_out1_last_value <= Unit_Delay7_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass7_process;


  
  Unit_Delay7_out1_1 <= Unit_Delay7_out1_last_value WHEN stateControl_22 = '0' ELSE
      Unit_Delay7_out1;

  Unit_Delay7_out1_2 <= Unit_Delay7_out1_1;

  
  Switch7_out1 <= Unit_Delay7_out1_2 WHEN Compare_To_Constant4_out1 = '0' ELSE
      Vector_Concatenate7_out1;

  t7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t7_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t7_bypass_reg <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS t7_bypass_process;

  
  Switch7_out1_2 <= Switch7_out1 WHEN enb_1_8_1 = '1' ELSE
      t7_bypass_reg;

  count_15 <= std_logic_vector(count);

  stateControl_23 <= '1';

  delayMatch23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch23_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch23_reg(0) <= stateControl_23;
        delayMatch23_reg(1) <= delayMatch23_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch23_process;

  stateControl_24 <= delayMatch23_reg(1);

  Vector_Concatenate8_out1(0) <= parallel_2(0);
  Vector_Concatenate8_out1(1) <= parallel_2(1);
  Vector_Concatenate8_out1(2) <= parallel_2(2);

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch8_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch8_out1_1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Unit_Delay8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay8_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay8_bypass_reg <= Switch8_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay8_bypass_process;

  
  Unit_Delay8_out1 <= Switch8_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay8_bypass_reg;

  out0_bypass6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay8_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay8_out1_last_value <= Unit_Delay8_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass6_process;


  
  Unit_Delay8_out1_1 <= Unit_Delay8_out1_last_value WHEN stateControl_24 = '0' ELSE
      Unit_Delay8_out1;

  Unit_Delay8_out1_2 <= Unit_Delay8_out1_1;

  
  Switch8_out1 <= Unit_Delay8_out1_2 WHEN Compare_To_Constant5_out1 = '0' ELSE
      Vector_Concatenate8_out1;

  t9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t9_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t9_bypass_reg <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS t9_bypass_process;

  
  Switch8_out1_2 <= Switch8_out1 WHEN enb_1_8_1 = '1' ELSE
      t9_bypass_reg;

  stateControl_25 <= '1';

  delayMatch22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch22_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch22_reg(0) <= stateControl_25;
        delayMatch22_reg(1) <= delayMatch22_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch22_process;

  stateControl_26 <= delayMatch22_reg(1);

  Vector_Concatenate9_out1(0) <= parallel_2(3);
  Vector_Concatenate9_out1(1) <= parallel_2(4);
  Vector_Concatenate9_out1(2) <= parallel_2(5);

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch9_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch9_out1_1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Unit_Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay9_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay9_bypass_reg <= Switch9_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay9_bypass_process;

  
  Unit_Delay9_out1 <= Switch9_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay9_bypass_reg;

  out0_bypass5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay9_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay9_out1_last_value <= Unit_Delay9_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass5_process;


  
  Unit_Delay9_out1_1 <= Unit_Delay9_out1_last_value WHEN stateControl_26 = '0' ELSE
      Unit_Delay9_out1;

  Unit_Delay9_out1_2 <= Unit_Delay9_out1_1;

  
  Switch9_out1 <= Unit_Delay9_out1_2 WHEN Compare_To_Constant5_out1 = '0' ELSE
      Vector_Concatenate9_out1;

  t8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t8_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t8_bypass_reg <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS t8_bypass_process;

  
  Switch9_out1_2 <= Switch9_out1 WHEN enb_1_8_1 = '1' ELSE
      t8_bypass_reg;

  count_16 <= std_logic_vector(count);

  stateControl_27 <= '1';

  delayMatch21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch21_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch21_reg(0) <= stateControl_27;
        delayMatch21_reg(1) <= delayMatch21_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  stateControl_28 <= delayMatch21_reg(1);

  Vector_Concatenate10_out1(0) <= parallel_2(2);
  Vector_Concatenate10_out1(1) <= parallel_2(3);
  Vector_Concatenate10_out1(2) <= parallel_2(4);

  crp_out_delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch10_out1_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Switch10_out1_1 <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay11_process;


  Unit_Delay10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay10_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay10_bypass_reg <= Switch10_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay10_bypass_process;

  
  Unit_Delay10_out1 <= Switch10_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay10_bypass_reg;

  out0_bypass4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay10_out1_last_value <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay10_out1_last_value <= Unit_Delay10_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass4_process;


  
  Unit_Delay10_out1_1 <= Unit_Delay10_out1_last_value WHEN stateControl_28 = '0' ELSE
      Unit_Delay10_out1;

  Unit_Delay10_out1_2 <= Unit_Delay10_out1_1;

  
  Switch10_out1 <= Unit_Delay10_out1_2 WHEN Compare_To_Constant6_out1 = '0' ELSE
      Vector_Concatenate10_out1;

  t10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t10_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_8_1 = '1' THEN
        t10_bypass_reg <= Switch10_out1;
      END IF;
    END IF;
  END PROCESS t10_bypass_process;

  
  Switch10_out1_2 <= Switch10_out1 WHEN enb_1_8_1 = '1' ELSE
      t10_bypass_reg;

  Logical_Operator_out1 <= Compare_To_Constant6_out1 OR Rate_Transition_out1_2;

  stateControl_29 <= '1';

  delayMatch19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayMatch19_reg <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        delayMatch19_reg(0) <= stateControl_29;
        delayMatch19_reg(1) <= delayMatch19_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch19_process;

  stateControl_30 <= delayMatch19_reg(1);

  crp_out_delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Switch11_out1_1 <= '0';
      ELSIF enb = '1' THEN
        Switch11_out1_1 <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS crp_out_delay12_process;


  Unit_Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay11_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Unit_Delay11_bypass_reg <= Switch11_out1_1;
      END IF;
    END IF;
  END PROCESS Unit_Delay11_bypass_process;

  
  Unit_Delay11_out1 <= Switch11_out1_1 WHEN enb_1_8_1 = '1' ELSE
      Unit_Delay11_bypass_reg;

  out0_bypass2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay11_out1_last_value <= '0';
      ELSIF enb_1_8_0 = '1' THEN
        Unit_Delay11_out1_last_value <= Unit_Delay11_out1_1;
      END IF;
    END IF;
  END PROCESS out0_bypass2_process;


  
  Unit_Delay11_out1_1 <= Unit_Delay11_out1_last_value WHEN stateControl_30 = '0' ELSE
      Unit_Delay11_out1;

  Unit_Delay11_out1_2 <= Unit_Delay11_out1_1;

  
  Switch11_out1 <= Unit_Delay11_out1_2 WHEN Logical_Operator_out1 = '0' ELSE
      Compare_To_Constant6_out1;

  rising_edge_detector1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rising_edge_detector1_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        rising_edge_detector1_bypass_reg <= Switch11_out1;
      END IF;
    END IF;
  END PROCESS rising_edge_detector1_bypass_process;

  
  Switch11_out1_2 <= Switch11_out1 WHEN enb_1_8_1 = '1' ELSE
      rising_edge_detector1_bypass_reg;

  psdu_size <= Switch_out1_2;

  msg_duration <= Switch1_out1_2;

  block_size <= Switch2_out1_2;

  fec_rate <= Switch3_out1_2;

  rep_number <= Switch4_out1_2;

  concat_factor <= Switch5_out1_2;

  scrambler_init <= Switch6_out1_2;

  bat_id <= Switch7_out1_2;

  cp_id <= Switch8_out1_2;

  mimo_spacing <= Switch9_out1_2;

  mimo_number <= Switch10_out1_2;

  end_rsvd <= Delay2_out1;

END rtl;

