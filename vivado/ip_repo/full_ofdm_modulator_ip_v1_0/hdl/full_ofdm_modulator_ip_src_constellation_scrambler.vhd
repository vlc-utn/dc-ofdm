-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_constellation_scrambler.vhd
-- Created: 2024-08-31 22:08:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_constellation_scrambler
-- Source Path: HDLModulatorFull/full_ofdm_modulator/enabled_qam_and_scrambler/constellation_scrambler
-- Hierarchy Level: 2
-- Model version: 1.21
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_ofdm_modulator_ip_src_full_ofdm_modulator_pac.ALL;

ENTITY full_ofdm_modulator_ip_src_constellation_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_in                          :   IN    std_logic;
        s1_in                             :   IN    std_logic;
        s2_in                             :   IN    std_logic;
        ready_out                         :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_constellation_scrambler;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_constellation_scrambler IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_rotate
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          s2                              :   IN    std_logic;
          s1                              :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_rotate
    USE ENTITY work.full_ofdm_modulator_ip_src_rotate(rtl);

  -- Signals
  SIGNAL en                               : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL s2                               : std_logic;
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL ready_out_2                      : std_logic;
  SIGNAL ready_out_3                      : std_logic;
  SIGNAL ready_out_4                      : std_logic;
  SIGNAL ready_out_5                      : std_logic;
  SIGNAL ready_out_6                      : std_logic;
  SIGNAL ready_out_7                      : std_logic;
  SIGNAL data_in_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_2                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_2                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_3                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_4                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_3                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_4                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_5                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_5                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_6                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_6                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_7                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_7                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_bypass_reg_re              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_bypass_reg_im              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_8                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_8                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_9                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_9                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_10                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_11                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_12                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_10                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_11                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_12                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_13                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_13                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_14                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_14                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_15                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_15                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay1_bypass_reg_re             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay1_bypass_reg_im             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_16                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_in_im_16                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_re_1                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_im_1                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_re_signed               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_signed               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_2                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_2                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_3                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_tmp                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_4                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_3                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_tmp                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_4                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL rd_6_reg_re                      : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL rd_6_reg_im                      : vector_of_signed12(0 TO 1);  -- sfix12_En10 [2]
  SIGNAL data_out_re_5                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_5                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_re_6                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_im_6                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay2_bypass_reg_re             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay2_bypass_reg_im             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL en_1                             : std_logic;
  SIGNAL en_2                             : std_logic;
  SIGNAL en_3                             : std_logic;
  SIGNAL en_4                             : std_logic;
  SIGNAL en_5                             : std_logic;
  SIGNAL en_6                             : std_logic;
  SIGNAL en_7                             : std_logic;
  SIGNAL Delay11_bypass_reg               : std_logic;  -- ufix1
  SIGNAL en_8                             : std_logic;
  SIGNAL en_9                             : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL en_10                            : std_logic;
  SIGNAL en_11                            : std_logic;
  SIGNAL Delay12_bypass_reg               : std_logic;  -- ufix1
  SIGNAL Delay1_out1_3                    : std_logic;
  SIGNAL Delay1_out1_4                    : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay3_out1_1                    : std_logic;
  SIGNAL Delay3_out1_2                    : std_logic;
  SIGNAL Delay1_out1_5                    : std_logic;
  SIGNAL Delay1_out1_6                    : std_logic;
  SIGNAL Delay3_bypass_reg                : std_logic;  -- ufix1

BEGIN
  u_rotate : full_ofdm_modulator_ip_src_rotate
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              s2 => s2,
              s1 => s1,
              data_in_re => data_in_re_16,  -- sfix12_En10
              data_in_im => data_in_im_16,  -- sfix12_En10
              data_out_re => data_out_re_1,  -- sfix12_En10
              data_out_im => data_out_im_1  -- sfix12_En10
              );

  en <= valid_in;

  s1 <= s1_in;

  s2 <= s2_in;

  ready_out_1 <= ready_out;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_2 <= '0';
      ELSIF enb = '1' THEN
        ready_out_2 <= ready_out_1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_3 <= '0';
      ELSIF enb = '1' THEN
        ready_out_3 <= ready_out_2;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  ready_out_4 <= ready_out;

  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_5 <= '0';
      ELSIF enb = '1' THEN
        ready_out_5 <= ready_out_4;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  ready_out_6 <= ready_out;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_7 <= '0';
      ELSIF enb = '1' THEN
        ready_out_7 <= ready_out_6;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  data_in_re_1 <= signed(data_in_re);

  data_in_im_1 <= signed(data_in_im);

  rd_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_2 <= to_signed(16#000#, 12);
        data_in_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_2 <= data_in_re_1;
        data_in_im_2 <= data_in_im_1;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  data_in_im_4 <= data_in_im_3;

  data_in_re_4 <= data_in_re_3;

  rd_51_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_5 <= to_signed(16#000#, 12);
        data_in_im_5 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_5 <= data_in_re_4;
        data_in_im_5 <= data_in_im_4;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  
  data_in_re_6 <= data_in_re_5 WHEN ready_out_7 = '0' ELSE
      data_in_re_2;
  
  data_in_im_6 <= data_in_im_5 WHEN ready_out_7 = '0' ELSE
      data_in_im_2;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_7 <= to_signed(16#000#, 12);
        data_in_im_7 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_7 <= data_in_re_6;
        data_in_im_7 <= data_in_im_6;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg_re <= to_signed(16#000#, 12);
        Delay_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg_im <= data_in_im_7;
        Delay_bypass_reg_re <= data_in_re_7;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  data_in_re_3 <= data_in_re_7 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg_re;
  
  data_in_im_3 <= data_in_im_7 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg_im;

  data_in_re_8 <= data_in_re_3;

  data_in_im_8 <= data_in_im_3;

  rd_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_9 <= to_signed(16#000#, 12);
        data_in_im_9 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_9 <= data_in_re_8;
        data_in_im_9 <= data_in_im_8;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  data_in_im_11 <= data_in_im_10;

  data_in_im_12 <= data_in_im_11;

  data_in_re_11 <= data_in_re_10;

  data_in_re_12 <= data_in_re_11;

  rd_52_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_13 <= to_signed(16#000#, 12);
        data_in_im_13 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_13 <= data_in_re_12;
        data_in_im_13 <= data_in_im_12;
      END IF;
    END IF;
  END PROCESS rd_52_process;


  
  data_in_re_14 <= data_in_re_13 WHEN ready_out_5 = '0' ELSE
      data_in_re_9;
  
  data_in_im_14 <= data_in_im_13 WHEN ready_out_5 = '0' ELSE
      data_in_im_9;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_15 <= to_signed(16#000#, 12);
        data_in_im_15 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_15 <= data_in_re_14;
        data_in_im_15 <= data_in_im_14;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg_re <= to_signed(16#000#, 12);
        Delay1_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg_im <= data_in_im_15;
        Delay1_bypass_reg_re <= data_in_re_15;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  data_in_re_10 <= data_in_re_15 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg_re;
  
  data_in_im_10 <= data_in_im_15 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg_im;

  data_in_re_16 <= std_logic_vector(data_in_re_10);

  data_in_im_16 <= std_logic_vector(data_in_im_10);

  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_re_2 <= to_signed(16#000#, 12);
        data_out_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_out_re_2 <= data_out_re_signed;
        data_out_im_2 <= data_out_im_signed;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  data_out_im_tmp <= data_out_im_3;

  data_out_im_4 <= data_out_im_tmp;

  data_out_re_tmp <= data_out_re_3;

  data_out_re_4 <= data_out_re_tmp;

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_6_reg_re <= (OTHERS => to_signed(16#000#, 12));
        rd_6_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb = '1' THEN
        rd_6_reg_im(0) <= data_out_im_4;
        rd_6_reg_im(1) <= rd_6_reg_im(0);
        rd_6_reg_re(0) <= data_out_re_4;
        rd_6_reg_re(1) <= rd_6_reg_re(0);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  data_out_re_5 <= rd_6_reg_re(1);
  data_out_im_5 <= rd_6_reg_im(1);

  
  data_out_re_6 <= data_out_re_5 WHEN ready_out_3 = '0' ELSE
      data_out_re_2;
  
  data_out_im_6 <= data_out_im_5 WHEN ready_out_3 = '0' ELSE
      data_out_im_2;

  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg_re <= to_signed(16#000#, 12);
        Delay2_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_reg_im <= data_out_im_6;
        Delay2_bypass_reg_re <= data_out_re_6;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  data_out_re_3 <= data_out_re_6 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg_re;
  
  data_out_im_3 <= data_out_im_6 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg_im;

  data_out_re <= std_logic_vector(data_out_re_3);

  data_out_im <= std_logic_vector(data_out_im_3);

  en_1 <= en;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        en_2 <= '0';
      ELSIF enb = '1' THEN
        en_2 <= en_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  en_4 <= en_3;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        en_5 <= '0';
      ELSIF enb = '1' THEN
        en_5 <= en_4;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  
  en_6 <= en_5 WHEN ready_out_2 = '0' ELSE
      en_2;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        en_7 <= '0';
      ELSIF enb = '1' THEN
        en_7 <= en_6;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay11_bypass_reg <= en_7;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_process;

  
  en_3 <= en_7 WHEN enb_1_2_1 = '1' ELSE
      Delay11_bypass_reg;

  en_8 <= en_3;

  rd_01_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        en_9 <= '0';
      ELSIF enb = '1' THEN
        en_9 <= en_8;
      END IF;
    END IF;
  END PROCESS rd_01_process;


  Delay1_out1_1 <= Delay1_out1;

  rd_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  
  en_10 <= Delay1_out1_2 WHEN ready_out_7 = '0' ELSE
      en_9;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        en_11 <= '0';
      ELSIF enb = '1' THEN
        en_11 <= en_10;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay12_bypass_reg <= en_11;
      END IF;
    END IF;
  END PROCESS Delay12_bypass_process;

  
  Delay1_out1 <= en_11 WHEN enb_1_2_1 = '1' ELSE
      Delay12_bypass_reg;

  Delay1_out1_3 <= Delay1_out1;

  rd_02_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_4 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_4 <= Delay1_out1_3;
      END IF;
    END IF;
  END PROCESS rd_02_process;


  Delay3_out1_1 <= Delay3_out1;

  rd_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  
  Delay1_out1_5 <= Delay3_out1_2 WHEN ready_out_5 = '0' ELSE
      Delay1_out1_4;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_6 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_6 <= Delay1_out1_5;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Delay1_out1_6;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Delay1_out1_6 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  valid_out <= Delay3_out1;

END rtl;

