-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_full_ofdm_modulator.vhd
-- Created: 2024-08-31 22:08:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1e-08
-- Target subsystem base rate: 1e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out_0      1e-08
-- ce_out_1      2e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out                      ce_out_0      1e-08
-- valid_out                     ce_out_0      1e-08
-- ready                         ce_out_1      2e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_full_ofdm_modulator
-- Source Path: HDLModulatorFull/full_ofdm_modulator
-- Hierarchy Level: 0
-- Model version: 1.21
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_full_ofdm_modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init_0                            :   IN    std_logic;  -- boolean
        init_1                            :   IN    std_logic;  -- boolean
        init_2                            :   IN    std_logic;  -- boolean
        init_3                            :   IN    std_logic;  -- boolean
        init_4                            :   IN    std_logic;  -- boolean
        init_5                            :   IN    std_logic;  -- boolean
        init_6                            :   IN    std_logic;  -- boolean
        init_7                            :   IN    std_logic;  -- boolean
        init_8                            :   IN    std_logic;  -- boolean
        init_9                            :   IN    std_logic;  -- boolean
        init_10                           :   IN    std_logic;  -- boolean
        init_11                           :   IN    std_logic;  -- boolean
        init_12                           :   IN    std_logic;  -- boolean
        new_ofdm_sym                      :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out_0                          :   OUT   std_logic;
        ce_out_1                          :   OUT   std_logic;
        data_out                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_full_ofdm_modulator;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_full_ofdm_modulator IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_full_ofdm_modulator_tc
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_sync_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          new_ofdm_symbol                 :   IN    std_logic;
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          valid_in                        :   IN    std_logic;
          s1                              :   OUT   std_logic;
          s2                              :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_enabled_qam_and_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_rsvd                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          s2_in                           :   IN    std_logic;
          s1_in                           :   IN    std_logic;
          Enable                          :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic;
          cp_len_out                      :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          valid_scrambler                 :   OUT   std_logic;
          init_out                        :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_ofdm_modulator_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_in                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_in                        :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_rising_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_frequency_upshift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_in                        :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_full_ofdm_modulator_tc
    USE ENTITY work.full_ofdm_modulator_ip_src_full_ofdm_modulator_tc(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_sync_constellation_scrambler
    USE ENTITY work.full_ofdm_modulator_ip_src_sync_constellation_scrambler(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_enabled_qam_and_scrambler
    USE ENTITY work.full_ofdm_modulator_ip_src_enabled_qam_and_scrambler(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_ofdm_modulator_block
    USE ENTITY work.full_ofdm_modulator_ip_src_ofdm_modulator_block(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_interpolator
    USE ENTITY work.full_ofdm_modulator_ip_src_interpolator(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_rising_edge_detector
    USE ENTITY work.full_ofdm_modulator_ip_src_rising_edge_detector(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_frequency_upshift
    USE ENTITY work.full_ofdm_modulator_ip_src_frequency_upshift(rtl);

  -- Signals
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL data_in_unsigned                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL data_in_1                        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL bits_per_subcarrier_unsigned     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL bits_per_subcarrier_1            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL init                             : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_13                          : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL cp_len_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL new_ofdm_sym_1                   : std_logic;
  SIGNAL cp_len_1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL enabled_qam_and_scrambler_out3   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL enabled_qam_and_scrambler_out3_unsigned : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL enabled_qam_and_scrambler_out3_1 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL enabled_qam_and_scrambler_out2   : std_logic;
  SIGNAL enabled_qam_and_scrambler_out2_1 : std_logic;
  SIGNAL ready_out                        : std_logic;
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL ready_out_2                      : std_logic;
  SIGNAL valid_new                        : std_logic;
  SIGNAL valid_new_1                      : std_logic;
  SIGNAL Delay7_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL out_new_im                       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_im_1                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL out_new_im_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL ready_out_3                      : std_logic;
  SIGNAL enabled_qam_and_scrambler_out4   : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL enabled_qam_and_scrambler_out6   : std_logic;
  SIGNAL enabled_qam_and_scrambler_out5   : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL sync_constellation_scrambler_out1 : std_logic;
  SIGNAL sync_constellation_scrambler_out2 : std_logic;
  SIGNAL out_new_re                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL out_new_re_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL ofdm_modulator_out1_re           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL ofdm_modulator_out1_im           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL ofdm_modulator_out2              : std_logic;
  SIGNAL interpolator_out1_re             : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL interpolator_out1_im             : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL interpolator_out2                : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL frequency_upshift_out1           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL frequency_upshift_out2           : std_logic;

BEGIN
  u_full_ofdm_modulator_tc : full_ofdm_modulator_ip_src_full_ofdm_modulator_tc
    PORT MAP( clk => clk,
              reset_x => reset_x,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  u_sync_constellation_scrambler : full_ofdm_modulator_ip_src_sync_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              new_ofdm_symbol => enabled_qam_and_scrambler_out6,
              init => enabled_qam_and_scrambler_out5,  -- boolean [13]
              valid_in => Logical_Operator_out1,
              s1 => sync_constellation_scrambler_out1,
              s2 => sync_constellation_scrambler_out2
              );

  u_enabled_qam_and_scrambler : full_ofdm_modulator_ip_src_enabled_qam_and_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              data_in => std_logic_vector(data_in_1),  -- ufix12
              valid_in => valid_in_1,
              bits_per_subcarrier => std_logic_vector(bits_per_subcarrier_1),  -- ufix4
              init => init_13,  -- boolean [13]
              new_rsvd => new_ofdm_sym_1,
              cp_len => std_logic_vector(cp_len_1),  -- uint8
              s2_in => sync_constellation_scrambler_out2,
              s1_in => sync_constellation_scrambler_out1,
              Enable => ready_out_3,
              data_out_re => out_new_re,  -- sfix12_En10
              data_out_im => out_new_im_1,  -- sfix12_En10
              valid_out => enabled_qam_and_scrambler_out2,
              cp_len_out => enabled_qam_and_scrambler_out3,  -- uint8
              valid_scrambler => enabled_qam_and_scrambler_out4,
              init_out => enabled_qam_and_scrambler_out5,  -- boolean [13]
              new_out => enabled_qam_and_scrambler_out6
              );

  u_ofdm_modulator : full_ofdm_modulator_ip_src_ofdm_modulator_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => std_logic_vector(out_new_re_1),  -- sfix12_En10
              data_in_im => std_logic_vector(out_new_im),  -- sfix12_En10
              valid_in => Delay7_out1,
              cp_len => std_logic_vector(enabled_qam_and_scrambler_out3_1),  -- uint8
              data_out_re => ofdm_modulator_out1_re,  -- sfix12_En10
              data_out_im => ofdm_modulator_out1_im,  -- sfix12_En10
              valid_out => ofdm_modulator_out2,
              ready => ready_out
              );

  u_interpolator : full_ofdm_modulator_ip_src_interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in_re => ofdm_modulator_out1_re,  -- sfix12_En10
              data_in_im => ofdm_modulator_out1_im,  -- sfix12_En10
              valid_in => ofdm_modulator_out2,
              data_out_re => interpolator_out1_re,  -- sfix12_En10
              data_out_im => interpolator_out1_im,  -- sfix12_En10
              valid_out => interpolator_out2
              );

  u_rising_edge_detector : full_ofdm_modulator_ip_src_rising_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => interpolator_out2,
              Out_rsvd => rising_edge_detector_out1
              );

  u_frequency_upshift : full_ofdm_modulator_ip_src_frequency_upshift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in_re => interpolator_out1_re,  -- sfix12_En10
              data_in_im => interpolator_out1_im,  -- sfix12_En10
              valid_in => interpolator_out2,
              reset => rising_edge_detector_out1,
              data_out => frequency_upshift_out1,  -- sfix12_En10
              valid_out => frequency_upshift_out2
              );

  data_in_unsigned <= unsigned(data_in);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_1 <= to_unsigned(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        data_in_1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  bits_per_subcarrier_unsigned <= unsigned(bits_per_subcarrier);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_in_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        valid_in_1 <= valid_in;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        bits_per_subcarrier_1 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0 = '1' THEN
        bits_per_subcarrier_1 <= bits_per_subcarrier_unsigned;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  init(0) <= init_0;
  init(1) <= init_1;
  init(2) <= init_2;
  init(3) <= init_3;
  init(4) <= init_4;
  init(5) <= init_5;
  init(6) <= init_6;
  init(7) <= init_7;
  init(8) <= init_8;
  init(9) <= init_9;
  init(10) <= init_10;
  init(11) <= init_11;
  init(12) <= init_12;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_13 <= (OTHERS => '0');
      ELSIF enb_1_2_0 = '1' THEN
        init_13 <= init;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  cp_len_unsigned <= unsigned(cp_len);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_ofdm_sym_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        new_ofdm_sym_1 <= new_ofdm_sym;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        cp_len_1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        cp_len_1 <= cp_len_unsigned;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  enabled_qam_and_scrambler_out3_unsigned <= unsigned(enabled_qam_and_scrambler_out3);

  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        enabled_qam_and_scrambler_out3_1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        enabled_qam_and_scrambler_out3_1 <= enabled_qam_and_scrambler_out3_unsigned;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  rd_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        enabled_qam_and_scrambler_out2_1 <= '0';
      ELSIF enb = '1' THEN
        enabled_qam_and_scrambler_out2_1 <= enabled_qam_and_scrambler_out2;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  ready_out_1 <= ready_out;

  rd_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_2 <= '0';
      ELSIF enb = '1' THEN
        ready_out_2 <= ready_out_1;
      END IF;
    END IF;
  END PROCESS rd_8_process;


  valid_new <= ready_out_2 AND enabled_qam_and_scrambler_out2_1;

  rd_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_new_1 <= '0';
      ELSIF enb = '1' THEN
        valid_new_1 <= valid_new;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay7_bypass_reg <= valid_new_1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  Delay7_out1 <= valid_new_1 WHEN enb_1_2_1 = '1' ELSE
      Delay7_bypass_reg;

  out_new_im_signed <= signed(out_new_im_1);

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        ready_out_3 <= ready_out;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  Logical_Operator_out1 <= enabled_qam_and_scrambler_out4 AND ready_out;

  out_new_re_signed <= signed(out_new_re);

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        out_new_re_1 <= to_signed(16#000#, 12);
        out_new_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        out_new_re_1 <= out_new_re_signed;
        out_new_im <= out_new_im_signed;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  ce_out_0 <= enb_1_1_1;

  ce_out_1 <= enb_1_2_1;

  data_out <= frequency_upshift_out1;

  valid_out <= frequency_upshift_out2;

  ready <= ready_out_3;

END rtl;

