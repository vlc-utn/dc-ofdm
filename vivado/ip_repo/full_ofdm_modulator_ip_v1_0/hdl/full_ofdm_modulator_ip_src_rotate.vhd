-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_rotate.vhd
-- Created: 2024-08-31 22:08:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_rotate
-- Source Path: HDLModulatorFull/full_ofdm_modulator/enabled_qam_and_scrambler/constellation_scrambler/rotate
-- Hierarchy Level: 3
-- Model version: 1.21
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_rotate IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        s2                                :   IN    std_logic;
        s1                                :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
        );
END full_ofdm_modulator_ip_src_rotate;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_rotate IS

  -- Signals
  SIGNAL Bit_Concat_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL data_in_re_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_im_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus1_cast                : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus1_cast_1              : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus1_out1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex1_out1_re    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex1_out1_im    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus_cast                 : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus_cast_1               : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus_out1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus3_cast                : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus3_cast_1              : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus3_out1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex_out1_re     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex_out1_im     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Unary_Minus2_cast                : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus2_cast_1              : signed(12 DOWNTO 0);  -- sfix13_En10
  SIGNAL Unary_Minus2_out1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex2_out1_re    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Real_Imag_to_Complex2_out1_im    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_re         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_im         : signed(11 DOWNTO 0);  -- sfix12_En10

BEGIN
  Bit_Concat_out1 <= unsigned'(s2 & s1);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Bit_Concat_out1_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        Bit_Concat_out1_1 <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_in_re_1 <= to_signed(16#000#, 12);
        data_in_im_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        data_in_re_1 <= data_in_re_signed;
        data_in_im_1 <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  Unary_Minus1_cast <= resize(data_in_im_signed, 13);
  Unary_Minus1_cast_1 <=  - (Unary_Minus1_cast);
  Unary_Minus1_out1 <= Unary_Minus1_cast_1(11 DOWNTO 0);

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Real_Imag_to_Complex1_out1_re <= to_signed(16#000#, 12);
        Real_Imag_to_Complex1_out1_im <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Real_Imag_to_Complex1_out1_re <= Unary_Minus1_out1;
        Real_Imag_to_Complex1_out1_im <= data_in_re_signed;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  Unary_Minus_cast <= resize(data_in_re_signed, 13);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(11 DOWNTO 0);

  Unary_Minus3_cast <= resize(data_in_im_signed, 13);
  Unary_Minus3_cast_1 <=  - (Unary_Minus3_cast);
  Unary_Minus3_out1 <= Unary_Minus3_cast_1(11 DOWNTO 0);

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Real_Imag_to_Complex_out1_re <= to_signed(16#000#, 12);
        Real_Imag_to_Complex_out1_im <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Real_Imag_to_Complex_out1_re <= Unary_Minus_out1;
        Real_Imag_to_Complex_out1_im <= Unary_Minus3_out1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  Unary_Minus2_cast <= resize(data_in_re_signed, 13);
  Unary_Minus2_cast_1 <=  - (Unary_Minus2_cast);
  Unary_Minus2_out1 <= Unary_Minus2_cast_1(11 DOWNTO 0);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Real_Imag_to_Complex2_out1_re <= to_signed(16#000#, 12);
        Real_Imag_to_Complex2_out1_im <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Real_Imag_to_Complex2_out1_re <= data_in_im_signed;
        Real_Imag_to_Complex2_out1_im <= Unary_Minus2_out1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  
  Multiport_Switch_out1_re <= data_in_re_1 WHEN Bit_Concat_out1_1 = to_unsigned(16#0#, 2) ELSE
      Real_Imag_to_Complex1_out1_re WHEN Bit_Concat_out1_1 = to_unsigned(16#1#, 2) ELSE
      Real_Imag_to_Complex_out1_re WHEN Bit_Concat_out1_1 = to_unsigned(16#2#, 2) ELSE
      Real_Imag_to_Complex2_out1_re;
  
  Multiport_Switch_out1_im <= data_in_im_1 WHEN Bit_Concat_out1_1 = to_unsigned(16#0#, 2) ELSE
      Real_Imag_to_Complex1_out1_im WHEN Bit_Concat_out1_1 = to_unsigned(16#1#, 2) ELSE
      Real_Imag_to_Complex_out1_im WHEN Bit_Concat_out1_1 = to_unsigned(16#2#, 2) ELSE
      Real_Imag_to_Complex2_out1_im;

  data_out_re <= std_logic_vector(Multiport_Switch_out1_re);

  data_out_im <= std_logic_vector(Multiport_Switch_out1_im);

END rtl;

