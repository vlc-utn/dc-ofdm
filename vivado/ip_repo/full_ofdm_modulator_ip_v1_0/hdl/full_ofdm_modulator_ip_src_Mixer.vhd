-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_Mixer.vhd
-- Created: 2024-08-31 22:08:51
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_Mixer
-- Source Path: HDLModulatorFull/full_ofdm_modulator/frequency_upshift/Mixer
-- Hierarchy Level: 2
-- Model version: 1.21
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_ofdm_modulator_ip_src_full_ofdm_modulator_pac.ALL;

ENTITY full_ofdm_modulator_ip_src_Mixer IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        dataIn_im                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        ncoIn_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ncoIn_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        mixedOut                          :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
        );
END full_ofdm_modulator_ip_src_Mixer;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_Mixer IS

  -- Signals
  SIGNAL dataIn_re_signed                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataIn_im_signed                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL rd_0_reg_re                      : vector_of_signed12(0 TO 6);  -- sfix12_En10 [7]
  SIGNAL rd_0_reg_im                      : vector_of_signed12(0 TO 6);  -- sfix12_En10 [7]
  SIGNAL dataIn_re_1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataIn_im_1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL HwModeRegister_reg               : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL Complex_to_Real_Imag_out1        : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL ncoIn_re_signed                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ncoIn_im_signed                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister1_reg              : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Complex_to_Real_Imag1_out1       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product1_mul_temp                : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL Product1_out1                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Product1_out1_1                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay6_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL HwModeRegister2_reg              : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL Complex_to_Real_Imag_out2        : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL HwModeRegister3_reg              : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Complex_to_Real_Imag1_out2       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product2_mul_temp                : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL Product2_out1                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Product2_out1_1                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay7_out1                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Add_out1                         : signed(11 DOWNTO 0);  -- sfix12_En10

BEGIN
  dataIn_re_signed <= signed(dataIn_re);

  dataIn_im_signed <= signed(dataIn_im);

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_0_reg_re <= (OTHERS => to_signed(16#000#, 12));
        rd_0_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb = '1' THEN
        rd_0_reg_im(0) <= dataIn_im_signed;
        rd_0_reg_im(1 TO 6) <= rd_0_reg_im(0 TO 5);
        rd_0_reg_re(0) <= dataIn_re_signed;
        rd_0_reg_re(1 TO 6) <= rd_0_reg_re(0 TO 5);
      END IF;
    END IF;
  END PROCESS rd_0_process;

  dataIn_re_1 <= rd_0_reg_re(6);
  dataIn_im_1 <= rd_0_reg_im(6);

  HwModeRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister_reg <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb = '1' THEN
        HwModeRegister_reg(0) <= dataIn_re_1;
        HwModeRegister_reg(1 TO 2) <= HwModeRegister_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  Complex_to_Real_Imag_out1 <= HwModeRegister_reg(2);

  ncoIn_re_signed <= signed(ncoIn_re);

  HwModeRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister1_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        HwModeRegister1_reg(0) <= ncoIn_re_signed;
        HwModeRegister1_reg(1) <= HwModeRegister1_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  Complex_to_Real_Imag1_out1 <= HwModeRegister1_reg(1);

  Product1_mul_temp <= Complex_to_Real_Imag_out1 * Complex_to_Real_Imag1_out1;
  Product1_out1 <= Product1_mul_temp(25 DOWNTO 14);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product1_out1_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Product1_out1_1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay6_out1 <= Product1_out1_1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  HwModeRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister2_reg <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb = '1' THEN
        HwModeRegister2_reg(0) <= dataIn_im_1;
        HwModeRegister2_reg(1 TO 2) <= HwModeRegister2_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;

  Complex_to_Real_Imag_out2 <= HwModeRegister2_reg(2);

  ncoIn_im_signed <= signed(ncoIn_im);

  HwModeRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        HwModeRegister3_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        HwModeRegister3_reg(0) <= ncoIn_im_signed;
        HwModeRegister3_reg(1) <= HwModeRegister3_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;

  Complex_to_Real_Imag1_out2 <= HwModeRegister3_reg(1);

  Product2_mul_temp <= Complex_to_Real_Imag_out2 * Complex_to_Real_Imag1_out2;
  Product2_out1 <= Product2_mul_temp(25 DOWNTO 14);

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Product2_out1_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Product2_out1_1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  rd_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay7_out1 <= Product2_out1_1;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  Add_out1 <= Delay6_out1 - Delay7_out1;

  mixedOut <= std_logic_vector(Add_out1);

END rtl;

