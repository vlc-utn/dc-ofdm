-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_dut.vhd
-- Created: 2024-08-31 22:09:12
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_dut
-- Source Path: full_ofdm_modulator_ip/full_ofdm_modulator_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;  -- ufix1
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init_0                            :   IN    std_logic;  -- ufix1
        init_1                            :   IN    std_logic;  -- ufix1
        init_2                            :   IN    std_logic;  -- ufix1
        init_3                            :   IN    std_logic;  -- ufix1
        init_4                            :   IN    std_logic;  -- ufix1
        init_5                            :   IN    std_logic;  -- ufix1
        init_6                            :   IN    std_logic;  -- ufix1
        init_7                            :   IN    std_logic;  -- ufix1
        init_8                            :   IN    std_logic;  -- ufix1
        init_9                            :   IN    std_logic;  -- ufix1
        init_10                           :   IN    std_logic;  -- ufix1
        init_11                           :   IN    std_logic;  -- ufix1
        init_12                           :   IN    std_logic;  -- ufix1
        new_ofdm_sym                      :   IN    std_logic;  -- ufix1
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        ce_out_0                          :   OUT   std_logic;  -- ufix1
        ce_out_1                          :   OUT   std_logic;  -- ufix1
        data_out                          :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic;  -- ufix1
        ready                             :   OUT   std_logic  -- ufix1
        );
END full_ofdm_modulator_ip_dut;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_dut IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_full_ofdm_modulator
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;  -- ufix1
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          init_0                          :   IN    std_logic;  -- ufix1
          init_1                          :   IN    std_logic;  -- ufix1
          init_2                          :   IN    std_logic;  -- ufix1
          init_3                          :   IN    std_logic;  -- ufix1
          init_4                          :   IN    std_logic;  -- ufix1
          init_5                          :   IN    std_logic;  -- ufix1
          init_6                          :   IN    std_logic;  -- ufix1
          init_7                          :   IN    std_logic;  -- ufix1
          init_8                          :   IN    std_logic;  -- ufix1
          init_9                          :   IN    std_logic;  -- ufix1
          init_10                         :   IN    std_logic;  -- ufix1
          init_11                         :   IN    std_logic;  -- ufix1
          init_12                         :   IN    std_logic;  -- ufix1
          new_ofdm_sym                    :   IN    std_logic;  -- ufix1
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          ce_out_0                        :   OUT   std_logic;  -- ufix1
          ce_out_1                        :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic;  -- ufix1
          ready                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_full_ofdm_modulator
    USE ENTITY work.full_ofdm_modulator_ip_src_full_ofdm_modulator(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL valid_in_sig                     : std_logic;  -- ufix1
  SIGNAL init_0_sig                       : std_logic;  -- ufix1
  SIGNAL init_1_sig                       : std_logic;  -- ufix1
  SIGNAL init_2_sig                       : std_logic;  -- ufix1
  SIGNAL init_3_sig                       : std_logic;  -- ufix1
  SIGNAL init_4_sig                       : std_logic;  -- ufix1
  SIGNAL init_5_sig                       : std_logic;  -- ufix1
  SIGNAL init_6_sig                       : std_logic;  -- ufix1
  SIGNAL init_7_sig                       : std_logic;  -- ufix1
  SIGNAL init_8_sig                       : std_logic;  -- ufix1
  SIGNAL init_9_sig                       : std_logic;  -- ufix1
  SIGNAL init_10_sig                      : std_logic;  -- ufix1
  SIGNAL init_11_sig                      : std_logic;  -- ufix1
  SIGNAL init_12_sig                      : std_logic;  -- ufix1
  SIGNAL new_ofdm_sym_sig                 : std_logic;  -- ufix1
  SIGNAL ce_out_0_sig                     : std_logic;  -- ufix1
  SIGNAL ce_out_1_sig                     : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL ready_sig                        : std_logic;  -- ufix1

BEGIN
  u_full_ofdm_modulator_ip_src_full_ofdm_modulator : full_ofdm_modulator_ip_src_full_ofdm_modulator
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset_x => reset_x,
              data_in => data_in,  -- ufix12
              valid_in => valid_in_sig,  -- ufix1
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              init_0 => init_0_sig,  -- ufix1
              init_1 => init_1_sig,  -- ufix1
              init_2 => init_2_sig,  -- ufix1
              init_3 => init_3_sig,  -- ufix1
              init_4 => init_4_sig,  -- ufix1
              init_5 => init_5_sig,  -- ufix1
              init_6 => init_6_sig,  -- ufix1
              init_7 => init_7_sig,  -- ufix1
              init_8 => init_8_sig,  -- ufix1
              init_9 => init_9_sig,  -- ufix1
              init_10 => init_10_sig,  -- ufix1
              init_11 => init_11_sig,  -- ufix1
              init_12 => init_12_sig,  -- ufix1
              new_ofdm_sym => new_ofdm_sym_sig,  -- ufix1
              cp_len => cp_len,  -- ufix8
              ce_out_0 => ce_out_0_sig,  -- ufix1
              ce_out_1 => ce_out_1_sig,  -- ufix1
              data_out => data_out_sig,  -- sfix12_En10
              valid_out => valid_out_sig,  -- ufix1
              ready => ready_sig  -- ufix1
              );

  valid_in_sig <= valid_in;

  init_0_sig <= init_0;

  init_1_sig <= init_1;

  init_2_sig <= init_2;

  init_3_sig <= init_3;

  init_4_sig <= init_4;

  init_5_sig <= init_5;

  init_6_sig <= init_6;

  init_7_sig <= init_7;

  init_8_sig <= init_8;

  init_9_sig <= init_9;

  init_10_sig <= init_10;

  init_11_sig <= init_11;

  init_12_sig <= init_12;

  new_ofdm_sym_sig <= new_ofdm_sym;

  enb <= dut_enable;

  ce_out_0 <= ce_out_0_sig;

  ce_out_1 <= ce_out_1_sig;

  data_out <= data_out_sig;

  valid_out <= valid_out_sig;

  ready <= ready_sig;

END rtl;

