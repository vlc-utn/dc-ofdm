-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_enabled_qam_and_scrambler.vhd
-- Created: 2024-08-31 22:08:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_enabled_qam_and_scrambler
-- Source Path: HDLModulatorFull/full_ofdm_modulator/enabled_qam_and_scrambler
-- Hierarchy Level: 1
-- Model version: 1.21
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_enabled_qam_and_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_rsvd                          :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        s2_in                             :   IN    std_logic;
        s1_in                             :   IN    std_logic;
        Enable                            :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic;
        cp_len_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_scrambler                   :   OUT   std_logic;
        init_out                          :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_out                           :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_enabled_qam_and_scrambler;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_enabled_qam_and_scrambler IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_qam_mod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          ready_out                       :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_constellation_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_in                        :   IN    std_logic;
          s1_in                           :   IN    std_logic;
          s2_in                           :   IN    std_logic;
          ready_out                       :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_qam_mod
    USE ENTITY work.full_ofdm_modulator_ip_src_qam_mod(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_constellation_scrambler
    USE ENTITY work.full_ofdm_modulator_ip_src_constellation_scrambler(rtl);

  -- Signals
  SIGNAL ready_out                        : std_logic;
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL qam_mod_out1_re                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL qam_mod_out1_im                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL qam_mod_out2                     : std_logic;
  SIGNAL out_new_re                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL out_new_im                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL constellation_scrambler_out2     : std_logic;
  SIGNAL out_new_re_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_im_1                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_last_value_im            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_last_value_im_1          : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_bypass_re                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_bypass_im                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_bypass_re_1              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_bypass_im_1              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_bypass_bypass_reg_re    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_bypass_bypass_reg_im    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_last_value_re            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_last_value_re_1          : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL t_bypass_reg_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL t_bypass_reg_im                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_bypass_re_2              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL out_new_bypass_im_2              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL constellation_scrambler_out2_1   : std_logic;
  SIGNAL constellation_scrambler_out2_bypass : std_logic;
  SIGNAL constellation_scrambler_out2_bypass_1 : std_logic;
  SIGNAL valid_out_bypass_bypass_reg      : std_logic;  -- ufix1
  SIGNAL constellation_scrambler_out2_last_value : std_logic;
  SIGNAL constellation_scrambler_out2_last_value_1 : std_logic;
  SIGNAL ready_out_2                      : std_logic;
  SIGNAL ready_out_3                      : std_logic;
  SIGNAL ready_out_4                      : std_logic;
  SIGNAL ready_out_5                      : std_logic;
  SIGNAL ready_out_6                      : std_logic;
  SIGNAL ready_out_7                      : std_logic;
  SIGNAL ready_out_8                      : std_logic;
  SIGNAL cp_len_1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cp_len_2                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cp_len_3                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL cp_len_4                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_bypass_reg                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_3                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_4                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_5                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_6                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_7                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_8                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_9                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_bypass_reg                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_10                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_11                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_12                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_13                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_14                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_15                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_16                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay31_bypass_reg               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay2_out1_17                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_18                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_2                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_19                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay2_out1_20                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay32_bypass_reg               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Delay3_out1_bypass               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay3_out1_last_value           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL qam_mod_out2_1                   : std_logic;
  SIGNAL qam_mod_out2_bypass              : std_logic;
  SIGNAL qam_mod_out2_bypass_1            : std_logic;
  SIGNAL valid_scrambler_bypass_bypass_reg : std_logic;  -- ufix1
  SIGNAL qam_mod_out2_last_value          : std_logic;
  SIGNAL qam_mod_out2_last_value_1        : std_logic;
  SIGNAL t1_bypass_reg                    : std_logic;  -- ufix1
  SIGNAL qam_mod_out2_bypass_2            : std_logic;
  SIGNAL init_1                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_2                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1                       : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_1                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_2                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_3                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_4                           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_bypass_reg                 : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay_out1_3                     : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_bypass                : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_bypass_1              : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL init_out_bypass_bypass_reg       : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay_out1_last_value            : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay_out1_last_value_1          : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL t2_bypass_reg                    : std_logic_vector(12 DOWNTO 0);  -- ufix1 [13]
  SIGNAL Delay_out1_bypass_2              : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL new_rsvd_1                       : std_logic;
  SIGNAL new_rsvd_2                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL new_rsvd_3                       : std_logic;
  SIGNAL new_rsvd_4                       : std_logic;
  SIGNAL Delay1_bypass_reg                : std_logic;  -- ufix1
  SIGNAL Delay1_out1_3                    : std_logic;
  SIGNAL Delay1_out1_bypass               : std_logic;
  SIGNAL Delay1_out1_bypass_1             : std_logic;
  SIGNAL new_out_bypass_bypass_reg        : std_logic;  -- ufix1
  SIGNAL Delay1_out1_last_value           : std_logic;
  SIGNAL Delay1_out1_last_value_1         : std_logic;
  SIGNAL t3_bypass_reg                    : std_logic;  -- ufix1
  SIGNAL Delay1_out1_bypass_2             : std_logic;

BEGIN
  u_qam_mod : full_ofdm_modulator_ip_src_qam_mod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              data_in => data_in,  -- ufix12
              valid_in => valid_in,
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              ready_out => ready_out,
              data_out_re => qam_mod_out1_re,  -- sfix12_En10
              data_out_im => qam_mod_out1_im,  -- sfix12_En10
              valid_out => qam_mod_out2
              );

  u_constellation_scrambler : full_ofdm_modulator_ip_src_constellation_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              data_in_re => qam_mod_out1_re,  -- sfix12_En10
              data_in_im => qam_mod_out1_im,  -- sfix12_En10
              valid_in => qam_mod_out2,
              s1_in => s1_in,
              s2_in => s2_in,
              ready_out => ready_out,
              data_out_re => out_new_re,  -- sfix12_En10
              data_out_im => out_new_im,  -- sfix12_En10
              valid_out => constellation_scrambler_out2
              );

  ready_out <= Enable;

  ready_out_1 <= ready_out;

  out_new_re_1 <= signed(out_new_re);

  out_new_im_1 <= signed(out_new_im);

  out_new_last_value_im_1 <= out_new_last_value_im;

  crp_out_delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        out_new_bypass_re_1 <= to_signed(16#000#, 12);
        out_new_bypass_im_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        out_new_bypass_re_1 <= out_new_bypass_re;
        out_new_bypass_im_1 <= out_new_bypass_im;
      END IF;
    END IF;
  END PROCESS crp_out_delay2_process;


  data_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_out_bypass_bypass_reg_re <= to_signed(16#000#, 12);
        data_out_bypass_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        data_out_bypass_bypass_reg_im <= out_new_bypass_im_1;
        data_out_bypass_bypass_reg_re <= out_new_bypass_re_1;
      END IF;
    END IF;
  END PROCESS data_out_bypass_bypass_process;

  
  out_new_last_value_re <= out_new_bypass_re_1 WHEN enb_1_2_1 = '1' ELSE
      data_out_bypass_bypass_reg_re;
  
  out_new_last_value_im <= out_new_bypass_im_1 WHEN enb_1_2_1 = '1' ELSE
      data_out_bypass_bypass_reg_im;

  out_new_last_value_re_1 <= out_new_last_value_re;

  
  out_new_bypass_re <= out_new_last_value_re_1 WHEN ready_out_1 = '0' ELSE
      out_new_re_1;
  
  out_new_bypass_im <= out_new_last_value_im_1 WHEN ready_out_1 = '0' ELSE
      out_new_im_1;

  t_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t_bypass_reg_re <= to_signed(16#000#, 12);
        t_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        t_bypass_reg_im <= out_new_bypass_im;
        t_bypass_reg_re <= out_new_bypass_re;
      END IF;
    END IF;
  END PROCESS t_bypass_process;

  
  out_new_bypass_re_2 <= out_new_bypass_re WHEN enb_1_2_1 = '1' ELSE
      t_bypass_reg_re;
  
  out_new_bypass_im_2 <= out_new_bypass_im WHEN enb_1_2_1 = '1' ELSE
      t_bypass_reg_im;

  data_out_re <= std_logic_vector(out_new_bypass_re_2);

  data_out_im <= std_logic_vector(out_new_bypass_im_2);

  constellation_scrambler_out2_1 <= constellation_scrambler_out2;

  crp_out_delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        constellation_scrambler_out2_bypass_1 <= '0';
      ELSIF enb = '1' THEN
        constellation_scrambler_out2_bypass_1 <= constellation_scrambler_out2_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay3_process;


  valid_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_out_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        valid_out_bypass_bypass_reg <= constellation_scrambler_out2_bypass_1;
      END IF;
    END IF;
  END PROCESS valid_out_bypass_bypass_process;

  
  constellation_scrambler_out2_last_value <= constellation_scrambler_out2_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      valid_out_bypass_bypass_reg;

  constellation_scrambler_out2_last_value_1 <= constellation_scrambler_out2_last_value;

  
  constellation_scrambler_out2_bypass <= constellation_scrambler_out2_last_value_1 WHEN ready_out_1 = '0' ELSE
      constellation_scrambler_out2_1;

  ready_out_2 <= ready_out;

  rd_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_3 <= '0';
      ELSIF enb = '1' THEN
        ready_out_3 <= ready_out_2;
      END IF;
    END IF;
  END PROCESS rd_13_process;


  ready_out_4 <= ready_out;

  rd_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_5 <= '0';
      ELSIF enb = '1' THEN
        ready_out_5 <= ready_out_4;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  ready_out_6 <= ready_out;

  rd_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_7 <= '0';
      ELSIF enb = '1' THEN
        ready_out_7 <= ready_out_6;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_8 <= '0';
      ELSIF enb = '1' THEN
        ready_out_8 <= ready_out_1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  cp_len_1 <= unsigned(cp_len);

  rd_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        cp_len_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        cp_len_2 <= cp_len_1;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  Delay2_out1_1 <= Delay2_out1;

  rd_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_2 <= Delay2_out1_1;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  
  cp_len_3 <= Delay2_out1_2 WHEN ready_out_8 = '0' ELSE
      cp_len_2;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        cp_len_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        cp_len_4 <= cp_len_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay2_bypass_reg <= cp_len_4;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= cp_len_4 WHEN enb_1_2_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay2_out1_3 <= Delay2_out1;

  rd_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_4 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_4 <= Delay2_out1_3;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  Delay2_out1_6 <= Delay2_out1_5;

  rd_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_7 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_7 <= Delay2_out1_6;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  
  Delay2_out1_8 <= Delay2_out1_7 WHEN ready_out_7 = '0' ELSE
      Delay2_out1_4;

  crp_out_delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_9 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_9 <= Delay2_out1_8;
      END IF;
    END IF;
  END PROCESS crp_out_delay8_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay3_bypass_reg <= Delay2_out1_9;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay2_out1_5 <= Delay2_out1_9 WHEN enb_1_2_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay2_out1_10 <= Delay2_out1_5;

  rd_01_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_11 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_11 <= Delay2_out1_10;
      END IF;
    END IF;
  END PROCESS rd_01_process;


  Delay2_out1_13 <= Delay2_out1_12;

  rd_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_14 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_14 <= Delay2_out1_13;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  
  Delay2_out1_15 <= Delay2_out1_14 WHEN ready_out_5 = '0' ELSE
      Delay2_out1_11;

  crp_out_delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_16 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_16 <= Delay2_out1_15;
      END IF;
    END IF;
  END PROCESS crp_out_delay9_process;


  Delay31_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay31_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay31_bypass_reg <= Delay2_out1_16;
      END IF;
    END IF;
  END PROCESS Delay31_bypass_process;

  
  Delay2_out1_12 <= Delay2_out1_16 WHEN enb_1_2_1 = '1' ELSE
      Delay31_bypass_reg;

  Delay2_out1_17 <= Delay2_out1_12;

  rd_02_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_18 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_18 <= Delay2_out1_17;
      END IF;
    END IF;
  END PROCESS rd_02_process;


  Delay3_out1_1 <= Delay3_out1;

  rd_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_2 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  
  Delay2_out1_19 <= Delay3_out1_2 WHEN ready_out_3 = '0' ELSE
      Delay2_out1_18;

  crp_out_delay10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1_20 <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        Delay2_out1_20 <= Delay2_out1_19;
      END IF;
    END IF;
  END PROCESS crp_out_delay10_process;


  Delay32_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay32_bypass_reg <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_1 = '1' THEN
        Delay32_bypass_reg <= Delay2_out1_20;
      END IF;
    END IF;
  END PROCESS Delay32_bypass_process;

  
  Delay3_out1 <= Delay2_out1_20 WHEN enb_1_2_1 = '1' ELSE
      Delay32_bypass_reg;

  cp_len_out_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1_last_value <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        Delay3_out1_last_value <= Delay3_out1_bypass;
      END IF;
    END IF;
  END PROCESS cp_len_out_bypass_process;


  
  Delay3_out1_bypass <= Delay3_out1_last_value WHEN ready_out = '0' ELSE
      Delay3_out1;

  cp_len_out <= std_logic_vector(Delay3_out1_bypass);

  qam_mod_out2_1 <= qam_mod_out2;

  crp_out_delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        qam_mod_out2_bypass_1 <= '0';
      ELSIF enb = '1' THEN
        qam_mod_out2_bypass_1 <= qam_mod_out2_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay4_process;


  valid_scrambler_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_scrambler_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        valid_scrambler_bypass_bypass_reg <= qam_mod_out2_bypass_1;
      END IF;
    END IF;
  END PROCESS valid_scrambler_bypass_bypass_process;

  
  qam_mod_out2_last_value <= qam_mod_out2_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      valid_scrambler_bypass_bypass_reg;

  qam_mod_out2_last_value_1 <= qam_mod_out2_last_value;

  
  qam_mod_out2_bypass <= qam_mod_out2_last_value_1 WHEN ready_out_1 = '0' ELSE
      qam_mod_out2_1;

  t1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t1_bypass_reg <= qam_mod_out2_bypass;
      END IF;
    END IF;
  END PROCESS t1_bypass_process;

  
  qam_mod_out2_bypass_2 <= qam_mod_out2_bypass WHEN enb_1_2_1 = '1' ELSE
      t1_bypass_reg;

  init_1 <= init;

  rd_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        init_2 <= init_1;
      END IF;
    END IF;
  END PROCESS rd_10_process;


  Delay_out1_1 <= Delay_out1;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_2 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_out1_2 <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  
  init_3 <= Delay_out1_2 WHEN ready_out_8 = '0' ELSE
      init_2;

  crp_out_delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_4 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        init_4 <= init_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay5_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg <= init_4;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= init_4 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg;

  Delay_out1_3 <= Delay_out1;

  crp_out_delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_bypass_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        Delay_out1_bypass_1 <= Delay_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay6_process;


  init_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        init_out_bypass_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        init_out_bypass_bypass_reg <= Delay_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS init_out_bypass_bypass_process;

  
  Delay_out1_last_value <= Delay_out1_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      init_out_bypass_bypass_reg;

  Delay_out1_last_value_1 <= Delay_out1_last_value;

  
  Delay_out1_bypass <= Delay_out1_last_value_1 WHEN ready_out_6 = '0' ELSE
      Delay_out1_3;

  t2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t2_bypass_reg <= (OTHERS => '0');
      ELSIF enb_1_2_1 = '1' THEN
        t2_bypass_reg <= Delay_out1_bypass;
      END IF;
    END IF;
  END PROCESS t2_bypass_process;

  
  Delay_out1_bypass_2 <= Delay_out1_bypass WHEN enb_1_2_1 = '1' ELSE
      t2_bypass_reg;

  new_rsvd_1 <= new_rsvd;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_rsvd_2 <= '0';
      ELSIF enb = '1' THEN
        new_rsvd_2 <= new_rsvd_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  Delay1_out1_1 <= Delay1_out1;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  
  new_rsvd_3 <= Delay1_out1_2 WHEN ready_out_8 = '0' ELSE
      new_rsvd_2;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_rsvd_4 <= '0';
      ELSIF enb = '1' THEN
        new_rsvd_4 <= new_rsvd_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg <= new_rsvd_4;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= new_rsvd_4 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg;

  Delay1_out1_3 <= Delay1_out1;

  crp_out_delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_bypass_1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_bypass_1 <= Delay1_out1_bypass;
      END IF;
    END IF;
  END PROCESS crp_out_delay7_process;


  new_out_bypass_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        new_out_bypass_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        new_out_bypass_bypass_reg <= Delay1_out1_bypass_1;
      END IF;
    END IF;
  END PROCESS new_out_bypass_bypass_process;

  
  Delay1_out1_last_value <= Delay1_out1_bypass_1 WHEN enb_1_2_1 = '1' ELSE
      new_out_bypass_bypass_reg;

  Delay1_out1_last_value_1 <= Delay1_out1_last_value;

  
  Delay1_out1_bypass <= Delay1_out1_last_value_1 WHEN ready_out_6 = '0' ELSE
      Delay1_out1_3;

  t3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        t3_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        t3_bypass_reg <= Delay1_out1_bypass;
      END IF;
    END IF;
  END PROCESS t3_bypass_process;

  
  Delay1_out1_bypass_2 <= Delay1_out1_bypass WHEN enb_1_2_1 = '1' ELSE
      t3_bypass_reg;

  valid_out <= constellation_scrambler_out2_bypass;

  valid_scrambler <= qam_mod_out2_bypass_2;

  init_out <= Delay_out1_bypass_2;

  new_out <= Delay1_out1_bypass_2;

END rtl;

