-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_qam_mod.vhd
-- Created: 2024-08-31 22:08:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_qam_mod
-- Source Path: HDLModulatorFull/full_ofdm_modulator/enabled_qam_and_scrambler/qam_mod
-- Hierarchy Level: 2
-- Model version: 1.21
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_ofdm_modulator_ip_src_full_ofdm_modulator_pac.ALL;

ENTITY full_ofdm_modulator_ip_src_qam_mod IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        ready_out                         :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_im                       :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_qam_mod;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_qam_mod IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_BPSK_Modulator_Baseband
    PORT( in0                             :   IN    std_logic;  -- ufix1
          out0_re                         :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          out0_im                         :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_BPSK_Modulator_Baseband
    USE ENTITY work.full_ofdm_modulator_ip_src_BPSK_Modulator_Baseband(rtl);

  -- Constants
  CONSTANT alpha_table_data_re            : vector_of_signed12(0 TO 3) := 
    (to_signed(16#2D4#, 12), to_signed(16#2D4#, 12), to_signed(-16#2D4#, 12), to_signed(-16#2D4#, 12));  -- sfix12 [4]
  CONSTANT alpha_table_data_im            : vector_of_signed12(0 TO 3) := 
    (to_signed(-16#2D4#, 12), to_signed(16#2D4#, 12), to_signed(-16#2D4#, 12), to_signed(16#2D4#, 12));  -- sfix12 [4]
  CONSTANT alpha_table_data_re_2          : vector_of_signed12(0 TO 15) := 
    (to_signed(-16#3CB#, 12), to_signed(-16#3CB#, 12), to_signed(-16#3CB#, 12), to_signed(-16#3CB#, 12),
     to_signed(-16#144#, 12), to_signed(-16#144#, 12), to_signed(-16#144#, 12), to_signed(-16#144#, 12),
     to_signed(16#3CB#, 12), to_signed(16#3CB#, 12), to_signed(16#3CB#, 12), to_signed(16#3CB#, 12),
     to_signed(16#144#, 12), to_signed(16#144#, 12), to_signed(16#144#, 12), to_signed(16#144#, 12));  -- sfix12 [16]
  CONSTANT alpha_table_data_im_2          : vector_of_signed12(0 TO 15) := 
    (to_signed(-16#3CB#, 12), to_signed(-16#144#, 12), to_signed(16#3CB#, 12), to_signed(16#144#, 12),
     to_signed(-16#3CB#, 12), to_signed(-16#144#, 12), to_signed(16#3CB#, 12), to_signed(16#144#, 12),
     to_signed(-16#3CB#, 12), to_signed(-16#144#, 12), to_signed(16#3CB#, 12), to_signed(16#144#, 12),
     to_signed(-16#3CB#, 12), to_signed(-16#144#, 12), to_signed(16#3CB#, 12), to_signed(16#144#, 12));  -- sfix12 [16]

  -- Signals
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL ready_out_2                      : std_logic;
  SIGNAL bits_per_subcarrier_1            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant3_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_1                        : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL BPSK_Modulator_Baseband1_bypass_reg : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL BPSK_Modulator_Baseband_out1_re  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL BPSK_Modulator_Baseband_out1_im  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Constant5_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL BPSK_Modulator_Baseband_out1_re_1 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL BPSK_Modulator_Baseband_out1_im_1 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Bit_Slice1_out1                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL batID_11_bypass_reg              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Slice1_out1_1                : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL batID_1_out1_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL batID_1_out1_im                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL batID_1_out1_re_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL batID_1_out1_im_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant2_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant4_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Bit_Slice2_out1                  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL batID_81_bypass_reg              : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Bit_Slice2_out1_1                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL batID_8_out1_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL batID_8_out1_im                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL batID_8_out1_re_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL batID_8_out1_im_1                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant6_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant7_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant9_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant10_out1                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant1_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Constant8_out1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_re         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_im         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_re_1       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_im_1       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_out1_im                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_out1_im_1                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_out1_re                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_out1_re_1                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_out1_re_2                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_out1_im_2                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_re_2       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_im_2       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_re_3       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Multiport_Switch_out1_im_3       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_bypass_reg_re              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL Delay_bypass_reg_im              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL ready_out_3                      : std_logic;
  SIGNAL ready_out_4                      : std_logic;
  SIGNAL valid_in_1                       : std_logic;
  SIGNAL valid_in_2                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL valid_in_3                       : std_logic;
  SIGNAL valid_in_4                       : std_logic;
  SIGNAL Delay1_bypass_reg                : std_logic;  -- ufix1

BEGIN
  u_BPSK_Modulator_Baseband : full_ofdm_modulator_ip_src_BPSK_Modulator_Baseband
    PORT MAP( in0 => Bit_Slice_out1_1,  -- ufix1
              out0_re => BPSK_Modulator_Baseband_out1_re,  -- sfix12_En10
              out0_im => BPSK_Modulator_Baseband_out1_im  -- sfix12_En10
              );

  ready_out_1 <= ready_out;

  rd_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_2 <= '0';
      ELSIF enb = '1' THEN
        ready_out_2 <= ready_out_1;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  bits_per_subcarrier_1 <= unsigned(bits_per_subcarrier);

  Constant3_out1 <= to_signed(16#000#, 12);

  data_in_1 <= unsigned(data_in);

  Bit_Slice_out1 <= data_in_1(0);

  BPSK_Modulator_Baseband1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        BPSK_Modulator_Baseband1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        BPSK_Modulator_Baseband1_bypass_reg <= Bit_Slice_out1;
      END IF;
    END IF;
  END PROCESS BPSK_Modulator_Baseband1_bypass_process;

  
  Bit_Slice_out1_1 <= Bit_Slice_out1 WHEN enb_1_2_1 = '1' ELSE
      BPSK_Modulator_Baseband1_bypass_reg;

  Constant5_out1 <= to_signed(16#000#, 12);

  BPSK_Modulator_Baseband_out1_re_1 <= signed(BPSK_Modulator_Baseband_out1_re);

  BPSK_Modulator_Baseband_out1_im_1 <= signed(BPSK_Modulator_Baseband_out1_im);

  Bit_Slice1_out1 <= data_in_1(1 DOWNTO 0);

  batID_11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        batID_11_bypass_reg <= to_unsigned(16#0#, 2);
      ELSIF enb_1_2_1 = '1' THEN
        batID_11_bypass_reg <= Bit_Slice1_out1;
      END IF;
    END IF;
  END PROCESS batID_11_bypass_process;

  
  Bit_Slice1_out1_1 <= Bit_Slice1_out1 WHEN enb_1_2_1 = '1' ELSE
      batID_11_bypass_reg;

  batID_1_out1_re <= alpha_table_data_re(to_integer(Bit_Slice1_out1_1));
  batID_1_out1_im <= alpha_table_data_im(to_integer(Bit_Slice1_out1_1));

  batID_1_out1_re_1 <= batID_1_out1_re;

  batID_1_out1_im_1 <= batID_1_out1_im;

  Constant2_out1 <= to_signed(16#000#, 12);

  Constant4_out1 <= to_signed(16#000#, 12);

  Bit_Slice2_out1 <= data_in_1(3 DOWNTO 0);

  batID_81_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        batID_81_bypass_reg <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_1 = '1' THEN
        batID_81_bypass_reg <= Bit_Slice2_out1;
      END IF;
    END IF;
  END PROCESS batID_81_bypass_process;

  
  Bit_Slice2_out1_1 <= Bit_Slice2_out1 WHEN enb_1_2_1 = '1' ELSE
      batID_81_bypass_reg;

  batID_8_out1_re <= alpha_table_data_re_2(to_integer(Bit_Slice2_out1_1));
  batID_8_out1_im <= alpha_table_data_im_2(to_integer(Bit_Slice2_out1_1));

  batID_8_out1_re_1 <= batID_8_out1_re;

  batID_8_out1_im_1 <= batID_8_out1_im;

  Constant6_out1 <= to_signed(16#000#, 12);

  Constant7_out1 <= to_signed(16#000#, 12);

  Constant9_out1 <= to_signed(16#000#, 12);

  Constant10_out1 <= to_signed(16#000#, 12);

  Constant1_out1 <= to_signed(16#000#, 12);

  Constant8_out1 <= to_signed(16#000#, 12);

  
  Multiport_Switch_out1_re <= Constant3_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#0#, 4) ELSE
      BPSK_Modulator_Baseband_out1_re_1 WHEN bits_per_subcarrier_1 = to_unsigned(16#1#, 4) ELSE
      batID_1_out1_re_1 WHEN bits_per_subcarrier_1 = to_unsigned(16#2#, 4) ELSE
      Constant2_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#3#, 4) ELSE
      batID_8_out1_re_1 WHEN bits_per_subcarrier_1 = to_unsigned(16#4#, 4) ELSE
      Constant6_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#5#, 4) ELSE
      Constant9_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#6#, 4) ELSE
      Constant1_out1;
  
  Multiport_Switch_out1_im <= Constant5_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#0#, 4) ELSE
      BPSK_Modulator_Baseband_out1_im_1 WHEN bits_per_subcarrier_1 = to_unsigned(16#1#, 4) ELSE
      batID_1_out1_im_1 WHEN bits_per_subcarrier_1 = to_unsigned(16#2#, 4) ELSE
      Constant4_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#3#, 4) ELSE
      batID_8_out1_im_1 WHEN bits_per_subcarrier_1 = to_unsigned(16#4#, 4) ELSE
      Constant7_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#5#, 4) ELSE
      Constant10_out1 WHEN bits_per_subcarrier_1 = to_unsigned(16#6#, 4) ELSE
      Constant8_out1;

  rd_01_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Multiport_Switch_out1_re_1 <= to_signed(16#000#, 12);
        Multiport_Switch_out1_im_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Multiport_Switch_out1_re_1 <= Multiport_Switch_out1_re;
        Multiport_Switch_out1_im_1 <= Multiport_Switch_out1_im;
      END IF;
    END IF;
  END PROCESS rd_01_process;


  Delay_out1_im_1 <= Delay_out1_im;

  Delay_out1_re_1 <= Delay_out1_re;

  rd_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1_re_2 <= to_signed(16#000#, 12);
        Delay_out1_im_2 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Delay_out1_re_2 <= Delay_out1_re_1;
        Delay_out1_im_2 <= Delay_out1_im_1;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  
  Multiport_Switch_out1_re_2 <= Delay_out1_re_2 WHEN ready_out_2 = '0' ELSE
      Multiport_Switch_out1_re_1;
  
  Multiport_Switch_out1_im_2 <= Delay_out1_im_2 WHEN ready_out_2 = '0' ELSE
      Multiport_Switch_out1_im_1;

  crp_out_delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Multiport_Switch_out1_re_3 <= to_signed(16#000#, 12);
        Multiport_Switch_out1_im_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        Multiport_Switch_out1_re_3 <= Multiport_Switch_out1_re_2;
        Multiport_Switch_out1_im_3 <= Multiport_Switch_out1_im_2;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_bypass_reg_re <= to_signed(16#000#, 12);
        Delay_bypass_reg_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_1 = '1' THEN
        Delay_bypass_reg_im <= Multiport_Switch_out1_im_3;
        Delay_bypass_reg_re <= Multiport_Switch_out1_re_3;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1_re <= Multiport_Switch_out1_re_3 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg_re;
  
  Delay_out1_im <= Multiport_Switch_out1_im_3 WHEN enb_1_2_1 = '1' ELSE
      Delay_bypass_reg_im;

  data_out_re <= std_logic_vector(Delay_out1_re);

  data_out_im <= std_logic_vector(Delay_out1_im);

  ready_out_3 <= ready_out;

  rd_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_4 <= '0';
      ELSIF enb = '1' THEN
        ready_out_4 <= ready_out_3;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  valid_in_1 <= valid_in;

  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_in_2 <= '0';
      ELSIF enb = '1' THEN
        valid_in_2 <= valid_in_1;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  Delay1_out1_1 <= Delay1_out1;

  rd_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_2 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  
  valid_in_3 <= Delay1_out1_2 WHEN ready_out_4 = '0' ELSE
      valid_in_2;

  crp_out_delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_in_4 <= '0';
      ELSIF enb = '1' THEN
        valid_in_4 <= valid_in_3;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_bypass_reg <= '0';
      ELSIF enb_1_2_1 = '1' THEN
        Delay1_bypass_reg <= valid_in_4;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= valid_in_4 WHEN enb_1_2_1 = '1' ELSE
      Delay1_bypass_reg;

  valid_out <= Delay1_out1;

END rtl;

