-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_write_frame_to_ram.vhd
-- Created: 2024-10-06 13:51:04
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_write_frame_to_ram
-- Source Path: HDLTx/full_tx/store_frame_in_ram/write_frame_to_ram
-- Hierarchy Level: 2
-- Model version: 4.149
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_write_frame_to_ram IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        preamble                          :   IN    std_logic;
        preamble_valid                    :   IN    std_logic;
        channel                           :   IN    std_logic;
        channel_valid                     :   IN    std_logic;
        header                            :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        header_valid                      :   IN    std_logic;
        payload                           :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        payload_valid                     :   IN    std_logic;
        payload_len                       :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        write_data                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        wr_addr                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        we                                :   OUT   std_logic;
        end_rsvd                          :   OUT   std_logic;
        ram_size                          :   OUT   std_logic_vector(24 DOWNTO 0)  -- ufix25
        );
END IEEE_8021513_TX_src_write_frame_to_ram;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_write_frame_to_ram IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_ram_formatting
    PORT( channel_valid                   :   IN    std_logic;
          header_valid                    :   IN    std_logic;
          payload_valid                   :   IN    std_logic;
          preamble                        :   IN    std_logic;
          channel                         :   IN    std_logic;
          header                          :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          payload                         :   IN    std_logic_vector(1 DOWNTO 0);  -- boolean [2]
          Out1                            :   OUT   std_logic_vector(1 DOWNTO 0)  -- ufix2
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_ram_formatting
    USE ENTITY work.IEEE_8021513_TX_src_ram_formatting(rtl);

  -- Signals
  SIGNAL ram_formatting_out1              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant73_out1                  : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Constant43_out1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL payload_len_unsigned             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Product_out1                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL stateControl                     : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL Delay8_out1                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Add1_out1                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL Delay9_out1                      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL we_1                             : std_logic;
  SIGNAL count_step                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_reset                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL wr_addr_tmp                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL count_2                          : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  u_ram_formatting : IEEE_8021513_TX_src_ram_formatting
    PORT MAP( channel_valid => channel_valid,
              header_valid => header_valid,
              payload_valid => payload_valid,
              preamble => preamble,
              channel => channel,
              header => header,  -- boolean [2]
              payload => payload,  -- boolean [2]
              Out1 => ram_formatting_out1  -- ufix2
              );

  Constant73_out1 <= to_unsigned(16#0D9C#, 13);

  Constant43_out1 <= to_unsigned(16#CD#, 8);

  payload_len_unsigned <= unsigned(payload_len);

  Product_out1 <= Constant43_out1 * payload_len_unsigned;

  stateControl <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_1 <= stateControl;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  enb_1_2_0_gated <= stateControl_1 AND enb_1_2_0;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1 <= to_unsigned(16#000000#, 24);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay8_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Add1_out1 <= resize(Constant73_out1, 25) + resize(Delay8_out1, 25);

  stateControl_2 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_3 <= stateControl_2;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  enb_1_2_0_gated_1 <= stateControl_3 AND enb_1_2_0;

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_unsigned(16#0000001#, 25);
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay9_out1 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  stateControl_5 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_6 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_6 <= stateControl_5;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enb_1_2_0_gated_2 <= stateControl_6 AND enb_1_2_0;

  we_1 <= payload_valid OR (header_valid OR (preamble_valid OR channel_valid));

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#0001#, 16);

  count_reset <= to_unsigned(16#0000#, 16);

  count <= wr_addr_tmp + count_step;

  
  count_1 <= wr_addr_tmp WHEN we_1 = '0' ELSE
      count;

  
  Relational_Operator_out1 <= '1' WHEN Delay9_out1 = resize(wr_addr_tmp, 25) ELSE
      '0';

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay3_out1 <= Relational_Operator_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  count_2 <= count_1 WHEN Delay3_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wr_addr_tmp <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        wr_addr_tmp <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  wr_addr <= std_logic_vector(wr_addr_tmp);

  ram_size <= std_logic_vector(Delay9_out1);

  write_data <= ram_formatting_out1;

  we <= we_1;

  end_rsvd <= Delay3_out1;

END rtl;

