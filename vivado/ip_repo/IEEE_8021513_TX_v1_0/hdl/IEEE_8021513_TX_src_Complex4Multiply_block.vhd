-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_Complex4Multiply_block.vhd
-- Created: 2024-10-06 13:51:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_Complex4Multiply_block
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator/OFDM Modulator/dsphdl.IFFT/RADIX22FFT_SDF1_5/Complex4Multiply
-- Hierarchy Level: 6
-- Model version: 4.149
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_Complex4Multiply_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        din_5_1_re_dly                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        din_5_1_im_dly                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        din_5_vld_dly                     :   IN    std_logic;
        twdl_5_1_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        twdl_5_1_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dinXTwdl_5_1_vld                  :   OUT   std_logic
        );
END IEEE_8021513_TX_src_Complex4Multiply_block;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_Complex4Multiply_block IS

  -- Signals
  SIGNAL din_5_1_re_dly_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_5_1_im_dly_signed            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_5_1_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_re_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_5_1_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twdl_im_reg                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Complex4Multiply_din1_re_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_din1_im_pipe1   : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_mult1_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_re_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult1_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_mult2_im_pipe1  : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32
  SIGNAL Complex4Multiply_twiddle_re_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL Complex4Multiply_twiddle_im_pipe1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16
  SIGNAL prod1_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En28
  SIGNAL prod1_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En28
  SIGNAL prod2_re                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En28
  SIGNAL prod2_im                         : signed(31 DOWNTO 0) := to_signed(0, 32);  -- sfix32_En28
  SIGNAL din_vld_dly1                     : std_logic;
  SIGNAL din_vld_dly2                     : std_logic;
  SIGNAL din_vld_dly3                     : std_logic;
  SIGNAL prod_vld                         : std_logic;
  SIGNAL Complex4Add_multRes_re_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_multRes_im_reg       : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Complex4Add_prod_vld_reg1        : std_logic;
  SIGNAL Complex4Add_prod1_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod1_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_re_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_prod2_im_reg         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Complex4Add_multRes_re_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Complex4Add_multRes_im_reg_next  : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Complex4Add_sub_cast             : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Complex4Add_sub_cast_1           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Complex4Add_add_cast             : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL Complex4Add_add_cast_1           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL mulResFP_re                      : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL mulResFP_im                      : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL dinXTwdl_5_1_vld_1               : std_logic;
  SIGNAL dinXTwdl_re_tmp                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dinXTwdl_im_tmp                  : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  din_5_1_re_dly_signed <= signed(din_5_1_re_dly);

  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        din_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        din_re_reg <= din_5_1_re_dly_signed;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  din_5_1_im_dly_signed <= signed(din_5_1_im_dly);

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        din_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        din_im_reg <= din_5_1_im_dly_signed;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  twdl_5_1_re_signed <= signed(twdl_5_1_re);

  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        twdl_re_reg <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        twdl_re_reg <= twdl_5_1_re_signed;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  twdl_5_1_im_signed <= signed(twdl_5_1_im);

  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        twdl_im_reg <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0 = '1' THEN
        twdl_im_reg <= twdl_5_1_im_signed;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  -- Complex4Multiply
  Complex4Multiply_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      END IF;
    END IF;
  END PROCESS Complex4Multiply_process;


  intdelay_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        din_vld_dly1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        din_vld_dly1 <= din_5_vld_dly;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  intdelay_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        din_vld_dly2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        din_vld_dly2 <= din_vld_dly1;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  intdelay_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        din_vld_dly3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        din_vld_dly3 <= din_vld_dly2;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  intdelay_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        prod_vld <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        prod_vld <= din_vld_dly3;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  -- Complex4Add
  Complex4Add_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Complex4Add_multRes_re_reg <= to_signed(0, 33);
        Complex4Add_multRes_im_reg <= to_signed(0, 33);
        Complex4Add_prod1_re_reg <= to_signed(0, 32);
        Complex4Add_prod1_im_reg <= to_signed(0, 32);
        Complex4Add_prod2_re_reg <= to_signed(0, 32);
        Complex4Add_prod2_im_reg <= to_signed(0, 32);
        Complex4Add_prod_vld_reg1 <= '0';
        dinXTwdl_5_1_vld_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
        Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
        Complex4Add_prod1_re_reg <= prod1_re;
        Complex4Add_prod1_im_reg <= prod1_im;
        Complex4Add_prod2_re_reg <= prod2_re;
        Complex4Add_prod2_im_reg <= prod2_im;
        dinXTwdl_5_1_vld_1 <= Complex4Add_prod_vld_reg1;
        Complex4Add_prod_vld_reg1 <= prod_vld;
      END IF;
    END IF;
  END PROCESS Complex4Add_process;

  Complex4Add_sub_cast <= resize(Complex4Add_prod1_re_reg, 33);
  Complex4Add_sub_cast_1 <= resize(Complex4Add_prod2_re_reg, 33);
  Complex4Add_multRes_re_reg_next <= Complex4Add_sub_cast - Complex4Add_sub_cast_1;
  Complex4Add_add_cast <= resize(Complex4Add_prod1_im_reg, 33);
  Complex4Add_add_cast_1 <= resize(Complex4Add_prod2_im_reg, 33);
  Complex4Add_multRes_im_reg_next <= Complex4Add_add_cast + Complex4Add_add_cast_1;
  mulResFP_re <= Complex4Add_multRes_re_reg;
  mulResFP_im <= Complex4Add_multRes_im_reg;

  dinXTwdl_re_tmp <= mulResFP_re(29 DOWNTO 14);

  dinXTwdl_re <= std_logic_vector(dinXTwdl_re_tmp);

  dinXTwdl_im_tmp <= mulResFP_im(29 DOWNTO 14);

  dinXTwdl_im <= std_logic_vector(dinXTwdl_im_tmp);

  dinXTwdl_5_1_vld <= dinXTwdl_5_1_vld_1;

END rtl;

