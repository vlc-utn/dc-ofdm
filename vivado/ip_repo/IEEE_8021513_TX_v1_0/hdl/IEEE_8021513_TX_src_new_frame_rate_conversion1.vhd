-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_new_frame_rate_conversion1.vhd
-- Created: 2024-09-15 21:02:43
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_new_frame_rate_conversion1
-- Source Path: HDLTx/full_tx/new_frame_rate_conversion1
-- Hierarchy Level: 1
-- Model version: 4.135
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_new_frame_rate_conversion1 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_8_1                         :   IN    std_logic;
        ctrl_in_end                       :   IN    std_logic;
        new_frame                         :   OUT   std_logic
        );
END IEEE_8021513_TX_src_new_frame_rate_conversion1;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_new_frame_rate_conversion1 IS

  -- Signals
  SIGNAL end_rsvd                         : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Rate_Transition2_bypass_reg      : std_logic;  -- ufix1
  SIGNAL Rate_Transition2_out1            : std_logic;

BEGIN
  -- Description:
  -- This block "extends" the "end" signal 8 clock cycles, to ensure that the "end" signal can be sampled by the rate 
  -- transition block
  -- (Otherwise, the "end" signal would be "on" only 1/4th of a cycle, and it can't be ensured that it will be read).

  end_rsvd <= ctrl_in_end;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay2_out1 <= end_rsvd;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay5_out1 <= Delay1_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay6_out1 <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay7_out1 <= Delay6_out1;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Logical_Operator_out1 <= Delay4_out1 OR (Delay1_out1 OR (Delay5_out1 OR (Delay6_out1 OR (Delay7_out1 OR (Delay3_out1 OR (end_rsvd OR Delay2_out1))))));

  Rate_Transition2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition2_bypass_reg <= '0';
      ELSIF enb_1_8_1 = '1' THEN
        Rate_Transition2_bypass_reg <= Logical_Operator_out1;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_bypass_process;

  
  Rate_Transition2_out1 <= Logical_Operator_out1 WHEN enb_1_8_1 = '1' ELSE
      Rate_Transition2_bypass_reg;

  new_frame <= Rate_Transition2_out1;

END rtl;

