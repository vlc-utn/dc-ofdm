-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX.vhd
-- Created: 2024-10-06 13:51:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX
-- Source Path: IEEE_8021513_TX
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        new_frame_in                      :   IN    std_logic;  -- ufix1
        reg0                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg1                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg2                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg3                              :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        valid_in                          :   IN    std_logic;  -- ufix1
        data_out                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        valid_out                         :   OUT   std_logic;  -- ufix1
        ready                             :   OUT   std_logic  -- ufix1
        );
END IEEE_8021513_TX;


ARCHITECTURE rtl OF IEEE_8021513_TX IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          new_frame_in                    :   IN    std_logic;  -- ufix1
          reg0                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg1                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg2                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg3                            :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          valid_in                        :   IN    std_logic;  -- ufix1
          ce_out_0                        :   OUT   std_logic;  -- ufix1
          ce_out_1                        :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          valid_out                       :   OUT   std_logic;  -- ufix1
          ready                           :   OUT   std_logic;  -- ufix1
          debug_payload                   :   OUT   std_logic;  -- ufix1
          debug_payload_ctrl_start        :   OUT   std_logic;  -- ufix1
          debug_payload_ctrl_end          :   OUT   std_logic;  -- ufix1
          debug_payload_ctrl_valid        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_reset_sync
    USE ENTITY work.IEEE_8021513_TX_reset_sync(rtl);

  FOR ALL : IEEE_8021513_TX_dut
    USE ENTITY work.IEEE_8021513_TX_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_0_sig                     : std_logic;  -- ufix1
  SIGNAL ce_out_1_sig                     : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL ready_sig                        : std_logic;  -- ufix1
  SIGNAL debug_payload_sig                : std_logic;  -- ufix1
  SIGNAL debug_payload_ctrl_start_sig     : std_logic;  -- ufix1
  SIGNAL debug_payload_ctrl_end_sig       : std_logic;  -- ufix1
  SIGNAL debug_payload_ctrl_valid_sig     : std_logic;  -- ufix1
  SIGNAL data_out_sig_signed              : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL data_out_tmp                     : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  u_IEEE_8021513_TX_reset_sync_inst : IEEE_8021513_TX_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_IEEE_8021513_TX_dut_inst : IEEE_8021513_TX_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              new_frame_in => new_frame_in,  -- ufix1
              reg0 => reg0,  -- ufix32
              reg1 => reg1,  -- ufix32
              reg2 => reg2,  -- ufix32
              reg3 => reg3,  -- ufix32
              data_in => data_in,  -- ufix8
              valid_in => valid_in,  -- ufix1
              ce_out_0 => ce_out_0_sig,  -- ufix1
              ce_out_1 => ce_out_1_sig,  -- ufix1
              data_out => data_out_sig,  -- sfix16_En15
              valid_out => valid_out_sig,  -- ufix1
              ready => ready_sig,  -- ufix1
              debug_payload => debug_payload_sig,  -- ufix1
              debug_payload_ctrl_start => debug_payload_ctrl_start_sig,  -- ufix1
              debug_payload_ctrl_end => debug_payload_ctrl_end_sig,  -- ufix1
              debug_payload_ctrl_valid => debug_payload_ctrl_valid_sig  -- ufix1
              );

  dut_enable <= '1';

  reset_cm <=  NOT IPCORE_RESETN;

  data_out_sig_signed <= signed(data_out_sig);

  data_out_tmp <= unsigned(data_out_sig_signed);

  data_out <= std_logic_vector(data_out_tmp);

  valid_out <= valid_out_sig;

  ready <= ready_sig;

END rtl;

