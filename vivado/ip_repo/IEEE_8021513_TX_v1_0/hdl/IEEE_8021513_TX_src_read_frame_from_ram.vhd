-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_read_frame_from_ram.vhd
-- Created: 2024-10-27 17:09:29
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_read_frame_from_ram
-- Source Path: HDLTx/full_tx/store_frame_in_ram/read_frame_from_ram
-- Hierarchy Level: 2
-- Model version: 4.169
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_read_frame_from_ram IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        start_reading                     :   IN    std_logic;
        ram_size                          :   IN    std_logic_vector(24 DOWNTO 0);  -- ufix25
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        cp_len_in                         :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
        Enable                            :   IN    std_logic;
        rd_addr                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        valid_out                         :   OUT   std_logic;
        bits_per_subcarrier_out           :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   OUT   std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_rsvd                          :   OUT   std_logic;
        cp_len                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END IEEE_8021513_TX_src_read_frame_from_ram;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_read_frame_from_ram IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_valid_frame
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          valid_in                        :   IN    std_logic;
          valid_out                       :   OUT   std_logic;
          new_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_bits_selector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          bits_per_subcarrier_out         :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_init_selector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          init                            :   OUT   std_logic_vector(12 DOWNTO 0)  -- boolean [13]
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_cp_len_creator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          cp_len_in                       :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
          cp_len                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_valid_frame
    USE ENTITY work.IEEE_8021513_TX_src_valid_frame(rtl);

  FOR ALL : IEEE_8021513_TX_src_bits_selector
    USE ENTITY work.IEEE_8021513_TX_src_bits_selector(rtl);

  FOR ALL : IEEE_8021513_TX_src_init_selector
    USE ENTITY work.IEEE_8021513_TX_src_init_selector(rtl);

  FOR ALL : IEEE_8021513_TX_src_cp_len_creator
    USE ENTITY work.IEEE_8021513_TX_src_cp_len_creator(rtl);

  -- Signals
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL ram_size_unsigned                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL count_step                       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_reset                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL rd_addr_1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL Relational_Operator1_out1        : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL count_1                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL count_2                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay2_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL valid_frame_out1                 : std_logic;
  SIGNAL valid_frame_out2                 : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL bits_selector_out1               : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL bits_selector_out1_unsigned      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Delay5_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL init_selector_out1               : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay3_out1                      : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL cp_len_creator_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL cp_len_creator_out1_unsigned     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay4_out1                      : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_valid_frame : IEEE_8021513_TX_src_valid_frame
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0_gated,
              valid_in => Switch1_out1,
              valid_out => valid_frame_out1,
              new_rsvd => valid_frame_out2
              );

  u_bits_selector : IEEE_8021513_TX_src_bits_selector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0_gated,
              rd_addr => std_logic_vector(rd_addr_1),  -- uint16
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              bits_per_subcarrier_out => bits_selector_out1  -- ufix4
              );

  u_init_selector : IEEE_8021513_TX_src_init_selector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0_gated,
              rd_addr => std_logic_vector(rd_addr_1),  -- uint16
              init => init_selector_out1  -- boolean [13]
              );

  u_cp_len_creator : IEEE_8021513_TX_src_cp_len_creator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0_gated,
              rd_addr => std_logic_vector(rd_addr_1),  -- uint16
              cp_len_in => cp_len_in,  -- boolean [3]
              cp_len => cp_len_creator_out1  -- uint8
              );

  ram_size_unsigned <= unsigned(ram_size);

  enb_1_2_0_gated <= Enable AND enb_1_2_0;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#0001#, 16);

  count_reset <= to_unsigned(16#0000#, 16);

  count <= rd_addr_1 + count_step;

  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_out1 <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Unit_Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  
  Relational_Operator1_out1 <= '1' WHEN ram_size_unsigned = resize(rd_addr_1, 25) ELSE
      '0';

  Logical_Operator5_out1 <= start_reading OR Relational_Operator1_out1;

  
  Switch1_out1 <= Unit_Delay1_out1 WHEN Logical_Operator5_out1 = '0' ELSE
      start_reading;

  
  count_1 <= rd_addr_1 WHEN Switch1_out1 = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN start_reading = '0' ELSE
      count_reset;

  HDL_Counter1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rd_addr_1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_0_gated = '1' THEN
        rd_addr_1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay2_out1 <= rd_addr_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  rd_addr <= std_logic_vector(Delay2_out1);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay_out1 <= valid_frame_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  bits_selector_out1_unsigned <= unsigned(bits_selector_out1);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_out1 <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay5_out1 <= bits_selector_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  bits_per_subcarrier_out <= std_logic_vector(Delay5_out1);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay3_out1 <= init_selector_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay1_out1 <= valid_frame_out2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  cp_len_creator_out1_unsigned <= unsigned(cp_len_creator_out1);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay4_out1 <= cp_len_creator_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  cp_len <= std_logic_vector(Delay4_out1);

  valid_out <= Delay_out1;

  init <= Delay3_out1;

  new_rsvd <= Delay1_out1;

END rtl;

