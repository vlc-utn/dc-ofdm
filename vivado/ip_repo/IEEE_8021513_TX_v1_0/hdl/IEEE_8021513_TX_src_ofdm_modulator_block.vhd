-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_ofdm_modulator_block.vhd
-- Created: 2024-09-15 21:02:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_ofdm_modulator_block
-- Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator
-- Hierarchy Level: 2
-- Model version: 4.135
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.IEEE_8021513_TX_src_full_tx_pac.ALL;

ENTITY IEEE_8021513_TX_src_ofdm_modulator_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_in                          :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END IEEE_8021513_TX_src_ofdm_modulator_block;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_ofdm_modulator_block IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_OFDM_Modulator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid                           :   IN    std_logic;
          FFTLen                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          CPLen                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          numLgSc                         :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          numRgSc                         :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          data_re_1                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_im_1                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_1                         :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_OFDM_Modulator
    USE ENTITY work.IEEE_8021513_TX_src_OFDM_Modulator(rtl);

  -- Signals
  SIGNAL stateControl                     : std_logic;
  SIGNAL stateControl_1                   : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_2                   : std_logic;
  SIGNAL stateControl_3                   : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL Delay8_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay8_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_5                   : std_logic;
  SIGNAL stateControl_6                   : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL cp_len_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL stateControl_7                   : std_logic;
  SIGNAL stateControl_8                   : std_logic;
  SIGNAL enb_1_2_0_gated_3                : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Constant2_out1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Delay9_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant4_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Constant3_out1                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL data_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid                            : std_logic;
  SIGNAL ready_1                          : std_logic;
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_re_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_im_1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_last_value_re               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL data_last_value_im               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL stateControl_9                   : std_logic;
  SIGNAL stateControl_10                  : std_logic;
  SIGNAL enb_1_2_0_gated_4                : std_logic;
  SIGNAL Delay7_reg_re                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay7_reg_im                    : vector_of_signed16(0 TO 1);  -- sfix16_En14 [2]
  SIGNAL Delay7_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay7_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL valid_1                          : std_logic;
  SIGNAL valid_last_value                 : std_logic;
  SIGNAL stateControl_11                  : std_logic;
  SIGNAL stateControl_12                  : std_logic;
  SIGNAL enb_1_2_0_gated_5                : std_logic;
  SIGNAL Delay11_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL ready_2                          : std_logic;
  SIGNAL ready_last_value                 : std_logic;
  SIGNAL stateControl_13                  : std_logic;
  SIGNAL stateControl_14                  : std_logic;
  SIGNAL enb_1_2_0_gated_6                : std_logic;
  SIGNAL ready_out                        : std_logic;

BEGIN
  u_OFDM_Modulator : IEEE_8021513_TX_src_OFDM_Modulator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0_gated,
              data_re => std_logic_vector(Delay8_out1_re),  -- sfix16_En14
              data_im => std_logic_vector(Delay8_out1_im),  -- sfix16_En14
              valid => Delay1_out1,
              FFTLen => std_logic_vector(Constant2_out1),  -- ufix9
              CPLen => std_logic_vector(Delay9_out1),  -- uint8
              numLgSc => std_logic_vector(Constant4_out1),  -- ufix6
              numRgSc => std_logic_vector(Constant3_out1),  -- ufix6
              data_re_1 => data_re,  -- sfix16_En14
              data_im_1 => data_im,  -- sfix16_En14
              valid_1 => valid,
              ready => ready_1
              );

  stateControl <= '1';

  delayMatch6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_1 <= stateControl;
      END IF;
    END IF;
  END PROCESS delayMatch6_process;


  enb_1_2_0_gated <= stateControl_1 AND enb_1_2_0;

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  stateControl_2 <= '1';

  delayMatch4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_3 <= stateControl_2;
      END IF;
    END IF;
  END PROCESS delayMatch4_process;


  enb_1_2_0_gated_1 <= stateControl_3 AND enb_1_2_0;

  Delay8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_out1_re <= to_signed(16#0000#, 16);
        Delay8_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay8_out1_re <= data_in_re_signed;
        Delay8_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  stateControl_5 <= '1';

  delayMatch_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_6 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_6 <= stateControl_5;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  enb_1_2_0_gated_2 <= stateControl_6 AND enb_1_2_0;

  cp_len_unsigned <= unsigned(cp_len);

  stateControl_7 <= '1';

  delayMatch5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_8 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_8 <= stateControl_7;
      END IF;
    END IF;
  END PROCESS delayMatch5_process;


  enb_1_2_0_gated_3 <= stateControl_8 AND enb_1_2_0;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay1_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Constant2_out1 <= to_unsigned(16#100#, 9);

  Delay9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_out1 <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0_gated_3 = '1' THEN
        Delay9_out1 <= cp_len_unsigned;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Constant4_out1 <= to_unsigned(16#1A#, 6);

  Constant3_out1 <= to_unsigned(16#19#, 6);

  data_re_signed <= signed(data_re);

  data_im_signed <= signed(data_im);

  out0_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        data_last_value_re <= to_signed(16#0000#, 16);
        data_last_value_im <= to_signed(16#0000#, 16);
      ELSIF enb_1_2_0_gated = '1' THEN
        data_last_value_re <= data_re_1;
        data_last_value_im <= data_im_1;
      END IF;
    END IF;
  END PROCESS out0_bypass_process;


  
  data_re_1 <= data_last_value_re WHEN stateControl_1 = '0' ELSE
      data_re_signed;
  
  data_im_1 <= data_last_value_im WHEN stateControl_1 = '0' ELSE
      data_im_signed;

  stateControl_9 <= '1';

  delayMatch3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_10 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_10 <= stateControl_9;
      END IF;
    END IF;
  END PROCESS delayMatch3_process;


  enb_1_2_0_gated_4 <= stateControl_10 AND enb_1_2_0;

  Delay7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_reg_re <= (OTHERS => to_signed(16#0000#, 16));
        Delay7_reg_im <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb_1_2_0_gated_4 = '1' THEN
        Delay7_reg_im(0) <= data_im_1;
        Delay7_reg_im(1) <= Delay7_reg_im(0);
        Delay7_reg_re(0) <= data_re_1;
        Delay7_reg_re(1) <= Delay7_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay7_process;

  Delay7_out1_re <= Delay7_reg_re(1);
  Delay7_out1_im <= Delay7_reg_im(1);

  data_out_re <= std_logic_vector(Delay7_out1_re);

  data_out_im <= std_logic_vector(Delay7_out1_im);

  out1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        valid_last_value <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        valid_last_value <= valid_1;
      END IF;
    END IF;
  END PROCESS out1_bypass_process;


  
  valid_1 <= valid_last_value WHEN stateControl_1 = '0' ELSE
      valid;

  stateControl_11 <= '1';

  delayMatch1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_12 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_12 <= stateControl_11;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  enb_1_2_0_gated_5 <= stateControl_12 AND enb_1_2_0;

  Delay11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_reg <= (OTHERS => '0');
      ELSIF enb_1_2_0_gated_5 = '1' THEN
        Delay11_reg(0) <= valid_1;
        Delay11_reg(1) <= Delay11_reg(0);
      END IF;
    END IF;
  END PROCESS Delay11_process;

  Delay11_out1 <= Delay11_reg(1);

  out2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_last_value <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        ready_last_value <= ready_2;
      END IF;
    END IF;
  END PROCESS out2_bypass_process;


  
  ready_2 <= ready_last_value WHEN stateControl_1 = '0' ELSE
      ready_1;

  stateControl_13 <= '1';

  delayMatch2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        stateControl_14 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        stateControl_14 <= stateControl_13;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  enb_1_2_0_gated_6 <= stateControl_14 AND enb_1_2_0;

  Delay12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out <= '0';
      ELSIF enb_1_2_0_gated_6 = '1' THEN
        ready_out <= ready_2;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  valid_out <= Delay11_out1;

  ready <= ready_out;

END rtl;

