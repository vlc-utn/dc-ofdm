-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_full_ofdm_modulator.vhd
-- Created: 2024-09-15 21:02:44
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_full_ofdm_modulator
-- Source Path: HDLTx/full_tx/full_ofdm_modulator
-- Hierarchy Level: 1
-- Model version: 4.135
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_full_ofdm_modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        valid_in                          :   IN    std_logic;
        bits_per_subcarrier               :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_sym                      :   IN    std_logic;
        cp_len                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        data_out                          :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END IEEE_8021513_TX_src_full_ofdm_modulator;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_full_ofdm_modulator IS

  -- Component Declarations
  COMPONENT IEEE_8021513_TX_src_enabled_qam_and_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          valid_in                        :   IN    std_logic;
          bits_per_subcarrier             :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          init                            :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
          new_rsvd                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ofdm_en                         :   IN    std_logic;
          Enable                          :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          cp_len_out                      :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_ofdm_modulator_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          cp_len                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          data_out_re                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_out_im                     :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_out                       :   OUT   std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_interpolator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          data_in_im                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          valid_in                        :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          data_out_im                     :   OUT   std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_rising_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IEEE_8021513_TX_src_frequency_upshift
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          data_in_im                      :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En16
          valid_in                        :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IEEE_8021513_TX_src_enabled_qam_and_scrambler
    USE ENTITY work.IEEE_8021513_TX_src_enabled_qam_and_scrambler(rtl);

  FOR ALL : IEEE_8021513_TX_src_ofdm_modulator_block
    USE ENTITY work.IEEE_8021513_TX_src_ofdm_modulator_block(rtl);

  FOR ALL : IEEE_8021513_TX_src_interpolator
    USE ENTITY work.IEEE_8021513_TX_src_interpolator(rtl);

  FOR ALL : IEEE_8021513_TX_src_rising_edge_detector_block
    USE ENTITY work.IEEE_8021513_TX_src_rising_edge_detector_block(rtl);

  FOR ALL : IEEE_8021513_TX_src_frequency_upshift
    USE ENTITY work.IEEE_8021513_TX_src_frequency_upshift(rtl);

  -- Signals
  SIGNAL ready_out                        : std_logic;
  SIGNAL out_new_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL out_new_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_new                        : std_logic;
  SIGNAL enabled_qam_and_scrambler_out3   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL ofdm_modulator_out1_re           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out1_im           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ofdm_modulator_out2              : std_logic;
  SIGNAL interpolator_out1_re             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL interpolator_out1_im             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL interpolator_out2                : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL frequency_upshift_out1           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL frequency_upshift_out2           : std_logic;

BEGIN
  u_enabled_qam_and_scrambler : IEEE_8021513_TX_src_enabled_qam_and_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in => data_in,  -- ufix12
              valid_in => valid_in,
              bits_per_subcarrier => bits_per_subcarrier,  -- ufix4
              init => init,  -- boolean [13]
              new_rsvd => new_ofdm_sym,
              cp_len => cp_len,  -- uint8
              ofdm_en => ready_out,
              Enable => ready_out,
              data_out_re => out_new_re,  -- sfix16_En14
              data_out_im => out_new_im,  -- sfix16_En14
              valid_out => valid_new,
              cp_len_out => enabled_qam_and_scrambler_out3  -- uint8
              );

  u_ofdm_modulator : IEEE_8021513_TX_src_ofdm_modulator_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              data_in_re => out_new_re,  -- sfix16_En14
              data_in_im => out_new_im,  -- sfix16_En14
              valid_in => valid_new,
              cp_len => enabled_qam_and_scrambler_out3,  -- uint8
              data_out_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_out_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_out => ofdm_modulator_out2,
              ready => ready_out
              );

  u_interpolator : IEEE_8021513_TX_src_interpolator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              data_in_re => ofdm_modulator_out1_re,  -- sfix16_En14
              data_in_im => ofdm_modulator_out1_im,  -- sfix16_En14
              valid_in => ofdm_modulator_out2,
              data_out_re => interpolator_out1_re,  -- sfix20_En16
              data_out_im => interpolator_out1_im,  -- sfix20_En16
              valid_out => interpolator_out2
              );

  u_rising_edge_detector : IEEE_8021513_TX_src_rising_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => interpolator_out2,
              Out_rsvd => rising_edge_detector_out1
              );

  u_frequency_upshift : IEEE_8021513_TX_src_frequency_upshift
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in_re => interpolator_out1_re,  -- sfix20_En16
              data_in_im => interpolator_out1_im,  -- sfix20_En16
              valid_in => interpolator_out2,
              reset => rising_edge_detector_out1,
              data_out => frequency_upshift_out1,  -- sfix14_En13
              valid_out => frequency_upshift_out2
              );

  data_out <= frequency_upshift_out1;

  valid_out <= frequency_upshift_out2;

  ready <= ready_out;

END rtl;

