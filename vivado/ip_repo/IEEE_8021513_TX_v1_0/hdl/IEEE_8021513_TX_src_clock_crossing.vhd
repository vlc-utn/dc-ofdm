-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLTx/IEEE_8021513_TX_src_clock_crossing.vhd
-- Created: 2024-09-15 21:02:43
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: IEEE_8021513_TX_src_clock_crossing
-- Source Path: HDLTx/full_tx/clock_crossing
-- Hierarchy Level: 1
-- Model version: 4.135
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY IEEE_8021513_TX_src_clock_crossing IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_8_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        preamble_in                       :   IN    std_logic;
        preamble_ctrl_in_valid            :   IN    std_logic;
        channel                           :   IN    std_logic;
        channel_ctrl_valid                :   IN    std_logic;
        header_in                         :   IN    std_logic;
        header_ctrl_in_valid              :   IN    std_logic;
        payload_in                        :   IN    std_logic;
        payload_ctrl_in_valid             :   IN    std_logic;
        cp_len_in                         :   IN    std_logic_vector(2 DOWNTO 0);  -- boolean [3]
        payload_len_in                    :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        bits_per_subcarrier_in            :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        preamble_out                      :   OUT   std_logic;
        preamble_valid                    :   OUT   std_logic;
        channel_out                       :   OUT   std_logic;
        channel_valid                     :   OUT   std_logic;
        header_out                        :   OUT   std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        header_valid                      :   OUT   std_logic;
        payload_out                       :   OUT   std_logic_vector(1 DOWNTO 0);  -- boolean [2]
        payload_valid_out                 :   OUT   std_logic;
        payload_len_out                   :   OUT   std_logic_vector(15 DOWNTO 0);  -- uint16
        bits_per_subcarrier_out           :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
        cp_len_out                        :   OUT   std_logic_vector(2 DOWNTO 0)  -- boolean [3]
        );
END IEEE_8021513_TX_src_clock_crossing;


ARCHITECTURE rtl OF IEEE_8021513_TX_src_clock_crossing IS

  -- Signals
  SIGNAL valid                            : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL valid_2                          : std_logic;
  SIGNAL Deserializer1D_contl_cnt         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D_contl_cntGlobal   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D_contl_cnt_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D_contl_cntGlobal_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_hOutSignalsContl  : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL Deserializer1D_tapout            : std_logic;
  SIGNAL Deserializer1D_muxOut            : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Deserializer1D_deserInnerOut     : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Deserializer1D_OutRegComp_reg    : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL deserializer_PostProcessed       : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Deserializer1D_deserInnerOut_1   : std_logic;
  SIGNAL Deserializer1D_OutRegComp_reg_1  : std_logic;  -- ufix1
  SIGNAL Deserializer1D_out2              : std_logic;
  SIGNAL valid_3                          : std_logic;
  SIGNAL Deserializer1D1_contl_cnt        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D1_contl_cntGlobal  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D1_contl_cntInnerRegCtrol : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D1_contl_cnt_next   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D1_contl_cntGlobal_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D1_contl_cntInnerRegCtrol_next : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Deserializer1D1_innerRegEn       : std_logic;
  SIGNAL Deserializer1D1_innerRegCtrolEn  : std_logic;
  SIGNAL Deserializer1D1_outBypassEn      : std_logic;
  SIGNAL Deserializer1D1_tapDelayEn       : std_logic;
  SIGNAL Deserializer1D1_hOutSignalsContl : std_logic;
  SIGNAL Deserializer1D1_tapDelayEn_1     : std_logic;
  SIGNAL Deserializer1D1_tapout           : std_logic;
  SIGNAL Deserializer1D1_muxOut           : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Deserializer1D1_deserInnerOut    : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Deserializer1D1_OutRegComp_reg   : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL deserializer_PostProcessed_1     : std_logic_vector(1 DOWNTO 0);  -- boolean [2]
  SIGNAL Deserializer1D1_deserInnerOut_1  : std_logic;
  SIGNAL Deserializer1D1_OutRegComp_reg_1 : std_logic;  -- ufix1
  SIGNAL Deserializer1D1_out2             : std_logic;
  SIGNAL payload_len_in_unsigned          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Rate_Transition1_bypass_reg      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL Rate_Transition1_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL bits_per_subcarrier_in_unsigned  : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rate_Transition2_bypass_reg      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rate_Transition2_out1            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rate_Transition_out1             : std_logic_vector(2 DOWNTO 0);  -- boolean [3]

BEGIN
  valid <= preamble_ctrl_in_valid;

  valid_1 <= channel_ctrl_valid;

  valid_2 <= header_ctrl_in_valid;

  Deserializer1D_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_contl_cnt <= to_unsigned(16#0#, 2);
        Deserializer1D_contl_cntGlobal <= to_unsigned(16#0#, 2);
        Deserializer1D_contl_cntInnerRegCtrol <= to_unsigned(16#2#, 2);
      ELSIF enb = '1' THEN
        Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt_next;
        Deserializer1D_contl_cntGlobal <= Deserializer1D_contl_cntGlobal_next;
        Deserializer1D_contl_cntInnerRegCtrol <= Deserializer1D_contl_cntInnerRegCtrol_next;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_contl_output : PROCESS (Deserializer1D_contl_cnt, Deserializer1D_contl_cntGlobal,
       Deserializer1D_contl_cntInnerRegCtrol, valid_2)
    VARIABLE out0 : std_logic;
    VARIABLE validOutput : std_logic;
    VARIABLE cntInnerRegCtrol_temp : unsigned(1 DOWNTO 0);
  BEGIN
    cntInnerRegCtrol_temp := Deserializer1D_contl_cntInnerRegCtrol;
    Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt;
    Deserializer1D_tapDelayEn <= valid_2;
    Deserializer1D_hOutSignalsContl <= '0';
    out0 := '0';
    Deserializer1D_innerRegCtrolEn <= '0';
    validOutput := '0';
    IF (valid_2 /= '0') AND (Deserializer1D_contl_cnt = to_unsigned(16#1#, 2)) THEN 
      validOutput := '1';
    END IF;
    IF validOutput = '1' THEN 
      Deserializer1D_hOutSignalsContl <= '1';
      out0 := '1';
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := Deserializer1D_contl_cntGlobal;
    END IF;
    IF ( NOT out0) = '1' AND (Deserializer1D_contl_cntGlobal = cntInnerRegCtrol_temp) THEN 
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := to_unsigned(16#2#, 2);
    END IF;
    IF valid_2 /= '0' THEN 
      IF Deserializer1D_contl_cnt = to_unsigned(16#1#, 2) THEN 
        Deserializer1D_contl_cnt_next <= to_unsigned(16#0#, 2);
      ELSE 
        Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt + to_unsigned(16#1#, 2);
      END IF;
    END IF;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#1#, 2) THEN 
      Deserializer1D_contl_cntGlobal_next <= to_unsigned(16#0#, 2);
    ELSE 
      Deserializer1D_contl_cntGlobal_next <= Deserializer1D_contl_cntGlobal + to_unsigned(16#1#, 2);
    END IF;
    Deserializer1D_innerRegEn <= out0;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#0#, 2) THEN 
      Deserializer1D_outBypassEn <= '1';
    ELSE 
      Deserializer1D_outBypassEn <= '0';
    END IF;
    Deserializer1D_contl_cntInnerRegCtrol_next <= cntInnerRegCtrol_temp;
  END PROCESS Deserializer1D_contl_output;


  Deserializer1D_tapDelayEn_1 <= enb AND Deserializer1D_tapDelayEn;

  Deserializer1D_tapDelayComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_tapout <= '0';
      ELSIF enb = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout <= header_in;
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  Deserializer1D_muxOut(0) <= Deserializer1D_tapout;
  Deserializer1D_muxOut(1) <= header_in;

  Deserializer1D_innerRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut <= (OTHERS => '0');
      ELSIF enb = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_deserInnerOut <= Deserializer1D_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_process;


  Deserializer1D_OutRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg <= (OTHERS => '0');
      ELSIF Deserializer1D_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D_OutRegComp_reg <= Deserializer1D_deserInnerOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_process;

  
  deserializer_PostProcessed <= Deserializer1D_deserInnerOut WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg;

  Deserializer1D_innerRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut_1 <= '0';
      ELSIF enb = '1' AND Deserializer1D_innerRegCtrolEn = '1' THEN
        Deserializer1D_deserInnerOut_1 <= Deserializer1D_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_1_process;


  Deserializer1D_OutRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= '0';
      ELSIF Deserializer1D_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= Deserializer1D_deserInnerOut_1;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_1_process;

  
  Deserializer1D_out2 <= Deserializer1D_deserInnerOut_1 WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg_1;

  valid_3 <= payload_ctrl_in_valid;

  Deserializer1D1_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D1_contl_cnt <= to_unsigned(16#0#, 2);
        Deserializer1D1_contl_cntGlobal <= to_unsigned(16#0#, 2);
        Deserializer1D1_contl_cntInnerRegCtrol <= to_unsigned(16#2#, 2);
      ELSIF enb = '1' THEN
        Deserializer1D1_contl_cnt <= Deserializer1D1_contl_cnt_next;
        Deserializer1D1_contl_cntGlobal <= Deserializer1D1_contl_cntGlobal_next;
        Deserializer1D1_contl_cntInnerRegCtrol <= Deserializer1D1_contl_cntInnerRegCtrol_next;
      END IF;
    END IF;
  END PROCESS Deserializer1D1_contl_process;

  Deserializer1D1_contl_output : PROCESS (Deserializer1D1_contl_cnt, Deserializer1D1_contl_cntGlobal,
       Deserializer1D1_contl_cntInnerRegCtrol, valid_3)
    VARIABLE out01 : std_logic;
    VARIABLE validOutput1 : std_logic;
    VARIABLE cntInnerRegCtrol_temp1 : unsigned(1 DOWNTO 0);
  BEGIN
    cntInnerRegCtrol_temp1 := Deserializer1D1_contl_cntInnerRegCtrol;
    Deserializer1D1_contl_cnt_next <= Deserializer1D1_contl_cnt;
    Deserializer1D1_tapDelayEn <= valid_3;
    Deserializer1D1_hOutSignalsContl <= '0';
    out01 := '0';
    Deserializer1D1_innerRegCtrolEn <= '0';
    validOutput1 := '0';
    IF (valid_3 /= '0') AND (Deserializer1D1_contl_cnt = to_unsigned(16#1#, 2)) THEN 
      validOutput1 := '1';
    END IF;
    IF validOutput1 = '1' THEN 
      Deserializer1D1_hOutSignalsContl <= '1';
      out01 := '1';
      Deserializer1D1_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp1 := Deserializer1D1_contl_cntGlobal;
    END IF;
    IF ( NOT out01) = '1' AND (Deserializer1D1_contl_cntGlobal = cntInnerRegCtrol_temp1) THEN 
      Deserializer1D1_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp1 := to_unsigned(16#2#, 2);
    END IF;
    IF valid_3 /= '0' THEN 
      IF Deserializer1D1_contl_cnt = to_unsigned(16#1#, 2) THEN 
        Deserializer1D1_contl_cnt_next <= to_unsigned(16#0#, 2);
      ELSE 
        Deserializer1D1_contl_cnt_next <= Deserializer1D1_contl_cnt + to_unsigned(16#1#, 2);
      END IF;
    END IF;
    IF Deserializer1D1_contl_cntGlobal = to_unsigned(16#1#, 2) THEN 
      Deserializer1D1_contl_cntGlobal_next <= to_unsigned(16#0#, 2);
    ELSE 
      Deserializer1D1_contl_cntGlobal_next <= Deserializer1D1_contl_cntGlobal + to_unsigned(16#1#, 2);
    END IF;
    Deserializer1D1_innerRegEn <= out01;
    IF Deserializer1D1_contl_cntGlobal = to_unsigned(16#0#, 2) THEN 
      Deserializer1D1_outBypassEn <= '1';
    ELSE 
      Deserializer1D1_outBypassEn <= '0';
    END IF;
    Deserializer1D1_contl_cntInnerRegCtrol_next <= cntInnerRegCtrol_temp1;
  END PROCESS Deserializer1D1_contl_output;


  Deserializer1D1_tapDelayEn_1 <= enb AND Deserializer1D1_tapDelayEn;

  Deserializer1D1_tapDelayComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D1_tapout <= '0';
      ELSIF enb = '1' AND Deserializer1D1_tapDelayEn_1 = '1' THEN
        Deserializer1D1_tapout <= payload_in;
      END IF;
    END IF;
  END PROCESS Deserializer1D1_tapDelayComp_process;


  Deserializer1D1_muxOut(0) <= Deserializer1D1_tapout;
  Deserializer1D1_muxOut(1) <= payload_in;

  Deserializer1D1_innerRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D1_deserInnerOut <= (OTHERS => '0');
      ELSIF enb = '1' AND Deserializer1D1_innerRegEn = '1' THEN
        Deserializer1D1_deserInnerOut <= Deserializer1D1_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D1_innerRegComp_process;


  Deserializer1D1_OutRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D1_OutRegComp_reg <= (OTHERS => '0');
      ELSIF Deserializer1D1_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D1_OutRegComp_reg <= Deserializer1D1_deserInnerOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D1_OutRegComp_process;

  
  deserializer_PostProcessed_1 <= Deserializer1D1_deserInnerOut WHEN Deserializer1D1_outBypassEn = '1' ELSE
      Deserializer1D1_OutRegComp_reg;

  Deserializer1D1_innerRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D1_deserInnerOut_1 <= '0';
      ELSIF enb = '1' AND Deserializer1D1_innerRegCtrolEn = '1' THEN
        Deserializer1D1_deserInnerOut_1 <= Deserializer1D1_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS Deserializer1D1_innerRegComp_1_process;


  Deserializer1D1_OutRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D1_OutRegComp_reg_1 <= '0';
      ELSIF Deserializer1D1_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D1_OutRegComp_reg_1 <= Deserializer1D1_deserInnerOut_1;
      END IF;
    END IF;
  END PROCESS Deserializer1D1_OutRegComp_1_process;

  
  Deserializer1D1_out2 <= Deserializer1D1_deserInnerOut_1 WHEN Deserializer1D1_outBypassEn = '1' ELSE
      Deserializer1D1_OutRegComp_reg_1;

  payload_len_in_unsigned <= unsigned(payload_len_in);

  Rate_Transition1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition1_bypass_reg <= to_unsigned(16#0000#, 16);
      ELSIF enb_1_2_1 = '1' THEN
        Rate_Transition1_bypass_reg <= payload_len_in_unsigned;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_bypass_process;

  
  Rate_Transition1_out1 <= payload_len_in_unsigned WHEN enb_1_2_1 = '1' ELSE
      Rate_Transition1_bypass_reg;

  payload_len_out <= std_logic_vector(Rate_Transition1_out1);

  bits_per_subcarrier_in_unsigned <= unsigned(bits_per_subcarrier_in);

  Rate_Transition2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition2_bypass_reg <= to_unsigned(16#0#, 4);
      ELSIF enb_1_2_1 = '1' THEN
        Rate_Transition2_bypass_reg <= bits_per_subcarrier_in_unsigned;
      END IF;
    END IF;
  END PROCESS Rate_Transition2_bypass_process;

  
  Rate_Transition2_out1 <= bits_per_subcarrier_in_unsigned WHEN enb_1_2_1 = '1' ELSE
      Rate_Transition2_bypass_reg;

  bits_per_subcarrier_out <= std_logic_vector(Rate_Transition2_out1);

  Rate_Transition_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Rate_Transition_out1 <= (OTHERS => '0');
      ELSIF enb_1_8_0 = '1' THEN
        Rate_Transition_out1 <= cp_len_in;
      END IF;
    END IF;
  END PROCESS Rate_Transition_process;


  preamble_out <= preamble_in;

  preamble_valid <= valid;

  channel_out <= channel;

  channel_valid <= valid_1;

  header_out <= deserializer_PostProcessed;

  header_valid <= Deserializer1D_out2;

  payload_out <= deserializer_PostProcessed_1;

  payload_valid_out <= Deserializer1D1_out2;

  cp_len_out <= Rate_Transition_out1;

END rtl;

