-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_symDemod16QAMVector.vhd
-- Created: 2024-08-10 11:14:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_symDemod16QAMVector
-- Source Path: HDLRx/full_rx/rx_demodulator_full/qam_demod/Symbol Demodulator2/symDemod16QAMVector
-- Hierarchy Level: 4
-- Model version: 1.14
-- 
-- 16QAM vector Demodulation
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_symDemod16QAMVector IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        dataIn_im                         :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        validIn                           :   IN    std_logic;  -- ufix1
        dataOut                           :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- sfix28_En12 [4]
        );
END full_rx_ip_src_symDemod16QAMVector;


ARCHITECTURE rtl OF full_rx_ip_src_symDemod16QAMVector IS

  -- Signals
  SIGNAL Delay31_out1                     : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(4 DOWNTO 0);  -- ufix1 [5]
  SIGNAL delayMatch18_out1                : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL shuffOrder_out1                  : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL shuffOrder_out1_0                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL coeffSign_out1                   : vector_of_signed3(0 TO 3);  -- sfix3 [4]
  SIGNAL Constant4_out1                   : vector_of_signed3(0 TO 3);  -- sfix3 [4]
  SIGNAL Relational_Operator_out1         : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Relational_Operator_out1_0       : std_logic;
  SIGNAL Relational_Operator_out1_0_1     : std_logic;
  SIGNAL Relational_Operator_out1_1       : std_logic;
  SIGNAL Relational_Operator_out1_1_1     : std_logic;
  SIGNAL Relational_Operator_out1_2       : std_logic;
  SIGNAL Relational_Operator_out1_2_1     : std_logic;
  SIGNAL Relational_Operator_out1_3       : std_logic;
  SIGNAL Relational_Operator_out1_3_1     : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL delayMatch12_reg                 : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL delayMatch12_out1                : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL delayMatch12_out1_0              : std_logic;
  SIGNAL dataIn_re_signed                 : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL dataIn_im_signed                 : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Data_Type_Conversion_out1        : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Delay23_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL distance_out1                    : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL HwModeRegister8_out1             : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Lval_out1                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL HwModeRegister9_out1             : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Product4_out1                    : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL PipelineRegister4_out1           : signed(31 DOWNTO 0);  -- sfix32_En22
  SIGNAL Data_Type_Conversion16_out1      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL delayMatch4_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL delayMatch4_out1                 : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant_out1                    : vector_of_signed28(0 TO 2);  -- sfix28_En12 [3]
  SIGNAL Abs_rsvd_y                       : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs_rsvd_cast                    : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs_out1                         : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Delay22_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch3_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch3_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch_reg                   : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch_out1                  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Subtract_sub_cast                : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract_sub_cast_1              : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract_out1                    : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Delay_out1                       : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs2_y                           : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs2_cast                        : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs2_out1                        : unsigned(28 DOWNTO 0);  -- ufix29_En12
  SIGNAL Add3_sub_cast                    : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add3_sub_cast_1                  : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add3_out1                        : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Data_Type_Conversion17_out1      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL zerosig_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Delay2_out1                      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch1_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch1_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch2_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch2_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Subtract1_sub_cast               : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract1_sub_cast_1             : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract1_out1                   : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs3_y                           : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs3_cast                        : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs3_out1                        : unsigned(27 DOWNTO 0);  -- ufix28_En12
  SIGNAL Add11_sub_cast                   : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add11_sub_cast_1                 : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add11_out1                       : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Data_Type_Conversion18_out1      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL concatenate2_out1                : vector_of_signed28(0 TO 2);  -- sfix28_En12 [3]
  SIGNAL Switch2_out1                     : vector_of_signed28(0 TO 2);  -- sfix28_En12 [3]
  SIGNAL From13_out1_0                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch10_reg                 : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch10_out1                : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Subtract3_sub_cast               : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract3_sub_cast_1             : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract3_out1                   : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Data_Type_Conversion1_out1       : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Data_Type_Conversion14_out1      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Delay13_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch9_reg                  : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL delayMatch9_out1                 : std_logic;
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Abs1_y                           : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs1_cast                        : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs1_out1                        : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Delay12_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch8_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch8_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch5_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch5_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Subtract2_sub_cast               : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract2_sub_cast_1             : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract2_out1                   : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Delay11_out1                     : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs21_y                          : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs21_cast                       : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs21_out1                       : unsigned(28 DOWNTO 0);  -- ufix29_En12
  SIGNAL Add4_sub_cast                    : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add4_sub_cast_1                  : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add4_out1                        : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Data_Type_Conversion19_out1      : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Delay21_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch6_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch6_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch7_reg                  : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch7_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Subtract11_sub_cast              : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract11_sub_cast_1            : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract11_out1                  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Abs31_y                          : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs31_cast                       : signed(29 DOWNTO 0);  -- sfix30_En12
  SIGNAL Abs31_out1                       : unsigned(27 DOWNTO 0);  -- ufix28_En12
  SIGNAL Add12_sub_cast                   : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add12_sub_cast_1                 : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Add12_out1                       : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL Data_Type_Conversion110_out1     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL concatenate3_out1                : vector_of_signed28(0 TO 2);  -- sfix28_En12 [3]
  SIGNAL Switch3_out1                     : vector_of_signed28(0 TO 2);  -- sfix28_En12 [3]
  SIGNAL From31_out1_0                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch11_reg                 : vector_of_signed28(0 TO 1);  -- sfix28 [2]
  SIGNAL delayMatch11_out1                : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Subtract12_sub_cast              : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract12_sub_cast_1            : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract12_out1                  : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Data_Type_Conversion2_out1       : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL concatenate5_out1                : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Relational_Operator1_cast        : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Relational_Operator1_out1        : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL delayMatch13_reg                 : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL delayMatch13_out1                : std_logic_vector(3 DOWNTO 0);  -- boolean [4]
  SIGNAL Relational_Operator1_out1_0      : std_logic;
  SIGNAL delayMatch12_out1_0_1            : std_logic;
  SIGNAL delayMatch13_out1_0              : std_logic;
  SIGNAL Relational_Operator1_out1_0_1    : std_logic;
  SIGNAL Relational_Operator1_out1_0_2    : std_logic;
  SIGNAL delayMatch13_out1_0_1            : std_logic;
  SIGNAL Logical_Operator3_out1_0         : std_logic;
  SIGNAL delayMatch14_reg                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL delayMatch14_out1                : std_logic;
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL mux1_out1                        : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL refConstPt_out1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Subtract31_v                     : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract31_sub_cast              : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract31_out1                  : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion13_out1      : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister_out1              : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister1_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Product_out1                     : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL mux_out1                         : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Subtract6_v                      : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Subtract6_sub_cast               : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract6_out1                   : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion12_out1      : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister2_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister3_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Product1_out1                    : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL mux4_out1                        : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL qamLookUp1Re_out1                : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL distBwSym_out1                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Add2_add_cast                    : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Add2_add_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Add2_out1                        : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Data_Type_Conversion15_out1      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL qamLookUp2Re_out1                : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL mux3_out1                        : vector_of_signed16(0 TO 3);  -- sfix16_En11 [4]
  SIGNAL Delay32_out1                     : vector_of_signed16(0 TO 3);  -- sfix16_En11 [4]
  SIGNAL Subtract21_sub_cast              : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract21_sub_cast_1            : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract21_out1                  : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion3_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister4_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister5_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Product2_out1                    : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL mux5_out1                        : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL mux2_out1                        : vector_of_signed16(0 TO 3);  -- sfix16_En11 [4]
  SIGNAL Delay4_out1                      : vector_of_signed16(0 TO 3);  -- sfix16_En11 [4]
  SIGNAL Subtract5_sub_cast               : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract5_sub_cast_1             : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract5_out1                   : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion11_out1      : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister6_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL HwModeRegister7_out1             : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Product3_out1                    : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL PipelineRegister_reg             : vector_of_signed56(0 TO 7);  -- sfix56 [8]
  SIGNAL PipelineRegister_out1            : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL Data_Type_Conversion4_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL PipelineRegister1_reg            : vector_of_signed56(0 TO 7);  -- sfix56 [8]
  SIGNAL PipelineRegister1_out1           : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL Data_Type_Conversion5_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Add_add_cast                     : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Add_add_cast_1                   : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Add_out1                         : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion8_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL PipelineRegister2_reg            : vector_of_signed56(0 TO 7);  -- sfix56 [8]
  SIGNAL PipelineRegister2_out1           : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL Data_Type_Conversion6_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL PipelineRegister3_reg            : vector_of_signed56(0 TO 7);  -- sfix56 [8]
  SIGNAL PipelineRegister3_out1           : vector_of_signed56(0 TO 3);  -- sfix56_En24 [4]
  SIGNAL Data_Type_Conversion7_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Add1_add_cast                    : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Add1_add_cast_1                  : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Add1_out1                        : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion9_out1       : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Subtract4_sub_cast               : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract4_sub_cast_1             : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Subtract4_out1                   : vector_of_signed29(0 TO 3);  -- sfix29_En12 [4]
  SIGNAL Data_Type_Conversion10_out1      : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Data_Type_Conversion10_out1_0    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Unary_Minus_cast                 : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus_cast_1               : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus_out1                 : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Switch21_out1                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch12_out1_1              : std_logic;
  SIGNAL Relational_Operator1_out1_1      : std_logic;
  SIGNAL delayMatch12_out1_1_1            : std_logic;
  SIGNAL delayMatch13_out1_1              : std_logic;
  SIGNAL Relational_Operator1_out1_1_1    : std_logic;
  SIGNAL Relational_Operator1_out1_1_2    : std_logic;
  SIGNAL delayMatch13_out1_1_1            : std_logic;
  SIGNAL Logical_Operator3_out1_1         : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL delayMatch15_out1                : std_logic;
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Data_Type_Conversion10_out1_1    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Unary_Minus1_cast                : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus1_cast_1              : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus1_out1                : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Switch31_out1                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch12_out1_2              : std_logic;
  SIGNAL Relational_Operator1_out1_2      : std_logic;
  SIGNAL delayMatch12_out1_2_1            : std_logic;
  SIGNAL delayMatch13_out1_2              : std_logic;
  SIGNAL Relational_Operator1_out1_2_1    : std_logic;
  SIGNAL Relational_Operator1_out1_2_2    : std_logic;
  SIGNAL delayMatch13_out1_2_1            : std_logic;
  SIGNAL Logical_Operator3_out1_2         : std_logic;
  SIGNAL delayMatch16_reg                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL delayMatch16_out1                : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Data_Type_Conversion10_out1_2    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Unary_Minus2_cast                : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus2_cast_1              : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus2_out1                : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Switch4_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL delayMatch12_out1_3              : std_logic;
  SIGNAL Relational_Operator1_out1_3      : std_logic;
  SIGNAL delayMatch12_out1_3_1            : std_logic;
  SIGNAL delayMatch13_out1_3              : std_logic;
  SIGNAL Relational_Operator1_out1_3_1    : std_logic;
  SIGNAL Relational_Operator1_out1_3_2    : std_logic;
  SIGNAL delayMatch13_out1_3_1            : std_logic;
  SIGNAL Logical_Operator3_out1_3         : std_logic;
  SIGNAL delayMatch17_reg                 : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL delayMatch17_out1                : std_logic;
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL Data_Type_Conversion10_out1_3    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Unary_Minus3_cast                : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus3_cast_1              : signed(28 DOWNTO 0);  -- sfix29_En12
  SIGNAL Unary_Minus3_out1                : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL Switch5_out1                     : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL concatenate4_out1                : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL select_out1_0                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL shuffOrder_out1_1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL select_out1_1                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL shuffOrder_out1_2                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL select_out1_2                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL shuffOrder_out1_3                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant5_out1                   : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL select_out1_3                    : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL select_out1                      : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]
  SIGNAL Switch10_out1                    : vector_of_signed28(0 TO 3);  -- sfix28_En12 [4]

BEGIN
  Delay31_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay31_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay31_out1 <= validIn;
      END IF;
    END IF;
  END PROCESS Delay31_process;


  delayMatch18_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch18_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch18_reg(0) <= Delay31_out1;
        delayMatch18_reg(4 DOWNTO 1) <= delayMatch18_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  delayMatch18_out1 <= delayMatch18_reg(4);

  
  switch_compare_1 <= '1' WHEN delayMatch18_out1 > '0' ELSE
      '0';

  shuffOrder_out1(0) <= to_unsigned(16#01#, 8);
  shuffOrder_out1(1) <= to_unsigned(16#02#, 8);
  shuffOrder_out1(2) <= to_unsigned(16#03#, 8);
  shuffOrder_out1(3) <= to_unsigned(16#04#, 8);

  shuffOrder_out1_0 <= shuffOrder_out1(0);

  coeffSign_out1 <= (OTHERS => to_signed(16#1#, 3));

  Constant4_out1 <= (OTHERS => to_signed(16#0#, 3));


  Relational_Operator_out1_gen: FOR t_0 IN 0 TO 3 GENERATE
    
    Relational_Operator_out1(t_0) <= '1' WHEN coeffSign_out1(t_0) <= Constant4_out1(t_0) ELSE
        '0';
  END GENERATE Relational_Operator_out1_gen;


  Relational_Operator_out1_0 <= Relational_Operator_out1(0);

  Relational_Operator_out1_0_1 <=  NOT Relational_Operator_out1_0;

  Relational_Operator_out1_1 <= Relational_Operator_out1(1);

  Relational_Operator_out1_1_1 <=  NOT Relational_Operator_out1_1;

  Relational_Operator_out1_2 <= Relational_Operator_out1(2);

  Relational_Operator_out1_2_1 <=  NOT Relational_Operator_out1_2;

  Relational_Operator_out1_3 <= Relational_Operator_out1(3);

  Relational_Operator_out1_3_1 <=  NOT Relational_Operator_out1_3;

  Logical_Operator_out1(0) <= Relational_Operator_out1_0_1;
  Logical_Operator_out1(1) <= Relational_Operator_out1_1_1;
  Logical_Operator_out1(2) <= Relational_Operator_out1_2_1;
  Logical_Operator_out1(3) <= Relational_Operator_out1_3_1;

  delayMatch12_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch12_reg(3 DOWNTO 0) <= Logical_Operator_out1(3 DOWNTO 0);
        delayMatch12_reg(7 DOWNTO 4) <= delayMatch12_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch12_process;

  delayMatch12_out1(3 DOWNTO 0) <= delayMatch12_reg(7 DOWNTO 4);

  delayMatch12_out1_0 <= delayMatch12_out1(0);

  dataIn_re_signed <= signed(dataIn_re);

  Data_Type_Conversion_out1 <= resize(dataIn_re_signed, 28);

  Delay23_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay23_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay23_out1 <= Data_Type_Conversion_out1;
      END IF;
    END IF;
  END PROCESS Delay23_process;


  distance_out1 <= to_signed(16#0287#, 16);

  HwModeRegister8_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister8_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister8_out1 <= distance_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;


  Lval_out1 <= to_signed(16#1000#, 16);

  HwModeRegister9_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister9_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister9_out1 <= Lval_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister9_process;


  Product4_out1 <= HwModeRegister8_out1 * HwModeRegister9_out1;

  PipelineRegister4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      PipelineRegister4_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        PipelineRegister4_out1 <= Product4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  Data_Type_Conversion16_out1 <= PipelineRegister4_out1(26 DOWNTO 11);

  delayMatch4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch4_reg(0) <= Delay31_out1;
        delayMatch4_reg(1) <= delayMatch4_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  delayMatch4_out1 <= delayMatch4_reg(1);

  
  switch_compare_1_1 <= '1' WHEN delayMatch4_out1 > '0' ELSE
      '0';

  Constant_out1 <= (OTHERS => to_signed(16#0000000#, 28));

  Abs_rsvd_cast <= resize(Data_Type_Conversion_out1, 29);
  
  Abs_rsvd_y <=  - (Abs_rsvd_cast) WHEN Data_Type_Conversion_out1 < to_signed(16#0000000#, 28) ELSE
      resize(Data_Type_Conversion_out1, 29);
  Abs_out1 <= Abs_rsvd_y(27 DOWNTO 0);

  Delay22_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay22_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay22_out1 <= Abs_out1;
      END IF;
    END IF;
  END PROCESS Delay22_process;


  delayMatch3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch3_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch3_reg(0) <= Delay22_out1;
        delayMatch3_reg(1) <= delayMatch3_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  delayMatch3_out1 <= delayMatch3_reg(1);

  delayMatch_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= Abs_out1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  delayMatch_out1 <= delayMatch_reg(1);

  Subtract_sub_cast <= resize(Data_Type_Conversion16_out1 & '0', 29);
  Subtract_sub_cast_1 <= resize(delayMatch_out1, 29);
  Subtract_out1 <= Subtract_sub_cast - Subtract_sub_cast_1;

  Delay1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay1_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay1_out1 <= Data_Type_Conversion16_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay_out1 <= to_signed(16#00000000#, 29);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay_out1 <= Subtract_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Abs2_cast <= resize(Delay_out1, 30);
  
  Abs2_y <=  - (Abs2_cast) WHEN Delay_out1 < to_signed(16#00000000#, 29) ELSE
      resize(Delay_out1, 30);
  Abs2_out1 <= unsigned(Abs2_y(28 DOWNTO 0));

  Add3_sub_cast <= resize(Delay1_out1 & '0', 31);
  Add3_sub_cast_1 <= signed(resize(Abs2_out1, 31));
  Add3_out1 <= Add3_sub_cast - Add3_sub_cast_1;

  Data_Type_Conversion17_out1 <= Add3_out1(27 DOWNTO 0);

  zerosig_out1 <= to_signed(16#0000000#, 28);

  Delay2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay2_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay2_out1 <= zerosig_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  delayMatch1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch1_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch1_reg(0) <= Delay2_out1;
        delayMatch1_reg(1) <= delayMatch1_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  delayMatch1_out1 <= delayMatch1_reg(1);

  delayMatch2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch2_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch2_reg(0) <= Delay2_out1;
        delayMatch2_reg(1) <= delayMatch2_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  delayMatch2_out1 <= delayMatch2_reg(1);

  Subtract1_sub_cast <= resize(delayMatch1_out1, 29);
  Subtract1_sub_cast_1 <= resize(Data_Type_Conversion17_out1, 29);
  Subtract1_out1 <= Subtract1_sub_cast - Subtract1_sub_cast_1;

  Abs3_cast <= resize(Subtract1_out1, 30);
  
  Abs3_y <=  - (Abs3_cast) WHEN Subtract1_out1 < to_signed(16#00000000#, 29) ELSE
      resize(Subtract1_out1, 30);
  Abs3_out1 <= unsigned(Abs3_y(27 DOWNTO 0));

  Add11_sub_cast <= resize(delayMatch2_out1, 31);
  Add11_sub_cast_1 <= signed(resize(Abs3_out1, 31));
  Add11_out1 <= Add11_sub_cast - Add11_sub_cast_1;

  Data_Type_Conversion18_out1 <= Add11_out1(27 DOWNTO 0);

  concatenate2_out1(0) <= delayMatch3_out1;
  concatenate2_out1(1) <= Data_Type_Conversion17_out1;
  concatenate2_out1(2) <= Data_Type_Conversion18_out1;

  
  Switch2_out1 <= Constant_out1 WHEN switch_compare_1_1 = '0' ELSE
      concatenate2_out1;

  From13_out1_0 <= Switch2_out1(0);

  delayMatch10_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch10_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch10_reg(0) <= Delay23_out1;
        delayMatch10_reg(1) <= delayMatch10_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  delayMatch10_out1 <= delayMatch10_reg(1);

  Subtract3_sub_cast <= resize(Data_Type_Conversion16_out1 & '0', 29);
  Subtract3_sub_cast_1 <= resize(From13_out1_0, 29);
  Subtract3_out1 <= Subtract3_sub_cast - Subtract3_sub_cast_1;

  Data_Type_Conversion1_out1 <= Subtract3_out1(27 DOWNTO 0);

  dataIn_im_signed <= signed(dataIn_im);

  Data_Type_Conversion14_out1 <= resize(dataIn_im_signed, 28);

  Delay13_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay13_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay13_out1 <= Data_Type_Conversion14_out1;
      END IF;
    END IF;
  END PROCESS Delay13_process;


  delayMatch9_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch9_reg(0) <= Delay31_out1;
        delayMatch9_reg(1) <= delayMatch9_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch9_process;

  delayMatch9_out1 <= delayMatch9_reg(1);

  
  switch_compare_1_2 <= '1' WHEN delayMatch9_out1 > '0' ELSE
      '0';

  Abs1_cast <= resize(Data_Type_Conversion14_out1, 29);
  
  Abs1_y <=  - (Abs1_cast) WHEN Data_Type_Conversion14_out1 < to_signed(16#0000000#, 28) ELSE
      resize(Data_Type_Conversion14_out1, 29);
  Abs1_out1 <= Abs1_y(27 DOWNTO 0);

  Delay12_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay12_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay12_out1 <= Abs1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  delayMatch8_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch8_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch8_reg(0) <= Delay12_out1;
        delayMatch8_reg(1) <= delayMatch8_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch8_process;

  delayMatch8_out1 <= delayMatch8_reg(1);

  delayMatch5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch5_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch5_reg(0) <= Abs1_out1;
        delayMatch5_reg(1) <= delayMatch5_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  delayMatch5_out1 <= delayMatch5_reg(1);

  Subtract2_sub_cast <= resize(Data_Type_Conversion16_out1 & '0', 29);
  Subtract2_sub_cast_1 <= resize(delayMatch5_out1, 29);
  Subtract2_out1 <= Subtract2_sub_cast - Subtract2_sub_cast_1;

  Delay3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay3_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay3_out1 <= Data_Type_Conversion16_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay11_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay11_out1 <= to_signed(16#00000000#, 29);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay11_out1 <= Subtract2_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Abs21_cast <= resize(Delay11_out1, 30);
  
  Abs21_y <=  - (Abs21_cast) WHEN Delay11_out1 < to_signed(16#00000000#, 29) ELSE
      resize(Delay11_out1, 30);
  Abs21_out1 <= unsigned(Abs21_y(28 DOWNTO 0));

  Add4_sub_cast <= resize(Delay3_out1 & '0', 31);
  Add4_sub_cast_1 <= signed(resize(Abs21_out1, 31));
  Add4_out1 <= Add4_sub_cast - Add4_sub_cast_1;

  Data_Type_Conversion19_out1 <= Add4_out1(27 DOWNTO 0);

  Delay21_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay21_out1 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay21_out1 <= zerosig_out1;
      END IF;
    END IF;
  END PROCESS Delay21_process;


  delayMatch6_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch6_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch6_reg(0) <= Delay21_out1;
        delayMatch6_reg(1) <= delayMatch6_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch6_process;

  delayMatch6_out1 <= delayMatch6_reg(1);

  delayMatch7_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch7_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch7_reg(0) <= Delay21_out1;
        delayMatch7_reg(1) <= delayMatch7_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  delayMatch7_out1 <= delayMatch7_reg(1);

  Subtract11_sub_cast <= resize(delayMatch6_out1, 29);
  Subtract11_sub_cast_1 <= resize(Data_Type_Conversion19_out1, 29);
  Subtract11_out1 <= Subtract11_sub_cast - Subtract11_sub_cast_1;

  Abs31_cast <= resize(Subtract11_out1, 30);
  
  Abs31_y <=  - (Abs31_cast) WHEN Subtract11_out1 < to_signed(16#00000000#, 29) ELSE
      resize(Subtract11_out1, 30);
  Abs31_out1 <= unsigned(Abs31_y(27 DOWNTO 0));

  Add12_sub_cast <= resize(delayMatch7_out1, 31);
  Add12_sub_cast_1 <= signed(resize(Abs31_out1, 31));
  Add12_out1 <= Add12_sub_cast - Add12_sub_cast_1;

  Data_Type_Conversion110_out1 <= Add12_out1(27 DOWNTO 0);

  concatenate3_out1(0) <= delayMatch8_out1;
  concatenate3_out1(1) <= Data_Type_Conversion19_out1;
  concatenate3_out1(2) <= Data_Type_Conversion110_out1;

  
  Switch3_out1 <= Constant_out1 WHEN switch_compare_1_2 = '0' ELSE
      concatenate3_out1;

  From31_out1_0 <= Switch3_out1(0);

  delayMatch11_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch11_reg <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch11_reg(0) <= Delay13_out1;
        delayMatch11_reg(1) <= delayMatch11_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  delayMatch11_out1 <= delayMatch11_reg(1);

  Subtract12_sub_cast <= resize(Data_Type_Conversion16_out1 & '0', 29);
  Subtract12_sub_cast_1 <= resize(From31_out1_0, 29);
  Subtract12_out1 <= Subtract12_sub_cast - Subtract12_sub_cast_1;

  Data_Type_Conversion2_out1 <= Subtract12_out1(27 DOWNTO 0);

  concatenate5_out1(0) <= delayMatch10_out1;
  concatenate5_out1(1) <= Data_Type_Conversion1_out1;
  concatenate5_out1(2) <= delayMatch11_out1;
  concatenate5_out1(3) <= Data_Type_Conversion2_out1;


  Relational_Operator1_out1_gen: FOR t_01 IN 0 TO 3 GENERATE
    Relational_Operator1_cast(t_01) <= resize(Constant4_out1(t_01) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 28);
    
    Relational_Operator1_out1(t_01) <= '1' WHEN concatenate5_out1(t_01) <= Relational_Operator1_cast(t_01) ELSE
        '0';
  END GENERATE Relational_Operator1_out1_gen;


  delayMatch13_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch13_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch13_reg(3 DOWNTO 0) <= Relational_Operator_out1(3 DOWNTO 0);
        delayMatch13_reg(7 DOWNTO 4) <= delayMatch13_reg(3 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch13_process;

  delayMatch13_out1(3 DOWNTO 0) <= delayMatch13_reg(7 DOWNTO 4);

  Relational_Operator1_out1_0 <= Relational_Operator1_out1(0);

  delayMatch12_out1_0_1 <= delayMatch12_out1_0 AND Relational_Operator1_out1_0;

  delayMatch13_out1_0 <= delayMatch13_out1(0);

  Relational_Operator1_out1_0_1 <= Relational_Operator1_out1(0);

  Relational_Operator1_out1_0_2 <=  NOT Relational_Operator1_out1_0_1;

  delayMatch13_out1_0_1 <= delayMatch13_out1_0 AND Relational_Operator1_out1_0_2;

  Logical_Operator3_out1_0 <= delayMatch12_out1_0_1 OR delayMatch13_out1_0_1;

  delayMatch14_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch14_reg(0) <= Logical_Operator3_out1_0;
        delayMatch14_reg(2 DOWNTO 1) <= delayMatch14_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  delayMatch14_out1 <= delayMatch14_reg(2);

  
  switch_compare_1_3 <= '1' WHEN delayMatch14_out1 > '0' ELSE
      '0';

  mux1_out1(0) <= Switch2_out1(1);
  mux1_out1(1) <= Switch2_out1(1);
  mux1_out1(2) <= Switch2_out1(1);
  mux1_out1(3) <= Switch2_out1(1);

  refConstPt_out1 <= to_signed(16#0287#, 16);

  Subtract31_v <= resize(refConstPt_out1 & '0', 29);

  Subtract31_out1_gen: FOR t_02 IN 0 TO 3 GENERATE
    Subtract31_sub_cast(t_02) <= resize(mux1_out1(t_02), 29);
    Subtract31_out1(t_02) <= Subtract31_sub_cast(t_02) - Subtract31_v;
  END GENERATE Subtract31_out1_gen;



  Data_Type_Conversion13_out1_gen: FOR ii IN 0 TO 3 GENERATE
    Data_Type_Conversion13_out1(ii) <= Subtract31_out1(ii)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion13_out1_gen;


  HwModeRegister_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister_out1 <= Data_Type_Conversion13_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  HwModeRegister1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister1_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister1_out1 <= Data_Type_Conversion13_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;



  Product_out1_gen: FOR t_03 IN 0 TO 3 GENERATE
    Product_out1(t_03) <= HwModeRegister_out1(t_03) * HwModeRegister1_out1(t_03);
  END GENERATE Product_out1_gen;


  mux_out1(0) <= Switch3_out1(1);
  mux_out1(1) <= Switch3_out1(1);
  mux_out1(2) <= Switch3_out1(1);
  mux_out1(3) <= Switch3_out1(1);

  Subtract6_v <= resize(refConstPt_out1 & '0', 29);

  Subtract6_out1_gen: FOR t_04 IN 0 TO 3 GENERATE
    Subtract6_sub_cast(t_04) <= resize(mux_out1(t_04), 29);
    Subtract6_out1(t_04) <= Subtract6_sub_cast(t_04) - Subtract6_v;
  END GENERATE Subtract6_out1_gen;



  Data_Type_Conversion12_out1_gen: FOR ii1 IN 0 TO 3 GENERATE
    Data_Type_Conversion12_out1(ii1) <= Subtract6_out1(ii1)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion12_out1_gen;


  HwModeRegister2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister2_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister2_out1 <= Data_Type_Conversion12_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  HwModeRegister3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister3_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister3_out1 <= Data_Type_Conversion12_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;



  Product1_out1_gen: FOR t_05 IN 0 TO 3 GENERATE
    Product1_out1(t_05) <= HwModeRegister2_out1(t_05) * HwModeRegister3_out1(t_05);
  END GENERATE Product1_out1_gen;


  mux4_out1(0) <= Switch2_out1(0);
  mux4_out1(1) <= Switch2_out1(1);
  mux4_out1(2) <= Switch2_out1(1);
  mux4_out1(3) <= Switch2_out1(1);

  qamLookUp1Re_out1 <= to_signed(-16#0287#, 16);

  distBwSym_out1 <= to_signed(16#0287#, 16);

  Add2_add_cast <= resize(Data_Type_Conversion16_out1, 17);
  Add2_add_cast_1 <= resize(distBwSym_out1, 17);
  Add2_out1 <= Add2_add_cast + Add2_add_cast_1;

  Data_Type_Conversion15_out1 <= Add2_out1(15 DOWNTO 0);

  qamLookUp2Re_out1 <= to_signed(16#0287#, 16);

  mux3_out1(0) <= qamLookUp1Re_out1;
  mux3_out1(1) <= Data_Type_Conversion15_out1;
  mux3_out1(2) <= qamLookUp2Re_out1;
  mux3_out1(3) <= distBwSym_out1;

  Delay32_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay32_out1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay32_out1 <= mux3_out1;
      END IF;
    END IF;
  END PROCESS Delay32_process;



  Subtract21_out1_gen: FOR t_06 IN 0 TO 3 GENERATE
    Subtract21_sub_cast(t_06) <= resize(mux4_out1(t_06), 29);
    Subtract21_sub_cast_1(t_06) <= resize(Delay32_out1(t_06) & '0', 29);
    Subtract21_out1(t_06) <= Subtract21_sub_cast(t_06) - Subtract21_sub_cast_1(t_06);
  END GENERATE Subtract21_out1_gen;



  Data_Type_Conversion3_out1_gen: FOR ii2 IN 0 TO 3 GENERATE
    Data_Type_Conversion3_out1(ii2) <= Subtract21_out1(ii2)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion3_out1_gen;


  HwModeRegister4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister4_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister4_out1 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  HwModeRegister5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister5_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister5_out1 <= Data_Type_Conversion3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;



  Product2_out1_gen: FOR t_07 IN 0 TO 3 GENERATE
    Product2_out1(t_07) <= HwModeRegister4_out1(t_07) * HwModeRegister5_out1(t_07);
  END GENERATE Product2_out1_gen;


  mux5_out1(0) <= Switch3_out1(1);
  mux5_out1(1) <= Switch3_out1(1);
  mux5_out1(2) <= Switch3_out1(0);
  mux5_out1(3) <= Switch3_out1(1);

  mux2_out1(0) <= qamLookUp2Re_out1;
  mux2_out1(1) <= distBwSym_out1;
  mux2_out1(2) <= qamLookUp1Re_out1;
  mux2_out1(3) <= Data_Type_Conversion15_out1;

  Delay4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay4_out1 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay4_out1 <= mux2_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;



  Subtract5_out1_gen: FOR t_08 IN 0 TO 3 GENERATE
    Subtract5_sub_cast(t_08) <= resize(mux5_out1(t_08), 29);
    Subtract5_sub_cast_1(t_08) <= resize(Delay4_out1(t_08) & '0', 29);
    Subtract5_out1(t_08) <= Subtract5_sub_cast(t_08) - Subtract5_sub_cast_1(t_08);
  END GENERATE Subtract5_out1_gen;



  Data_Type_Conversion11_out1_gen: FOR ii3 IN 0 TO 3 GENERATE
    Data_Type_Conversion11_out1(ii3) <= Subtract5_out1(ii3)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion11_out1_gen;


  HwModeRegister6_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister6_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister6_out1 <= Data_Type_Conversion11_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  HwModeRegister7_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HwModeRegister7_out1 <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HwModeRegister7_out1 <= Data_Type_Conversion11_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;



  Product3_out1_gen: FOR t_09 IN 0 TO 3 GENERATE
    Product3_out1(t_09) <= HwModeRegister6_out1(t_09) * HwModeRegister7_out1(t_09);
  END GENERATE Product3_out1_gen;


  PipelineRegister_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      PipelineRegister_reg <= (OTHERS => to_signed(0, 56));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        PipelineRegister_reg(0 TO 3) <= Product_out1(0 TO 3);
        PipelineRegister_reg(4 TO 7) <= PipelineRegister_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;

  PipelineRegister_out1(0 TO 3) <= PipelineRegister_reg(4 TO 7);


  Data_Type_Conversion4_out1_gen: FOR ii4 IN 0 TO 3 GENERATE
    Data_Type_Conversion4_out1(ii4) <= PipelineRegister_out1(ii4)(39 DOWNTO 12);
  END GENERATE Data_Type_Conversion4_out1_gen;


  PipelineRegister1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      PipelineRegister1_reg <= (OTHERS => to_signed(0, 56));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        PipelineRegister1_reg(0 TO 3) <= Product1_out1(0 TO 3);
        PipelineRegister1_reg(4 TO 7) <= PipelineRegister1_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;

  PipelineRegister1_out1(0 TO 3) <= PipelineRegister1_reg(4 TO 7);


  Data_Type_Conversion5_out1_gen: FOR ii5 IN 0 TO 3 GENERATE
    Data_Type_Conversion5_out1(ii5) <= PipelineRegister1_out1(ii5)(39 DOWNTO 12);
  END GENERATE Data_Type_Conversion5_out1_gen;



  Add_out1_gen: FOR t_010 IN 0 TO 3 GENERATE
    Add_add_cast(t_010) <= resize(Data_Type_Conversion4_out1(t_010), 29);
    Add_add_cast_1(t_010) <= resize(Data_Type_Conversion5_out1(t_010), 29);
    Add_out1(t_010) <= Add_add_cast(t_010) + Add_add_cast_1(t_010);
  END GENERATE Add_out1_gen;



  Data_Type_Conversion8_out1_gen: FOR ii6 IN 0 TO 3 GENERATE
    Data_Type_Conversion8_out1(ii6) <= Add_out1(ii6)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion8_out1_gen;


  PipelineRegister2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      PipelineRegister2_reg <= (OTHERS => to_signed(0, 56));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        PipelineRegister2_reg(0 TO 3) <= Product2_out1(0 TO 3);
        PipelineRegister2_reg(4 TO 7) <= PipelineRegister2_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;

  PipelineRegister2_out1(0 TO 3) <= PipelineRegister2_reg(4 TO 7);


  Data_Type_Conversion6_out1_gen: FOR ii7 IN 0 TO 3 GENERATE
    Data_Type_Conversion6_out1(ii7) <= PipelineRegister2_out1(ii7)(39 DOWNTO 12);
  END GENERATE Data_Type_Conversion6_out1_gen;


  PipelineRegister3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      PipelineRegister3_reg <= (OTHERS => to_signed(0, 56));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        PipelineRegister3_reg(0 TO 3) <= Product3_out1(0 TO 3);
        PipelineRegister3_reg(4 TO 7) <= PipelineRegister3_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;

  PipelineRegister3_out1(0 TO 3) <= PipelineRegister3_reg(4 TO 7);


  Data_Type_Conversion7_out1_gen: FOR ii8 IN 0 TO 3 GENERATE
    Data_Type_Conversion7_out1(ii8) <= PipelineRegister3_out1(ii8)(39 DOWNTO 12);
  END GENERATE Data_Type_Conversion7_out1_gen;



  Add1_out1_gen: FOR t_011 IN 0 TO 3 GENERATE
    Add1_add_cast(t_011) <= resize(Data_Type_Conversion6_out1(t_011), 29);
    Add1_add_cast_1(t_011) <= resize(Data_Type_Conversion7_out1(t_011), 29);
    Add1_out1(t_011) <= Add1_add_cast(t_011) + Add1_add_cast_1(t_011);
  END GENERATE Add1_out1_gen;



  Data_Type_Conversion9_out1_gen: FOR ii9 IN 0 TO 3 GENERATE
    Data_Type_Conversion9_out1(ii9) <= Add1_out1(ii9)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion9_out1_gen;



  Subtract4_out1_gen: FOR t_012 IN 0 TO 3 GENERATE
    Subtract4_sub_cast(t_012) <= resize(Data_Type_Conversion8_out1(t_012), 29);
    Subtract4_sub_cast_1(t_012) <= resize(Data_Type_Conversion9_out1(t_012), 29);
    Subtract4_out1(t_012) <= Subtract4_sub_cast(t_012) - Subtract4_sub_cast_1(t_012);
  END GENERATE Subtract4_out1_gen;



  Data_Type_Conversion10_out1_gen: FOR ii10 IN 0 TO 3 GENERATE
    Data_Type_Conversion10_out1(ii10) <= Subtract4_out1(ii10)(27 DOWNTO 0);
  END GENERATE Data_Type_Conversion10_out1_gen;


  Data_Type_Conversion10_out1_0 <= Data_Type_Conversion10_out1(0);

  Unary_Minus_cast <= resize(Data_Type_Conversion10_out1_0, 29);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(27 DOWNTO 0);

  
  Switch21_out1 <= Data_Type_Conversion10_out1_0 WHEN switch_compare_1_3 = '0' ELSE
      Unary_Minus_out1;

  delayMatch12_out1_1 <= delayMatch12_out1(1);

  Relational_Operator1_out1_1 <= Relational_Operator1_out1(1);

  delayMatch12_out1_1_1 <= delayMatch12_out1_1 AND Relational_Operator1_out1_1;

  delayMatch13_out1_1 <= delayMatch13_out1(1);

  Relational_Operator1_out1_1_1 <= Relational_Operator1_out1(1);

  Relational_Operator1_out1_1_2 <=  NOT Relational_Operator1_out1_1_1;

  delayMatch13_out1_1_1 <= delayMatch13_out1_1 AND Relational_Operator1_out1_1_2;

  Logical_Operator3_out1_1 <= delayMatch12_out1_1_1 OR delayMatch13_out1_1_1;

  delayMatch15_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch15_reg(0) <= Logical_Operator3_out1_1;
        delayMatch15_reg(2 DOWNTO 1) <= delayMatch15_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  delayMatch15_out1 <= delayMatch15_reg(2);

  
  switch_compare_1_4 <= '1' WHEN delayMatch15_out1 > '0' ELSE
      '0';

  Data_Type_Conversion10_out1_1 <= Data_Type_Conversion10_out1(1);

  Unary_Minus1_cast <= resize(Data_Type_Conversion10_out1_1, 29);
  Unary_Minus1_cast_1 <=  - (Unary_Minus1_cast);
  Unary_Minus1_out1 <= Unary_Minus1_cast_1(27 DOWNTO 0);

  
  Switch31_out1 <= Data_Type_Conversion10_out1_1 WHEN switch_compare_1_4 = '0' ELSE
      Unary_Minus1_out1;

  delayMatch12_out1_2 <= delayMatch12_out1(2);

  Relational_Operator1_out1_2 <= Relational_Operator1_out1(2);

  delayMatch12_out1_2_1 <= delayMatch12_out1_2 AND Relational_Operator1_out1_2;

  delayMatch13_out1_2 <= delayMatch13_out1(2);

  Relational_Operator1_out1_2_1 <= Relational_Operator1_out1(2);

  Relational_Operator1_out1_2_2 <=  NOT Relational_Operator1_out1_2_1;

  delayMatch13_out1_2_1 <= delayMatch13_out1_2 AND Relational_Operator1_out1_2_2;

  Logical_Operator3_out1_2 <= delayMatch12_out1_2_1 OR delayMatch13_out1_2_1;

  delayMatch16_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch16_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch16_reg(0) <= Logical_Operator3_out1_2;
        delayMatch16_reg(2 DOWNTO 1) <= delayMatch16_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch16_process;

  delayMatch16_out1 <= delayMatch16_reg(2);

  
  switch_compare_1_5 <= '1' WHEN delayMatch16_out1 > '0' ELSE
      '0';

  Data_Type_Conversion10_out1_2 <= Data_Type_Conversion10_out1(2);

  Unary_Minus2_cast <= resize(Data_Type_Conversion10_out1_2, 29);
  Unary_Minus2_cast_1 <=  - (Unary_Minus2_cast);
  Unary_Minus2_out1 <= Unary_Minus2_cast_1(27 DOWNTO 0);

  
  Switch4_out1 <= Data_Type_Conversion10_out1_2 WHEN switch_compare_1_5 = '0' ELSE
      Unary_Minus2_out1;

  delayMatch12_out1_3 <= delayMatch12_out1(3);

  Relational_Operator1_out1_3 <= Relational_Operator1_out1(3);

  delayMatch12_out1_3_1 <= delayMatch12_out1_3 AND Relational_Operator1_out1_3;

  delayMatch13_out1_3 <= delayMatch13_out1(3);

  Relational_Operator1_out1_3_1 <= Relational_Operator1_out1(3);

  Relational_Operator1_out1_3_2 <=  NOT Relational_Operator1_out1_3_1;

  delayMatch13_out1_3_1 <= delayMatch13_out1_3 AND Relational_Operator1_out1_3_2;

  Logical_Operator3_out1_3 <= delayMatch12_out1_3_1 OR delayMatch13_out1_3_1;

  delayMatch17_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      delayMatch17_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch17_reg(0) <= Logical_Operator3_out1_3;
        delayMatch17_reg(2 DOWNTO 1) <= delayMatch17_reg(1 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS delayMatch17_process;

  delayMatch17_out1 <= delayMatch17_reg(2);

  
  switch_compare_1_6 <= '1' WHEN delayMatch17_out1 > '0' ELSE
      '0';

  Data_Type_Conversion10_out1_3 <= Data_Type_Conversion10_out1(3);

  Unary_Minus3_cast <= resize(Data_Type_Conversion10_out1_3, 29);
  Unary_Minus3_cast_1 <=  - (Unary_Minus3_cast);
  Unary_Minus3_out1 <= Unary_Minus3_cast_1(27 DOWNTO 0);

  
  Switch5_out1 <= Data_Type_Conversion10_out1_3 WHEN switch_compare_1_6 = '0' ELSE
      Unary_Minus3_out1;

  concatenate4_out1(0) <= Switch21_out1;
  concatenate4_out1(1) <= Switch31_out1;
  concatenate4_out1(2) <= Switch4_out1;
  concatenate4_out1(3) <= Switch5_out1;

  
  select_out1_0 <= concatenate4_out1(0) WHEN shuffOrder_out1_0 = to_unsigned(16#01#, 8) ELSE
      concatenate4_out1(1) WHEN shuffOrder_out1_0 = to_unsigned(16#02#, 8) ELSE
      concatenate4_out1(2) WHEN shuffOrder_out1_0 = to_unsigned(16#03#, 8) ELSE
      concatenate4_out1(3);

  shuffOrder_out1_1 <= shuffOrder_out1(1);

  
  select_out1_1 <= concatenate4_out1(0) WHEN shuffOrder_out1_1 = to_unsigned(16#01#, 8) ELSE
      concatenate4_out1(1) WHEN shuffOrder_out1_1 = to_unsigned(16#02#, 8) ELSE
      concatenate4_out1(2) WHEN shuffOrder_out1_1 = to_unsigned(16#03#, 8) ELSE
      concatenate4_out1(3);

  shuffOrder_out1_2 <= shuffOrder_out1(2);

  
  select_out1_2 <= concatenate4_out1(0) WHEN shuffOrder_out1_2 = to_unsigned(16#01#, 8) ELSE
      concatenate4_out1(1) WHEN shuffOrder_out1_2 = to_unsigned(16#02#, 8) ELSE
      concatenate4_out1(2) WHEN shuffOrder_out1_2 = to_unsigned(16#03#, 8) ELSE
      concatenate4_out1(3);

  shuffOrder_out1_3 <= shuffOrder_out1(3);

  Constant5_out1 <= (OTHERS => to_signed(16#0000000#, 28));

  
  select_out1_3 <= concatenate4_out1(0) WHEN shuffOrder_out1_3 = to_unsigned(16#01#, 8) ELSE
      concatenate4_out1(1) WHEN shuffOrder_out1_3 = to_unsigned(16#02#, 8) ELSE
      concatenate4_out1(2) WHEN shuffOrder_out1_3 = to_unsigned(16#03#, 8) ELSE
      concatenate4_out1(3);

  select_out1(0) <= select_out1_0;
  select_out1(1) <= select_out1_1;
  select_out1(2) <= select_out1_2;
  select_out1(3) <= select_out1_3;

  
  Switch10_out1 <= Constant5_out1 WHEN switch_compare_1 = '0' ELSE
      select_out1;

  outputgen: FOR k IN 0 TO 3 GENERATE
    dataOut(k) <= std_logic_vector(Switch10_out1(k));
  END GENERATE;

END rtl;

