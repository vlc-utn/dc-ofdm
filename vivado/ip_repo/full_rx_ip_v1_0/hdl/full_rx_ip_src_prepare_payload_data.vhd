-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_prepare_payload_data.vhd
-- Created: 2024-08-10 11:14:31
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_prepare_payload_data
-- Source Path: HDLRx/full_rx/prepare_payload_data
-- Hierarchy Level: 1
-- Model version: 1.14
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_prepare_payload_data IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En12 [4]
        valid_payload                     :   IN    std_logic;
        payload_ready                     :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        valid_in                          :   OUT   std_logic;
        last_frame                        :   OUT   std_logic;
        new_frame                         :   OUT   std_logic
        );
END full_rx_ip_src_prepare_payload_data;


ARCHITECTURE rtl OF full_rx_ip_src_prepare_payload_data IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_payload_clock_x2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En12 [4]
          valid_in                        :   IN    std_logic;
          data_out                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          valid_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_HDL_FIFO_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Push                            :   IN    std_logic;
          Pop                             :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          Empty                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_rising_edge_detector_block5
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_falling_edge_detector
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          in_rsvd                         :   IN    std_logic;
          out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_payload_clock_x2
    USE ENTITY work.full_rx_ip_src_payload_clock_x2(rtl);

  FOR ALL : full_rx_ip_src_HDL_FIFO_block
    USE ENTITY work.full_rx_ip_src_HDL_FIFO_block(rtl);

  FOR ALL : full_rx_ip_src_rising_edge_detector_block5
    USE ENTITY work.full_rx_ip_src_rising_edge_detector_block5(rtl);

  FOR ALL : full_rx_ip_src_falling_edge_detector
    USE ENTITY work.full_rx_ip_src_falling_edge_detector(rtl);

  -- Signals
  SIGNAL dataIn                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL push                             : std_logic;
  SIGNAL fifo_empty                       : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL dataOut_tmp                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL falling_edge_detector_out1       : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(999 DOWNTO 0);  -- ufix1 [1000]
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  -- Note_ this delay makes sure that the fifo always has data, and is not emptied in the middle of an LDPC block

  u_payload_clock_x2 : full_rx_ip_src_payload_clock_x2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => data_in,  -- sfix16_En12 [4]
              valid_in => valid_payload,
              data_out => dataIn,  -- sfix16_En12
              valid_out => push
              );

  u_HDL_FIFO : full_rx_ip_src_HDL_FIFO_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => dataIn,  -- sfix16_En12
              Push => push,
              Pop => Logical_Operator2_out1,
              Out_rsvd => dataOut_tmp,  -- sfix16_En12
              Empty => fifo_empty
              );

  u_rising_edge_detector : full_rx_ip_src_rising_edge_detector_block5
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              In_rsvd => fifo_empty,
              Out_rsvd => rising_edge_detector_out1
              );

  u_falling_edge_detector : full_rx_ip_src_falling_edge_detector
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              in_rsvd => fifo_empty,
              out_rsvd => falling_edge_detector_out1
              );

  Logical_Operator3_out1 <=  NOT fifo_empty;

  Logical_Operator2_out1 <= Logical_Operator3_out1 AND payload_ready;

  Delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      valid_in <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        valid_in <= Logical_Operator2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= falling_edge_detector_out1;
        Delay2_reg(999 DOWNTO 1) <= Delay2_reg(998 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(999);

  dataOut <= dataOut_tmp;

  last_frame <= rising_edge_detector_out1;

  new_frame <= Delay2_out1;

END rtl;

