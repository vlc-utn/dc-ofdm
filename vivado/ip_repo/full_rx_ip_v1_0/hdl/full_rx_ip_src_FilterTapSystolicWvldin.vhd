-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_FilterTapSystolicWvldin.vhd
-- Created: 2024-10-05 22:40:32
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_FilterTapSystolicWvldin
-- Source Path: HDLRx/full_rx/rx_demodulator_full/decimator/FIR Decimator/FilterBank/subFilter/FilterTapSystolicWvldin
-- Hierarchy Level: 6
-- Model version: 1.125
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_FilterTapSystolicWvldin IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dinReg2_0_re                      :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        coefIn_0                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En16
        addin                             :   IN    std_logic_vector(47 DOWNTO 0);  -- sfix48_En30
        dinRegVld                         :   IN    std_logic;
        softReset                         :   IN    std_logic;
        dinDly2                           :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        tapout                            :   OUT   std_logic_vector(47 DOWNTO 0)  -- sfix48_En30
        );
END full_rx_ip_src_FilterTapSystolicWvldin;


ARCHITECTURE rtl OF full_rx_ip_src_FilterTapSystolicWvldin IS

  -- Signals
  SIGNAL dinReg2_0_re_signed              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL coefIn_0_signed                  : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL addin_signed                     : signed(47 DOWNTO 0);  -- sfix48_En30
  SIGNAL fTap_din_reg1                    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL fTap_coef_reg1                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL fTap_din_reg2                    : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL fTap_coef_reg2                   : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL fTap_mult_reg                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL fTap_addout_reg                  : signed(47 DOWNTO 0);  -- sfix48
  SIGNAL fTap_din_reg1_next               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL fTap_coef_reg1_next              : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL fTap_din_reg2_next               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL fTap_coef_reg2_next              : signed(15 DOWNTO 0);  -- sfix16_En16
  SIGNAL fTap_mult_reg_next               : signed(31 DOWNTO 0);  -- sfix32_En30
  SIGNAL fTap_addout_reg_next             : signed(47 DOWNTO 0);  -- sfix48_En30
  SIGNAL dinDly2_tmp                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tapout_tmp                       : signed(47 DOWNTO 0);  -- sfix48_En30

BEGIN
  dinReg2_0_re_signed <= signed(dinReg2_0_re);

  coefIn_0_signed <= signed(coefIn_0);

  addin_signed <= signed(addin);

  -- FilterTapSystlicWvldIn
  fTap_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        fTap_din_reg1 <= to_signed(16#0000#, 16);
        fTap_coef_reg1 <= to_signed(16#0000#, 16);
        fTap_din_reg2 <= to_signed(16#0000#, 16);
        fTap_coef_reg2 <= to_signed(16#0000#, 16);
        fTap_mult_reg <= to_signed(0, 32);
        fTap_addout_reg <= to_signed(0, 48);
      ELSIF enb = '1' THEN
        IF softReset = '1' THEN
          fTap_din_reg1 <= to_signed(16#0000#, 16);
          fTap_coef_reg1 <= to_signed(16#0000#, 16);
          fTap_din_reg2 <= to_signed(16#0000#, 16);
          fTap_coef_reg2 <= to_signed(16#0000#, 16);
          fTap_mult_reg <= to_signed(0, 32);
          fTap_addout_reg <= to_signed(0, 48);
        ELSE 
          fTap_din_reg1 <= fTap_din_reg1_next;
          fTap_coef_reg1 <= fTap_coef_reg1_next;
          fTap_din_reg2 <= fTap_din_reg2_next;
          fTap_coef_reg2 <= fTap_coef_reg2_next;
          fTap_mult_reg <= fTap_mult_reg_next;
          fTap_addout_reg <= fTap_addout_reg_next;
        END IF;
      END IF;
    END IF;
  END PROCESS fTap_process;

  fTap_output : PROCESS (addin_signed, coefIn_0_signed, dinReg2_0_re_signed, dinRegVld, fTap_addout_reg,
       fTap_coef_reg1, fTap_coef_reg2, fTap_din_reg1, fTap_din_reg2,
       fTap_mult_reg)
    VARIABLE add_cast : signed(47 DOWNTO 0);
  BEGIN
    add_cast := to_signed(0, 48);
    fTap_din_reg1_next <= fTap_din_reg1;
    fTap_coef_reg1_next <= fTap_coef_reg1;
    fTap_din_reg2_next <= fTap_din_reg2;
    fTap_coef_reg2_next <= fTap_coef_reg2;
    fTap_mult_reg_next <= fTap_mult_reg;
    fTap_addout_reg_next <= fTap_addout_reg;
    IF dinRegVld = '1' THEN 
      add_cast := resize(fTap_mult_reg, 48);
      fTap_addout_reg_next <= add_cast + addin_signed;
      fTap_mult_reg_next <= fTap_din_reg2 * fTap_coef_reg2;
      fTap_din_reg2_next <= fTap_din_reg1;
      fTap_coef_reg2_next <= fTap_coef_reg1;
      fTap_din_reg1_next <= dinReg2_0_re_signed;
      fTap_coef_reg1_next <= coefIn_0_signed;
    END IF;
    dinDly2_tmp <= fTap_din_reg2;
    tapout_tmp <= fTap_addout_reg;
  END PROCESS fTap_output;


  dinDly2 <= std_logic_vector(dinDly2_tmp);

  tapout <= std_logic_vector(tapout_tmp);

END rtl;

