-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_find_peak.vhd
-- Created: 2024-08-10 11:14:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_find_peak
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/find_peak
-- Hierarchy Level: 3
-- Model version: 1.14
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_find_peak IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        M_in                              :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        peak_sync                         :   OUT   std_logic
        );
END full_rx_ip_src_find_peak;


ARCHITECTURE rtl OF full_rx_ip_src_find_peak IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_Compare_To_Constant
    PORT( u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_Compare_To_Constant
    USE ENTITY work.full_rx_ip_src_Compare_To_Constant(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_reg_re                    : vector_of_signed16(0 TO 126);  -- sfix16_En12 [127]
  SIGNAL Delay5_reg_im                    : vector_of_signed16(0 TO 126);  -- sfix16_En12 [127]
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL M_in_signed                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL peak_i_1                         : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL count_step                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_from                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_reset                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL zero_1                           : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL range_hit                        : std_logic;
  SIGNAL count                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL en                               : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL peak_found                       : std_logic;
  SIGNAL peak_found_1                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL count_1                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL new_peak                         : std_logic;
  SIGNAL count_2                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_hit                        : std_logic;
  SIGNAL peak_i                           : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Unit_Delay_out1                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL HDL_Counter_out2                 : std_logic;
  SIGNAL peak_found_2                     : std_logic;
  SIGNAL OR1_out1                         : std_logic;

BEGIN
  u_Compare_To_Constant : full_rx_ip_src_Compare_To_Constant
    PORT MAP( u => M_in,  -- sfix16_En12
              y => Compare_To_Constant_out1
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay4_out1_re <= to_signed(16#0000#, 16);
      Delay4_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay4_out1_re <= data_in_re_signed;
        Delay4_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay5_reg_re <= (OTHERS => to_signed(16#0000#, 16));
      Delay5_reg_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay5_reg_im(0) <= Delay4_out1_im;
        Delay5_reg_im(1 TO 126) <= Delay5_reg_im(0 TO 125);
        Delay5_reg_re(0) <= Delay4_out1_re;
        Delay5_reg_re(1 TO 126) <= Delay5_reg_re(0 TO 125);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1_re <= Delay5_reg_re(126);
  Delay5_out1_im <= Delay5_reg_im(126);

  data_out_re <= std_logic_vector(Delay5_out1_re);

  data_out_im <= std_logic_vector(Delay5_out1_im);

  Constant_out1 <= to_signed(16#0000#, 16);

  M_in_signed <= signed(M_in);

  
  peak_i_1 <= Constant_out1 WHEN Compare_To_Constant_out1 = '0' ELSE
      M_in_signed;

  Delay2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay2_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay2_out1 <= peak_i_1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay_out1 <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 127
  count_step <= to_unsigned(16#01#, 7);

  count_from <= to_unsigned(16#00#, 7);

  count_reset <= to_unsigned(16#00#, 7);

  zero_1 <= '0';

  
  range_hit <= '1' WHEN HDL_Counter_out1 > to_unsigned(16#7E#, 7) ELSE
      '0';

  count <= HDL_Counter_out1 + count_step;

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  Unit_Delay1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Unit_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Unit_Delay1_out1 <= en;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  peak_found_1 <= peak_found;

  OR_out1 <= peak_found_1 OR Delay3_out1;

  
  en <= Unit_Delay1_out1 WHEN OR_out1 = '0' ELSE
      Delay3_out1;

  
  count_1 <= HDL_Counter_out1 WHEN en = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN new_peak = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#7F#, 7) ELSE
      '0';

  count_hit <= need_to_wrap OR range_hit;

  Unit_Delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Unit_Delay_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Unit_Delay_out1 <= peak_i;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Delay1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      peak_found <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        peak_found <= HDL_Counter_out2;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  peak_found_2 <= peak_found;

  Delay3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay3_out1 <= new_peak;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  OR1_out1 <= Delay3_out1 OR peak_found_2;

  
  peak_i <= Unit_Delay_out1 WHEN OR1_out1 = '0' ELSE
      Delay_out1;

  
  new_peak <= '1' WHEN Delay2_out1 > peak_i ELSE
      '0';

  
  HDL_Counter_out2 <= count_hit WHEN new_peak = '0' ELSE
      zero_1;

  peak_sync <= HDL_Counter_out2;

END rtl;

