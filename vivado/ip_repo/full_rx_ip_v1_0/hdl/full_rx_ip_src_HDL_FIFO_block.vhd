-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_HDL_FIFO_block.vhd
-- Created: 2024-10-04 16:56:23
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_HDL_FIFO_block
-- Source Path: HDLRx/full_rx/rx_demodulator_full/channel_estimation_and_equalization/Channel Estimation/HDL_FIFO
-- Hierarchy Level: 4
-- Model version: 1.104
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_HDL_FIFO_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        In_re                             :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        In_im                             :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        Push                              :   IN    std_logic;
        Pop                               :   IN    std_logic;
        rst                               :   IN    std_logic;  -- ufix1
        Out_re                            :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        Out_im                            :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
        );
END full_rx_ip_src_HDL_FIFO_block;


ARCHITECTURE rtl OF full_rx_ip_src_HDL_FIFO_block IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_SimpleDualPortRAM_generic_block2
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          wr_din_re                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_din_im                       :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          dout_re                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          dout_im                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_SimpleDualPortRAM_generic_block2
    USE ENTITY work.full_rx_ip_src_SimpleDualPortRAM_generic_block2(rtl);

  -- Signals
  SIGNAL fifo_front_indx                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_front_dir                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_back_indx                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_back_dir                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_sample_count                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_front_indx_next             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_front_dir_next              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_back_indx_next              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_back_dir_next               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_sample_count_next           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_out3                        : std_logic;
  SIGNAL fifo_out4                        : std_logic;
  SIGNAL fifo_write_enable                : std_logic;
  SIGNAL fifo_read_enable                 : std_logic;
  SIGNAL fifo_front_indx_temp             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL fifo_back_indx_temp              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL w_waddr                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL w_we                             : std_logic;  -- ufix1
  SIGNAL w_raddr                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL w_empty                          : std_logic;  -- ufix1
  SIGNAL w_full                           : std_logic;  -- ufix1
  SIGNAL w_num                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL w_cz                             : std_logic;
  SIGNAL w_const                          : std_logic;  -- ufix1
  SIGNAL rst_neg                          : std_logic;  -- ufix1
  SIGNAL rst_neg_1                        : std_logic;  -- ufix1
  SIGNAL w_mux1                           : std_logic;  -- ufix1
  SIGNAL w_d1                             : std_logic;  -- ufix1
  SIGNAL w_waddr_re                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL w_waddr_im                       : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL w_waddr_re_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_waddr_im_signed                : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_const_0_re                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_const_0_im                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_out_1_re                       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_out_1_im                       : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_out_re                         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_out_im                         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_d2_re                          : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL w_d2_im                          : signed(11 DOWNTO 0);  -- sfix12_En10

BEGIN
  -- us1: Upsample by 1, Sample offset 0 
  u_HDL_FIFO_ram : full_rx_ip_src_SimpleDualPortRAM_generic_block2
    GENERIC MAP( AddrWidth => 8,
                 DataWidth => 12
                 )
    PORT MAP( clk => clk,
              enb_1_2_0 => enb_1_2_0,
              wr_din_re => In_re,
              wr_din_im => In_im,
              wr_addr => std_logic_vector(w_waddr),
              wr_en => w_we,  -- ufix1
              rd_addr => std_logic_vector(w_raddr),
              dout_re => w_waddr_re,
              dout_im => w_waddr_im
              );

  -- FIFO logic controller
  -- us2: Upsample by 1, Sample offset 0 
  -- us3: Upsample by 1, Sample offset 0 
  fifo_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        fifo_front_indx <= to_unsigned(16#00#, 8);
        fifo_front_dir <= to_unsigned(16#01#, 8);
        fifo_back_indx <= to_unsigned(16#00#, 8);
        fifo_back_dir <= to_unsigned(16#01#, 8);
        fifo_sample_count <= to_unsigned(16#00#, 8);
      ELSIF enb_1_2_0 = '1' THEN
        fifo_front_indx <= fifo_front_indx_next;
        fifo_front_dir <= fifo_front_dir_next;
        fifo_back_indx <= fifo_back_indx_next;
        fifo_back_dir <= fifo_back_dir_next;
        fifo_sample_count <= fifo_sample_count_next;
      END IF;
    END IF;
  END PROCESS fifo_process;

  
  fifo_out4 <= '1' WHEN fifo_sample_count = to_unsigned(16#CD#, 8) ELSE
      '0';
  
  fifo_out3 <= '1' WHEN fifo_sample_count = to_unsigned(16#00#, 8) ELSE
      '0';
  fifo_write_enable <= Push AND (Pop OR ( NOT fifo_out4));
  fifo_read_enable <= Pop AND ( NOT fifo_out3);
  
  fifo_front_indx_temp <= to_unsigned(16#00#, 8) WHEN rst /= '0' ELSE
      fifo_front_indx + fifo_front_dir WHEN fifo_read_enable = '1' ELSE
      fifo_front_indx;
  
  fifo_front_dir_next <= to_unsigned(16#34#, 8) WHEN fifo_front_indx_temp = to_unsigned(16#CC#, 8) ELSE
      to_unsigned(16#01#, 8);
  
  fifo_back_indx_temp <= to_unsigned(16#00#, 8) WHEN rst /= '0' ELSE
      fifo_back_indx + fifo_back_dir WHEN fifo_write_enable = '1' ELSE
      fifo_back_indx;
  
  fifo_back_dir_next <= to_unsigned(16#34#, 8) WHEN fifo_back_indx_temp = to_unsigned(16#CC#, 8) ELSE
      to_unsigned(16#01#, 8);
  
  fifo_sample_count_next <= to_unsigned(16#00#, 8) WHEN rst /= '0' ELSE
      fifo_sample_count + to_unsigned(16#01#, 8) WHEN (fifo_write_enable AND ( NOT fifo_read_enable)) = '1' ELSE
      fifo_sample_count + to_unsigned(16#FF#, 8) WHEN (( NOT fifo_write_enable) AND fifo_read_enable) = '1' ELSE
      fifo_sample_count;
  w_waddr <= fifo_back_indx;
  w_we <= fifo_write_enable;
  w_raddr <= fifo_front_indx;
  w_empty <= fifo_out3;
  w_full <= fifo_out4;
  w_num <= fifo_sample_count;
  fifo_front_indx_next <= fifo_front_indx_temp;
  fifo_back_indx_next <= fifo_back_indx_temp;

  
  w_cz <= '1' WHEN w_num > to_unsigned(16#00#, 8) ELSE
      '0';

  w_const <= '0';

  rst_neg <=  NOT rst;

  rst_neg_1 <= rst_neg AND Pop;

  
  w_mux1 <= w_const WHEN w_cz = '0' ELSE
      rst_neg_1;

  f_d1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        w_d1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        w_d1 <= w_mux1;
      END IF;
    END IF;
  END PROCESS f_d1_process;


  w_waddr_re_signed <= signed(w_waddr_re);

  w_waddr_im_signed <= signed(w_waddr_im);

  w_const_0_re <= to_signed(16#000#, 12);
  w_const_0_im <= to_signed(16#000#, 12);

  
  w_out_1_re <= w_waddr_re_signed WHEN rst = '0' ELSE
      w_const_0_re;
  
  w_out_1_im <= w_waddr_im_signed WHEN rst = '0' ELSE
      w_const_0_im;

  f_d2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        w_d2_re <= to_signed(16#000#, 12);
        w_d2_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' AND w_d1 = '1' THEN
        w_d2_re <= w_out_re;
        w_d2_im <= w_out_im;
      END IF;
    END IF;
  END PROCESS f_d2_process;


  
  w_out_re <= w_d2_re WHEN w_d1 = '0' ELSE
      w_out_1_re;
  
  w_out_im <= w_d2_im WHEN w_d1 = '0' ELSE
      w_out_1_im;

  Out_re <= std_logic_vector(w_out_re);

  Out_im <= std_logic_vector(w_out_im);

END rtl;

