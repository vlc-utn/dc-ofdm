-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_get_init.vhd
-- Created: 2024-08-10 11:14:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_get_init
-- Source Path: HDLRx/full_rx/rx_demodulator_full/get_init
-- Hierarchy Level: 2
-- Model version: 1.14
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_get_init IS
  PORT( valid_header                      :   IN    std_logic;
        valid_payload                     :   IN    std_logic;
        descrambler_init                  :   OUT   std_logic_vector(12 DOWNTO 0)  -- boolean [13]
        );
END full_rx_ip_src_get_init;


ARCHITECTURE rtl OF full_rx_ip_src_get_init IS

  -- Signals
  SIGNAL control                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Constant4_out1                   : vector_of_unsigned8(0 TO 12);  -- uint8 [13]
  SIGNAL Data_Type_Conversion10_out1      : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Constant5_out1                   : vector_of_unsigned8(0 TO 12);  -- uint8 [13]
  SIGNAL Data_Type_Conversion9_out1       : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Constant6_out1                   : vector_of_unsigned8(0 TO 12);  -- uint8 [13]
  SIGNAL Data_Type_Conversion4_out1       : std_logic_vector(12 DOWNTO 0);  -- boolean [13]
  SIGNAL Multiport_Switch2_out1           : std_logic_vector(12 DOWNTO 0);  -- boolean [13]

BEGIN
  control <= unsigned'(valid_payload & valid_header);

  Constant4_out1(0) <= to_unsigned(16#01#, 8);
  Constant4_out1(1) <= to_unsigned(16#00#, 8);
  Constant4_out1(2) <= to_unsigned(16#01#, 8);
  Constant4_out1(3) <= to_unsigned(16#00#, 8);
  Constant4_out1(4) <= to_unsigned(16#00#, 8);
  Constant4_out1(5) <= to_unsigned(16#00#, 8);
  Constant4_out1(6) <= to_unsigned(16#00#, 8);
  Constant4_out1(7) <= to_unsigned(16#00#, 8);
  Constant4_out1(8) <= to_unsigned(16#01#, 8);
  Constant4_out1(9) <= to_unsigned(16#00#, 8);
  Constant4_out1(10) <= to_unsigned(16#00#, 8);
  Constant4_out1(11) <= to_unsigned(16#00#, 8);
  Constant4_out1(12) <= to_unsigned(16#01#, 8);

  Data_Type_Conversion10_output : PROCESS (Constant4_out1)
    VARIABLE y : std_logic;
  BEGIN
    y := '0';

    FOR ii IN 0 TO 12 LOOP
      IF Constant4_out1(ii) /= to_unsigned(16#00#, 8) THEN 
        y := '1';
      ELSE 
        y := '0';
      END IF;
      Data_Type_Conversion10_out1(ii) <= y;
    END LOOP;

  END PROCESS Data_Type_Conversion10_output;


  Constant5_out1 <= (OTHERS => to_unsigned(16#01#, 8));

  Data_Type_Conversion9_output : PROCESS (Constant5_out1)
    VARIABLE y1 : std_logic;
  BEGIN
    y1 := '0';

    FOR ii1 IN 0 TO 12 LOOP
      IF Constant5_out1(ii1) /= to_unsigned(16#00#, 8) THEN 
        y1 := '1';
      ELSE 
        y1 := '0';
      END IF;
      Data_Type_Conversion9_out1(ii1) <= y1;
    END LOOP;

  END PROCESS Data_Type_Conversion9_output;


  Constant6_out1 <= (OTHERS => to_unsigned(16#01#, 8));

  Data_Type_Conversion4_output : PROCESS (Constant6_out1)
    VARIABLE y2 : std_logic;
  BEGIN
    y2 := '0';

    FOR ii2 IN 0 TO 12 LOOP
      IF Constant6_out1(ii2) /= to_unsigned(16#00#, 8) THEN 
        y2 := '1';
      ELSE 
        y2 := '0';
      END IF;
      Data_Type_Conversion4_out1(ii2) <= y2;
    END LOOP;

  END PROCESS Data_Type_Conversion4_output;


  Multiport_Switch2_output : PROCESS (Data_Type_Conversion10_out1, Data_Type_Conversion4_out1,
       Data_Type_Conversion9_out1, control)
  BEGIN
    IF control = to_unsigned(16#0#, 2) THEN 
      Multiport_Switch2_out1 <= Data_Type_Conversion10_out1;
    ELSIF control = to_unsigned(16#1#, 2) THEN 
      Multiport_Switch2_out1 <= Data_Type_Conversion9_out1;
    ELSE 
      Multiport_Switch2_out1 <= Data_Type_Conversion4_out1;
    END IF;
  END PROCESS Multiport_Switch2_output;


  descrambler_init <= Multiport_Switch2_out1;

END rtl;

