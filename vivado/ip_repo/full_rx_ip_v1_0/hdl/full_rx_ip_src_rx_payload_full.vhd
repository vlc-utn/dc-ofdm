-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_rx_payload_full.vhd
-- Created: 2024-10-04 16:56:24
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_rx_payload_full
-- Source Path: HDLRx/full_rx/rx_payload_full
-- Hierarchy Level: 1
-- Model version: 1.104
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_rx_payload_full IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
        valid_in                          :   IN    std_logic;
        last_frame                        :   IN    std_logic;
        new_frame                         :   IN    std_logic;
        scrambler_init                    :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
        psdu_size                         :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        valid_out                         :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END full_rx_ip_src_rx_payload_full;


ARCHITECTURE rtl OF full_rx_ip_src_rx_payload_full IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_next_frame_to_ready_rx
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          next_frame                      :   IN    std_logic;
          ready                           :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_remove_tone_mapping
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          valid_in                        :   IN    std_logic;
          newFrame                        :   IN    std_logic;
          psdu_size                       :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix1 [24]
          data_out                        :   OUT   std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_end                    :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_reduced_ldpc_rx
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(3 DOWNTO 0);  -- sfix4_En1
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_end                     :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          data_out                        :   OUT   std_logic;
          ctrl_out_start                  :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic;
          next_frame                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_p_scrambler
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic;
          ctrl_in_start                   :   IN    std_logic;
          ctrl_in_valid                   :   IN    std_logic;
          SI                              :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix1 [4]
          data_out                        :   OUT   std_logic;
          ctrl_out_valid                  :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_next_frame_to_ready_rx
    USE ENTITY work.full_rx_ip_src_next_frame_to_ready_rx(rtl);

  FOR ALL : full_rx_ip_src_remove_tone_mapping
    USE ENTITY work.full_rx_ip_src_remove_tone_mapping(rtl);

  FOR ALL : full_rx_ip_src_reduced_ldpc_rx
    USE ENTITY work.full_rx_ip_src_reduced_ldpc_rx(rtl);

  FOR ALL : full_rx_ip_src_p_scrambler
    USE ENTITY work.full_rx_ip_src_p_scrambler(rtl);

  -- Signals
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL ldpc_ctrl_in_valid               : std_logic;
  SIGNAL Delay1_out1_valid                : std_logic;
  SIGNAL ldpc_ctrl_in_end                 : std_logic;
  SIGNAL Delay1_out1_end                  : std_logic;
  SIGNAL ldpc_ctrl_in_start               : std_logic;
  SIGNAL Delay1_out1_start                : std_logic;
  SIGNAL reduced_ldpc_rx_out3             : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL ready_1                          : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL ldpc_in                          : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL ldpc_in_signed                   : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL Delay2_out1                      : signed(3 DOWNTO 0);  -- sfix4_En1
  SIGNAL ldpc_out                         : std_logic;
  SIGNAL ldpc_ctrl_out_start              : std_logic;
  SIGNAL ldpc_ctrl_out_valid              : std_logic;
  SIGNAL p_scrambler_out1                 : std_logic;
  SIGNAL p_scrambler_out2_valid           : std_logic;
  SIGNAL valid                            : std_logic;
  SIGNAL Deserializer1D_contl_cnt         : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntGlobal   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cnt_next    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntGlobal_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_contl_cntInnerRegCtrol_next : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_hOutSignalsContl  : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL Deserializer1D_tapout            : std_logic_vector(6 DOWNTO 0);  -- boolean [7]
  SIGNAL Deserializer1D_muxOut            : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Deserializer1D_deserInnerOut     : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Deserializer1D_OutRegComp_reg    : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL deserializer_PostProcessed       : std_logic_vector(7 DOWNTO 0);  -- boolean [8]
  SIGNAL Data_Type_Conversion1_out1       : std_logic_vector(7 DOWNTO 0);  -- ufix1 [8]
  SIGNAL Data_Type_Conversion1_out1_7     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_6     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_5     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_4     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_3     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_2     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_1     : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion1_out1_0     : std_logic;  -- ufix1
  SIGNAL y                                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Deserializer1D_deserInnerOut_1   : std_logic;
  SIGNAL Deserializer1D_OutRegComp_reg_1  : std_logic;  -- ufix1
  SIGNAL Deserializer1D_out2              : std_logic;

BEGIN
  -- Note: this blocks requires exactly one external delay for signals "data_in" and "valid_in"

  u_next_frame_to_ready_rx : full_rx_ip_src_next_frame_to_ready_rx
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              next_frame => Logical_Operator1_out1,
              ready => ready_1
              );

  u_remove_tone_mapping : full_rx_ip_src_remove_tone_mapping
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => data_in,  -- sfix4_En1
              valid_in => AND_out1,
              newFrame => new_frame,
              psdu_size => psdu_size,  -- ufix1 [24]
              data_out => ldpc_in,  -- sfix4_En1
              ctrl_out_start => ldpc_ctrl_in_start,
              ctrl_out_end => ldpc_ctrl_in_end,
              ctrl_out_valid => ldpc_ctrl_in_valid
              );

  u_reduced_ldpc_rx : full_rx_ip_src_reduced_ldpc_rx
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => std_logic_vector(Delay2_out1),  -- sfix4_En1
              ctrl_in_start => Delay1_out1_start,
              ctrl_in_end => Delay1_out1_end,
              ctrl_in_valid => Delay1_out1_valid,
              data_out => ldpc_out,
              ctrl_out_start => ldpc_ctrl_out_start,
              ctrl_out_valid => ldpc_ctrl_out_valid,
              next_frame => reduced_ldpc_rx_out3
              );

  u_p_scrambler : full_rx_ip_src_p_scrambler
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              data_in => ldpc_out,
              ctrl_in_start => ldpc_ctrl_out_start,
              ctrl_in_valid => ldpc_ctrl_out_valid,
              SI => scrambler_init,  -- ufix1 [4]
              data_out => p_scrambler_out1,
              ctrl_out_valid => p_scrambler_out2_valid
              );

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= last_frame;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Logical_Operator5_out1 <= new_frame OR Delay4_out1;

  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Unit_Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay1_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  
  Switch1_out1 <= Unit_Delay1_out1 WHEN Logical_Operator5_out1 = '0' ELSE
      new_frame;

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_valid <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_valid <= ldpc_ctrl_in_valid;
      END IF;
    END IF;
  END PROCESS c_process;


  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_end <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_end <= ldpc_ctrl_in_end;
      END IF;
    END IF;
  END PROCESS c_1_process;


  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1_start <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1_start <= ldpc_ctrl_in_start;
      END IF;
    END IF;
  END PROCESS c_2_process;


  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= reduced_ldpc_rx_out3;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Logical_Operator1_out1 <= Switch1_out1 AND Delay_out1;

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay3_out1 <= ready_1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  AND_out1 <= Delay3_out1 AND valid_in;

  ldpc_in_signed <= signed(ldpc_in);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_signed(16#0#, 4);
      ELSIF enb = '1' THEN
        Delay2_out1 <= ldpc_in_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  valid <= p_scrambler_out2_valid;

  Deserializer1D_contl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_contl_cnt <= to_unsigned(16#0#, 4);
        Deserializer1D_contl_cntGlobal <= to_unsigned(16#0#, 4);
        Deserializer1D_contl_cntInnerRegCtrol <= to_unsigned(16#8#, 4);
      ELSIF enb = '1' THEN
        Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt_next;
        Deserializer1D_contl_cntGlobal <= Deserializer1D_contl_cntGlobal_next;
        Deserializer1D_contl_cntInnerRegCtrol <= Deserializer1D_contl_cntInnerRegCtrol_next;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_contl_output : PROCESS (Deserializer1D_contl_cnt, Deserializer1D_contl_cntGlobal,
       Deserializer1D_contl_cntInnerRegCtrol, valid)
    VARIABLE out0 : std_logic;
    VARIABLE validOutput : std_logic;
    VARIABLE cntInnerRegCtrol_temp : unsigned(3 DOWNTO 0);
  BEGIN
    cntInnerRegCtrol_temp := Deserializer1D_contl_cntInnerRegCtrol;
    Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt;
    Deserializer1D_tapDelayEn <= valid;
    Deserializer1D_hOutSignalsContl <= '0';
    out0 := '0';
    Deserializer1D_innerRegCtrolEn <= '0';
    validOutput := '0';
    IF (valid /= '0') AND (Deserializer1D_contl_cnt = to_unsigned(16#7#, 4)) THEN 
      validOutput := '1';
    END IF;
    IF validOutput = '1' THEN 
      Deserializer1D_hOutSignalsContl <= '1';
      out0 := '1';
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := Deserializer1D_contl_cntGlobal;
    END IF;
    IF ( NOT out0) = '1' AND (Deserializer1D_contl_cntGlobal = cntInnerRegCtrol_temp) THEN 
      Deserializer1D_innerRegCtrolEn <= '1';
      cntInnerRegCtrol_temp := to_unsigned(16#8#, 4);
    END IF;
    IF valid /= '0' THEN 
      IF Deserializer1D_contl_cnt = to_unsigned(16#7#, 4) THEN 
        Deserializer1D_contl_cnt_next <= to_unsigned(16#0#, 4);
      ELSE 
        Deserializer1D_contl_cnt_next <= Deserializer1D_contl_cnt + to_unsigned(16#1#, 4);
      END IF;
    END IF;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#7#, 4) THEN 
      Deserializer1D_contl_cntGlobal_next <= to_unsigned(16#0#, 4);
    ELSE 
      Deserializer1D_contl_cntGlobal_next <= Deserializer1D_contl_cntGlobal + to_unsigned(16#1#, 4);
    END IF;
    Deserializer1D_innerRegEn <= out0;
    IF Deserializer1D_contl_cntGlobal = to_unsigned(16#0#, 4) THEN 
      Deserializer1D_outBypassEn <= '1';
    ELSE 
      Deserializer1D_outBypassEn <= '0';
    END IF;
    Deserializer1D_contl_cntInnerRegCtrol_next <= cntInnerRegCtrol_temp;
  END PROCESS Deserializer1D_contl_output;


  Deserializer1D_tapDelayEn_1 <= enb AND Deserializer1D_tapDelayEn;

  Deserializer1D_tapDelayComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_tapout <= (OTHERS => '0');
      ELSIF enb = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout(6) <= p_scrambler_out1;
        Deserializer1D_tapout(5 DOWNTO 0) <= Deserializer1D_tapout(6 DOWNTO 1);
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  Deserializer1D_muxOut_gen: FOR idx0 IN 0 TO 6 GENERATE
    Deserializer1D_muxOut(idx0) <= Deserializer1D_tapout(idx0);
  END GENERATE;
  Deserializer1D_muxOut(7) <= p_scrambler_out1;

  Deserializer1D_innerRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut <= (OTHERS => '0');
      ELSIF enb = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_deserInnerOut <= Deserializer1D_muxOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_process;


  Deserializer1D_OutRegComp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg <= (OTHERS => '0');
      ELSIF Deserializer1D_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D_OutRegComp_reg <= Deserializer1D_deserInnerOut;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_process;

  
  deserializer_PostProcessed <= Deserializer1D_deserInnerOut WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg;

  Data_Type_Conversion1_out1 <= deserializer_PostProcessed;

  Data_Type_Conversion1_out1_7 <= Data_Type_Conversion1_out1(7);

  Data_Type_Conversion1_out1_6 <= Data_Type_Conversion1_out1(6);

  Data_Type_Conversion1_out1_5 <= Data_Type_Conversion1_out1(5);

  Data_Type_Conversion1_out1_4 <= Data_Type_Conversion1_out1(4);

  Data_Type_Conversion1_out1_3 <= Data_Type_Conversion1_out1(3);

  Data_Type_Conversion1_out1_2 <= Data_Type_Conversion1_out1(2);

  Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1(1);

  Data_Type_Conversion1_out1_0 <= Data_Type_Conversion1_out1(0);

  y <= unsigned'(Data_Type_Conversion1_out1_7 & Data_Type_Conversion1_out1_6 & Data_Type_Conversion1_out1_5 & Data_Type_Conversion1_out1_4 & Data_Type_Conversion1_out1_3 & Data_Type_Conversion1_out1_2 & Data_Type_Conversion1_out1_1 & Data_Type_Conversion1_out1_0);

  data_out <= std_logic_vector(y);

  Deserializer1D_innerRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_deserInnerOut_1 <= '0';
      ELSIF enb = '1' AND Deserializer1D_innerRegCtrolEn = '1' THEN
        Deserializer1D_deserInnerOut_1 <= Deserializer1D_hOutSignalsContl;
      END IF;
    END IF;
  END PROCESS Deserializer1D_innerRegComp_1_process;


  Deserializer1D_OutRegComp_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= '0';
      ELSIF Deserializer1D_outBypassEn = '1' AND enb = '1' THEN
        Deserializer1D_OutRegComp_reg_1 <= Deserializer1D_deserInnerOut_1;
      END IF;
    END IF;
  END PROCESS Deserializer1D_OutRegComp_1_process;

  
  Deserializer1D_out2 <= Deserializer1D_deserInnerOut_1 WHEN Deserializer1D_outBypassEn = '1' ELSE
      Deserializer1D_OutRegComp_reg_1;

  valid_out <= Deserializer1D_out2;

  ready <= ready_1;

END rtl;

