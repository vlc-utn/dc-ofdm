-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_Channel_Estimation.vhd
-- Created: 2024-08-10 11:14:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_Channel_Estimation
-- Source Path: HDLRx/full_rx/rx_demodulator_full/channel_estimation_and_equalization/Channel Estimation
-- Hierarchy Level: 3
-- Model version: 1.14
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_Channel_Estimation IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        data_in_im                        :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        valid_in                          :   IN    std_logic;
        channel_estimate_re               :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        channel_estimate_im               :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        valid_estimate                    :   OUT   std_logic
        );
END full_rx_ip_src_Channel_Estimation;


ARCHITECTURE rtl OF full_rx_ip_src_Channel_Estimation IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_rising_edge_detector_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;
          Out_rsvd                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_src_OFDM_Channel_Estimator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          In1_re                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          In1_im                          :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          In2                             :   IN    std_logic;
          In3_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          In3_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          In4                             :   IN    std_logic;
          numSCPS                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1_re                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          Out1_im                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          Out2                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_rising_edge_detector_block
    USE ENTITY work.full_rx_ip_src_rising_edge_detector_block(rtl);

  FOR ALL : full_rx_ip_src_OFDM_Channel_Estimator
    USE ENTITY work.full_rx_ip_src_OFDM_Channel_Estimator(rtl);

  -- Signals
  SIGNAL data_in_re_1                     : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL data_in_im_1                     : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL data_in_re_2                     : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL data_in_im_2                     : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay4_reg_re                    : vector_of_signed24(0 TO 1);  -- sfix24_En12 [2]
  SIGNAL Delay4_reg_im                    : vector_of_signed24(0 TO 1);  -- sfix24_En12 [2]
  SIGNAL Delay4_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay4_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Delay1_out1_1                    : std_logic;
  SIGNAL Delay1_out1_2                    : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL rising_edge_detector_out1        : std_logic;
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_reset                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter_out1_1               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Direct_Lookup_Table_n_D_out1_re  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Direct_Lookup_Table_n_D_out1_im  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Direct_Lookup_Table_n_D_out1_re_1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En12
  SIGNAL Direct_Lookup_Table_n_D_out1_im_1 : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En12
  SIGNAL Direct_Lookup_Table_n_D_out1_re_2 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Direct_Lookup_Table_n_D_out1_im_2 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_bypass_reg_re             : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_bypass_reg_im             : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay7_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL OFDM_Channel_Estimator1_bypass_reg : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_1                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL OFDM_Channel_Estimator_out1_re   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL OFDM_Channel_Estimator_out1_im   : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL OFDM_Channel_Estimator_out2      : std_logic;

BEGIN
  -- Reference signal sub carriers are stored in LUT.

  u_rising_edge_detector : full_rx_ip_src_rising_edge_detector_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In_rsvd => valid_in,
              Out_rsvd => rising_edge_detector_out1
              );

  u_OFDM_Channel_Estimator : full_rx_ip_src_OFDM_Channel_Estimator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              In1_re => std_logic_vector(Delay4_out1_re),  -- sfix24_En12
              In1_im => std_logic_vector(Delay4_out1_im),  -- sfix24_En12
              In2 => Delay3_out1,
              In3_re => std_logic_vector(Delay7_out1_re),  -- sfix16_En12
              In3_im => std_logic_vector(Delay7_out1_im),  -- sfix16_En12
              In4 => Delay3_out1,
              numSCPS => std_logic_vector(Constant_out1_1),  -- uint8
              Out1_re => OFDM_Channel_Estimator_out1_re,  -- sfix24_En12
              Out1_im => OFDM_Channel_Estimator_out1_im,  -- sfix24_En12
              Out2 => OFDM_Channel_Estimator_out2
              );

  data_in_re_1 <= signed(data_in_re);

  data_in_im_1 <= signed(data_in_im);

  Delay21_output_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      data_in_re_2 <= to_signed(16#000000#, 24);
      data_in_im_2 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        data_in_re_2 <= data_in_re_1;
        data_in_im_2 <= data_in_im_1;
      END IF;
    END IF;
  END PROCESS Delay21_output_process;


  Delay4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay4_reg_re <= (OTHERS => to_signed(16#000000#, 24));
      Delay4_reg_im <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay4_reg_im(0) <= data_in_im_2;
        Delay4_reg_im(1) <= Delay4_reg_im(0);
        Delay4_reg_re(0) <= data_in_re_2;
        Delay4_reg_re(1) <= Delay4_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(1);
  Delay4_out1_im <= Delay4_reg_im(1);

  Delay1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay1_out1 <= valid_in;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay1_out1_1 <= Delay1_out1;

  Delay31_output_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay1_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        Delay1_out1_2 <= Delay1_out1_1;
      END IF;
    END IF;
  END PROCESS Delay31_output_process;


  Delay3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay3_out1 <= Delay1_out1_2;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 193
  count_step <= to_unsigned(16#01#, 8);

  count_from <= to_unsigned(16#00#, 8);

  count_reset <= to_unsigned(16#00#, 8);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#C1#, 8) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter_out1 WHEN Delay1_out1 = '0' ELSE
      count_value;

  
  count_2 <= count_1 WHEN rising_edge_detector_out1 = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  HDL_Counter_out1_1 <= HDL_Counter_out1;

  Direct_Lookup_Table_n_D_out1_re <= to_signed(-16#1000#, 16);
  Direct_Lookup_Table_n_D_out1_im <= to_signed(16#0000#, 16);

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Direct_Lookup_Table_n_D_out1_re_1 <= Direct_Lookup_Table_n_D_out1_re;
        Direct_Lookup_Table_n_D_out1_im_1 <= Direct_Lookup_Table_n_D_out1_im;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  crp_out_delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Direct_Lookup_Table_n_D_out1_re_2 <= to_signed(16#0000#, 16);
      Direct_Lookup_Table_n_D_out1_im_2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Direct_Lookup_Table_n_D_out1_re_2 <= Direct_Lookup_Table_n_D_out1_re_1;
        Direct_Lookup_Table_n_D_out1_im_2 <= Direct_Lookup_Table_n_D_out1_im_1;
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay7_bypass_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay7_bypass_reg_re <= to_signed(16#0000#, 16);
      Delay7_bypass_reg_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        Delay7_bypass_reg_im <= Direct_Lookup_Table_n_D_out1_im_2;
        Delay7_bypass_reg_re <= Direct_Lookup_Table_n_D_out1_re_2;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;

  
  Delay7_out1_re <= Direct_Lookup_Table_n_D_out1_re_2 WHEN enb_1_2_1 = '1' ELSE
      Delay7_bypass_reg_re;
  
  Delay7_out1_im <= Direct_Lookup_Table_n_D_out1_im_2 WHEN enb_1_2_1 = '1' ELSE
      Delay7_bypass_reg_im;

  Constant_out1 <= to_unsigned(16#C2#, 8);

  OFDM_Channel_Estimator1_bypass_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      OFDM_Channel_Estimator1_bypass_reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        OFDM_Channel_Estimator1_bypass_reg <= Constant_out1;
      END IF;
    END IF;
  END PROCESS OFDM_Channel_Estimator1_bypass_process;

  
  Constant_out1_1 <= Constant_out1 WHEN enb_1_2_1 = '1' ELSE
      OFDM_Channel_Estimator1_bypass_reg;

  channel_estimate_re <= OFDM_Channel_Estimator_out1_re;

  channel_estimate_im <= OFDM_Channel_Estimator_out1_im;

  valid_estimate <= OFDM_Channel_Estimator_out2;

END rtl;

