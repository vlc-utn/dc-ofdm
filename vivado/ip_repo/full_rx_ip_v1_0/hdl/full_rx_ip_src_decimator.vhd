-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_decimator.vhd
-- Created: 2024-08-10 11:14:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_decimator
-- Source Path: HDLRx/full_rx/rx_demodulator_full/decimator
-- Hierarchy Level: 2
-- Model version: 1.14
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip_src_decimator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2_1                         :   IN    std_logic;
        data_in_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_in_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        valid_in                          :   IN    std_logic;
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
        );
END full_rx_ip_src_decimator;


ARCHITECTURE rtl OF full_rx_ip_src_decimator IS

  -- Component Declarations
  COMPONENT full_rx_ip_src_FIR_Decimator
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_src_FIR_Decimator
    USE ENTITY work.full_rx_ip_src_FIR_Decimator(rtl);

  -- Signals
  SIGNAL data_in_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_in_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay5_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay3_reg                       : std_logic_vector(107 DOWNTO 0);  -- ufix1 [108]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL data_out_re_1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_im_1                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL valid_out                        : std_logic;
  SIGNAL data_out_re_signed               : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL data_out_im_signed               : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay6_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Switch_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Switch_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Rate_Transition1_out1_re         : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Rate_Transition1_out1_im         : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1_re                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Delay4_out1_im                   : signed(15 DOWNTO 0);  -- sfix16_En12

BEGIN
  -- The data out from this blocks is "valid" one sample, and invalid the next.
  -- This blocks makes sure that the data is valid both cycles.
  -- What happens is that the ZOH might sample the signal when is valid or invalid.

  u_FIR_Decimator : full_rx_ip_src_FIR_Decimator
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => std_logic_vector(Delay5_out1_re),  -- sfix16_En12
              dataIn_im => std_logic_vector(Delay5_out1_im),  -- sfix16_En12
              validIn => Logical_Operator_out1,
              dataOut_re => data_out_re_1,  -- sfix16_En12
              dataOut_im => data_out_im_1,  -- sfix16_En12
              validOut => valid_out
              );

  data_in_re_signed <= signed(data_in_re);

  data_in_im_signed <= signed(data_in_im);

  Delay5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay5_out1_re <= to_signed(16#0000#, 16);
      Delay5_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_re <= data_in_re_signed;
        Delay5_out1_im <= data_in_im_signed;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Delay3_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= valid_in;
        Delay3_reg(107 DOWNTO 1) <= Delay3_reg(106 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(107);

  Logical_Operator_out1 <= valid_in OR Delay3_out1;

  data_out_re_signed <= signed(data_out_re_1);

  data_out_im_signed <= signed(data_out_im_1);

  Delay6_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay6_out1_re <= to_signed(16#0000#, 16);
      Delay6_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1_re <= data_out_re_signed;
        Delay6_out1_im <= data_out_im_signed;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch_out1_re <= Delay6_out1_re WHEN valid_out = '0' ELSE
      data_out_re_signed;
  
  Switch_out1_im <= Delay6_out1_im WHEN valid_out = '0' ELSE
      data_out_im_signed;

  Rate_Transition1_output_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Rate_Transition1_out1_re <= to_signed(16#0000#, 16);
      Rate_Transition1_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        Rate_Transition1_out1_re <= Switch_out1_re;
        Rate_Transition1_out1_im <= Switch_out1_im;
      END IF;
    END IF;
  END PROCESS Rate_Transition1_output_process;


  Delay4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay4_out1_re <= to_signed(16#0000#, 16);
      Delay4_out1_im <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay4_out1_re <= Rate_Transition1_out1_re;
        Delay4_out1_im <= Rate_Transition1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  data_out_re <= std_logic_vector(Delay4_out1_re);

  data_out_im <= std_logic_vector(Delay4_out1_im);

END rtl;

