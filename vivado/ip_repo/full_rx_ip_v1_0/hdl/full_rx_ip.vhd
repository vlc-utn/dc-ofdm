-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip.vhd
-- Created: 2024-10-04 16:57:49
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip
-- Source Path: full_rx_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_rx_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        data_in                           :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        data_out                          :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
        valid_out                         :   OUT   std_logic;  -- ufix1
        reg0                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg1                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg2                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        reg3                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        end_rsvd                          :   OUT   std_logic;  -- ufix1
        err                               :   OUT   std_logic  -- ufix1
        );
END full_rx_ip;


ARCHITECTURE rtl OF full_rx_ip IS

  -- Component Declarations
  COMPONENT full_rx_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_rx_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          data_in                         :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
          ce_out                          :   OUT   std_logic;  -- ufix1
          data_out                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- ufix8
          valid_out                       :   OUT   std_logic;  -- ufix1
          reg0                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg1                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg2                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reg3                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          end_rsvd                        :   OUT   std_logic;  -- ufix1
          err                             :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_rx_ip_reset_sync
    USE ENTITY work.full_rx_ip_reset_sync(rtl);

  FOR ALL : full_rx_ip_dut
    USE ENTITY work.full_rx_ip_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL data_in_unsigned                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL data_in_sig                      : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_sig                     : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL reg0_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg1_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg2_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL reg3_sig                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL end_rsvd_sig                     : std_logic;  -- ufix1
  SIGNAL err_sig                          : std_logic;  -- ufix1

BEGIN
  u_full_rx_ip_reset_sync_inst : full_rx_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_full_rx_ip_dut_inst : full_rx_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              data_in => std_logic_vector(data_in_sig),  -- sfix14_En13
              ce_out => ce_out_sig,  -- ufix1
              data_out => data_out_sig,  -- ufix8
              valid_out => valid_out_sig,  -- ufix1
              reg0 => reg0_sig,  -- ufix32
              reg1 => reg1_sig,  -- ufix32
              reg2 => reg2_sig,  -- ufix32
              reg3 => reg3_sig,  -- ufix32
              end_rsvd => end_rsvd_sig,  -- ufix1
              err => err_sig  -- ufix1
              );

  dut_enable <= '1';

  data_in_unsigned <= unsigned(data_in);

  data_in_sig <= signed(data_in_unsigned);

  reset_cm <=  NOT IPCORE_RESETN;

  data_out <= data_out_sig;

  valid_out <= valid_out_sig;

  reg0 <= reg0_sig;

  reg1 <= reg1_sig;

  reg2 <= reg2_sig;

  reg3 <= reg3_sig;

  end_rsvd <= end_rsvd_sig;

  err <= err_sig;

END rtl;

