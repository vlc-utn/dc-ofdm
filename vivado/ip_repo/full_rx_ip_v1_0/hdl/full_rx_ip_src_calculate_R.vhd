-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLRx/full_rx_ip_src_calculate_R.vhd
-- Created: 2024-08-10 11:14:30
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_rx_ip_src_calculate_R
-- Source Path: HDLRx/full_rx/rx_demodulator_full/ofdm_symbol_sync/m_cox/calculate_R
-- Hierarchy Level: 4
-- Model version: 1.14
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_rx_ip_src_full_rx_pac.ALL;

ENTITY full_rx_ip_src_calculate_R IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        r_d_re                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        r_d_im                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En24
        Rf2                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En24
        );
END full_rx_ip_src_calculate_R;


ARCHITECTURE rtl OF full_rx_ip_src_calculate_R IS

  -- Signals
  SIGNAL r_d_re_signed                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL r_d_im_signed                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product1_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product1_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay12_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product_mul_temp                 : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay11_out1                     : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add1_out1                        : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL alphar_d_2L_2                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay_reg                        : vector_of_signed32(0 TO 2579);  -- sfix32 [2580]
  SIGNAL alphar_d_2                       : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Subtract_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay1_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Add_out1                         : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Divide_by_2_out1                 : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay5_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Product2_mul_temp                : signed(63 DOWNTO 0);  -- sfix64_En48
  SIGNAL Product2_out1                    : signed(31 DOWNTO 0);  -- sfix32_En24
  SIGNAL Delay2_out1                      : signed(31 DOWNTO 0);  -- sfix32_En24

BEGIN
  r_d_re_signed <= signed(r_d_re);

  Product1_mul_temp <= r_d_re_signed * r_d_re_signed;
  Product1_out1 <= Product1_mul_temp(55 DOWNTO 24);

  Delay12_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay12_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay12_out1 <= Product1_out1;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  r_d_im_signed <= signed(r_d_im);

  Product_mul_temp <= r_d_im_signed * r_d_im_signed;
  Product_out1 <= Product_mul_temp(55 DOWNTO 24);

  Delay11_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay11_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay11_out1 <= Product_out1;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  Add1_out1 <= Delay12_out1 + Delay11_out1;

  Delay4_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      alphar_d_2L_2 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        alphar_d_2L_2 <= Add1_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay_reg <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay_reg(0) <= alphar_d_2L_2;
        Delay_reg(1 TO 2579) <= Delay_reg(0 TO 2578);
      END IF;
    END IF;
  END PROCESS Delay_process;

  alphar_d_2 <= Delay_reg(2579);

  Subtract_out1 <= alphar_d_2L_2 - alphar_d_2;

  Add_out1 <= Subtract_out1 + Delay1_out1;

  Delay1_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay1_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay1_out1 <= Add_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Divide_by_2_out1 <= SHIFT_RIGHT(Delay1_out1, 1);

  Delay5_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay5_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay5_out1 <= Divide_by_2_out1;
      END IF;
    END IF;
  END PROCESS Delay5_process;


  Product2_mul_temp <= Delay5_out1 * Delay5_out1;
  Product2_out1 <= Product2_mul_temp(55 DOWNTO 24);

  Delay2_process : PROCESS (clk, reset_x)
  BEGIN
    IF reset_x = '1' THEN
      Delay2_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay2_out1 <= Product2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Rf2 <= std_logic_vector(Delay2_out1);

END rtl;

