-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLDownshifter/downshift_ip_src_digital_carrier_receiver.vhd
-- Created: 2024-09-23 00:12:24
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: downshift_ip_src_digital_carrier_receiver
-- Source Path: HDLDownshifter/downshifter_hdl_wrapper/downshifter/digital_carrier_receiver
-- Hierarchy Level: 2
-- Model version: 1.38
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.downshift_ip_src_downshifter_hdl_wrapper_pac.ALL;

ENTITY downshift_ip_src_digital_carrier_receiver IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En13
        ncoIn_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ncoIn_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_re                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        data_out_im                       :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END downshift_ip_src_digital_carrier_receiver;


ARCHITECTURE rtl OF downshift_ip_src_digital_carrier_receiver IS

  -- Signals
  SIGNAL ncoIn_re_signed                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL ncoIn_im_signed                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay2_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dataIn_signed                    : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Delay1_reg                       : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL Delay1_out1                      : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Product_mul_temp                 : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay_reg                        : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay5_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay5_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Unary_Minus_cast                 : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL Unary_Minus_cast_1               : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL Unary_Minus_out1                 : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Delay3_reg                       : vector_of_signed14(0 TO 1);  -- sfix14 [2]
  SIGNAL Delay3_out1                      : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL Product2_mul_temp                : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL Product2_out1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Delay4_reg                       : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL Delay4_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  ncoIn_re_signed <= signed(ncoIn_re);

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= ncoIn_re_signed;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  dataIn_signed <= signed(dataIn);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        Delay1_reg(0) <= dataIn_signed;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Product_mul_temp <= Delay2_out1 * Delay1_out1;
  Product_out1 <= Product_mul_temp(28 DOWNTO 13);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay_reg(0) <= Product_out1;
        Delay_reg(1) <= Delay_reg(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(1);

  data_out_re <= std_logic_vector(Delay_out1);

  ncoIn_im_signed <= signed(ncoIn_im);

  Delay5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay5_reg(0) <= ncoIn_im_signed;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Unary_Minus_cast <= resize(dataIn_signed, 15);
  Unary_Minus_cast_1 <=  - (Unary_Minus_cast);
  Unary_Minus_out1 <= Unary_Minus_cast_1(13 DOWNTO 0);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_reg <= (OTHERS => to_signed(16#0000#, 14));
      ELSIF enb = '1' THEN
        Delay3_reg(0) <= Unary_Minus_out1;
        Delay3_reg(1) <= Delay3_reg(0);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(1);

  Product2_mul_temp <= Delay5_out1 * Delay3_out1;
  Product2_out1 <= Product2_mul_temp(28 DOWNTO 13);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_reg <= (OTHERS => to_signed(16#0000#, 16));
      ELSIF enb = '1' THEN
        Delay4_reg(0) <= Product2_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  data_out_im <= std_logic_vector(Delay4_out1);

END rtl;

