-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLChannelEstimator/channel_est_ip_dut.vhd
-- Created: 2024-10-02 11:32:01
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: channel_est_ip_dut
-- Source Path: channel_est_ip/channel_est_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY channel_est_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        data_in_r                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_i                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_data                        :   IN    std_logic;  -- ufix1
        valid_channel                     :   IN    std_logic;  -- ufix1
        dont_use_equalizer                :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        data_out_r                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_i                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic;  -- ufix1
        channel_est_out_re                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        channel_est_out_im                :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
        );
END channel_est_ip_dut;


ARCHITECTURE rtl OF channel_est_ip_dut IS

  -- Component Declarations
  COMPONENT channel_est_ip_src_hdl_wrapper
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          data_in_r                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_i                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_data                      :   IN    std_logic;  -- ufix1
          valid_channel                   :   IN    std_logic;  -- ufix1
          dont_use_equalizer              :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          data_out_r                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_i                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic;  -- ufix1
          channel_est_out_re              :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          channel_est_out_im              :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : channel_est_ip_src_hdl_wrapper
    USE ENTITY work.channel_est_ip_src_hdl_wrapper(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL valid_data_sig                   : std_logic;  -- ufix1
  SIGNAL valid_channel_sig                : std_logic;  -- ufix1
  SIGNAL dont_use_equalizer_sig           : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_r_sig                   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_i_sig                   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL channel_est_out_re_sig           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL channel_est_out_im_sig           : std_logic_vector(11 DOWNTO 0);  -- ufix12

BEGIN
  u_channel_est_ip_src_hdl_wrapper : channel_est_ip_src_hdl_wrapper
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset_x => reset_x,
              data_in_r => data_in_r,  -- sfix12_En10
              data_in_i => data_in_i,  -- sfix12_En10
              valid_data => valid_data_sig,  -- ufix1
              valid_channel => valid_channel_sig,  -- ufix1
              dont_use_equalizer => dont_use_equalizer_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              data_out_r => data_out_r_sig,  -- sfix12_En10
              data_out_i => data_out_i_sig,  -- sfix12_En10
              valid_out => valid_out_sig,  -- ufix1
              channel_est_out_re => channel_est_out_re_sig,  -- sfix12_En10
              channel_est_out_im => channel_est_out_im_sig  -- sfix12_En10
              );

  valid_data_sig <= valid_data;

  valid_channel_sig <= valid_channel;

  dont_use_equalizer_sig <= dont_use_equalizer;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  data_out_r <= data_out_r_sig;

  data_out_i <= data_out_i_sig;

  valid_out <= valid_out_sig;

  channel_est_out_re <= channel_est_out_re_sig;

  channel_est_out_im <= channel_est_out_im_sig;

END rtl;

