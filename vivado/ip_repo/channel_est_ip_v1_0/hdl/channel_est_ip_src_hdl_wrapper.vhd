-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLChannelEstimator/channel_est_ip_src_hdl_wrapper.vhd
-- Created: 2024-10-02 11:31:35
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.6e-08
-- Target subsystem base rate: 1.6e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1.6e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- data_out_r                    ce_out        1.6e-08
-- data_out_i                    ce_out        1.6e-08
-- valid_out                     ce_out        1.6e-08
-- channel_est_out_re            ce_out        1.6e-08
-- channel_est_out_im            ce_out        1.6e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: channel_est_ip_src_hdl_wrapper
-- Source Path: HDLChannelEstimator/hdl_wrapper
-- Hierarchy Level: 0
-- Model version: 1.24
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY channel_est_ip_src_hdl_wrapper IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        data_in_r                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_in_i                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_data                        :   IN    std_logic;
        valid_channel                     :   IN    std_logic;
        dont_use_equalizer                :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        data_out_r                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_out_i                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_out                         :   OUT   std_logic;
        channel_est_out_re                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        channel_est_out_im                :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
        );
END channel_est_ip_src_hdl_wrapper;


ARCHITECTURE rtl OF channel_est_ip_src_hdl_wrapper IS

  -- Component Declarations
  COMPONENT channel_est_ip_src_channel_estimation_and_equalization
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in_re                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_im                      :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_data                      :   IN    std_logic;
          valid_channel                   :   IN    std_logic;
          dont_use_equalizer              :   IN    std_logic;
          reset                           :   IN    std_logic;
          data_out_re                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_im                     :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic;
          channel_est_out_re              :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          channel_est_out_im              :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : channel_est_ip_src_channel_estimation_and_equalization
    USE ENTITY work.channel_est_ip_src_channel_estimation_and_equalization(rtl);

  -- Signals
  SIGNAL channel_estimation_and_equalization_out1_re : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL channel_estimation_and_equalization_out1_im : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL channel_estimation_and_equalization_out2 : std_logic;
  SIGNAL channel_estimation_and_equalization_out3_re : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL channel_estimation_and_equalization_out3_im : std_logic_vector(11 DOWNTO 0);  -- ufix12

BEGIN
  u_channel_estimation_and_equalization : channel_est_ip_src_channel_estimation_and_equalization
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              data_in_re => data_in_r,  -- sfix12_En10
              data_in_im => data_in_i,  -- sfix12_En10
              valid_data => valid_data,
              valid_channel => valid_channel,
              dont_use_equalizer => dont_use_equalizer,
              reset => dont_use_equalizer,
              data_out_re => channel_estimation_and_equalization_out1_re,  -- sfix12_En10
              data_out_im => channel_estimation_and_equalization_out1_im,  -- sfix12_En10
              valid_out => channel_estimation_and_equalization_out2,
              channel_est_out_re => channel_estimation_and_equalization_out3_re,  -- sfix12_En10
              channel_est_out_im => channel_estimation_and_equalization_out3_im  -- sfix12_En10
              );

  ce_out <= clk_enable;

  data_out_r <= channel_estimation_and_equalization_out1_re;

  data_out_i <= channel_estimation_and_equalization_out1_im;

  valid_out <= channel_estimation_and_equalization_out2;

  channel_est_out_re <= channel_estimation_and_equalization_out3_re;

  channel_est_out_im <= channel_estimation_and_equalization_out3_im;

END rtl;

