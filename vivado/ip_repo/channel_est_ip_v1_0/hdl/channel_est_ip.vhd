-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLChannelEstimator/channel_est_ip.vhd
-- Created: 2024-10-02 11:32:01
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: channel_est_ip
-- Source Path: channel_est_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY channel_est_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        data_in_r                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        data_in_i                         :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        valid_data                        :   IN    std_logic;  -- ufix1
        valid_channel                     :   IN    std_logic;  -- ufix1
        dont_use_equalizer                :   IN    std_logic;  -- ufix1
        data_out_r                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        data_out_i                        :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        valid_out                         :   OUT   std_logic  -- ufix1
        );
END channel_est_ip;


ARCHITECTURE rtl OF channel_est_ip IS

  -- Component Declarations
  COMPONENT channel_est_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT channel_est_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          data_in_r                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_in_i                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_data                      :   IN    std_logic;  -- ufix1
          valid_channel                   :   IN    std_logic;  -- ufix1
          dont_use_equalizer              :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          data_out_r                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          data_out_i                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          valid_out                       :   OUT   std_logic;  -- ufix1
          channel_est_out_re              :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          channel_est_out_im              :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : channel_est_ip_reset_sync
    USE ENTITY work.channel_est_ip_reset_sync(rtl);

  FOR ALL : channel_est_ip_dut
    USE ENTITY work.channel_est_ip_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL data_in_r_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_in_r_sig                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_in_i_unsigned               : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_in_i_sig                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL data_out_r_sig                   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_i_sig                   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL valid_out_sig                    : std_logic;  -- ufix1
  SIGNAL channel_est_out_re_sig           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL channel_est_out_im_sig           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL data_out_r_sig_signed            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_r_tmp                   : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL data_out_i_sig_signed            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL data_out_i_tmp                   : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  u_channel_est_ip_reset_sync_inst : channel_est_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_channel_est_ip_dut_inst : channel_est_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              data_in_r => std_logic_vector(data_in_r_sig),  -- sfix12_En10
              data_in_i => std_logic_vector(data_in_i_sig),  -- sfix12_En10
              valid_data => valid_data,  -- ufix1
              valid_channel => valid_channel,  -- ufix1
              dont_use_equalizer => dont_use_equalizer,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              data_out_r => data_out_r_sig,  -- sfix12_En10
              data_out_i => data_out_i_sig,  -- sfix12_En10
              valid_out => valid_out_sig,  -- ufix1
              channel_est_out_re => channel_est_out_re_sig,  -- sfix12_En10
              channel_est_out_im => channel_est_out_im_sig  -- sfix12_En10
              );

  dut_enable <= '1';

  data_in_r_unsigned <= unsigned(data_in_r);

  data_in_r_sig <= signed(data_in_r_unsigned(11 DOWNTO 0));

  data_in_i_unsigned <= unsigned(data_in_i);

  data_in_i_sig <= signed(data_in_i_unsigned(11 DOWNTO 0));

  reset_cm <=  NOT IPCORE_RESETN;

  data_out_r_sig_signed <= signed(data_out_r_sig);

  data_out_r_tmp <= unsigned(resize(data_out_r_sig_signed, 16));

  data_out_r <= std_logic_vector(data_out_r_tmp);

  data_out_i_sig_signed <= signed(data_out_i_sig);

  data_out_i_tmp <= unsigned(resize(data_out_i_sig_signed, 16));

  data_out_i <= std_logic_vector(data_out_i_tmp);

  valid_out <= valid_out_sig;

END rtl;

