% FPGADataCapture is a generated class used for FPGA Data Capture. FPGADataCapture
% connects MATLAB with a FPGA and captures the FPGA internal signals via
% JTAG connection.
% 
% dco = FPGADataCapture returns a FPGA Data Capture System object generated by 
% the user. It captures internal signals from an FPGA that contains the FPGA 
% Data Capture HDL IP core, and returns the data to MATLAB over JTAG. 
% 
%  Step method syntax
% [Capture_Window,Trigger_Position,data_out_re,data_out_im,channel_est_out_re,channel_est_out_im]=step(dco) connects to the FPGA, and read data from the FPGA.
% 
% FPGADataCapture methods:
% step - see above description for use of this method
% release - Allow property value and input characteristics changes, and release connection to FPGA board
% clone - Create FPGADataCapture object with same property values
% isLocked - Locked status (logical)
% setNumberofTriggerStages   - Set number of trigger stages
% setTriggerCondition - Set trigger condition for each trigger signal
% setTriggerCombinationOperator - Set trigger combination operator
% setTriggerComparisonOperator - Set trigger comparison operator
% setTriggerTimeout     - Set timeout for each stage
% setDataType - Set signal data type
% displayDataTypes - Display current data type settings
% displayTriggerCondition - Display current trigger condition
% setCaptureCondition - Set capture condition for each trigger signal
% setCaptureConditionCombinationOperator - Set capture condition combination operator
% setCaptureConditionComparisonOperator - Set capture condition comparison operator
% displayCaptureCondition - Display current capture condition
% launchApp - Launch Graphical User Interface (GUI) App for setting data types, triggers, and capture data interactively
% 
% FPGADataCapture properties:
% EnableCaptureCtrl - Enable the capture condition logic
% TimeOut - Time to wait before throwing exception, if trigger condition is not met
% TriggerPosition - The number of samples captured before trigger event
% JTAGCableName - Name of the JTAG cable used for data capture
% JTAGChainPosition - JTAG chain position number of the target FPGA
% IRLengthBefore  - Instruction register lengths before FPGA
% IRLengthAfter   - Instruction register lengths after FPGA
% TckFrequency    - JTAG clock frequency in MHz. 
%
% Created: 01-Oct-2024 17:22:22
% Generated by MATLAB 24.1 and HDL Verifier 24.1

classdef FPGADataCapture< hdlverifier.FPGADataReader

methods
    function obj = FPGADataCapture
        obj.TriggerPosition  =  0;
        obj.NumCaptureWindows  =  1;
        obj.TimeOut          = 10;
        obj.MaxNumTriggerStages  = 1;
        obj.NumTriggerStages  = 1;
        obj.DataCaptureID = 1;
        obj.setDataType('Capture_Window','uint32');
        obj.setDataType('Trigger_Position','boolean');
        obj.setDataType('data_out_re',numerictype(1,16,14));
        obj.setDataType('data_out_im',numerictype(1,16,14));
        obj.setDataType('channel_est_out_re',numerictype(1,16,14));
        obj.setDataType('channel_est_out_im',numerictype(1,16,14));
        setTriggerConditionArray(obj)
    end
end

% !!! Do NOT change any of the constant properties below !!!
properties (Nontunable, Constant)
    % SamplesPerFrame Samples per frame
    SamplesPerFrame = 128
    BitWidth = [32   1  16  16  16  16]
    SignalNames = {'Capture_Window','Trigger_Position','data_out_re','data_out_im','channel_est_out_re','channel_est_out_im'}
    IsSignalTrigger = [0  0  1  1  1  1]
    IsSignalData = [0  0  1  1  1  1]
    IsMetaData = [1  1  0  0  0  0]
    % FPGAVendor FPGA vendor
    FPGAVendor = 'Xilinx'
    Connection = 'JTAG'
    DataCaptureName = 'FPGADataCapture'
    IsConditionalCapture  = false;
    % Version
    Version = '1.2'
    % Timestamp
    TimeStamp = '01-Oct-2024 17:22:22'
end

end
