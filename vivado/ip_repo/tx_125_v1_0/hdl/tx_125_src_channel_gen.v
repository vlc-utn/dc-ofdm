// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_channel_gen.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_channel_gen
// Source Path: HDLTx/full_tx/channel_gen
// Hierarchy Level: 1
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_channel_gen
          (clk,
           reset_x,
           enb_1_2_0,
           new_frame,
           data_out,
           ctrl_out_end,
           ctrl_out_valid);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   new_frame;
  output  data_out;
  output  ctrl_out_end;
  output  ctrl_out_valid;


  wire [8:0] count_step;  // ufix9
  wire [8:0] count_from;  // ufix9
  reg [8:0] HDL_Counter_out1;  // ufix9
  wire [8:0] count;  // ufix9
  wire need_to_wrap;
  wire [8:0] count_value;  // ufix9
  wire HDL_Counter_out2;
  wire Logical_Operator_out1;
  wire range_hit;
  wire Logical_Operator1_out1;
  reg  Unit_Delay_Enabled_Synchronous_out1;
  wire Unit_Delay_Enabled_Synchronous_ectrl;
  wire [8:0] count_1;  // ufix9
  wire Direct_Lookup_Table_n_D_out1;
  reg  Direct_Lookup_Table_n_D_out1_1;
  reg  Delay_out1;
  wire valid_to_ctrl_out1_end;
  wire valid_to_ctrl_out1_valid;

  initial begin
    Direct_Lookup_Table_n_D_out1_1 = 1'b0;
  end

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 387
  assign count_step = 9'b000000001;



  assign count_from = 9'b000000000;



  assign count = HDL_Counter_out1 + count_step;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign Logical_Operator_out1 =  ~ HDL_Counter_out2;



  assign range_hit = HDL_Counter_out1 > 9'b111111110;



  assign need_to_wrap = HDL_Counter_out1 == 9'b110000011;



  assign HDL_Counter_out2 = need_to_wrap | range_hit;



  assign Logical_Operator1_out1 = new_frame | HDL_Counter_out2;



  assign Unit_Delay_Enabled_Synchronous_ectrl = (Logical_Operator1_out1 == 1'b0 ? Unit_Delay_Enabled_Synchronous_out1 :
              Logical_Operator_out1);



  always @(posedge clk)
    begin : Unit_Delay_Enabled_Synchronous_lowered_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Unit_Delay_Enabled_Synchronous_ectrl;
        end
      end
    end



  assign count_1 = (Unit_Delay_Enabled_Synchronous_out1 == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset_x == 1'b1) begin
        HDL_Counter_out1 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  assign Direct_Lookup_Table_n_D_out1 = 1'b1;



  always @(posedge clk)
    begin : PipelineRegister_process
      if (enb_1_2_0) begin
        Direct_Lookup_Table_n_D_out1_1 <= Direct_Lookup_Table_n_D_out1;
      end
    end



  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay_out1 <= Direct_Lookup_Table_n_D_out1_1;
        end
      end
    end



  assign data_out = Delay_out1;

  tx_125_src_valid_to_ctrl u_valid_to_ctrl (.clk(clk),
                                            .reset_x(reset_x),
                                            .enb_1_2_0(enb_1_2_0),
                                            .validIn(Unit_Delay_Enabled_Synchronous_out1),
                                            .ctrlOut_end(valid_to_ctrl_out1_end),
                                            .ctrlOut_valid(valid_to_ctrl_out1_valid)
                                            );

  assign ctrl_out_end = valid_to_ctrl_out1_end;

  assign ctrl_out_valid = valid_to_ctrl_out1_valid;

endmodule  // tx_125_src_channel_gen

