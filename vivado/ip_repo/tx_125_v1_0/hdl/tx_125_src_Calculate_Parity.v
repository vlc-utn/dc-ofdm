// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_Calculate_Parity.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_Calculate_Parity
// Source Path: HDLTx/full_tx/header_full/header_fec/Hc_12H_B14/Calculate Parity
// Hierarchy Level: 4
// Model version: 4.114
// 
// Calculate Parity
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_Calculate_Parity
          (clk,
           reset_x,
           enb,
           reset,
           alpha_0,
           alpha_1,
           alpha_2,
           alpha_3,
           alpha_4,
           alpha_5,
           alpha_6,
           alpha_7,
           alpha_8,
           alpha_9,
           alpha_10,
           alpha_11,
           alpha_12,
           alpha_13,
           alphaValid,
           alphaAddr,
           parity1_0,
           parity1_1,
           parity1_2,
           parity1_3,
           parity1_4,
           parity1_5,
           parity1_6,
           parity1_7,
           parity1_8,
           parity1_9,
           parity1_10,
           parity1_11,
           parity1_12,
           parity1_13,
           parityOut_0,
           parityOut_1,
           parityOut_2,
           parityOut_3,
           parityOut_4,
           parityOut_5,
           parityOut_6,
           parityOut_7,
           parityOut_8,
           parityOut_9,
           parityOut_10,
           parityOut_11,
           parityOut_12,
           parityOut_13,
           parityValid,
           parityAddr);


  input   clk;
  input   reset_x;
  input   enb;
  input   reset;  // ufix1
  input   alpha_0;  // ufix1
  input   alpha_1;  // ufix1
  input   alpha_2;  // ufix1
  input   alpha_3;  // ufix1
  input   alpha_4;  // ufix1
  input   alpha_5;  // ufix1
  input   alpha_6;  // ufix1
  input   alpha_7;  // ufix1
  input   alpha_8;  // ufix1
  input   alpha_9;  // ufix1
  input   alpha_10;  // ufix1
  input   alpha_11;  // ufix1
  input   alpha_12;  // ufix1
  input   alpha_13;  // ufix1
  input   alphaValid;  // ufix1
  input   [3:0] alphaAddr;  // ufix4
  input   parity1_0;  // ufix1
  input   parity1_1;  // ufix1
  input   parity1_2;  // ufix1
  input   parity1_3;  // ufix1
  input   parity1_4;  // ufix1
  input   parity1_5;  // ufix1
  input   parity1_6;  // ufix1
  input   parity1_7;  // ufix1
  input   parity1_8;  // ufix1
  input   parity1_9;  // ufix1
  input   parity1_10;  // ufix1
  input   parity1_11;  // ufix1
  input   parity1_12;  // ufix1
  input   parity1_13;  // ufix1
  output  parityOut_0;  // ufix1
  output  parityOut_1;  // ufix1
  output  parityOut_2;  // ufix1
  output  parityOut_3;  // ufix1
  output  parityOut_4;  // ufix1
  output  parityOut_5;  // ufix1
  output  parityOut_6;  // ufix1
  output  parityOut_7;  // ufix1
  output  parityOut_8;  // ufix1
  output  parityOut_9;  // ufix1
  output  parityOut_10;  // ufix1
  output  parityOut_11;  // ufix1
  output  parityOut_12;  // ufix1
  output  parityOut_13;  // ufix1
  output  parityValid;  // ufix1
  output  [3:0] parityAddr;  // ufix4


  wire [13:0] alpha;  // ufix1 [14]
  reg  [13:0] alphaReg;  // ufix1 [14]
  reg  alphaValidReg;  // ufix1
  reg [3:0] alphaAddrReg;  // ufix4
  wire [13:0] parity1;  // ufix1 [14]
  reg  [13:0] parity1Reg;  // ufix1 [14]
  wire [13:0] sParity;  // ufix1 [14]
  reg  [13:0] sParityReg;  // ufix1 [14]
  reg  [13:0] parityControllerDual_pOut;  // boolean [14]
  reg  parityControllerDual_pValid;
  reg [3:0] parityControllerDual_pAddr;  // ufix4
  reg  [13:0] parityControllerDual_alphaReg;  // boolean [14]
  reg  [13:0] parityControllerDual_pOut_next;  // boolean [14]
  reg  parityControllerDual_pValid_next;
  reg [3:0] parityControllerDual_pAddr_next;  // ufix4
  reg  [13:0] parityControllerDual_alphaReg_next;  // boolean [14]
  reg  [13:0] pOut;  // ufix1 [14]
  reg  pValid;  // ufix1
  reg [3:0] pAddr;  // ufix4
  reg  [13:0] parityOut;  // ufix1 [14]
  reg  parityValid_1;  // ufix1
  reg [3:0] parityAddr_1;  // ufix4
  reg signed [31:0] parityControllerDual_t_0_0;  // int32
  reg signed [31:0] parityControllerDual_t_1;  // int32
  reg signed [31:0] parityControllerDual_t_2_0;  // int32
  reg signed [31:0] parityControllerDual_t_3;  // int32
  reg signed [31:0] parityControllerDual_t_4_0;  // int32
  reg signed [31:0] parityControllerDual_t_5;  // int32
  reg signed [31:0] parityControllerDual_t_6 [0:13];  // int32 [14]
  reg  [13:0] parityControllerDual_t_7;  // boolean [14]
  reg signed [31:0] parityControllerDual_t_8 [0:13];  // int32 [14]
  reg  [13:0] parityControllerDual_t_9;  // boolean [14]
  reg signed [31:0] parityControllerDual_t_10 [0:13];  // int32 [14]
  reg signed [31:0] parityControllerDual_t_11 [0:13];  // int32 [14]


  assign alpha[0] = alpha_0;
  assign alpha[1] = alpha_1;
  assign alpha[2] = alpha_2;
  assign alpha[3] = alpha_3;
  assign alpha[4] = alpha_4;
  assign alpha[5] = alpha_5;
  assign alpha[6] = alpha_6;
  assign alpha[7] = alpha_7;
  assign alpha[8] = alpha_8;
  assign alpha[9] = alpha_9;
  assign alpha[10] = alpha_10;
  assign alpha[11] = alpha_11;
  assign alpha[12] = alpha_12;
  assign alpha[13] = alpha_13;

  always @(posedge clk)
    begin : data_register_process
      if (reset_x == 1'b1) begin
        alphaReg <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          alphaReg <= alpha;
        end
      end
    end



  always @(posedge clk)
    begin : valid_register_process
      if (reset_x == 1'b1) begin
        alphaValidReg <= 1'b0;
      end
      else begin
        if (enb) begin
          alphaValidReg <= alphaValid;
        end
      end
    end



  always @(posedge clk)
    begin : addr_register_process
      if (reset_x == 1'b1) begin
        alphaAddrReg <= 4'b0000;
      end
      else begin
        if (enb) begin
          alphaAddrReg <= alphaAddr;
        end
      end
    end



  assign parity1[0] = parity1_0;
  assign parity1[1] = parity1_1;
  assign parity1[2] = parity1_2;
  assign parity1[3] = parity1_3;
  assign parity1[4] = parity1_4;
  assign parity1[5] = parity1_5;
  assign parity1[6] = parity1_6;
  assign parity1[7] = parity1_7;
  assign parity1[8] = parity1_8;
  assign parity1[9] = parity1_9;
  assign parity1[10] = parity1_10;
  assign parity1[11] = parity1_11;
  assign parity1[12] = parity1_12;
  assign parity1[13] = parity1_13;

  always @(posedge clk)
    begin : parity_process
      if (reset_x == 1'b1) begin
        parity1Reg <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          parity1Reg <= parity1;
        end
      end
    end



  assign sParity[0] = parity1_4;
  assign sParity[1] = parity1_5;
  assign sParity[2] = parity1_6;
  assign sParity[3] = parity1_7;
  assign sParity[4] = parity1_8;
  assign sParity[5] = parity1_9;
  assign sParity[6] = parity1_10;
  assign sParity[7] = parity1_11;
  assign sParity[8] = parity1_12;
  assign sParity[9] = parity1_13;
  assign sParity[10] = parity1_0;
  assign sParity[11] = parity1_1;
  assign sParity[12] = parity1_2;
  assign sParity[13] = parity1_3;

  always @(posedge clk)
    begin : parity_1_process
      if (reset_x == 1'b1) begin
        sParityReg <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          sParityReg <= sParity;
        end
      end
    end



  always @(posedge clk)
    begin : parityControllerDual_process
      if (reset_x == 1'b1) begin
        parityControllerDual_pValid <= 1'b0;
        parityControllerDual_pAddr <= 4'b0001;
        parityControllerDual_pOut <= {14{1'b0}};
        parityControllerDual_alphaReg <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          parityControllerDual_pValid <= parityControllerDual_pValid_next;
          parityControllerDual_pAddr <= parityControllerDual_pAddr_next;
          parityControllerDual_pOut <= parityControllerDual_pOut_next;
          parityControllerDual_alphaReg <= parityControllerDual_alphaReg_next;
        end
      end
    end

  always @* begin
    parityControllerDual_pOut_next = parityControllerDual_pOut;
    if (reset != 1'b0) begin
      parityControllerDual_pOut_next = {14{1'b0}};
      parityControllerDual_pValid_next = 1'b0;
      parityControllerDual_pAddr_next = 4'b0001;
    end
    else if (alphaValidReg != 1'b0) begin
      parityControllerDual_pValid_next = 1'b1;
      parityControllerDual_pAddr_next = alphaAddrReg;
      if (alphaAddrReg == 4'b0001) begin
        for(parityControllerDual_t_0_0 = 32'sd0; parityControllerDual_t_0_0 <= 32'sd13; parityControllerDual_t_0_0 = parityControllerDual_t_0_0 + 32'sd1) begin
          parityControllerDual_pOut_next[parityControllerDual_t_0_0] = parity1Reg[parityControllerDual_t_0_0];
        end
      end
      else if (alphaAddrReg <= 4'b1011) begin
        if (alphaAddrReg == 4'b0010) begin
          for(parityControllerDual_t_5 = 32'sd0; parityControllerDual_t_5 <= 32'sd13; parityControllerDual_t_5 = parityControllerDual_t_5 + 32'sd1) begin
            parityControllerDual_t_9[parityControllerDual_t_5] = sParityReg[parityControllerDual_t_5] != 1'b0;
            parityControllerDual_t_10[parityControllerDual_t_5] = {31'b0, parityControllerDual_t_9[parityControllerDual_t_5]};
            parityControllerDual_t_11[parityControllerDual_t_5] = {31'b0, parityControllerDual_alphaReg[parityControllerDual_t_5]};
            parityControllerDual_pOut_next[parityControllerDual_t_5] = parityControllerDual_t_10[parityControllerDual_t_5] != parityControllerDual_t_11[parityControllerDual_t_5];
          end
        end
        else begin
          for(parityControllerDual_t_4_0 = 32'sd0; parityControllerDual_t_4_0 <= 32'sd13; parityControllerDual_t_4_0 = parityControllerDual_t_4_0 + 32'sd1) begin
            parityControllerDual_pOut_next[parityControllerDual_t_4_0] = parityControllerDual_pOut[parityControllerDual_t_4_0] ^ parityControllerDual_alphaReg[parityControllerDual_t_4_0];
          end
        end
      end
      else if (alphaAddrReg == 4'b1100) begin
        for(parityControllerDual_t_3 = 32'sd0; parityControllerDual_t_3 <= 32'sd13; parityControllerDual_t_3 = parityControllerDual_t_3 + 32'sd1) begin
          parityControllerDual_pOut_next[parityControllerDual_t_3] = (sParityReg[parityControllerDual_t_3] != 1'b0) != (alphaReg[parityControllerDual_t_3] != 1'b0);
        end
      end
      else begin
        for(parityControllerDual_t_2_0 = 32'sd0; parityControllerDual_t_2_0 <= 32'sd13; parityControllerDual_t_2_0 = parityControllerDual_t_2_0 + 32'sd1) begin
          parityControllerDual_t_6[parityControllerDual_t_2_0] = {31'b0, parityControllerDual_pOut[parityControllerDual_t_2_0]};
          parityControllerDual_t_7[parityControllerDual_t_2_0] = alphaReg[parityControllerDual_t_2_0] != 1'b0;
          parityControllerDual_t_8[parityControllerDual_t_2_0] = {31'b0, parityControllerDual_t_7[parityControllerDual_t_2_0]};
          parityControllerDual_pOut_next[parityControllerDual_t_2_0] = parityControllerDual_t_6[parityControllerDual_t_2_0] != parityControllerDual_t_8[parityControllerDual_t_2_0];
        end
      end
    end
    else begin
      parityControllerDual_pOut_next = {14{1'b0}};
      parityControllerDual_pValid_next = 1'b0;
      parityControllerDual_pAddr_next = 4'b0001;
    end

    for(parityControllerDual_t_1 = 32'sd0; parityControllerDual_t_1 <= 32'sd13; parityControllerDual_t_1 = parityControllerDual_t_1 + 32'sd1) begin
      parityControllerDual_alphaReg_next[parityControllerDual_t_1] = alphaReg[parityControllerDual_t_1];
      pOut[parityControllerDual_t_1] = parityControllerDual_pOut[parityControllerDual_t_1];
    end

    pValid = parityControllerDual_pValid;
    pAddr = parityControllerDual_pAddr;
  end



  always @(posedge clk)
    begin : parity_2_process
      if (reset_x == 1'b1) begin
        parityOut <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          parityOut <= pOut;
        end
      end
    end



  assign parityOut_0 = parityOut[0];

  assign parityOut_1 = parityOut[1];

  assign parityOut_2 = parityOut[2];

  assign parityOut_3 = parityOut[3];

  assign parityOut_4 = parityOut[4];

  assign parityOut_5 = parityOut[5];

  assign parityOut_6 = parityOut[6];

  assign parityOut_7 = parityOut[7];

  assign parityOut_8 = parityOut[8];

  assign parityOut_9 = parityOut[9];

  assign parityOut_10 = parityOut[10];

  assign parityOut_11 = parityOut[11];

  assign parityOut_12 = parityOut[12];

  assign parityOut_13 = parityOut[13];

  always @(posedge clk)
    begin : parity_valid_process
      if (reset_x == 1'b1) begin
        parityValid_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          parityValid_1 <= pValid;
        end
      end
    end



  always @(posedge clk)
    begin : parity_addr_process
      if (reset_x == 1'b1) begin
        parityAddr_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          parityAddr_1 <= pAddr;
        end
      end
    end



  assign parityValid = parityValid_1;

  assign parityAddr = parityAddr_1;

endmodule  // tx_125_src_Calculate_Parity

