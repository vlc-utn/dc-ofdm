// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_cp_len_creator.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_cp_len_creator
// Source Path: HDLTx/full_tx/store_frame_in_ram/read_frame_from_ram/cp_len_creator
// Hierarchy Level: 3
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_cp_len_creator
          (clk,
           reset_x,
           enb_1_2_0,
           rd_addr,
           cp_len_in_0,
           cp_len_in_1,
           cp_len_in_2,
           cp_len);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   [15:0] rd_addr;  // uint16
  input   cp_len_in_0;  // boolean
  input   cp_len_in_1;  // boolean
  input   cp_len_in_2;  // boolean
  output  [7:0] cp_len;  // uint8


  wire Compare_To_Constant_out1;
  wire Compare_To_Constant1_out1;
  wire Compare_To_Constant2_out1;
  wire [1:0] one_hot_coder_out1;  // ufix2
  reg [1:0] Delay_out1;  // ufix2
  wire [7:0] Constant_out1;  // uint8
  wire [7:0] Constant1_out1;  // uint8
  wire [7:0] Constant2_out1;  // uint8
  wire [2:0] cp_len_in;  // boolean [3]
  wire [2:0] Data_Type_Conversion_out1;  // ufix1 [3]
  wire Data_Type_Conversion_out1_2;  // ufix1
  wire Data_Type_Conversion_out1_1;  // ufix1
  wire [3:0] Constant3_out1;  // ufix4
  wire Data_Type_Conversion_out1_0;  // ufix1
  wire [2:0] y;  // ufix3
  wire [6:0] Product_mul_temp;  // ufix7
  wire [7:0] Product_out1;  // uint8
  reg [7:0] Delay1_out1;  // uint8
  wire [7:0] Multiport_Switch_out1;  // uint8


  tx_125_src_Compare_To_Constant_block1 u_Compare_To_Constant (.u(rd_addr),  // uint16
                                                               .y(Compare_To_Constant_out1)
                                                               );

  tx_125_src_Compare_To_Constant1_block u_Compare_To_Constant1 (.u(rd_addr),  // uint16
                                                                .y(Compare_To_Constant1_out1)
                                                                );

  tx_125_src_Compare_To_Constant2_block u_Compare_To_Constant2 (.u(rd_addr),  // uint16
                                                                .y(Compare_To_Constant2_out1)
                                                                );

  tx_125_src_one_hot_coder_block u_one_hot_coder (.preamble(Compare_To_Constant_out1),
                                                  .channel(Compare_To_Constant1_out1),
                                                  .header(Compare_To_Constant2_out1),
                                                  .cp_select(one_hot_coder_out1)  // ufix2
                                                  );

  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= 2'b00;
      end
      else begin
        if (enb_1_2_0) begin
          Delay_out1 <= one_hot_coder_out1;
        end
      end
    end



  assign Constant_out1 = 8'b00000010;



  assign Constant1_out1 = 8'b01000000;



  assign Constant2_out1 = 8'b01000000;



  assign cp_len_in[0] = cp_len_in_0;
  assign cp_len_in[1] = cp_len_in_1;
  assign cp_len_in[2] = cp_len_in_2;

  assign Data_Type_Conversion_out1 = cp_len_in;



  assign Data_Type_Conversion_out1_2 = Data_Type_Conversion_out1[2];

  assign Data_Type_Conversion_out1_1 = Data_Type_Conversion_out1[1];

  assign Constant3_out1 = 4'b1000;



  assign Data_Type_Conversion_out1_0 = Data_Type_Conversion_out1[0];

  assign y = {Data_Type_Conversion_out1_2, Data_Type_Conversion_out1_1, Data_Type_Conversion_out1_0};



  assign Product_mul_temp = Constant3_out1 * y;
  assign Product_out1 = {1'b0, Product_mul_temp};



  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay1_out1 <= Product_out1;
        end
      end
    end



  assign Multiport_Switch_out1 = (Delay_out1 == 2'b00 ? Constant_out1 :
              (Delay_out1 == 2'b01 ? Constant1_out1 :
              (Delay_out1 == 2'b10 ? Constant2_out1 :
              Delay1_out1)));



  assign cp_len = Multiport_Switch_out1;

endmodule  // tx_125_src_cp_len_creator

