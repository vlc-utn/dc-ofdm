// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_read_frame_from_ram.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_read_frame_from_ram
// Source Path: HDLTx/full_tx/store_frame_in_ram/read_frame_from_ram
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_read_frame_from_ram
          (clk,
           reset_x,
           enb_1_2_0,
           start_reading,
           ram_size,
           bits_per_subcarrier,
           cp_len_in_0,
           cp_len_in_1,
           cp_len_in_2,
           Enable,
           rd_addr,
           valid_out,
           bits_per_subcarrier_out,
           init_0,
           init_1,
           init_2,
           init_3,
           init_4,
           init_5,
           init_6,
           init_7,
           init_8,
           init_9,
           init_10,
           init_11,
           init_12,
           new_rsvd,
           cp_len);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   start_reading;
  input   [24:0] ram_size;  // ufix25
  input   [3:0] bits_per_subcarrier;  // ufix4
  input   cp_len_in_0;  // boolean
  input   cp_len_in_1;  // boolean
  input   cp_len_in_2;  // boolean
  input   Enable;
  output  [15:0] rd_addr;  // uint16
  output  valid_out;
  output  [3:0] bits_per_subcarrier_out;  // ufix4
  output  init_0;  // boolean
  output  init_1;  // boolean
  output  init_2;  // boolean
  output  init_3;  // boolean
  output  init_4;  // boolean
  output  init_5;  // boolean
  output  init_6;  // boolean
  output  init_7;  // boolean
  output  init_8;  // boolean
  output  init_9;  // boolean
  output  init_10;  // boolean
  output  init_11;  // boolean
  output  init_12;  // boolean
  output  new_rsvd;
  output  [7:0] cp_len;  // uint8


  wire enb_1_2_0_gated;
  wire [15:0] count_step;  // uint16
  wire [15:0] count_reset;  // uint16
  reg [15:0] rd_addr_1;  // uint16
  wire [15:0] count;  // uint16
  wire Switch1_out1;
  reg  Unit_Delay1_out1;
  wire [24:0] Relational_Operator1_1;  // ufix25
  wire Relational_Operator1_out1;
  wire Logical_Operator5_out1;
  wire [15:0] count_1;  // uint16
  wire [15:0] count_2;  // uint16
  wire valid_frame_out1;
  wire valid_frame_out2;
  wire [3:0] bits_selector_out1;  // ufix4
  wire init_selector_out1_0;
  wire init_selector_out1_1;
  wire init_selector_out1_2;
  wire init_selector_out1_3;
  wire init_selector_out1_4;
  wire init_selector_out1_5;
  wire init_selector_out1_6;
  wire init_selector_out1_7;
  wire init_selector_out1_8;
  wire init_selector_out1_9;
  wire init_selector_out1_10;
  wire init_selector_out1_11;
  wire init_selector_out1_12;
  wire [7:0] cp_len_creator_out1;  // uint8


  assign enb_1_2_0_gated = Enable && enb_1_2_0;

  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  assign count_step = 16'b0000000000000001;



  assign count_reset = 16'b0000000000000000;



  assign count = rd_addr_1 + count_step;



  always @(posedge clk)
    begin : Unit_Delay1_process
      if (reset_x == 1'b1) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated) begin
          Unit_Delay1_out1 <= Switch1_out1;
        end
      end
    end



  assign Relational_Operator1_1 = {9'b0, rd_addr_1};
  assign Relational_Operator1_out1 = ram_size == Relational_Operator1_1;



  assign Logical_Operator5_out1 = start_reading | Relational_Operator1_out1;



  assign Switch1_out1 = (Logical_Operator5_out1 == 1'b0 ? Unit_Delay1_out1 :
              start_reading);



  assign count_1 = (Switch1_out1 == 1'b0 ? rd_addr_1 :
              count);



  assign count_2 = (start_reading == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk)
    begin : HDL_Counter1_process
      if (reset_x == 1'b1) begin
        rd_addr_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated) begin
          rd_addr_1 <= count_2;
        end
      end
    end



  tx_125_src_valid_frame u_valid_frame (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_2_0(enb_1_2_0_gated),
                                        .valid_in(Switch1_out1),
                                        .valid_out(valid_frame_out1),
                                        .new_rsvd(valid_frame_out2)
                                        );

  assign valid_out = valid_frame_out1;

  tx_125_src_bits_selector u_bits_selector (.clk(clk),
                                            .reset_x(reset_x),
                                            .enb_1_2_0(enb_1_2_0_gated),
                                            .rd_addr(rd_addr_1),  // uint16
                                            .bits_per_subcarrier(bits_per_subcarrier),  // ufix4
                                            .bits_per_subcarrier_out(bits_selector_out1)  // ufix4
                                            );

  assign bits_per_subcarrier_out = bits_selector_out1;

  tx_125_src_init_selector u_init_selector (.clk(clk),
                                            .reset_x(reset_x),
                                            .enb_1_2_0(enb_1_2_0_gated),
                                            .rd_addr(rd_addr_1),  // uint16
                                            .init_0(init_selector_out1_0),  // boolean
                                            .init_1(init_selector_out1_1),  // boolean
                                            .init_2(init_selector_out1_2),  // boolean
                                            .init_3(init_selector_out1_3),  // boolean
                                            .init_4(init_selector_out1_4),  // boolean
                                            .init_5(init_selector_out1_5),  // boolean
                                            .init_6(init_selector_out1_6),  // boolean
                                            .init_7(init_selector_out1_7),  // boolean
                                            .init_8(init_selector_out1_8),  // boolean
                                            .init_9(init_selector_out1_9),  // boolean
                                            .init_10(init_selector_out1_10),  // boolean
                                            .init_11(init_selector_out1_11),  // boolean
                                            .init_12(init_selector_out1_12)  // boolean
                                            );

  assign init_0 = init_selector_out1_0;

  assign init_1 = init_selector_out1_1;

  assign init_2 = init_selector_out1_2;

  assign init_3 = init_selector_out1_3;

  assign init_4 = init_selector_out1_4;

  assign init_5 = init_selector_out1_5;

  assign init_6 = init_selector_out1_6;

  assign init_7 = init_selector_out1_7;

  assign init_8 = init_selector_out1_8;

  assign init_9 = init_selector_out1_9;

  assign init_10 = init_selector_out1_10;

  assign init_11 = init_selector_out1_11;

  assign init_12 = init_selector_out1_12;

  assign new_rsvd = valid_frame_out2;

  tx_125_src_cp_len_creator u_cp_len_creator (.clk(clk),
                                              .reset_x(reset_x),
                                              .enb_1_2_0(enb_1_2_0_gated),
                                              .rd_addr(rd_addr_1),  // uint16
                                              .cp_len_in_0(cp_len_in_0),  // boolean
                                              .cp_len_in_1(cp_len_in_1),  // boolean
                                              .cp_len_in_2(cp_len_in_2),  // boolean
                                              .cp_len(cp_len_creator_out1)  // uint8
                                              );

  assign cp_len = cp_len_creator_out1;

  assign rd_addr = rd_addr_1;

endmodule  // tx_125_src_read_frame_from_ram

