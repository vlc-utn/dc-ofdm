// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_CPAddition.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_CPAddition
// Source Path: 
// Hierarchy Level: 4
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_CPAddition
          (clk,
           reset_x,
           enb_1_2_0,
           varargin_1_re,
           varargin_1_im,
           varargin_2,
           varargin_3,
           varargin_4,
           varargout_1_re,
           varargout_1_im,
           varargout_2);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   signed [15:0] varargin_1_re;  // sfix16_En14
  input   signed [15:0] varargin_1_im;  // sfix16_En14
  input   varargin_2;
  input   [9:0] varargin_3;  // ufix10
  input   [9:0] varargin_4;  // ufix10
  output  signed [15:0] varargout_1_re;  // sfix16_En14
  output  signed [15:0] varargout_1_im;  // sfix16_En14
  output  varargout_2;


  reg  obj_CPAdditionObj_validInReg;
  wire [8:0] obj_CPAdditionObj_inCount;  // ufix9
  wire [8:0] tmp;  // ufix9
  reg [8:0] obj_CPAdditionObj_FFTLenInReg;  // ufix9
  wire [8:0] tmp_1;  // ufix9
  reg [8:0] obj_CPAdditionObj_inCount_1;  // ufix9
  wire s;
  reg [8:0] obj_CPAdditionObj_FFTLenMinusVecLen;  // ufix9
  wire [8:0] tmp_2;  // ufix9
  wire [8:0] tmp_3;  // ufix9
  wire [8:0] tmp_4;  // ufix9
  wire a0;
  wire [8:0] tmp_5;  // ufix9
  wire [8:0] tmp_6;  // ufix9
  reg  obj_CPAdditionObj_RAM2WriteSelect;
  wire tmp_7;
  wire tmp_8;
  wire tmp_9;
  wire s_1;
  wire out;
  wire out_1;
  wire tmp_10;
  reg  obj_CPAdditionObj_writeEnbRAM1;
  wire s_2;
  wire out_2;
  wire out_3;
  wire tmp_11;
  reg  obj_CPAdditionObj_writeEnbRAM2;
  wire obj_CPAdditionObj_sym2Done;
  reg [8:0] obj_CPAdditionObj_inCountReg;  // ufix9
  wire a0_1;
  wire obj_CPAdditionObj_sym2Done_1;
  wire obj_CPAdditionObj_startRead2;
  wire obj_CPAdditionObj_startRead2_1;
  wire [8:0] obj_CPAdditionObj_outCount;  // ufix9
  reg [8:0] obj_CPAdditionObj_FFTSampledAtIn;  // ufix9
  wire [8:0] tmp_12;  // ufix9
  wire [8:0] tmp_13;  // ufix9
  wire [8:0] tmp_14;  // ufix9
  reg [8:0] obj_CPAdditionObj_CPLenInReg;  // ufix9
  reg [8:0] obj_CPAdditionObj_CPSampledAtIn;  // ufix9
  wire [8:0] tmp_15;  // ufix9
  wire [8:0] tmp_16;  // ufix9
  wire [8:0] tmp_17;  // ufix9
  wire [8:0] obj_CPAdditionObj_FFTLenPlusCPLenMinusVecLen;  // ufix9
  wire [8:0] obj_CPAdditionObj_outCount_1;  // ufix9
  wire obj_CPAdditionObj_startRead2_2;
  wire obj_CPAdditionObj_sym1Done;
  wire a0_2;
  wire obj_CPAdditionObj_sym1Done_1;
  wire obj_CPAdditionObj_startRead1;
  wire obj_CPAdditionObj_startRead1_1;
  wire obj_CPAdditionObj_startRead1_2;
  wire tmp_18;
  wire tmp_19;
  wire a0_3;
  reg  obj_CPAdditionObj_startRead1_3;
  wire tmp_20;
  wire s_3;
  wire tmp_21;
  wire tmp_22;
  wire tmp_23;
  reg [8:0] obj_CPAdditionObj_outCount_2;  // ufix9
  wire [8:0] tmp_24;  // ufix9
  wire [8:0] tmp_25;  // ufix9
  reg [8:0] tmp_26;  // ufix9
  wire s_4;
  wire [8:0] tmp_27;  // ufix9
  wire [8:0] tmp_28;  // ufix9
  wire a0_4;
  wire [8:0] tmp_29;  // ufix9
  wire s_5;
  wire [8:0] tmp_30;  // ufix9
  wire [8:0] tmp_31;  // ufix9
  reg  obj_CPAdditionObj_startRead2_3;
  wire tmp_32;
  wire tmp_33;
  wire tmp_34;
  wire tmp_35;
  wire tmp_36;
  wire tmp_37;
  reg  obj_CPAdditionObj_sym2Done_2;
  wire tmp_38;
  wire tmp_39;
  wire tmp_40;
  wire tmp_41;
  reg  obj_CPAdditionObj_sym1Done_2;
  wire tmp_42;
  wire tmp_43;
  reg  obj_CPAdditionObj_startRead1Reg;
  reg  obj_CPAdditionObj_startRead2Reg;
  wire tmp_44;
  reg  [1:0] obj_CPAdditionObj_startOutputReg_reg_reg;  // ufix1 [2]
  wire obj_CPAdditionObj_startOutputReg;
  wire obj_CPAdditionObj_sendOutput;
  reg [8:0] obj_CPAdditionObj_outCountReg2_reg_reg [0:1];  // ufix9 [2]
  wire [8:0] obj_CPAdditionObj_outCountReg2_reg_reg_next [0:1];  // ufix9 [2]
  wire [8:0] obj_CPAdditionObj_outCountReg2;  // ufix9
  reg [8:0] obj_CPAdditionObj_outCountReg3;  // ufix9
  reg [8:0] reduced_reg [0:1];  // ufix9 [2]
  wire [8:0] reduced_reg_next [0:1];  // ufix9 [2]
  wire [8:0] tmp_45;  // ufix9
  wire s_6;
  wire obj_CPAdditionObj_hasPrevSymbData;
  reg  obj_CPAdditionObj_startRead1Reg2;
  reg  obj_CPAdditionObj_startRead2Reg2;
  wire s_7;
  wire s_8;
  wire a0_5;
  wire s_9;
  wire s_10;
  wire [8:0] obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen;  // ufix9
  reg [8:0] obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1;  // ufix9
  wire [8:0] tmp_46;  // ufix9
  wire [8:0] tmp_47;  // ufix9
  wire s_11;
  wire obj_CPAdditionObj_storeInitReadAddrRAM1;
  wire s_12;
  wire obj_CPAdditionObj_storeInitReadAddrRAM1_1;
  wire s_13;
  wire s_14;
  wire obj_CPAdditionObj_storeInitReadAddrRAM1_2;
  wire s_15;
  wire obj_CPAdditionObj_storeInitReadAddrRAM1_3;
  wire obj_CPAdditionObj_storeInitReadAddrRAM1_4;
  wire tmp_48;
  wire tmp_49;
  reg  obj_CPAdditionObj_storeInitReadAddrRAM1_5;
  wire tmp_50;
  wire tmp_51;
  wire tmp_52;
  wire tmp_53;
  wire tmp_54;
  wire tmp_55;
  wire tmp_56;
  wire s_16;
  wire tmp_57;
  wire s_17;
  wire s_18;
  wire s_19;
  wire obj_CPAdditionObj_storeInitReadAddrRAM2;
  wire s_20;
  wire obj_CPAdditionObj_storeInitReadAddrRAM2_1;
  wire s_21;
  wire s_22;
  wire obj_CPAdditionObj_storeInitReadAddrRAM2_2;
  wire s_23;
  wire obj_CPAdditionObj_storeInitReadAddrRAM2_3;
  wire obj_CPAdditionObj_storeInitReadAddrRAM2_4;
  wire tmp_58;
  wire tmp_59;
  reg  obj_CPAdditionObj_storeInitReadAddrRAM2_5;
  wire tmp_60;
  wire tmp_61;
  wire tmp_62;
  wire tmp_63;
  wire tmp_64;
  wire tmp_65;
  wire tmp_66;
  wire s_24;
  wire tmp_67;
  wire tmp_68;
  wire tmp_69;
  wire tmp_70;  // ufix1
  wire [9:0] p440tmp_sub_temp;  // ufix10
  wire [9:0] p440tmp_1;  // ufix10
  wire [9:0] p440tmp_2;  // ufix10
  wire [8:0] tmp_71;  // ufix9
  wire tmp_72;  // ufix1
  wire [9:0] p452tmp_sub_temp;  // ufix10
  wire [9:0] p452tmp_1;  // ufix10
  wire [9:0] p452tmp_2;  // ufix10
  wire [8:0] tmp_73;  // ufix9
  wire [8:0] obj_CPAdditionObj_numSamp;  // ufix9
  wire tmp_74;  // ufix1
  wire [9:0] p498tmp_sub_temp;  // ufix10
  wire [9:0] p498tmp_1;  // ufix10
  wire [9:0] p498tmp_2;  // ufix10
  wire [8:0] tmp_75;  // ufix9
  wire tmp_76;  // ufix1
  wire [9:0] p510tmp_sub_temp;  // ufix10
  wire [9:0] p510tmp_1;  // ufix10
  wire [9:0] p510tmp_2;  // ufix10
  wire [8:0] tmp_77;  // ufix9
  wire [8:0] obj_CPAdditionObj_numSamp_1;  // ufix9
  reg [8:0] obj_CPAdditionObj_numSamp_2;  // ufix9
  wire [8:0] tmp_78;  // ufix9
  wire [8:0] tmp_79;  // ufix9
  wire [8:0] tmp_80;  // ufix9
  wire [8:0] tmp_81;  // ufix9
  wire [8:0] tmp_82;  // ufix9
  wire [8:0] tmp_83;  // ufix9
  wire [8:0] tmp_84;  // ufix9
  wire [8:0] tmp_85;  // ufix9
  wire [8:0] tmp_86;  // ufix9
  wire [8:0] tmp_87;  // ufix9
  wire [8:0] tmp_88;  // ufix9
  wire [8:0] tmp_89;  // ufix9
  wire [8:0] tmp_90;  // ufix9
  wire [8:0] tmp_91;  // ufix9
  wire [8:0] tmp_92;  // ufix9
  wire [8:0] tmp_93;  // ufix9
  wire a0_6;
  reg [8:0] obj_CPAdditionObj_numCurrVecSamples;  // ufix9
  wire [8:0] tmp_94;  // ufix9
  wire [8:0] tmp_95;  // ufix9
  wire [8:0] tmp_96;  // ufix9
  wire [8:0] tmp_97;  // ufix9
  wire obj_CPAdditionObj_idxpos;  // ufix1
  wire tmp_98;  // ufix1
  wire [9:0] p437tmp_sub_temp;  // ufix10
  wire [9:0] p437tmp_1;  // ufix10
  wire tmp_99;  // ufix1
  wire [9:0] p449tmp_sub_temp;  // ufix10
  wire [9:0] p449tmp_1;  // ufix10
  wire obj_CPAdditionObj_idxpos2Reg;  // ufix1
  wire tmp_100;  // ufix1
  wire [9:0] p478tmp_sub_temp;  // ufix10
  wire [9:0] p478tmp_1;  // ufix10
  reg  obj_CPAdditionObj_idxpos2Reg_1;  // ufix1
  wire tmp_101;  // ufix1
  wire tmp_102;  // ufix1
  wire tmp_103;  // ufix1
  wire tmp_104;  // ufix1
  wire tmp_105;  // ufix1
  wire tmp_106;  // ufix1
  wire tmp_107;  // ufix1
  wire tmp_108;  // ufix1
  wire tmp_109;  // ufix1
  reg  obj_CPAdditionObj_idxpos2Reg2;  // ufix1
  wire tmp_110;  // ufix1
  wire [9:0] p495tmp_sub_temp;  // ufix10
  wire [9:0] p495tmp_1;  // ufix10
  wire tmp_111;  // ufix1
  wire [9:0] p507tmp_sub_temp;  // ufix10
  wire [9:0] p507tmp_1;  // ufix10
  wire obj_CPAdditionObj_idxpos1Reg;  // ufix1
  wire tmp_112;  // ufix1
  wire [9:0] p536tmp_sub_temp;  // ufix10
  wire [9:0] p536tmp_1;  // ufix10
  reg  obj_CPAdditionObj_idxpos1Reg_1;  // ufix1
  wire tmp_113;  // ufix1
  wire tmp_114;  // ufix1
  wire tmp_115;  // ufix1
  wire tmp_116;  // ufix1
  wire tmp_117;  // ufix1
  wire tmp_118;  // ufix1
  wire tmp_119;  // ufix1
  wire tmp_120;  // ufix1
  reg  obj_CPAdditionObj_idxpos1Reg2;  // ufix1
  wire obj_CPAdditionObj_carryForward;
  wire obj_CPAdditionObj_carryForward_1;
  wire obj_CPAdditionObj_carryForward_2;
  wire obj_CPAdditionObj_carryForward_3;
  wire obj_CPAdditionObj_hasPrevSymbData_1;
  wire obj_CPAdditionObj_hasPrevSymbData_2;
  wire obj_CPAdditionObj_hasPrevSymbData_3;
  wire s_25;
  wire tmp_121;
  wire obj_CPAdditionObj_idxpos_1;
  wire tmp_122;
  reg  obj_CPAdditionObj_idxpos_2;  // ufix1
  wire tmp_123;  // ufix1
  wire [9:0] p405tmp_sub_temp;  // ufix10
  wire [9:0] p405tmp_1;  // ufix10
  wire [8:0] tmp_124;  // ufix9
  wire tmp_125;  // ufix1
  wire [9:0] p404tmp_sub_temp;  // ufix10
  wire [9:0] p404tmp_1;  // ufix10
  wire [8:0] tmp_126;  // ufix9
  wire tmp_127;  // ufix1
  wire tmp_128;  // ufix1
  wire tmp_129;  // ufix1
  reg  obj_CPAdditionObj_prevSymbStartIndex;  // ufix1
  wire tmp_130;  // ufix1
  reg  obj_CPAdditionObj_carryForward_4;
  wire tmp_131;  // ufix1
  wire tmp_132;  // ufix1
  wire tmp_133;  // ufix1
  wire obj_CPAdditionObj_idxpos_3;  // ufix1
  wire [8:0] p370obj_CPAdditionObj_idxpos_1;  // ufix9
  wire tmp_134;  // ufix1
  wire [8:0] tmp_135;  // ufix9
  wire tmp_136;  // ufix1
  wire [9:0] p354tmp_sub_temp;  // ufix10
  wire [9:0] p354tmp_1;  // ufix10
  wire tmp_137;
  wire tmp_138;  // ufix1
  reg  obj_CPAdditionObj_hasPrevSymbData_4;
  wire tmp_139;  // ufix1
  wire tmp_140;  // ufix1
  wire tmp_141;  // ufix1
  wire tmp_142;  // ufix1
  reg [8:0] obj_CPAdditionObj_numPrevVecSamples;  // ufix9
  wire [8:0] tmp_143;  // ufix9
  wire [8:0] tmp_144;  // ufix9
  wire [8:0] tmp_145;  // ufix9
  wire [8:0] tmp_146;  // ufix9
  wire tmp_147;
  wire tmp_148;
  wire tmp_149;
  wire tmp_150;
  wire tmp_151;
  wire tmp_152;
  wire tmp_153;
  wire obj_CPAdditionObj_sendOutput_1;
  wire obj_CPAdditionObj_sendOutput_2;
  wire obj_CPAdditionObj_sendOutput_3;
  wire tmp_154;
  wire tmp_155;
  wire obj_CPAdditionObj_sendOutput_4;
  wire obj_CPAdditionObj_sendOutput_5;
  wire tmp_156;
  wire obj_CPAdditionObj_sendOutput_6;
  wire tmp_157;
  wire tmp_158;
  wire tmp_159;
  reg  obj_CPAdditionObj_sendOutput_7;
  wire signed [15:0] obj_CPAdditionObj_dataOutReg_re;  // sfix16_En14
  wire signed [15:0] obj_CPAdditionObj_dataOutReg_im;  // sfix16_En14
  wire tmp_160;  // ufix1
  wire [9:0] p360tmp_sub_temp;  // ufix10
  wire [9:0] p360tmp_1;  // ufix10
  wire tmp_161;  // ufix1
  wire tmp_162;  // ufix1
  wire [9:0] p362tmp_sub_temp;  // ufix10
  wire [9:0] p362tmp_1;  // ufix10
  wire tmp_163;  // ufix1
  wire tmp_164;  // ufix1
  wire tmp_165;  // ufix1
  wire tmp_166;  // ufix1
  reg  obj_CPAdditionObj_dataVec1Samples;  // ufix1
  wire tmp_167;  // ufix1
  wire s_26;
  wire [9:0] p309_1;  // ufix10
  wire s_27;
  wire s_28;
  reg signed [15:0] obj_CPAdditionObj_dataInReg1_reg_reg_re [0:1];  // sfix16_En14 [2]
  reg signed [15:0] obj_CPAdditionObj_dataInReg1_reg_reg_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] obj_CPAdditionObj_dataInReg1_reg_reg_next_re [0:1];  // sfix16_En14 [2]
  wire signed [15:0] obj_CPAdditionObj_dataInReg1_reg_reg_next_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] obj_CPAdditionObj_dataInReg1_re;  // sfix16_En14
  wire signed [15:0] obj_CPAdditionObj_dataInReg1_im;  // sfix16_En14
  wire [9:0] obj_CPAdditionObj_writeAddrRAM2;  // ufix10
  reg [9:0] obj_CPAdditionObj_writeAddrRAM2_1;  // ufix10
  wire [9:0] tmp_168;  // ufix10
  wire [9:0] tmp_169;  // ufix10
  wire [9:0] tmp_170;  // ufix10
  wire [9:0] tmp_171;  // ufix10
  wire [8:0] tmp_172;  // ufix9
  reg [8:0] obj_CPAdditionObj_FFTLengthAtOutMinusVecLen;  // ufix9
  wire [9:0] obj_CPAdditionObj_readAddrRAM2;  // ufix10
  wire [9:0] obj_CPAdditionObj_readAddrRAM2Reg;  // ufix10
  wire [9:0] obj_CPAdditionObj_readAddrRAM2Reg_1;  // ufix10
  reg [9:0] obj_CPAdditionObj_readAddrRAM2Reg_2;  // ufix10
  wire [9:0] tmp_173;  // ufix10
  wire [9:0] tmp_174;  // ufix10
  wire [9:0] tmp_175;  // ufix10
  wire [9:0] tmp_176;  // ufix10
  wire [9:0] tmp_177;  // ufix10
  wire [9:0] tmp_178;  // ufix10
  wire [9:0] tmp_179;  // ufix10
  wire [9:0] tmp_180;  // ufix10
  wire [9:0] tmp_181;  // ufix10
  wire [9:0] tmp_182;  // ufix10
  wire [9:0] tmp_183;  // ufix10
  reg [9:0] obj_CPAdditionObj_readAddrRAM2_1;  // ufix10
  wire [9:0] tmp_184;  // ufix10
  wire a0_7;
  wire [9:0] p267a0_1;  // ufix10
  wire [9:0] tmp_185;  // ufix10
  wire [9:0] tmp_186;  // ufix10
  wire [9:0] tmp_187;  // ufix10
  wire signed [15:0] varargout_1_re_1;  // sfix16_En14
  wire signed [15:0] varargout_1_im_1;  // sfix16_En14
  wire [9:0] obj_CPAdditionObj_writeAddrRAM1;  // ufix10
  reg [9:0] obj_CPAdditionObj_writeAddrRAM1_1;  // ufix10
  wire [9:0] tmp_188;  // ufix10
  wire [9:0] tmp_189;  // ufix10
  wire [9:0] tmp_190;  // ufix10
  wire [9:0] obj_CPAdditionObj_readAddrRAM1;  // ufix10
  wire [9:0] obj_CPAdditionObj_readAddrRAM1Reg;  // ufix10
  wire [9:0] obj_CPAdditionObj_readAddrRAM1Reg_1;  // ufix10
  reg [9:0] obj_CPAdditionObj_readAddrRAM1Reg_2;  // ufix10
  wire [9:0] tmp_191;  // ufix10
  wire [9:0] tmp_192;  // ufix10
  wire [9:0] tmp_193;  // ufix10
  wire [9:0] tmp_194;  // ufix10
  wire [9:0] tmp_195;  // ufix10
  wire [9:0] tmp_196;  // ufix10
  wire [9:0] tmp_197;  // ufix10
  wire [9:0] tmp_198;  // ufix10
  wire [9:0] tmp_199;  // ufix10
  wire [9:0] tmp_200;  // ufix10
  reg [9:0] obj_CPAdditionObj_readAddrRAM1_1;  // ufix10
  wire [9:0] tmp_201;  // ufix10
  wire a0_8;
  wire [9:0] p271a0_1;  // ufix10
  wire [9:0] tmp_202;  // ufix10
  wire [9:0] tmp_203;  // ufix10
  wire signed [15:0] varargout_1_re_2;  // sfix16_En14
  wire signed [15:0] varargout_1_im_2;  // sfix16_En14
  reg signed [15:0] tmp_re;  // sfix16_En14
  reg signed [15:0] tmp_im;  // sfix16_En14
  wire signed [15:0] tmp_re_1;  // sfix16_En14
  wire signed [15:0] tmp_im_1;  // sfix16_En14
  wire signed [15:0] tmp_re_2;  // sfix16_En14
  wire signed [15:0] tmp_im_2;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataVecReg_re;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataVecReg_im;  // sfix16_En14
  wire signed [15:0] tmp_re_3;  // sfix16_En14
  wire signed [15:0] tmp_im_3;  // sfix16_En14
  wire signed [15:0] tmp_re_4;  // sfix16_En14
  wire signed [15:0] tmp_im_4;  // sfix16_En14
  wire signed [15:0] tmp_re_5;  // sfix16_En14
  wire signed [15:0] tmp_im_5;  // sfix16_En14
  wire signed [15:0] tmp_re_6;  // sfix16_En14
  wire signed [15:0] tmp_im_6;  // sfix16_En14
  wire signed [15:0] tmp_re_7;  // sfix16_En14
  wire signed [15:0] tmp_im_7;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataVec2_re;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataVec2_im;  // sfix16_En14
  wire signed [15:0] tmp_re_8;  // sfix16_En14
  wire signed [15:0] tmp_im_8;  // sfix16_En14
  wire s_29;
  wire [9:0] p357_1;  // ufix10
  wire tmp_204;
  wire [9:0] p359tmp_sub_temp;  // ufix10
  wire p359tmp_cast;  // ufix1
  wire [9:0] p359tmp_1;  // ufix10
  wire [9:0] p359tmp_2;  // ufix10
  wire [9:0] p359tmp_3;  // ufix10
  reg signed [15:0] obj_CPAdditionObj_prevSymb_re;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_prevSymb_im;  // sfix16_En14
  wire signed [15:0] tmp_re_9;  // sfix16_En14
  wire signed [15:0] tmp_im_9;  // sfix16_En14
  wire signed [15:0] tmp_re_10;  // sfix16_En14
  wire signed [15:0] tmp_im_10;  // sfix16_En14
  wire signed [15:0] tmp_re_11;  // sfix16_En14
  wire signed [15:0] tmp_im_11;  // sfix16_En14
  wire signed [15:0] tmp_re_12;  // sfix16_En14
  wire signed [15:0] tmp_im_12;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_prevVecData_re;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_prevVecData_im;  // sfix16_En14
  wire signed [15:0] tmp_re_13;  // sfix16_En14
  wire signed [15:0] tmp_im_13;  // sfix16_En14
  wire signed [15:0] tmp_re_14;  // sfix16_En14
  wire signed [15:0] tmp_im_14;  // sfix16_En14
  wire signed [15:0] tmp_re_15;  // sfix16_En14
  wire signed [15:0] tmp_im_15;  // sfix16_En14
  wire signed [15:0] tmp_re_16;  // sfix16_En14
  wire signed [15:0] tmp_im_16;  // sfix16_En14
  wire signed [15:0] tmp_re_17;  // sfix16_En14
  wire signed [15:0] tmp_im_17;  // sfix16_En14
  wire signed [15:0] tmp_re_18;  // sfix16_En14
  wire signed [15:0] tmp_im_18;  // sfix16_En14
  wire signed [15:0] tmp_re_19;  // sfix16_En14
  wire signed [15:0] tmp_im_19;  // sfix16_En14
  wire signed [15:0] tmp_re_20;  // sfix16_En14
  wire signed [15:0] tmp_im_20;  // sfix16_En14
  wire signed [15:0] tmp_re_21;  // sfix16_En14
  wire signed [15:0] tmp_im_21;  // sfix16_En14
  wire signed [15:0] tmp_re_22;  // sfix16_En14
  wire signed [15:0] tmp_im_22;  // sfix16_En14
  wire signed [15:0] tmp_re_23;  // sfix16_En14
  wire signed [15:0] tmp_im_23;  // sfix16_En14
  wire signed [15:0] tmp_re_24;  // sfix16_En14
  wire signed [15:0] tmp_im_24;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataVec1_re;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataVec1_im;  // sfix16_En14
  wire signed [15:0] tmp_re_25;  // sfix16_En14
  wire signed [15:0] tmp_im_25;  // sfix16_En14
  wire signed [15:0] tmp_re_26;  // sfix16_En14
  wire signed [15:0] tmp_im_26;  // sfix16_En14
  wire signed [15:0] tmp_re_27;  // sfix16_En14
  wire signed [15:0] tmp_im_27;  // sfix16_En14
  reg signed [15:0] obj_CPAdditionObj_dataOut_reg_reg_re [0:1];  // sfix16_En14 [2]
  reg signed [15:0] obj_CPAdditionObj_dataOut_reg_reg_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] obj_CPAdditionObj_dataOut_reg_reg_next_re [0:1];  // sfix16_En14 [2]
  wire signed [15:0] obj_CPAdditionObj_dataOut_reg_reg_next_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] obj_CPAdditionObj_dataOut_re;  // sfix16_En14
  wire signed [15:0] obj_CPAdditionObj_dataOut_im;  // sfix16_En14
  wire obj_CPAdditionObj_validOutReg;
  wire obj_CPAdditionObj_validOutReg_1;
  wire tmp_205;
  reg  [1:0] obj_CPAdditionObj_validOut_reg_reg;  // ufix1 [2]
  wire obj_CPAdditionObj_validOut;
  reg signed [31:0] obj_CPAdditionObj_outCountReg2_reg_t_0_0;  // int32
  reg signed [31:0] obj_CPAdditionObj_outCountReg2_reg_t_1;  // int32
  reg signed [31:0] reduced_t_0_0;  // int32
  reg signed [31:0] reduced_t_1;  // int32
  reg signed [31:0] obj_CPAdditionObj_dataInReg1_reg_t_0_0;  // int32
  reg signed [31:0] obj_CPAdditionObj_dataInReg1_reg_t_1;  // int32
  reg signed [31:0] obj_CPAdditionObj_dataOut_reg_t_0_0;  // int32
  reg signed [31:0] obj_CPAdditionObj_dataOut_reg_t_1;  // int32


  always @(posedge clk)
    begin : obj_CPAdditionObj_validInReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_validInReg <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_validInReg <= varargin_2;
        end
      end
    end



  assign obj_CPAdditionObj_inCount = 9'b000000000;



  assign tmp = varargin_3[8:0];



  always @(posedge clk)
    begin : obj_CPAdditionObj_FFTLenInReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_FFTLenInReg <= 9'b001000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_FFTLenInReg <= tmp;
        end
      end
    end



  assign tmp_1 = obj_CPAdditionObj_FFTLenInReg - 9'b000000001;



  assign s = obj_CPAdditionObj_inCount_1 == 9'b000000000;



  assign tmp_2 = (s == 1'b0 ? obj_CPAdditionObj_FFTLenMinusVecLen :
              tmp_1);



  always @(posedge clk)
    begin : obj_CPAdditionObj_FFTLenMinusVecLen_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_FFTLenMinusVecLen <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_FFTLenMinusVecLen <= tmp_3;
        end
      end
    end



  assign tmp_3 = (obj_CPAdditionObj_validInReg == 1'b0 ? obj_CPAdditionObj_FFTLenMinusVecLen :
              tmp_2);



  assign tmp_4 = obj_CPAdditionObj_inCount_1 + 9'b000000001;



  assign tmp_5 = (a0 == 1'b0 ? tmp_4 :
              obj_CPAdditionObj_inCount);



  assign tmp_6 = (obj_CPAdditionObj_validInReg == 1'b0 ? obj_CPAdditionObj_inCount_1 :
              tmp_5);



  always @(posedge clk)
    begin : obj_CPAdditionObj_inCount_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_inCount_1 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_inCount_1 <= tmp_6;
        end
      end
    end



  assign a0 = obj_CPAdditionObj_inCount_1 == tmp_3;



  assign tmp_7 =  ! obj_CPAdditionObj_RAM2WriteSelect;



  assign tmp_8 = (a0 == 1'b0 ? obj_CPAdditionObj_RAM2WriteSelect :
              tmp_7);



  assign tmp_9 = (obj_CPAdditionObj_validInReg == 1'b0 ? obj_CPAdditionObj_RAM2WriteSelect :
              tmp_8);



  always @(posedge clk)
    begin : obj_CPAdditionObj_RAM2WriteSelect_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_RAM2WriteSelect <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_RAM2WriteSelect <= tmp_9;
        end
      end
    end



  assign s_1 = obj_CPAdditionObj_validInReg && ( ! obj_CPAdditionObj_RAM2WriteSelect);



  assign out = 1'b0;



  assign out_1 = 1'b1;



  assign tmp_10 = (s_1 == 1'b0 ? out :
              out_1);



  always @(posedge clk)
    begin : obj_CPAdditionObj_writeEnbRAM1_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_writeEnbRAM1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_writeEnbRAM1 <= tmp_10;
        end
      end
    end



  assign s_2 = obj_CPAdditionObj_validInReg && obj_CPAdditionObj_RAM2WriteSelect;



  assign out_2 = 1'b0;



  assign out_3 = 1'b1;



  assign tmp_11 = (s_2 == 1'b0 ? out_2 :
              out_3);



  always @(posedge clk)
    begin : obj_CPAdditionObj_writeEnbRAM2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_writeEnbRAM2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_writeEnbRAM2 <= tmp_11;
        end
      end
    end



  assign obj_CPAdditionObj_sym2Done = 1'b0;



  always @(posedge clk)
    begin : obj_CPAdditionObj_inCountReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_inCountReg <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_inCountReg <= obj_CPAdditionObj_inCount_1;
        end
      end
    end



  assign a0_1 = obj_CPAdditionObj_inCountReg == obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_sym2Done_1 = 1'b1;



  assign obj_CPAdditionObj_startRead2 = 1'b1;



  assign obj_CPAdditionObj_startRead2_1 = 1'b0;



  assign obj_CPAdditionObj_outCount = 9'b000000000;



  assign tmp_12 = (s == 1'b0 ? obj_CPAdditionObj_FFTSampledAtIn :
              obj_CPAdditionObj_FFTLenInReg);



  assign tmp_13 = (obj_CPAdditionObj_validInReg == 1'b0 ? obj_CPAdditionObj_FFTSampledAtIn :
              tmp_12);



  always @(posedge clk)
    begin : obj_CPAdditionObj_FFTSampledAtIn_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_FFTSampledAtIn <= 9'b001000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_FFTSampledAtIn <= tmp_13;
        end
      end
    end



  assign tmp_14 = varargin_4[8:0];



  always @(posedge clk)
    begin : obj_CPAdditionObj_CPLenInReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_CPLenInReg <= 9'b000010000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_CPLenInReg <= tmp_14;
        end
      end
    end



  assign tmp_15 = (s == 1'b0 ? obj_CPAdditionObj_CPSampledAtIn :
              obj_CPAdditionObj_CPLenInReg);



  assign tmp_16 = (obj_CPAdditionObj_validInReg == 1'b0 ? obj_CPAdditionObj_CPSampledAtIn :
              tmp_15);



  always @(posedge clk)
    begin : obj_CPAdditionObj_CPSampledAtIn_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_CPSampledAtIn <= 9'b000010000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_CPSampledAtIn <= tmp_16;
        end
      end
    end



  assign tmp_17 = obj_CPAdditionObj_FFTSampledAtIn + obj_CPAdditionObj_CPSampledAtIn;



  assign obj_CPAdditionObj_FFTLenPlusCPLenMinusVecLen = tmp_17 - 9'b000000001;



  assign obj_CPAdditionObj_outCount_1 = 9'b000000000;



  assign obj_CPAdditionObj_startRead2_2 = 1'b0;



  assign obj_CPAdditionObj_sym1Done = 1'b0;



  assign a0_2 = obj_CPAdditionObj_inCountReg == obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_sym1Done_1 = 1'b1;



  assign obj_CPAdditionObj_startRead1 = 1'b0;



  assign obj_CPAdditionObj_startRead1_1 = 1'b1;



  assign obj_CPAdditionObj_startRead1_2 = 1'b0;



  assign tmp_19 = (tmp_18 == 1'b0 ? obj_CPAdditionObj_startRead1_1 :
              obj_CPAdditionObj_startRead1_2);



  assign tmp_20 = (a0_3 == 1'b0 ? obj_CPAdditionObj_startRead1_3 :
              obj_CPAdditionObj_startRead1);



  assign tmp_21 = (s_3 == 1'b0 ? obj_CPAdditionObj_startRead1_3 :
              tmp_20);



  assign tmp_23 = (a0_2 == 1'b0 ? tmp_22 :
              obj_CPAdditionObj_sym1Done_1);



  assign tmp_24 = obj_CPAdditionObj_outCount_2 + 9'b000000001;



  always @(posedge clk)
    begin : reduced_process
      if (reset_x == 1'b1) begin
        tmp_26 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          tmp_26 <= tmp_25;
        end
      end
    end



  assign s_4 = obj_CPAdditionObj_outCount_2 == 9'b000000000;



  assign tmp_25 = (s_4 == 1'b0 ? tmp_26 :
              obj_CPAdditionObj_FFTLenPlusCPLenMinusVecLen);



  assign a0_3 = obj_CPAdditionObj_outCount_2 >= tmp_25;



  assign tmp_27 = (a0_3 == 1'b0 ? tmp_24 :
              obj_CPAdditionObj_outCount_1);



  assign tmp_28 = obj_CPAdditionObj_outCount_2 + 9'b000000001;



  assign tmp_29 = (a0_4 == 1'b0 ? tmp_28 :
              obj_CPAdditionObj_outCount);



  assign tmp_30 = (s_5 == 1'b0 ? obj_CPAdditionObj_outCount_2 :
              tmp_29);



  assign tmp_31 = (s_3 == 1'b0 ? tmp_30 :
              tmp_27);



  always @(posedge clk)
    begin : obj_CPAdditionObj_outCount_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_outCount_2 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_outCount_2 <= tmp_31;
        end
      end
    end



  assign a0_4 = obj_CPAdditionObj_outCount_2 >= tmp_25;



  assign tmp_32 = (a0_4 == 1'b0 ? obj_CPAdditionObj_startRead2_3 :
              obj_CPAdditionObj_startRead2_2);



  assign s_5 = obj_CPAdditionObj_startRead2_3 && ( ! obj_CPAdditionObj_startRead1_3);



  assign tmp_33 = (s_5 == 1'b0 ? obj_CPAdditionObj_startRead2_3 :
              tmp_32);



  assign tmp_35 = (tmp_34 == 1'b0 ? obj_CPAdditionObj_startRead2 :
              obj_CPAdditionObj_startRead2_1);



  assign tmp_37 = (a0_1 == 1'b0 ? tmp_36 :
              obj_CPAdditionObj_sym2Done_1);



  assign tmp_38 = (tmp_34 == 1'b0 ? obj_CPAdditionObj_sym2Done :
              obj_CPAdditionObj_sym2Done_2);



  assign tmp_36 = (obj_CPAdditionObj_sym2Done_2 == 1'b0 ? obj_CPAdditionObj_sym2Done_2 :
              tmp_38);



  assign tmp_39 = (obj_CPAdditionObj_writeEnbRAM2 == 1'b0 ? tmp_36 :
              tmp_37);



  assign tmp_40 = (obj_CPAdditionObj_writeEnbRAM1 == 1'b0 ? tmp_39 :
              tmp_36);



  always @(posedge clk)
    begin : obj_CPAdditionObj_sym2Done_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_sym2Done_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_sym2Done_2 <= tmp_40;
        end
      end
    end



  assign tmp_41 = (obj_CPAdditionObj_sym2Done_2 == 1'b0 ? tmp_18 :
              tmp_35);



  always @(posedge clk)
    begin : obj_CPAdditionObj_startRead2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startRead2_3 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startRead2_3 <= tmp_41;
        end
      end
    end



  assign s_3 = obj_CPAdditionObj_startRead1_3 && ( ! obj_CPAdditionObj_startRead2_3);



  assign tmp_18 = (s_3 == 1'b0 ? tmp_33 :
              obj_CPAdditionObj_startRead2_3);



  assign tmp_42 = (tmp_18 == 1'b0 ? obj_CPAdditionObj_sym1Done :
              obj_CPAdditionObj_sym1Done_2);



  assign tmp_22 = (obj_CPAdditionObj_sym1Done_2 == 1'b0 ? obj_CPAdditionObj_sym1Done_2 :
              tmp_42);



  assign tmp_43 = (obj_CPAdditionObj_writeEnbRAM1 == 1'b0 ? tmp_22 :
              tmp_23);



  always @(posedge clk)
    begin : obj_CPAdditionObj_sym1Done_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_sym1Done_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_sym1Done_2 <= tmp_43;
        end
      end
    end



  assign tmp_34 = (obj_CPAdditionObj_sym1Done_2 == 1'b0 ? tmp_21 :
              tmp_19);



  always @(posedge clk)
    begin : obj_CPAdditionObj_startRead1_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startRead1_3 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startRead1_3 <= tmp_34;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_startRead1Reg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startRead1Reg <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startRead1Reg <= obj_CPAdditionObj_startRead1_3;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_startRead2Reg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startRead2Reg <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startRead2Reg <= obj_CPAdditionObj_startRead2_3;
        end
      end
    end



  assign tmp_44 = obj_CPAdditionObj_startRead1Reg ^ obj_CPAdditionObj_startRead2Reg;



  always @(posedge clk)
    begin : obj_CPAdditionObj_startOutputReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startOutputReg_reg_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startOutputReg_reg_reg[0] <= tmp_44;
          obj_CPAdditionObj_startOutputReg_reg_reg[1] <= obj_CPAdditionObj_startOutputReg_reg_reg[0];
        end
      end
    end

  assign obj_CPAdditionObj_startOutputReg = obj_CPAdditionObj_startOutputReg_reg_reg[1];



  assign obj_CPAdditionObj_sendOutput = 1'b0;



  always @(posedge clk)
    begin : obj_CPAdditionObj_outCountReg2_reg_process
      if (reset_x == 1'b1) begin
        for(obj_CPAdditionObj_outCountReg2_reg_t_1 = 32'sd0; obj_CPAdditionObj_outCountReg2_reg_t_1 <= 32'sd1; obj_CPAdditionObj_outCountReg2_reg_t_1 = obj_CPAdditionObj_outCountReg2_reg_t_1 + 32'sd1) begin
          obj_CPAdditionObj_outCountReg2_reg_reg[obj_CPAdditionObj_outCountReg2_reg_t_1] <= 9'b000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          for(obj_CPAdditionObj_outCountReg2_reg_t_0_0 = 32'sd0; obj_CPAdditionObj_outCountReg2_reg_t_0_0 <= 32'sd1; obj_CPAdditionObj_outCountReg2_reg_t_0_0 = obj_CPAdditionObj_outCountReg2_reg_t_0_0 + 32'sd1) begin
            obj_CPAdditionObj_outCountReg2_reg_reg[obj_CPAdditionObj_outCountReg2_reg_t_0_0] <= obj_CPAdditionObj_outCountReg2_reg_reg_next[obj_CPAdditionObj_outCountReg2_reg_t_0_0];
          end
        end
      end
    end

  assign obj_CPAdditionObj_outCountReg2 = obj_CPAdditionObj_outCountReg2_reg_reg[1];
  assign obj_CPAdditionObj_outCountReg2_reg_reg_next[0] = obj_CPAdditionObj_outCount_2;
  assign obj_CPAdditionObj_outCountReg2_reg_reg_next[1] = obj_CPAdditionObj_outCountReg2_reg_reg[0];



  always @(posedge clk)
    begin : obj_CPAdditionObj_outCountReg3_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_outCountReg3 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_outCountReg3 <= obj_CPAdditionObj_outCountReg2;
        end
      end
    end



  always @(posedge clk)
    begin : reduced_1_process
      if (reset_x == 1'b1) begin
        for(reduced_t_1 = 32'sd0; reduced_t_1 <= 32'sd1; reduced_t_1 = reduced_t_1 + 32'sd1) begin
          reduced_reg[reduced_t_1] <= 9'b000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          for(reduced_t_0_0 = 32'sd0; reduced_t_0_0 <= 32'sd1; reduced_t_0_0 = reduced_t_0_0 + 32'sd1) begin
            reduced_reg[reduced_t_0_0] <= reduced_reg_next[reduced_t_0_0];
          end
        end
      end
    end

  assign tmp_45 = reduced_reg[1];
  assign reduced_reg_next[0] = tmp_26;
  assign reduced_reg_next[1] = reduced_reg[0];



  assign s_6 = obj_CPAdditionObj_outCountReg3 >= tmp_45;



  assign obj_CPAdditionObj_hasPrevSymbData = 1'b0;



  always @(posedge clk)
    begin : obj_CPAdditionObj_startRead1Reg2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startRead1Reg2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startRead1Reg2 <= obj_CPAdditionObj_startRead1Reg;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_startRead2Reg2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_startRead2Reg2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_startRead2Reg2 <= obj_CPAdditionObj_startRead2Reg;
        end
      end
    end



  assign s_7 = obj_CPAdditionObj_startRead1Reg2 && ( ! obj_CPAdditionObj_startRead2Reg2);



  assign s_8 = ( ! obj_CPAdditionObj_startRead1Reg2) && obj_CPAdditionObj_startRead2Reg2;



  assign a0_5 = obj_CPAdditionObj_outCountReg2 == 9'b000000000;



  assign s_9 = obj_CPAdditionObj_CPSampledAtIn <= 9'b000000001;



  assign s_10 = obj_CPAdditionObj_CPSampledAtIn >= obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen = tmp_1 - obj_CPAdditionObj_CPLenInReg;



  assign tmp_46 = (s == 1'b0 ? obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1 :
              obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen);



  assign tmp_47 = (obj_CPAdditionObj_validInReg == 1'b0 ? obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1 :
              tmp_46);



  always @(posedge clk)
    begin : obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1 <= tmp_47;
        end
      end
    end



  assign s_11 = obj_CPAdditionObj_inCountReg > obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1;



  assign obj_CPAdditionObj_storeInitReadAddrRAM1 = 1'b1;



  assign s_12 = obj_CPAdditionObj_inCountReg == 9'b000000000;



  assign obj_CPAdditionObj_storeInitReadAddrRAM1_1 = 1'b1;



  assign s_13 = obj_CPAdditionObj_CPSampledAtIn != 9'b000000000;



  assign s_14 = obj_CPAdditionObj_inCountReg == obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_storeInitReadAddrRAM1_2 = 1'b1;



  assign s_15 = obj_CPAdditionObj_inCountReg == obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_storeInitReadAddrRAM1_3 = 1'b1;



  assign obj_CPAdditionObj_storeInitReadAddrRAM1_4 = 1'b0;



  assign tmp_49 = (a0_2 == 1'b0 ? tmp_48 :
              obj_CPAdditionObj_storeInitReadAddrRAM1_4);



  assign tmp_50 = (s_15 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM1_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM1_3);



  assign tmp_51 = (s_14 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM1_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM1_2);



  assign tmp_52 = (s_13 == 1'b0 ? tmp_51 :
              tmp_50);



  assign tmp_53 = (s_12 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM1_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM1_1);



  assign tmp_54 = (s_11 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM1_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM1);



  assign tmp_55 = (s_10 == 1'b0 ? tmp_54 :
              tmp_53);



  assign tmp_56 = (s_9 == 1'b0 ? tmp_55 :
              tmp_52);



  assign tmp_48 = (s_16 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM1_5 :
              tmp_56);



  assign tmp_57 = (obj_CPAdditionObj_writeEnbRAM1 == 1'b0 ? tmp_48 :
              tmp_49);



  always @(posedge clk)
    begin : obj_CPAdditionObj_storeInitReadAddrRAM1_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_storeInitReadAddrRAM1_5 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_storeInitReadAddrRAM1_5 <= tmp_57;
        end
      end
    end



  assign s_16 = obj_CPAdditionObj_writeEnbRAM1 && ( ! obj_CPAdditionObj_storeInitReadAddrRAM1_5);



  assign s_17 = obj_CPAdditionObj_CPSampledAtIn <= 9'b000000001;



  assign s_18 = obj_CPAdditionObj_CPSampledAtIn >= obj_CPAdditionObj_FFTLenMinusVecLen;



  assign s_19 = obj_CPAdditionObj_inCountReg > obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1;



  assign obj_CPAdditionObj_storeInitReadAddrRAM2 = 1'b1;



  assign s_20 = obj_CPAdditionObj_inCountReg == 9'b000000000;



  assign obj_CPAdditionObj_storeInitReadAddrRAM2_1 = 1'b1;



  assign s_21 = obj_CPAdditionObj_CPSampledAtIn != 9'b000000000;



  assign s_22 = obj_CPAdditionObj_inCountReg == obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_storeInitReadAddrRAM2_2 = 1'b1;



  assign s_23 = obj_CPAdditionObj_inCountReg == obj_CPAdditionObj_FFTLenMinusVecLen;



  assign obj_CPAdditionObj_storeInitReadAddrRAM2_3 = 1'b1;



  assign obj_CPAdditionObj_storeInitReadAddrRAM2_4 = 1'b0;



  assign tmp_59 = (a0_1 == 1'b0 ? tmp_58 :
              obj_CPAdditionObj_storeInitReadAddrRAM2_4);



  assign tmp_60 = (s_23 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM2_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM2_3);



  assign tmp_61 = (s_22 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM2_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM2_2);



  assign tmp_62 = (s_21 == 1'b0 ? tmp_61 :
              tmp_60);



  assign tmp_63 = (s_20 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM2_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM2_1);



  assign tmp_64 = (s_19 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM2_5 :
              obj_CPAdditionObj_storeInitReadAddrRAM2);



  assign tmp_65 = (s_18 == 1'b0 ? tmp_64 :
              tmp_63);



  assign tmp_66 = (s_17 == 1'b0 ? tmp_65 :
              tmp_62);



  assign tmp_67 = (s_24 == 1'b0 ? obj_CPAdditionObj_storeInitReadAddrRAM2_5 :
              tmp_66);



  assign tmp_58 = (s_16 == 1'b0 ? tmp_67 :
              obj_CPAdditionObj_storeInitReadAddrRAM2_5);



  assign tmp_68 = (obj_CPAdditionObj_writeEnbRAM2 == 1'b0 ? tmp_58 :
              tmp_59);



  assign tmp_69 = (obj_CPAdditionObj_writeEnbRAM1 == 1'b0 ? tmp_68 :
              tmp_58);



  always @(posedge clk)
    begin : obj_CPAdditionObj_storeInitReadAddrRAM2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_storeInitReadAddrRAM2_5 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_storeInitReadAddrRAM2_5 <= tmp_69;
        end
      end
    end



  assign s_24 = obj_CPAdditionObj_writeEnbRAM2 && ( ! obj_CPAdditionObj_storeInitReadAddrRAM2_5);



  assign p440tmp_1 = {1'b0, obj_CPAdditionObj_inCountReg};
  assign p440tmp_2 = {1'b0, obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1};
  assign p440tmp_sub_temp = p440tmp_1 - p440tmp_2;
  assign tmp_70 = p440tmp_sub_temp[0];



  assign tmp_71 = {8'b0, tmp_70};



  assign p452tmp_1 = {1'b0, obj_CPAdditionObj_CPSampledAtIn};
  assign p452tmp_2 = {1'b0, obj_CPAdditionObj_FFTLenMinusVecLen};
  assign p452tmp_sub_temp = p452tmp_1 - p452tmp_2;
  assign tmp_72 = p452tmp_sub_temp[0];



  assign tmp_73 = {8'b0, tmp_72};



  assign obj_CPAdditionObj_numSamp = 9'b000000000;



  assign p498tmp_1 = {1'b0, obj_CPAdditionObj_inCountReg};
  assign p498tmp_2 = {1'b0, obj_CPAdditionObj_FFTLenMinusVecLenMinusCPLen_1};
  assign p498tmp_sub_temp = p498tmp_1 - p498tmp_2;
  assign tmp_74 = p498tmp_sub_temp[0];



  assign tmp_75 = {8'b0, tmp_74};



  assign p510tmp_1 = {1'b0, obj_CPAdditionObj_CPSampledAtIn};
  assign p510tmp_2 = {1'b0, obj_CPAdditionObj_FFTLenMinusVecLen};
  assign p510tmp_sub_temp = p510tmp_1 - p510tmp_2;
  assign tmp_76 = p510tmp_sub_temp[0];



  assign tmp_77 = {8'b0, tmp_76};



  assign obj_CPAdditionObj_numSamp_1 = 9'b000000000;



  assign tmp_78 = (s_15 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              obj_CPAdditionObj_CPSampledAtIn);



  assign tmp_79 = (s_14 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              obj_CPAdditionObj_numSamp_1);



  assign tmp_80 = (s_13 == 1'b0 ? tmp_79 :
              tmp_78);



  assign tmp_81 = (s_12 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              tmp_77);



  assign tmp_82 = (s_11 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              tmp_75);



  assign tmp_83 = (s_10 == 1'b0 ? tmp_82 :
              tmp_81);



  assign tmp_84 = (s_9 == 1'b0 ? tmp_83 :
              tmp_80);



  assign tmp_85 = (s_23 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              obj_CPAdditionObj_CPSampledAtIn);



  assign tmp_86 = (s_22 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              obj_CPAdditionObj_numSamp);



  assign tmp_87 = (s_21 == 1'b0 ? tmp_86 :
              tmp_85);



  assign tmp_88 = (s_20 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              tmp_73);



  assign tmp_89 = (s_19 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              tmp_71);



  assign tmp_90 = (s_18 == 1'b0 ? tmp_89 :
              tmp_88);



  assign tmp_91 = (s_17 == 1'b0 ? tmp_90 :
              tmp_87);



  assign tmp_92 = (s_24 == 1'b0 ? obj_CPAdditionObj_numSamp_2 :
              tmp_91);



  assign tmp_93 = (s_16 == 1'b0 ? tmp_92 :
              tmp_84);



  always @(posedge clk)
    begin : obj_CPAdditionObj_numSamp_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_numSamp_2 <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_numSamp_2 <= tmp_93;
        end
      end
    end



  assign a0_6 = obj_CPAdditionObj_outCountReg2 == 9'b000000000;



  assign tmp_94 = (a0_6 == 1'b0 ? obj_CPAdditionObj_numCurrVecSamples :
              obj_CPAdditionObj_numSamp_2);



  assign tmp_95 = (a0_5 == 1'b0 ? obj_CPAdditionObj_numCurrVecSamples :
              obj_CPAdditionObj_numSamp_2);



  assign tmp_96 = (s_8 == 1'b0 ? obj_CPAdditionObj_numCurrVecSamples :
              tmp_95);



  assign tmp_97 = (s_7 == 1'b0 ? tmp_96 :
              tmp_94);



  always @(posedge clk)
    begin : obj_CPAdditionObj_numCurrVecSamples_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_numCurrVecSamples <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_numCurrVecSamples <= tmp_97;
        end
      end
    end



  assign obj_CPAdditionObj_idxpos = 1'b0;



  assign p437tmp_1 = {9'b0, tmp_70};
  assign p437tmp_sub_temp = 10'b0000000001 - p437tmp_1;
  assign tmp_98 = p437tmp_sub_temp[0];



  assign p449tmp_1 = {9'b0, tmp_72};
  assign p449tmp_sub_temp = 10'b0000000001 - p449tmp_1;
  assign tmp_99 = p449tmp_sub_temp[0];



  assign obj_CPAdditionObj_idxpos2Reg = 1'b0;



  assign p478tmp_1 = {1'b0, obj_CPAdditionObj_CPSampledAtIn};
  assign p478tmp_sub_temp = 10'b0000000001 - p478tmp_1;
  assign tmp_100 = p478tmp_sub_temp[0];



  assign tmp_101 = (s_23 == 1'b0 ? obj_CPAdditionObj_idxpos2Reg_1 :
              tmp_100);



  assign tmp_102 = (s_22 == 1'b0 ? obj_CPAdditionObj_idxpos2Reg_1 :
              obj_CPAdditionObj_idxpos2Reg);



  assign tmp_103 = (s_21 == 1'b0 ? tmp_102 :
              tmp_101);



  assign tmp_104 = (s_20 == 1'b0 ? obj_CPAdditionObj_idxpos2Reg_1 :
              tmp_99);



  assign tmp_105 = (s_19 == 1'b0 ? obj_CPAdditionObj_idxpos2Reg_1 :
              tmp_98);



  assign tmp_106 = (s_18 == 1'b0 ? tmp_105 :
              tmp_104);



  assign tmp_107 = (s_17 == 1'b0 ? tmp_106 :
              tmp_103);



  assign tmp_108 = (s_24 == 1'b0 ? obj_CPAdditionObj_idxpos2Reg_1 :
              tmp_107);



  assign tmp_109 = (s_16 == 1'b0 ? tmp_108 :
              obj_CPAdditionObj_idxpos2Reg_1);



  always @(posedge clk)
    begin : obj_CPAdditionObj_idxpos2Reg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_idxpos2Reg_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_idxpos2Reg_1 <= tmp_109;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_idxpos2Reg2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_idxpos2Reg2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_idxpos2Reg2 <= obj_CPAdditionObj_idxpos2Reg_1;
        end
      end
    end



  assign p495tmp_1 = {9'b0, tmp_74};
  assign p495tmp_sub_temp = 10'b0000000001 - p495tmp_1;
  assign tmp_110 = p495tmp_sub_temp[0];



  assign p507tmp_1 = {9'b0, tmp_76};
  assign p507tmp_sub_temp = 10'b0000000001 - p507tmp_1;
  assign tmp_111 = p507tmp_sub_temp[0];



  assign obj_CPAdditionObj_idxpos1Reg = 1'b0;



  assign p536tmp_1 = {1'b0, obj_CPAdditionObj_CPSampledAtIn};
  assign p536tmp_sub_temp = 10'b0000000001 - p536tmp_1;
  assign tmp_112 = p536tmp_sub_temp[0];



  assign tmp_113 = (s_15 == 1'b0 ? obj_CPAdditionObj_idxpos1Reg_1 :
              tmp_112);



  assign tmp_114 = (s_14 == 1'b0 ? obj_CPAdditionObj_idxpos1Reg_1 :
              obj_CPAdditionObj_idxpos1Reg);



  assign tmp_115 = (s_13 == 1'b0 ? tmp_114 :
              tmp_113);



  assign tmp_116 = (s_12 == 1'b0 ? obj_CPAdditionObj_idxpos1Reg_1 :
              tmp_111);



  assign tmp_117 = (s_11 == 1'b0 ? obj_CPAdditionObj_idxpos1Reg_1 :
              tmp_110);



  assign tmp_118 = (s_10 == 1'b0 ? tmp_117 :
              tmp_116);



  assign tmp_119 = (s_9 == 1'b0 ? tmp_118 :
              tmp_115);



  assign tmp_120 = (s_16 == 1'b0 ? obj_CPAdditionObj_idxpos1Reg_1 :
              tmp_119);



  always @(posedge clk)
    begin : obj_CPAdditionObj_idxpos1Reg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_idxpos1Reg_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_idxpos1Reg_1 <= tmp_120;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_idxpos1Reg2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_idxpos1Reg2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_idxpos1Reg2 <= obj_CPAdditionObj_idxpos1Reg_1;
        end
      end
    end



  assign obj_CPAdditionObj_carryForward = 1'b0;



  assign obj_CPAdditionObj_carryForward_1 = 1'b1;



  assign obj_CPAdditionObj_carryForward_2 = 1'b0;



  assign obj_CPAdditionObj_carryForward_3 = 1'b0;



  assign obj_CPAdditionObj_hasPrevSymbData_1 = 1'b1;



  assign obj_CPAdditionObj_hasPrevSymbData_2 = 1'b0;



  assign obj_CPAdditionObj_hasPrevSymbData_3 = 1'b1;



  assign tmp_121 = (s_25 == 1'b0 ? obj_CPAdditionObj_hasPrevSymbData_1 :
              obj_CPAdditionObj_hasPrevSymbData_2);



  assign tmp_122 = (obj_CPAdditionObj_idxpos_1 == 1'b0 ? obj_CPAdditionObj_carryForward_1 :
              obj_CPAdditionObj_carryForward_2);



  assign p405tmp_1 = {9'b0, obj_CPAdditionObj_idxpos_2};
  assign p405tmp_sub_temp = 10'b0000000001 - p405tmp_1;
  assign tmp_123 = p405tmp_sub_temp[0];



  assign tmp_124 = {8'b0, tmp_123};



  assign p404tmp_1 = {9'b0, obj_CPAdditionObj_idxpos_2};
  assign p404tmp_sub_temp = 10'b0000000001 - p404tmp_1;
  assign tmp_125 = p404tmp_sub_temp[0];



  assign tmp_126 = {8'b0, tmp_125};



  assign tmp_128 = (a0_6 == 1'b0 ? tmp_127 :
              obj_CPAdditionObj_idxpos1Reg2);



  assign tmp_129 = (a0_5 == 1'b0 ? tmp_127 :
              obj_CPAdditionObj_idxpos2Reg2);



  assign tmp_130 = (s_25 == 1'b0 ? obj_CPAdditionObj_idxpos_2 :
              obj_CPAdditionObj_prevSymbStartIndex);



  assign tmp_131 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_130 :
              obj_CPAdditionObj_idxpos_2);



  assign tmp_132 = (s_6 == 1'b0 ? obj_CPAdditionObj_prevSymbStartIndex :
              tmp_131);



  assign tmp_133 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_prevSymbStartIndex :
              tmp_132);



  always @(posedge clk)
    begin : obj_CPAdditionObj_prevSymbStartIndex_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_prevSymbStartIndex <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_prevSymbStartIndex <= tmp_133;
        end
      end
    end



  assign obj_CPAdditionObj_idxpos_3 = obj_CPAdditionObj_idxpos_2 ^ obj_CPAdditionObj_prevSymbStartIndex;



  assign p370obj_CPAdditionObj_idxpos_1 = {8'b0, obj_CPAdditionObj_idxpos_3};
  assign obj_CPAdditionObj_idxpos_1 = p370obj_CPAdditionObj_idxpos_1 == 9'b000000001;



  assign tmp_134 = (obj_CPAdditionObj_idxpos_1 == 1'b0 ? obj_CPAdditionObj_idxpos_3 :
              obj_CPAdditionObj_idxpos);



  assign p354tmp_1 = {1'b0, tmp_135};
  assign p354tmp_sub_temp = 10'b0000000001 - p354tmp_1;
  assign tmp_136 = p354tmp_sub_temp[0];



  assign tmp_138 = (tmp_137 == 1'b0 ? tmp_136 :
              tmp_134);



  assign tmp_139 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? obj_CPAdditionObj_idxpos_2 :
              tmp_138);



  assign tmp_140 = (s_6 == 1'b0 ? tmp_139 :
              obj_CPAdditionObj_idxpos_2);



  assign tmp_127 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_idxpos_2 :
              tmp_140);



  assign tmp_141 = (s_8 == 1'b0 ? tmp_127 :
              tmp_129);



  assign tmp_142 = (s_7 == 1'b0 ? tmp_141 :
              tmp_128);



  always @(posedge clk)
    begin : obj_CPAdditionObj_idxpos_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_idxpos_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_idxpos_2 <= tmp_142;
        end
      end
    end



  assign s_25 = obj_CPAdditionObj_idxpos_2 == 1'b0;



  assign tmp_143 = (s_25 == 1'b0 ? tmp_126 :
              obj_CPAdditionObj_numPrevVecSamples);



  assign tmp_144 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_143 :
              tmp_124);



  assign tmp_145 = (s_6 == 1'b0 ? obj_CPAdditionObj_numPrevVecSamples :
              tmp_144);



  assign tmp_146 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_numPrevVecSamples :
              tmp_145);



  always @(posedge clk)
    begin : obj_CPAdditionObj_numPrevVecSamples_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_numPrevVecSamples <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_numPrevVecSamples <= tmp_146;
        end
      end
    end



  assign tmp_135 = obj_CPAdditionObj_numCurrVecSamples + obj_CPAdditionObj_numPrevVecSamples;



  assign tmp_137 = tmp_135 >= 9'b000000001;



  assign tmp_147 = (tmp_137 == 1'b0 ? obj_CPAdditionObj_carryForward :
              tmp_122);



  assign tmp_148 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? obj_CPAdditionObj_carryForward_4 :
              tmp_147);



  assign tmp_149 = (s_6 == 1'b0 ? tmp_148 :
              obj_CPAdditionObj_carryForward_3);



  assign tmp_150 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_carryForward_4 :
              tmp_149);



  always @(posedge clk)
    begin : obj_CPAdditionObj_carryForward_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_carryForward_4 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_carryForward_4 <= tmp_150;
        end
      end
    end



  assign tmp_151 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_121 :
              obj_CPAdditionObj_hasPrevSymbData_3);



  assign tmp_152 = (s_6 == 1'b0 ? obj_CPAdditionObj_hasPrevSymbData :
              tmp_151);



  assign tmp_153 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_hasPrevSymbData_4 :
              tmp_152);



  always @(posedge clk)
    begin : obj_CPAdditionObj_hasPrevSymbData_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_hasPrevSymbData_4 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_hasPrevSymbData_4 <= tmp_153;
        end
      end
    end



  assign obj_CPAdditionObj_sendOutput_1 = 1'b1;



  assign obj_CPAdditionObj_sendOutput_2 = 1'b1;



  assign obj_CPAdditionObj_sendOutput_3 = 1'b1;



  assign tmp_154 = (tmp_137 == 1'b0 ? obj_CPAdditionObj_sendOutput_2 :
              obj_CPAdditionObj_sendOutput_3);



  assign tmp_155 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? obj_CPAdditionObj_sendOutput_1 :
              tmp_154);



  assign obj_CPAdditionObj_sendOutput_4 = 1'b0;



  assign obj_CPAdditionObj_sendOutput_5 = 1'b1;



  assign tmp_156 = (s_25 == 1'b0 ? obj_CPAdditionObj_sendOutput_4 :
              obj_CPAdditionObj_sendOutput_5);



  assign obj_CPAdditionObj_sendOutput_6 = 1'b1;



  assign tmp_157 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_156 :
              obj_CPAdditionObj_sendOutput_6);



  assign tmp_158 = (s_6 == 1'b0 ? tmp_155 :
              tmp_157);



  assign tmp_159 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_sendOutput :
              tmp_158);



  always @(posedge clk)
    begin : obj_CPAdditionObj_sendOutput_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_sendOutput_7 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_sendOutput_7 <= tmp_159;
        end
      end
    end



  assign obj_CPAdditionObj_dataOutReg_re = 16'sb0000000000000000;
  assign obj_CPAdditionObj_dataOutReg_im = 16'sb0000000000000000;



  assign p360tmp_1 = {9'b0, obj_CPAdditionObj_idxpos_2};
  assign p360tmp_sub_temp = 10'b0000000001 - p360tmp_1;
  assign tmp_160 = p360tmp_sub_temp[0];



  assign tmp_161 = tmp_135[0];



  assign p362tmp_1 = {9'b0, obj_CPAdditionObj_prevSymbStartIndex};
  assign p362tmp_sub_temp = 10'b0000000001 - p362tmp_1;
  assign tmp_162 = p362tmp_sub_temp[0];



  assign tmp_163 = (tmp_137 == 1'b0 ? tmp_161 :
              tmp_162);



  assign tmp_164 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? tmp_160 :
              tmp_163);



  assign tmp_165 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_125 :
              tmp_123);



  assign tmp_166 = (s_6 == 1'b0 ? tmp_164 :
              tmp_165);



  assign tmp_167 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_dataVec1Samples :
              tmp_166);



  always @(posedge clk)
    begin : obj_CPAdditionObj_dataVec1Samples_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_dataVec1Samples <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_dataVec1Samples <= tmp_167;
        end
      end
    end



  assign p309_1 = {9'b0, obj_CPAdditionObj_dataVec1Samples};
  assign s_26 = p309_1 > 10'b0000000000;



  assign s_27 = obj_CPAdditionObj_startRead1Reg && ( ! obj_CPAdditionObj_startRead2Reg);



  assign s_28 = ( ! obj_CPAdditionObj_startRead1Reg) && obj_CPAdditionObj_startRead2Reg;



  always @(posedge clk)
    begin : obj_CPAdditionObj_dataInReg1_reg_process
      if (reset_x == 1'b1) begin
        for(obj_CPAdditionObj_dataInReg1_reg_t_1 = 32'sd0; obj_CPAdditionObj_dataInReg1_reg_t_1 <= 32'sd1; obj_CPAdditionObj_dataInReg1_reg_t_1 = obj_CPAdditionObj_dataInReg1_reg_t_1 + 32'sd1) begin
          obj_CPAdditionObj_dataInReg1_reg_reg_re[obj_CPAdditionObj_dataInReg1_reg_t_1] <= 16'sb0000000000000000;
          obj_CPAdditionObj_dataInReg1_reg_reg_im[obj_CPAdditionObj_dataInReg1_reg_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          for(obj_CPAdditionObj_dataInReg1_reg_t_0_0 = 32'sd0; obj_CPAdditionObj_dataInReg1_reg_t_0_0 <= 32'sd1; obj_CPAdditionObj_dataInReg1_reg_t_0_0 = obj_CPAdditionObj_dataInReg1_reg_t_0_0 + 32'sd1) begin
            obj_CPAdditionObj_dataInReg1_reg_reg_re[obj_CPAdditionObj_dataInReg1_reg_t_0_0] <= obj_CPAdditionObj_dataInReg1_reg_reg_next_re[obj_CPAdditionObj_dataInReg1_reg_t_0_0];
            obj_CPAdditionObj_dataInReg1_reg_reg_im[obj_CPAdditionObj_dataInReg1_reg_t_0_0] <= obj_CPAdditionObj_dataInReg1_reg_reg_next_im[obj_CPAdditionObj_dataInReg1_reg_t_0_0];
          end
        end
      end
    end

  assign obj_CPAdditionObj_dataInReg1_re = obj_CPAdditionObj_dataInReg1_reg_reg_re[1];
  assign obj_CPAdditionObj_dataInReg1_im = obj_CPAdditionObj_dataInReg1_reg_reg_im[1];
  assign obj_CPAdditionObj_dataInReg1_reg_reg_next_re[0] = varargin_1_re;
  assign obj_CPAdditionObj_dataInReg1_reg_reg_next_im[0] = varargin_1_im;
  assign obj_CPAdditionObj_dataInReg1_reg_reg_next_re[1] = obj_CPAdditionObj_dataInReg1_reg_reg_re[0];
  assign obj_CPAdditionObj_dataInReg1_reg_reg_next_im[1] = obj_CPAdditionObj_dataInReg1_reg_reg_im[0];



  assign obj_CPAdditionObj_writeAddrRAM2 = 10'b0000000000;



  assign tmp_168 = obj_CPAdditionObj_writeAddrRAM2_1 + 10'b0000000001;



  assign tmp_169 = (a0_1 == 1'b0 ? tmp_168 :
              obj_CPAdditionObj_writeAddrRAM2);



  assign tmp_170 = (obj_CPAdditionObj_writeEnbRAM2 == 1'b0 ? obj_CPAdditionObj_writeAddrRAM2_1 :
              tmp_169);



  assign tmp_171 = (obj_CPAdditionObj_writeEnbRAM1 == 1'b0 ? tmp_170 :
              obj_CPAdditionObj_writeAddrRAM2_1);



  always @(posedge clk)
    begin : obj_CPAdditionObj_writeAddrRAM2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_writeAddrRAM2_1 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_writeAddrRAM2_1 <= tmp_171;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_FFTLengthAtOutMinusVecLen_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_FFTLengthAtOutMinusVecLen <= 9'b000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_FFTLengthAtOutMinusVecLen <= tmp_172;
        end
      end
    end



  assign tmp_172 = (s_4 == 1'b0 ? obj_CPAdditionObj_FFTLengthAtOutMinusVecLen :
              obj_CPAdditionObj_FFTLenMinusVecLen);



  assign obj_CPAdditionObj_readAddrRAM2 = 10'b0000000000;



  assign obj_CPAdditionObj_readAddrRAM2Reg = 10'b0000000000;



  assign obj_CPAdditionObj_readAddrRAM2Reg_1 = 10'b0000000000;



  assign tmp_173 = (s_23 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2Reg_2 :
              obj_CPAdditionObj_writeAddrRAM2_1);



  assign tmp_174 = (s_22 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2Reg_2 :
              obj_CPAdditionObj_readAddrRAM2Reg_1);



  assign tmp_175 = (s_21 == 1'b0 ? tmp_174 :
              tmp_173);



  assign tmp_176 = (s_20 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2Reg_2 :
              obj_CPAdditionObj_readAddrRAM2Reg);



  assign tmp_177 = (s_19 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2Reg_2 :
              obj_CPAdditionObj_writeAddrRAM2_1);



  assign tmp_178 = (s_18 == 1'b0 ? tmp_177 :
              tmp_176);



  assign tmp_179 = (s_17 == 1'b0 ? tmp_178 :
              tmp_175);



  assign tmp_180 = (s_24 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2Reg_2 :
              tmp_179);



  assign tmp_181 = (s_16 == 1'b0 ? tmp_180 :
              obj_CPAdditionObj_readAddrRAM2Reg_2);



  always @(posedge clk)
    begin : obj_CPAdditionObj_readAddrRAM2Reg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_readAddrRAM2Reg_2 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_readAddrRAM2Reg_2 <= tmp_181;
        end
      end
    end



  assign tmp_183 = (tmp_34 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2Reg_2 :
              tmp_182);



  assign tmp_184 = obj_CPAdditionObj_readAddrRAM2_1 + 10'b0000000001;



  assign p267a0_1 = {1'b0, tmp_172};
  assign a0_7 = obj_CPAdditionObj_readAddrRAM2_1 == p267a0_1;



  assign tmp_185 = (a0_7 == 1'b0 ? tmp_184 :
              obj_CPAdditionObj_readAddrRAM2);



  assign tmp_186 = (s_5 == 1'b0 ? obj_CPAdditionObj_readAddrRAM2_1 :
              tmp_185);



  assign tmp_182 = (s_3 == 1'b0 ? tmp_186 :
              obj_CPAdditionObj_readAddrRAM2_1);



  assign tmp_187 = (obj_CPAdditionObj_sym2Done_2 == 1'b0 ? tmp_182 :
              tmp_183);



  always @(posedge clk)
    begin : obj_CPAdditionObj_readAddrRAM2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_readAddrRAM2_1 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_readAddrRAM2_1 <= tmp_187;
        end
      end
    end



  tx_125_src_SimpleDualPortRAM_generic_block #(.AddrWidth(10),
                                               .DataWidth(16)
                                               )
                                             u_simpleDualPortRam (.clk(clk),
                                                                  .enb_1_2_0(enb_1_2_0),
                                                                  .wr_din_re(obj_CPAdditionObj_dataInReg1_re),
                                                                  .wr_din_im(obj_CPAdditionObj_dataInReg1_im),
                                                                  .wr_addr(obj_CPAdditionObj_writeAddrRAM2_1),
                                                                  .wr_en(obj_CPAdditionObj_writeEnbRAM2),
                                                                  .rd_addr(obj_CPAdditionObj_readAddrRAM2_1),
                                                                  .dout_re(varargout_1_re_1),
                                                                  .dout_im(varargout_1_im_1)
                                                                  );

  assign obj_CPAdditionObj_writeAddrRAM1 = 10'b0000000000;



  assign tmp_188 = obj_CPAdditionObj_writeAddrRAM1_1 + 10'b0000000001;



  assign tmp_189 = (a0_2 == 1'b0 ? tmp_188 :
              obj_CPAdditionObj_writeAddrRAM1);



  assign tmp_190 = (obj_CPAdditionObj_writeEnbRAM1 == 1'b0 ? obj_CPAdditionObj_writeAddrRAM1_1 :
              tmp_189);



  always @(posedge clk)
    begin : obj_CPAdditionObj_writeAddrRAM1_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_writeAddrRAM1_1 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_writeAddrRAM1_1 <= tmp_190;
        end
      end
    end



  assign obj_CPAdditionObj_readAddrRAM1 = 10'b0000000000;



  assign obj_CPAdditionObj_readAddrRAM1Reg = 10'b0000000000;



  assign obj_CPAdditionObj_readAddrRAM1Reg_1 = 10'b0000000000;



  assign tmp_191 = (s_15 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1Reg_2 :
              obj_CPAdditionObj_writeAddrRAM1_1);



  assign tmp_192 = (s_14 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1Reg_2 :
              obj_CPAdditionObj_readAddrRAM1Reg_1);



  assign tmp_193 = (s_13 == 1'b0 ? tmp_192 :
              tmp_191);



  assign tmp_194 = (s_12 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1Reg_2 :
              obj_CPAdditionObj_readAddrRAM1Reg);



  assign tmp_195 = (s_11 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1Reg_2 :
              obj_CPAdditionObj_writeAddrRAM1_1);



  assign tmp_196 = (s_10 == 1'b0 ? tmp_195 :
              tmp_194);



  assign tmp_197 = (s_9 == 1'b0 ? tmp_196 :
              tmp_193);



  assign tmp_198 = (s_16 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1Reg_2 :
              tmp_197);



  always @(posedge clk)
    begin : obj_CPAdditionObj_readAddrRAM1Reg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_readAddrRAM1Reg_2 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_readAddrRAM1Reg_2 <= tmp_198;
        end
      end
    end



  assign tmp_200 = (tmp_18 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1Reg_2 :
              tmp_199);



  assign tmp_201 = obj_CPAdditionObj_readAddrRAM1_1 + 10'b0000000001;



  assign p271a0_1 = {1'b0, tmp_172};
  assign a0_8 = obj_CPAdditionObj_readAddrRAM1_1 == p271a0_1;



  assign tmp_202 = (a0_8 == 1'b0 ? tmp_201 :
              obj_CPAdditionObj_readAddrRAM1);



  assign tmp_199 = (s_3 == 1'b0 ? obj_CPAdditionObj_readAddrRAM1_1 :
              tmp_202);



  assign tmp_203 = (obj_CPAdditionObj_sym1Done_2 == 1'b0 ? tmp_199 :
              tmp_200);



  always @(posedge clk)
    begin : obj_CPAdditionObj_readAddrRAM1_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_readAddrRAM1_1 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_readAddrRAM1_1 <= tmp_203;
        end
      end
    end



  tx_125_src_SimpleDualPortRAM_generic_block #(.AddrWidth(10),
                                               .DataWidth(16)
                                               )
                                             u_simpleDualPortRam_1 (.clk(clk),
                                                                    .enb_1_2_0(enb_1_2_0),
                                                                    .wr_din_re(obj_CPAdditionObj_dataInReg1_re),
                                                                    .wr_din_im(obj_CPAdditionObj_dataInReg1_im),
                                                                    .wr_addr(obj_CPAdditionObj_writeAddrRAM1_1),
                                                                    .wr_en(obj_CPAdditionObj_writeEnbRAM1),
                                                                    .rd_addr(obj_CPAdditionObj_readAddrRAM1_1),
                                                                    .dout_re(varargout_1_re_2),
                                                                    .dout_im(varargout_1_im_2)
                                                                    );

  assign tmp_re_1 = (s_28 == 1'b0 ? tmp_re :
              varargout_1_re_1);
  assign tmp_im_1 = (s_28 == 1'b0 ? tmp_im :
              varargout_1_im_1);



  assign tmp_re_2 = (s_27 == 1'b0 ? tmp_re_1 :
              varargout_1_re_2);
  assign tmp_im_2 = (s_27 == 1'b0 ? tmp_im_1 :
              varargout_1_im_2);



  always @(posedge clk)
    begin : reduced_2_process
      if (reset_x == 1'b1) begin
        tmp_re <= 16'sb0000000000000000;
        tmp_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          tmp_re <= tmp_re_2;
          tmp_im <= tmp_im_2;
        end
      end
    end



  always @(posedge clk)
    begin : obj_CPAdditionObj_dataVecReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_dataVecReg_re <= 16'sb0000000000000000;
        obj_CPAdditionObj_dataVecReg_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_dataVecReg_re <= tmp_re;
          obj_CPAdditionObj_dataVecReg_im <= tmp_im;
        end
      end
    end



  assign tmp_re_3 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_re :
              obj_CPAdditionObj_dataVecReg_re);
  assign tmp_im_3 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_im :
              obj_CPAdditionObj_dataVecReg_im);



  assign tmp_re_4 = (tmp_137 == 1'b0 ? tmp_re :
              obj_CPAdditionObj_dataVecReg_re);
  assign tmp_im_4 = (tmp_137 == 1'b0 ? tmp_im :
              obj_CPAdditionObj_dataVecReg_im);



  assign tmp_re_5 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? tmp_re_3 :
              tmp_re_4);
  assign tmp_im_5 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? tmp_im_3 :
              tmp_im_4);



  assign tmp_re_6 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_re :
              obj_CPAdditionObj_dataVecReg_re);
  assign tmp_im_6 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_im :
              obj_CPAdditionObj_dataVecReg_im);



  assign tmp_re_7 = (s_6 == 1'b0 ? tmp_re_5 :
              tmp_re_6);
  assign tmp_im_7 = (s_6 == 1'b0 ? tmp_im_5 :
              tmp_im_6);



  assign tmp_re_8 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_dataVec2_re :
              tmp_re_7);
  assign tmp_im_8 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_dataVec2_im :
              tmp_im_7);



  always @(posedge clk)
    begin : obj_CPAdditionObj_dataVec2_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_dataVec2_re <= 16'sb0000000000000000;
        obj_CPAdditionObj_dataVec2_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_dataVec2_re <= tmp_re_8;
          obj_CPAdditionObj_dataVec2_im <= tmp_im_8;
        end
      end
    end



  assign p357_1 = {9'b0, obj_CPAdditionObj_idxpos_2};
  assign s_29 = p357_1 == 10'b0000000000;



  assign p359tmp_2 = {9'b0, obj_CPAdditionObj_prevSymbStartIndex};
  assign p359tmp_3 = {1'b0, obj_CPAdditionObj_numCurrVecSamples};
  assign p359tmp_sub_temp = p359tmp_2 - p359tmp_3;
  assign p359tmp_cast = p359tmp_sub_temp[0];
  assign p359tmp_1 = {9'b0, p359tmp_cast};
  assign tmp_204 = p359tmp_1 == 10'b0000000000;



  assign tmp_re_9 = (s_25 == 1'b0 ? obj_CPAdditionObj_dataVecReg_re :
              obj_CPAdditionObj_prevSymb_re);
  assign tmp_im_9 = (s_25 == 1'b0 ? obj_CPAdditionObj_dataVecReg_im :
              obj_CPAdditionObj_prevSymb_im);



  assign tmp_re_10 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_re_9 :
              obj_CPAdditionObj_dataVecReg_re);
  assign tmp_im_10 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? tmp_im_9 :
              obj_CPAdditionObj_dataVecReg_im);



  assign tmp_re_11 = (s_6 == 1'b0 ? obj_CPAdditionObj_prevSymb_re :
              tmp_re_10);
  assign tmp_im_11 = (s_6 == 1'b0 ? obj_CPAdditionObj_prevSymb_im :
              tmp_im_10);



  assign tmp_re_12 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_prevSymb_re :
              tmp_re_11);
  assign tmp_im_12 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_prevSymb_im :
              tmp_im_11);



  always @(posedge clk)
    begin : obj_CPAdditionObj_prevSymb_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_prevSymb_re <= 16'sb0000000000000000;
        obj_CPAdditionObj_prevSymb_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_prevSymb_re <= tmp_re_12;
          obj_CPAdditionObj_prevSymb_im <= tmp_im_12;
        end
      end
    end



  assign tmp_re_13 = (obj_CPAdditionObj_idxpos_1 == 1'b0 ? obj_CPAdditionObj_dataVecReg_re :
              obj_CPAdditionObj_prevVecData_re);
  assign tmp_im_13 = (obj_CPAdditionObj_idxpos_1 == 1'b0 ? obj_CPAdditionObj_dataVecReg_im :
              obj_CPAdditionObj_prevVecData_im);



  assign tmp_re_14 = (tmp_204 == 1'b0 ? obj_CPAdditionObj_prevVecData_re :
              obj_CPAdditionObj_prevSymb_re);
  assign tmp_im_14 = (tmp_204 == 1'b0 ? obj_CPAdditionObj_prevVecData_im :
              obj_CPAdditionObj_prevSymb_im);



  assign tmp_re_15 = (s_29 == 1'b0 ? tmp_re_14 :
              obj_CPAdditionObj_dataVecReg_re);
  assign tmp_im_15 = (s_29 == 1'b0 ? tmp_im_14 :
              obj_CPAdditionObj_dataVecReg_im);



  assign tmp_re_16 = (tmp_137 == 1'b0 ? tmp_re_15 :
              tmp_re_13);
  assign tmp_im_16 = (tmp_137 == 1'b0 ? tmp_im_15 :
              tmp_im_13);



  assign tmp_re_17 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? obj_CPAdditionObj_dataVecReg_re :
              tmp_re_16);
  assign tmp_im_17 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? obj_CPAdditionObj_dataVecReg_im :
              tmp_im_16);



  assign tmp_re_18 = (s_6 == 1'b0 ? tmp_re_17 :
              obj_CPAdditionObj_prevVecData_re);
  assign tmp_im_18 = (s_6 == 1'b0 ? tmp_im_17 :
              obj_CPAdditionObj_prevVecData_im);



  assign tmp_re_19 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_prevVecData_re :
              tmp_re_18);
  assign tmp_im_19 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_prevVecData_im :
              tmp_im_18);



  always @(posedge clk)
    begin : obj_CPAdditionObj_prevVecData_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_prevVecData_re <= 16'sb0000000000000000;
        obj_CPAdditionObj_prevVecData_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_prevVecData_re <= tmp_re_19;
          obj_CPAdditionObj_prevVecData_im <= tmp_im_19;
        end
      end
    end



  assign tmp_re_20 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? obj_CPAdditionObj_dataVecReg_re :
              obj_CPAdditionObj_prevVecData_re);
  assign tmp_im_20 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? obj_CPAdditionObj_dataVecReg_im :
              obj_CPAdditionObj_prevVecData_im);



  assign tmp_re_21 = (tmp_137 == 1'b0 ? tmp_re_15 :
              obj_CPAdditionObj_prevSymb_re);
  assign tmp_im_21 = (tmp_137 == 1'b0 ? tmp_im_15 :
              obj_CPAdditionObj_prevSymb_im);



  assign tmp_re_22 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? tmp_re_20 :
              tmp_re_21);
  assign tmp_im_22 = (obj_CPAdditionObj_hasPrevSymbData_4 == 1'b0 ? tmp_im_20 :
              tmp_im_21);



  assign tmp_re_23 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? obj_CPAdditionObj_dataVecReg_re :
              obj_CPAdditionObj_prevVecData_re);
  assign tmp_im_23 = (obj_CPAdditionObj_carryForward_4 == 1'b0 ? obj_CPAdditionObj_dataVecReg_im :
              obj_CPAdditionObj_prevVecData_im);



  assign tmp_re_24 = (s_6 == 1'b0 ? tmp_re_22 :
              tmp_re_23);
  assign tmp_im_24 = (s_6 == 1'b0 ? tmp_im_22 :
              tmp_im_23);



  assign tmp_re_25 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_dataVec1_re :
              tmp_re_24);
  assign tmp_im_25 = (obj_CPAdditionObj_startOutputReg == 1'b0 ? obj_CPAdditionObj_dataVec1_im :
              tmp_im_24);



  always @(posedge clk)
    begin : obj_CPAdditionObj_dataVec1_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_dataVec1_re <= 16'sb0000000000000000;
        obj_CPAdditionObj_dataVec1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_dataVec1_re <= tmp_re_25;
          obj_CPAdditionObj_dataVec1_im <= tmp_im_25;
        end
      end
    end



  assign tmp_re_26 = (s_26 == 1'b0 ? obj_CPAdditionObj_dataVec2_re :
              obj_CPAdditionObj_dataVec1_re);
  assign tmp_im_26 = (s_26 == 1'b0 ? obj_CPAdditionObj_dataVec2_im :
              obj_CPAdditionObj_dataVec1_im);



  assign tmp_re_27 = (obj_CPAdditionObj_sendOutput_7 == 1'b0 ? obj_CPAdditionObj_dataOutReg_re :
              tmp_re_26);
  assign tmp_im_27 = (obj_CPAdditionObj_sendOutput_7 == 1'b0 ? obj_CPAdditionObj_dataOutReg_im :
              tmp_im_26);



  always @(posedge clk)
    begin : obj_CPAdditionObj_dataOut_reg_process
      if (reset_x == 1'b1) begin
        for(obj_CPAdditionObj_dataOut_reg_t_1 = 32'sd0; obj_CPAdditionObj_dataOut_reg_t_1 <= 32'sd1; obj_CPAdditionObj_dataOut_reg_t_1 = obj_CPAdditionObj_dataOut_reg_t_1 + 32'sd1) begin
          obj_CPAdditionObj_dataOut_reg_reg_re[obj_CPAdditionObj_dataOut_reg_t_1] <= 16'sb0000000000000000;
          obj_CPAdditionObj_dataOut_reg_reg_im[obj_CPAdditionObj_dataOut_reg_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          for(obj_CPAdditionObj_dataOut_reg_t_0_0 = 32'sd0; obj_CPAdditionObj_dataOut_reg_t_0_0 <= 32'sd1; obj_CPAdditionObj_dataOut_reg_t_0_0 = obj_CPAdditionObj_dataOut_reg_t_0_0 + 32'sd1) begin
            obj_CPAdditionObj_dataOut_reg_reg_re[obj_CPAdditionObj_dataOut_reg_t_0_0] <= obj_CPAdditionObj_dataOut_reg_reg_next_re[obj_CPAdditionObj_dataOut_reg_t_0_0];
            obj_CPAdditionObj_dataOut_reg_reg_im[obj_CPAdditionObj_dataOut_reg_t_0_0] <= obj_CPAdditionObj_dataOut_reg_reg_next_im[obj_CPAdditionObj_dataOut_reg_t_0_0];
          end
        end
      end
    end

  assign obj_CPAdditionObj_dataOut_re = obj_CPAdditionObj_dataOut_reg_reg_re[1];
  assign obj_CPAdditionObj_dataOut_im = obj_CPAdditionObj_dataOut_reg_reg_im[1];
  assign obj_CPAdditionObj_dataOut_reg_reg_next_re[0] = tmp_re_27;
  assign obj_CPAdditionObj_dataOut_reg_reg_next_im[0] = tmp_im_27;
  assign obj_CPAdditionObj_dataOut_reg_reg_next_re[1] = obj_CPAdditionObj_dataOut_reg_reg_re[0];
  assign obj_CPAdditionObj_dataOut_reg_reg_next_im[1] = obj_CPAdditionObj_dataOut_reg_reg_im[0];



  assign varargout_1_re = obj_CPAdditionObj_dataOut_re;

  assign varargout_1_im = obj_CPAdditionObj_dataOut_im;

  assign obj_CPAdditionObj_validOutReg = 1'b0;



  assign obj_CPAdditionObj_validOutReg_1 = 1'b1;



  assign tmp_205 = (obj_CPAdditionObj_sendOutput_7 == 1'b0 ? obj_CPAdditionObj_validOutReg :
              obj_CPAdditionObj_validOutReg_1);



  always @(posedge clk)
    begin : obj_CPAdditionObj_validOut_reg_process
      if (reset_x == 1'b1) begin
        obj_CPAdditionObj_validOut_reg_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPAdditionObj_validOut_reg_reg[0] <= tmp_205;
          obj_CPAdditionObj_validOut_reg_reg[1] <= obj_CPAdditionObj_validOut_reg_reg[0];
        end
      end
    end

  assign obj_CPAdditionObj_validOut = obj_CPAdditionObj_validOut_reg_reg[1];



  assign varargout_2 = obj_CPAdditionObj_validOut;

endmodule  // tx_125_src_CPAddition

