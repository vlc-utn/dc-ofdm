// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_Hc_12H_B14.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_Hc_12H_B14
// Source Path: HDLTx/full_tx/header_full/header_fec/Hc_12H_B14
// Hierarchy Level: 3
// Model version: 4.114
// 
// LDPC Encoder
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_Hc_12H_B14
          (clk,
           reset_x,
           enb,
           in0,
           in1_start,
           in1_end,
           in1_valid,
           out0,
           out1_end,
           out1_valid);


  input   clk;
  input   reset_x;
  input   enb;
  input   in0;
  input   in1_start;
  input   in1_end;
  input   in1_valid;
  output  out0;
  output  out1_end;
  output  out1_valid;


  wire sofVld;
  wire const1;  // ufix1
  reg  const1Reg;  // ufix1
  wire const_rsvd_2;  // ufix1
  wire sofVldNeg;  // ufix1
  wire eofVld;
  reg  constReg;  // ufix1
  reg  frame_switch_delay;  // ufix1
  wire fValidTmp;  // ufix1
  reg  fValidReg;  // ufix1
  wire fValid;  // ufix1
  wire endTrigger;  // ufix1
  wire endTrigger2;  // ufix1
  reg  [1:0] end_trigger_reg;  // ufix1 [2]
  wire endTriggerReg;  // ufix1
  wire vFrame;  // ufix1
  reg [19:0] countVal;  // ufix20
  wire [19:0] maxCount;  // ufix20
  wire rel_count;  // ufix1
  reg  invalid_length_switch_delay;  // ufix1
  wire invalidLength;  // ufix1
  reg  sofVldReg;  // ufix1
  wire validO;  // ufix1
  reg  [1:0] validout_reg;  // ufix1 [2]
  wire validOReg;
  wire rFrameReg;  // ufix1
  wire validOut_1;
  reg  rdValid;  // ufix1
  reg  rdValidReg;  // ufix1
  wire startO;  // ufix1
  reg  [1:0] startout_reg;  // ufix1 [2]
  wire startOReg;
  reg  extReset;  // ufix1
  wire nFrame;  // ufix1
  wire resetTmp;  // ufix1
  reg  encEnb;  // ufix1
  reg  alpha_switch_delay;  // ufix1
  wire encEnbReg;  // ufix1
  reg  [13:0] wrEnbReg;  // ufix1 [14]
  reg  [13:0] wrDataReg;  // ufix1 [14]
  reg [4:0] wrAddrReg;  // ufix5
  wire [4:0] rdAddrTmp;  // ufix5
  wire data_array_14;  // ufix1
  wire data_array_13;  // ufix1
  wire data_array_12;  // ufix1
  wire data_array_11;  // ufix1
  wire data_array_10;  // ufix1
  wire data_array_9;  // ufix1
  wire data_array_8;  // ufix1
  wire data_array_7;  // ufix1
  wire data_array_6;  // ufix1
  wire data_array_5;  // ufix1
  wire data_array_4;  // ufix1
  wire data_array_3;  // ufix1
  wire data_array_2;  // ufix1
  reg  inRead;  // ufix1
  wire [4:0] colVal;  // ufix5
  reg [4:0] rdAddr;  // ufix5
  reg  [13:0] wrEnb;  // ufix1 [14]
  reg [4:0] wrAddr;  // ufix5
  reg  [13:0] wrData;  // ufix1 [14]
  wire data_array_1;  // ufix1
  wire alpha_0;  // ufix1
  wire alpha_1;  // ufix1
  wire alpha_2;  // ufix1
  wire alpha_3;  // ufix1
  wire alpha_4;  // ufix1
  wire alpha_5;  // ufix1
  wire alpha_6;  // ufix1
  wire alpha_7;  // ufix1
  wire alpha_8;  // ufix1
  wire alpha_9;  // ufix1
  wire alpha_10;  // ufix1
  wire alpha_11;  // ufix1
  wire alpha_12;  // ufix1
  wire alpha_13;  // ufix1
  wire alphaValid;  // ufix1
  wire [3:0] alphaAddr;  // ufix4
  wire parity1_0;  // ufix1
  wire parity1_1;  // ufix1
  wire parity1_2;  // ufix1
  wire parity1_3;  // ufix1
  wire parity1_4;  // ufix1
  wire parity1_5;  // ufix1
  wire parity1_6;  // ufix1
  wire parity1_7;  // ufix1
  wire parity1_8;  // ufix1
  wire parity1_9;  // ufix1
  wire parity1_10;  // ufix1
  wire parity1_11;  // ufix1
  wire parity1_12;  // ufix1
  wire parity1_13;  // ufix1
  wire parity_0;  // ufix1
  wire parity_1;  // ufix1
  wire parity_2;  // ufix1
  wire parity_3;  // ufix1
  wire parity_4;  // ufix1
  wire parity_5;  // ufix1
  wire parity_6;  // ufix1
  wire parity_7;  // ufix1
  wire parity_8;  // ufix1
  wire parity_9;  // ufix1
  wire parity_10;  // ufix1
  wire parity_11;  // ufix1
  wire parity_12;  // ufix1
  wire parity_13;  // ufix1
  wire parityValid;  // ufix1
  wire [3:0] parityAddr;  // ufix4
  wire isNumRows;  // ufix1
  wire startTmp;  // ufix1
  wire startRead;  // ufix1
  reg  startReadReg;  // ufix1
  wire startReadNeg;  // ufix1
  reg  [13:0] inputController_wrData;  // ufix1 [14]
  reg [4:0] inputController_wrAddr;  // ufix5
  reg  [13:0] inputController_wrEnb;  // boolean [14]
  reg  inputController_frameValid;
  reg  inputController_encEnb;
  reg  inputController_endReg;
  reg  inputController_validReg;
  reg  inputController_dataReg;  // ufix1
  reg [3:0] inputController_idxCount;  // ufix4
  reg [4:0] inputController_wrCount;  // ufix5
  reg [4:0] inputController_rdAddr;  // ufix5
  reg  inputController_inRead;
  reg  inputController_rdValid;
  reg [3:0] inputController_jdxCount;  // ufix4
  reg [4:0] inputController_rdCount;  // ufix5
  reg  [13:0] inputController_wrData_next;  // ufix1 [14]
  reg [4:0] inputController_wrAddr_next;  // ufix5
  reg  [13:0] inputController_wrEnb_next;  // boolean [14]
  reg  inputController_frameValid_next;
  reg  inputController_encEnb_next;
  reg  inputController_endReg_next;
  reg  inputController_validReg_next;
  reg  inputController_dataReg_next;  // ufix1
  reg [3:0] inputController_idxCount_next;  // ufix4
  reg [4:0] inputController_wrCount_next;  // ufix5
  reg [4:0] inputController_rdAddr_next;  // ufix5
  reg  inputController_inRead_next;
  reg  inputController_rdValid_next;
  reg [3:0] inputController_jdxCount_next;  // ufix4
  reg [4:0] inputController_rdCount_next;  // ufix5
  reg  parReset;  // ufix1
  wire dataO;
  wire endO;  // ufix1
  reg  [1:0] endout_reg;  // ufix1 [2]
  wire endOReg;
  wire endOut_1;
  wire endOutVld;  // ufix1
  wire endOutVldTmp;  // ufix1
  reg  endOutVldReg;  // ufix1
  wire invFrameTmp;  // ufix1
  wire nFrameEnb;  // ufix1
  reg  nextFrame_switch_delay;  // ufix1
  wire nFrameTmp;  // ufix1
  wire resetFrame;  // ufix1
  reg  [1:0] dataout_reg;  // ufix1 [2]
  wire dataOReg;
  wire zData;
  wire dataOut_1;
  reg  inputController_reset;
  reg signed [31:0] inputController_idx;  // int32
  reg  inputController_inRead_temp;
  reg [3:0] inputController_t_0_0 [0:13];  // ufix4 [14]


  assign sofVld = in1_valid & in1_start;



  assign const1 = 1'b1;



  always @(posedge clk)
    begin : c_process
      if (reset_x == 1'b1) begin
        const1Reg <= 1'b0;
      end
      else begin
        if (enb && in1_valid) begin
          const1Reg <= const1;
        end
      end
    end



  assign const_rsvd_2 = 1'b0;



  assign sofVldNeg =  ~ sofVld;



  assign eofVld = in1_valid & in1_end;



  always @(posedge clk)
    begin : c_1_process
      if (reset_x == 1'b1) begin
        constReg <= 1'b0;
      end
      else begin
        if (enb && in1_valid) begin
          constReg <= const_rsvd_2;
        end
      end
    end



  always @(posedge clk)
    begin : frame_process
      if (reset_x == 1'b1) begin
        frame_switch_delay <= 1'b1;
      end
      else begin
        if (enb) begin
          if (sofVld == 1'b1) begin
            frame_switch_delay <= 1'b1;
          end
          else begin
            if (eofVld) begin
              frame_switch_delay <= constReg;
            end
          end
        end
      end
    end

  assign fValidTmp = (sofVld == 1'b1 ? 1'b1 :
              frame_switch_delay);



  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        fValidReg <= 1'b0;
      end
      else begin
        if (enb) begin
          fValidReg <= fValidTmp;
        end
      end
    end



  assign fValid = fValidReg | eofVld;



  assign endTrigger = eofVld & fValid;



  assign endTrigger2 = endTrigger & sofVldNeg;



  always @(posedge clk)
    begin : end_trigger_process
      if (reset_x == 1'b1) begin
        end_trigger_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          end_trigger_reg[0] <= endTrigger2;
          end_trigger_reg[1] <= end_trigger_reg[0];
        end
      end
    end

  assign endTriggerReg = end_trigger_reg[1];



  assign vFrame = in1_valid & fValid;



  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 524287
  // Counter for input data length
  always @(posedge clk)
    begin : Counting_Data_process
      if (reset_x == 1'b1) begin
        countVal <= 20'b00000000000000000001;
      end
      else begin
        if (enb) begin
          if (sofVld == 1'b1) begin
            countVal <= 20'b00000000000000000001;
          end
          else if (vFrame == 1'b1) begin
            if (countVal >= 20'b01111111111111111111) begin
              countVal <= 20'b00000000000000000001;
            end
            else begin
              countVal <= countVal + 20'b00000000000000000001;
            end
          end
        end
      end
    end



  assign maxCount = 20'b00000000000010100111;



  // Comparison of counter to max count
  assign rel_count = countVal != maxCount;



  always @(posedge clk)
    begin : invalid_length_process
      if (reset_x == 1'b1) begin
        invalid_length_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (endTriggerReg == 1'b1) begin
            invalid_length_switch_delay <= 1'b0;
          end
          else begin
            if (endTrigger2) begin
              invalid_length_switch_delay <= rel_count;
            end
          end
        end
      end
    end

  assign invalidLength = (endTriggerReg == 1'b1 ? 1'b0 :
              invalid_length_switch_delay);



  always @(posedge clk)
    begin : c_3_process
      if (reset_x == 1'b1) begin
        sofVldReg <= 1'b0;
      end
      else begin
        if (enb) begin
          sofVldReg <= sofVld;
        end
      end
    end



  always @(posedge clk)
    begin : validout_process
      if (reset_x == 1'b1) begin
        validout_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          validout_reg[0] <= validO;
          validout_reg[1] <= validout_reg[0];
        end
      end
    end

  assign validOReg = validout_reg[1];



  assign validOut_1 = (rFrameReg == 1'b0 ? validOReg :
              const_rsvd_2);



  always @(posedge clk)
    begin : c_4_process
      if (reset_x == 1'b1) begin
        rdValidReg <= 1'b0;
      end
      else begin
        if (enb) begin
          rdValidReg <= rdValid;
        end
      end
    end



  always @(posedge clk)
    begin : startout_process
      if (reset_x == 1'b1) begin
        startout_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          startout_reg[0] <= startO;
          startout_reg[1] <= startout_reg[0];
        end
      end
    end

  assign startOReg = startout_reg[1];



  assign resetTmp = extReset | nFrame;



  always @(posedge clk)
    begin : c_5_process
      if (reset_x == 1'b1) begin
        alpha_switch_delay <= 1'b0;
      end
      else begin
        if (enb) begin
          if (resetTmp == 1'b1) begin
            alpha_switch_delay <= 1'b0;
          end
          else begin
            if (const1Reg) begin
              alpha_switch_delay <= encEnb;
            end
          end
        end
      end
    end

  assign encEnbReg = (resetTmp == 1'b1 ? 1'b0 :
              alpha_switch_delay);



  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM (.clk(clk),
                                                            .enb(enb),
                                                            .wr_din(wrDataReg[13]),  // ufix1
                                                            .wr_addr(wrAddrReg),
                                                            .wr_en(wrEnbReg[13]),  // ufix1
                                                            .rd_addr(rdAddrTmp),
                                                            .dout(data_array_14)  // ufix1
                                                            );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_1 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[12]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[12]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_13)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_2 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[11]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[11]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_12)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_3 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[10]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[10]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_11)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_4 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[9]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[9]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_10)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_5 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[8]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[8]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_9)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_6 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[7]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[7]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_8)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_7 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[6]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[6]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_7)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_8 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[5]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[5]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_6)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_9 (.clk(clk),
                                                              .enb(enb),
                                                              .wr_din(wrDataReg[4]),  // ufix1
                                                              .wr_addr(wrAddrReg),
                                                              .wr_en(wrEnbReg[4]),  // ufix1
                                                              .rd_addr(rdAddrTmp),
                                                              .dout(data_array_5)  // ufix1
                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_10 (.clk(clk),
                                                               .enb(enb),
                                                               .wr_din(wrDataReg[3]),  // ufix1
                                                               .wr_addr(wrAddrReg),
                                                               .wr_en(wrEnbReg[3]),  // ufix1
                                                               .rd_addr(rdAddrTmp),
                                                               .dout(data_array_4)  // ufix1
                                                               );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_11 (.clk(clk),
                                                               .enb(enb),
                                                               .wr_din(wrDataReg[2]),  // ufix1
                                                               .wr_addr(wrAddrReg),
                                                               .wr_en(wrEnbReg[2]),  // ufix1
                                                               .rd_addr(rdAddrTmp),
                                                               .dout(data_array_3)  // ufix1
                                                               );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_12 (.clk(clk),
                                                               .enb(enb),
                                                               .wr_din(wrDataReg[1]),  // ufix1
                                                               .wr_addr(wrAddrReg),
                                                               .wr_en(wrEnbReg[1]),  // ufix1
                                                               .rd_addr(rdAddrTmp),
                                                               .dout(data_array_2)  // ufix1
                                                               );

  assign rdAddrTmp = (inRead == 1'b0 ? colVal :
              rdAddr);



  always @(posedge clk)
    begin : c_6_process
      if (reset_x == 1'b1) begin
        wrEnbReg <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          wrEnbReg <= wrEnb;
        end
      end
    end



  always @(posedge clk)
    begin : c_7_process
      if (reset_x == 1'b1) begin
        wrAddrReg <= 5'b00000;
      end
      else begin
        if (enb) begin
          wrAddrReg <= wrAddr;
        end
      end
    end



  always @(posedge clk)
    begin : c_8_process
      if (reset_x == 1'b1) begin
        wrDataReg <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          wrDataReg <= wrData;
        end
      end
    end



  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(5),
                                                 .DataWidth(1)
                                                 )
                                               u_Input_RAM_singlebit (.clk(clk),
                                                                      .enb(enb),
                                                                      .wr_din(wrDataReg[0]),  // ufix1
                                                                      .wr_addr(wrAddrReg),
                                                                      .wr_en(wrEnbReg[0]),  // ufix1
                                                                      .rd_addr(rdAddrTmp),
                                                                      .dout(data_array_1)  // ufix1
                                                                      );

  tx_125_src_Calculate_Alpha u_Calculate_Alpha (.clk(clk),
                                                .reset_x(reset_x),
                                                .enb(enb),
                                                .data_0(data_array_1),  // ufix1
                                                .data_1(data_array_2),  // ufix1
                                                .data_2(data_array_3),  // ufix1
                                                .data_3(data_array_4),  // ufix1
                                                .data_4(data_array_5),  // ufix1
                                                .data_5(data_array_6),  // ufix1
                                                .data_6(data_array_7),  // ufix1
                                                .data_7(data_array_8),  // ufix1
                                                .data_8(data_array_9),  // ufix1
                                                .data_9(data_array_10),  // ufix1
                                                .data_10(data_array_11),  // ufix1
                                                .data_11(data_array_12),  // ufix1
                                                .data_12(data_array_13),  // ufix1
                                                .data_13(data_array_14),  // ufix1
                                                .reset(extReset),  // ufix1
                                                .encEnable(encEnbReg),  // ufix1
                                                .alpha_0(alpha_0),  // ufix1
                                                .alpha_1(alpha_1),  // ufix1
                                                .alpha_2(alpha_2),  // ufix1
                                                .alpha_3(alpha_3),  // ufix1
                                                .alpha_4(alpha_4),  // ufix1
                                                .alpha_5(alpha_5),  // ufix1
                                                .alpha_6(alpha_6),  // ufix1
                                                .alpha_7(alpha_7),  // ufix1
                                                .alpha_8(alpha_8),  // ufix1
                                                .alpha_9(alpha_9),  // ufix1
                                                .alpha_10(alpha_10),  // ufix1
                                                .alpha_11(alpha_11),  // ufix1
                                                .alpha_12(alpha_12),  // ufix1
                                                .alpha_13(alpha_13),  // ufix1
                                                .alphaValid(alphaValid),  // ufix1
                                                .alphaAddr(alphaAddr),  // ufix4
                                                .columnVal(colVal),  // ufix5
                                                .parity1_0(parity1_0),  // ufix1
                                                .parity1_1(parity1_1),  // ufix1
                                                .parity1_2(parity1_2),  // ufix1
                                                .parity1_3(parity1_3),  // ufix1
                                                .parity1_4(parity1_4),  // ufix1
                                                .parity1_5(parity1_5),  // ufix1
                                                .parity1_6(parity1_6),  // ufix1
                                                .parity1_7(parity1_7),  // ufix1
                                                .parity1_8(parity1_8),  // ufix1
                                                .parity1_9(parity1_9),  // ufix1
                                                .parity1_10(parity1_10),  // ufix1
                                                .parity1_11(parity1_11),  // ufix1
                                                .parity1_12(parity1_12),  // ufix1
                                                .parity1_13(parity1_13)  // ufix1
                                                );

  tx_125_src_Calculate_Parity u_Calculate_Parity (.clk(clk),
                                                  .reset_x(reset_x),
                                                  .enb(enb),
                                                  .reset(extReset),  // ufix1
                                                  .alpha_0(alpha_0),  // ufix1
                                                  .alpha_1(alpha_1),  // ufix1
                                                  .alpha_2(alpha_2),  // ufix1
                                                  .alpha_3(alpha_3),  // ufix1
                                                  .alpha_4(alpha_4),  // ufix1
                                                  .alpha_5(alpha_5),  // ufix1
                                                  .alpha_6(alpha_6),  // ufix1
                                                  .alpha_7(alpha_7),  // ufix1
                                                  .alpha_8(alpha_8),  // ufix1
                                                  .alpha_9(alpha_9),  // ufix1
                                                  .alpha_10(alpha_10),  // ufix1
                                                  .alpha_11(alpha_11),  // ufix1
                                                  .alpha_12(alpha_12),  // ufix1
                                                  .alpha_13(alpha_13),  // ufix1
                                                  .alphaValid(alphaValid),  // ufix1
                                                  .alphaAddr(alphaAddr),  // ufix4
                                                  .parity1_0(parity1_0),  // ufix1
                                                  .parity1_1(parity1_1),  // ufix1
                                                  .parity1_2(parity1_2),  // ufix1
                                                  .parity1_3(parity1_3),  // ufix1
                                                  .parity1_4(parity1_4),  // ufix1
                                                  .parity1_5(parity1_5),  // ufix1
                                                  .parity1_6(parity1_6),  // ufix1
                                                  .parity1_7(parity1_7),  // ufix1
                                                  .parity1_8(parity1_8),  // ufix1
                                                  .parity1_9(parity1_9),  // ufix1
                                                  .parity1_10(parity1_10),  // ufix1
                                                  .parity1_11(parity1_11),  // ufix1
                                                  .parity1_12(parity1_12),  // ufix1
                                                  .parity1_13(parity1_13),  // ufix1
                                                  .parityOut_0(parity_0),  // ufix1
                                                  .parityOut_1(parity_1),  // ufix1
                                                  .parityOut_2(parity_2),  // ufix1
                                                  .parityOut_3(parity_3),  // ufix1
                                                  .parityOut_4(parity_4),  // ufix1
                                                  .parityOut_5(parity_5),  // ufix1
                                                  .parityOut_6(parity_6),  // ufix1
                                                  .parityOut_7(parity_7),  // ufix1
                                                  .parityOut_8(parity_8),  // ufix1
                                                  .parityOut_9(parity_9),  // ufix1
                                                  .parityOut_10(parity_10),  // ufix1
                                                  .parityOut_11(parity_11),  // ufix1
                                                  .parityOut_12(parity_12),  // ufix1
                                                  .parityOut_13(parity_13),  // ufix1
                                                  .parityValid(parityValid),  // ufix1
                                                  .parityAddr(parityAddr)  // ufix4
                                                  );

  assign isNumRows = parityAddr == 4'b1100;



  assign startTmp = isNumRows & parityValid;



  always @(posedge clk)
    begin : c_9_process
      if (reset_x == 1'b1) begin
        startReadReg <= 1'b0;
      end
      else begin
        if (enb) begin
          startReadReg <= startRead;
        end
      end
    end



  assign startReadNeg =  ~ startReadReg;



  assign startRead = startReadNeg & startTmp;



  always @(posedge clk)
    begin : inputController_process
      if (reset_x == 1'b1) begin
        inputController_wrAddr <= 5'b00000;
        inputController_wrData <= {14{1'b0}};
        inputController_wrEnb <= {14{1'b0}};
        inputController_frameValid <= 1'b0;
        inputController_encEnb <= 1'b0;
        inputController_endReg <= 1'b0;
        inputController_validReg <= 1'b0;
        inputController_dataReg <= 1'b0;
        inputController_idxCount <= 4'b0000;
        inputController_wrCount <= 5'b00001;
        inputController_rdAddr <= 5'b00000;
        inputController_inRead <= 1'b0;
        inputController_rdValid <= 1'b0;
        inputController_jdxCount <= 4'b0000;
        inputController_rdCount <= 5'b00001;
      end
      else begin
        if (enb) begin
          inputController_wrAddr <= inputController_wrAddr_next;
          inputController_wrData <= inputController_wrData_next;
          inputController_wrEnb <= inputController_wrEnb_next;
          inputController_frameValid <= inputController_frameValid_next;
          inputController_encEnb <= inputController_encEnb_next;
          inputController_endReg <= inputController_endReg_next;
          inputController_validReg <= inputController_validReg_next;
          inputController_dataReg <= inputController_dataReg_next;
          inputController_idxCount <= inputController_idxCount_next;
          inputController_wrCount <= inputController_wrCount_next;
          inputController_rdAddr <= inputController_rdAddr_next;
          inputController_inRead <= inputController_inRead_next;
          inputController_rdValid <= inputController_rdValid_next;
          inputController_jdxCount <= inputController_jdxCount_next;
          inputController_rdCount <= inputController_rdCount_next;
        end
      end
    end

  always @* begin
    inputController_inRead_temp = inputController_inRead;
    inputController_wrAddr_next = inputController_wrAddr;
    inputController_wrData_next = inputController_wrData;
    inputController_wrEnb_next = inputController_wrEnb;
    inputController_frameValid_next = inputController_frameValid;
    inputController_encEnb_next = inputController_encEnb;
    inputController_idxCount_next = inputController_idxCount;
    inputController_wrCount_next = inputController_wrCount;
    inputController_rdAddr_next = inputController_rdAddr;
    inputController_rdValid_next = inputController_rdValid;
    inputController_jdxCount_next = inputController_jdxCount;
    inputController_rdCount_next = inputController_rdCount;
    inputController_reset = (in1_start != 1'b0) && (in1_valid != 1'b0);
    if (inputController_reset) begin
      extReset = 1'b1;
      inputController_wrData_next = {14{1'b0}};
      inputController_wrEnb_next = {14{1'b0}};
      inputController_wrAddr_next = 5'b00000;
      inputController_idxCount_next = 4'b0000;
      inputController_wrCount_next = 5'b00001;
      inputController_frameValid_next = 1'b1;
    end
    else begin
      extReset = 1'b0;
      if (inputController_frameValid && inputController_validReg) begin

        for(inputController_idx = 32'sd0; inputController_idx <= 32'sd13; inputController_idx = inputController_idx + 32'sd1) begin
          inputController_t_0_0[inputController_idx] = inputController_idx[3:0];
          if (inputController_idxCount == inputController_t_0_0[inputController_idx]) begin
            inputController_wrEnb_next[inputController_idx] = 1'b1;
            inputController_wrData_next[inputController_idx] = inputController_dataReg;
          end
          else begin
            inputController_wrEnb_next[inputController_idx] = 1'b0;
            inputController_wrData_next[inputController_idx] = 1'b0;
          end
        end

        inputController_wrAddr_next = inputController_wrCount;
        if (inputController_idxCount == 4'b1101) begin
          inputController_idxCount_next = 4'b0000;
          inputController_wrCount_next = inputController_wrCount + 5'b00001;
        end
        else begin
          inputController_idxCount_next = inputController_idxCount + 4'b0001;
        end
      end
      else begin
        inputController_wrData_next = {14{1'b0}};
        inputController_wrEnb_next = {14{1'b0}};
      end
      if (inputController_endReg && inputController_validReg) begin
        inputController_frameValid_next = 1'b0;
      end
    end
    if (inputController_reset || startOReg) begin
      inputController_encEnb_next = 1'b0;
    end
    else if (inputController_endReg && inputController_validReg) begin
      inputController_encEnb_next = 1'b1;
    end
    inputController_dataReg_next = in0;
    inputController_endReg_next = in1_end;
    inputController_validReg_next = in1_valid;
    if (inputController_reset) begin
      inputController_inRead_temp = 1'b0;
      inputController_rdAddr_next = 5'b00001;
      inputController_rdValid_next = 1'b0;
      inputController_rdCount_next = 5'b00001;
      inputController_jdxCount_next = 4'b0000;
    end
    else begin
      if (startRead != 1'b0) begin
        inputController_inRead_temp = 1'b1;
      end
      if (inputController_inRead_temp) begin
        if (inputController_rdCount == 5'b01101) begin
          inputController_rdAddr_next = inputController_rdCount;
          inputController_rdValid_next = 1'b0;
          inputController_inRead_temp = 1'b0;
        end
        else begin
          inputController_rdValid_next = 1'b1;
          inputController_rdAddr_next = inputController_rdCount;
        end
        if (inputController_jdxCount == 4'b1101) begin
          inputController_jdxCount_next = 4'b0000;
          inputController_rdCount_next = inputController_rdCount + 5'b00001;
        end
        else begin
          inputController_jdxCount_next = inputController_jdxCount + 4'b0001;
        end
      end
    end
    wrAddr = inputController_wrAddr;
    wrData = inputController_wrData;
    wrEnb = inputController_wrEnb;
    inRead = inputController_inRead;
    rdAddr = inputController_rdAddr;
    encEnb = inputController_encEnb;
    rdValid = inputController_rdValid;
    parReset = inputController_frameValid;
    inputController_inRead_next = inputController_inRead_temp;
  end



  tx_125_src_Final_Output u_Final_output (.clk(clk),
                                          .reset_x(reset_x),
                                          .enb(enb),
                                          .reset(extReset),  // ufix1
                                          .inputData_0(data_array_1),  // ufix1
                                          .inputData_1(data_array_2),  // ufix1
                                          .inputData_2(data_array_3),  // ufix1
                                          .inputData_3(data_array_4),  // ufix1
                                          .inputData_4(data_array_5),  // ufix1
                                          .inputData_5(data_array_6),  // ufix1
                                          .inputData_6(data_array_7),  // ufix1
                                          .inputData_7(data_array_8),  // ufix1
                                          .inputData_8(data_array_9),  // ufix1
                                          .inputData_9(data_array_10),  // ufix1
                                          .inputData_10(data_array_11),  // ufix1
                                          .inputData_11(data_array_12),  // ufix1
                                          .inputData_12(data_array_13),  // ufix1
                                          .inputData_13(data_array_14),  // ufix1
                                          .inputValid(rdValidReg),  // ufix1
                                          .parity_0(parity_0),  // ufix1
                                          .parity_1(parity_1),  // ufix1
                                          .parity_2(parity_2),  // ufix1
                                          .parity_3(parity_3),  // ufix1
                                          .parity_4(parity_4),  // ufix1
                                          .parity_5(parity_5),  // ufix1
                                          .parity_6(parity_6),  // ufix1
                                          .parity_7(parity_7),  // ufix1
                                          .parity_8(parity_8),  // ufix1
                                          .parity_9(parity_9),  // ufix1
                                          .parity_10(parity_10),  // ufix1
                                          .parity_11(parity_11),  // ufix1
                                          .parity_12(parity_12),  // ufix1
                                          .parity_13(parity_13),  // ufix1
                                          .parityAddr(parityAddr),  // ufix4
                                          .parityValid(parityValid),  // ufix1
                                          .dataOut(dataO),
                                          .startOut(startO),  // ufix1
                                          .endOut(endO),  // ufix1
                                          .validOut(validO)  // ufix1
                                          );

  always @(posedge clk)
    begin : endout_process
      if (reset_x == 1'b1) begin
        endout_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          endout_reg[0] <= endO;
          endout_reg[1] <= endout_reg[0];
        end
      end
    end

  assign endOReg = endout_reg[1];



  assign endOut_1 = (rFrameReg == 1'b0 ? endOReg :
              const_rsvd_2);



  assign endOutVld = endOut_1 & validOut_1;



  assign endOutVldTmp = endOutVld & sofVldNeg;



  always @(posedge clk)
    begin : c_10_process
      if (reset_x == 1'b1) begin
        endOutVldReg <= 1'b0;
      end
      else begin
        if (enb) begin
          endOutVldReg <= endOutVldTmp;
        end
      end
    end



  assign invFrameTmp = endOutVldReg | invalidLength;



  assign nFrameEnb = invFrameTmp & sofVldNeg;



  always @(posedge clk)
    begin : nextFrame_process
      if (reset_x == 1'b1) begin
        nextFrame_switch_delay <= 1'b1;
      end
      else begin
        if (enb) begin
          if (nFrameEnb == 1'b1) begin
            nextFrame_switch_delay <= 1'b1;
          end
          else begin
            if (sofVld) begin
              nextFrame_switch_delay <= constReg;
            end
          end
        end
      end
    end

  assign nFrameTmp = (nFrameEnb == 1'b1 ? 1'b1 :
              nextFrame_switch_delay);



  assign nFrame = nFrameTmp | invFrameTmp;



  assign resetFrame = nFrame | fValid;



  assign rFrameReg = resetFrame | sofVldReg;



  always @(posedge clk)
    begin : dataout_process
      if (reset_x == 1'b1) begin
        dataout_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          dataout_reg[0] <= dataO;
          dataout_reg[1] <= dataout_reg[0];
        end
      end
    end

  assign dataOReg = dataout_reg[1];



  assign zData = 1'b0;



  assign dataOut_1 = (rFrameReg == 1'b0 ? dataOReg :
              zData);



  assign out0 = dataOut_1;

  assign out1_end = endOut_1;

  assign out1_valid = validOut_1;

endmodule  // tx_125_src_Hc_12H_B14

