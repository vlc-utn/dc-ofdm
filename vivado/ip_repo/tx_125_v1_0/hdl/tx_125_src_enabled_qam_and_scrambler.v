// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_enabled_qam_and_scrambler.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_enabled_qam_and_scrambler
// Source Path: HDLTx/full_tx/full_ofdm_modulator/enabled_qam_and_scrambler
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_enabled_qam_and_scrambler
          (clk,
           reset_x,
           enb_1_2_0,
           data_in,
           valid_in,
           bits_per_subcarrier,
           init_0,
           init_1,
           init_2,
           init_3,
           init_4,
           init_5,
           init_6,
           init_7,
           init_8,
           init_9,
           init_10,
           init_11,
           init_12,
           new_rsvd,
           cp_len,
           ofdm_en,
           Enable,
           data_out_re,
           data_out_im,
           valid_out,
           cp_len_out);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   [11:0] data_in;  // ufix12
  input   valid_in;
  input   [3:0] bits_per_subcarrier;  // ufix4
  input   init_0;  // boolean
  input   init_1;  // boolean
  input   init_2;  // boolean
  input   init_3;  // boolean
  input   init_4;  // boolean
  input   init_5;  // boolean
  input   init_6;  // boolean
  input   init_7;  // boolean
  input   init_8;  // boolean
  input   init_9;  // boolean
  input   init_10;  // boolean
  input   init_11;  // boolean
  input   init_12;  // boolean
  input   new_rsvd;
  input   [7:0] cp_len;  // uint8
  input   ofdm_en;
  input   Enable;
  output  signed [15:0] data_out_re;  // sfix16_En14
  output  signed [15:0] data_out_im;  // sfix16_En14
  output  valid_out;
  output  [7:0] cp_len_out;  // uint8


  wire ready_out;
  wire enb_1_2_0_gated;
  wire signed [15:0] qam_mod_out1_re;  // sfix16_En14
  wire signed [15:0] qam_mod_out1_im;  // sfix16_En14
  wire qam_mod_out2;
  wire enb_1_2_0_gated_1;
  reg signed [15:0] Delay10_out1_re;  // sfix16_En14
  reg signed [15:0] Delay10_out1_im;  // sfix16_En14
  wire enb_1_2_0_gated_2;
  reg  Delay9_out1;
  wire [12:0] init;  // boolean [13]
  wire enb_1_2_0_gated_3;
  reg  [12:0] Delay_out1;  // boolean [13]
  wire [12:0] Delay_out1_1;  // boolean [13]
  wire enb_1_2_0_gated_4;
  reg  [12:0] Delay8_out1;  // boolean [13]
  wire enb_1_2_0_gated_5;
  reg  Delay1_out1;
  wire enb_1_2_0_gated_6;
  reg  Delay7_out1;
  wire sync_constellation_scrambler_out1;
  wire sync_constellation_scrambler_out2;
  wire signed [15:0] out_new_re;  // sfix16_En14
  wire signed [15:0] out_new_im;  // sfix16_En14
  wire constellation_scrambler_out2;
  wire enb_1_2_0_gated_7;
  reg signed [15:0] valid_new_re;  // sfix16_En14
  reg signed [15:0] valid_new_im;  // sfix16_En14
  reg signed [15:0] Delay13_reg_re [0:1];  // sfix16_En14 [2]
  reg signed [15:0] Delay13_reg_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] Delay13_reg_next_re [0:1];  // sfix16_En14 [2]
  wire signed [15:0] Delay13_reg_next_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] Delay13_out1_re;  // sfix16_En14
  wire signed [15:0] Delay13_out1_im;  // sfix16_En14
  wire signed [15:0] Delay13_out1_re_1;  // sfix16_En14
  wire signed [15:0] Delay13_out1_im_1;  // sfix16_En14
  reg signed [15:0] Delay13_out1_last_value_re;  // sfix16_En14
  reg signed [15:0] Delay13_out1_last_value_im;  // sfix16_En14
  wire enb_1_2_0_gated_8;
  wire enb_1_2_0_gated_9;
  reg  Delay4_out1;
  wire valid_new;
  reg  [1:0] Delay12_reg;  // ufix1 [2]
  wire Delay12_out1;
  wire Delay12_out1_1;
  reg  Delay12_out1_last_value;
  wire enb_1_2_0_gated_10;
  wire enb_1_2_0_gated_11;
  reg [7:0] Delay2_out1;  // uint8
  wire enb_1_2_0_gated_12;
  reg [7:0] Delay11_out1;  // uint8
  wire enb_1_2_0_gated_13;
  reg [7:0] Delay3_reg [0:2];  // ufix8 [3]
  reg [7:0] Delay3_reg_next [0:2];  // ufix8 [3]
  reg [7:0] Delay3_out1;  // uint8
  wire enb_1_2_0_gated_14;
  reg [7:0] Delay6_out1;  // uint8
  reg [7:0] Delay14_reg [0:1];  // ufix8 [2]
  wire [7:0] Delay14_reg_next [0:1];  // ufix8 [2]
  wire [7:0] Delay14_out1;  // uint8
  wire [7:0] Delay14_out1_1;  // uint8
  reg [7:0] Delay14_out1_last_value;  // uint8
  reg signed [31:0] Delay13_t_0_0;  // int32
  reg signed [31:0] Delay13_t_1;  // int32
  reg signed [31:0] Delay3_t_0_0;  // int32
  reg signed [31:0] Delay3_t_0_1;  // int32
  reg signed [31:0] Delay3_t_1;  // int32
  reg signed [31:0] Delay14_t_0_0;  // int32
  reg signed [31:0] Delay14_t_1;  // int32


  assign ready_out = Enable;

  assign enb_1_2_0_gated = Enable && enb_1_2_0;

  tx_125_src_qam_mod u_qam_mod (.clk(clk),
                                .reset_x(reset_x),
                                .enb_1_2_0(enb_1_2_0),
                                .data_in(data_in),  // ufix12
                                .valid_in(valid_in),
                                .bits_per_subcarrier(bits_per_subcarrier),  // ufix4
                                .ready_out(Enable),
                                .data_out_re(qam_mod_out1_re),  // sfix16_En14
                                .data_out_im(qam_mod_out1_im),  // sfix16_En14
                                .valid_out(qam_mod_out2)
                                );

  assign enb_1_2_0_gated_1 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay10_process
      if (reset_x == 1'b1) begin
        Delay10_out1_re <= 16'sb0000000000000000;
        Delay10_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated_1) begin
          Delay10_out1_re <= qam_mod_out1_re;
          Delay10_out1_im <= qam_mod_out1_im;
        end
      end
    end



  assign enb_1_2_0_gated_2 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay9_process
      if (reset_x == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_2) begin
          Delay9_out1 <= qam_mod_out2;
        end
      end
    end



  assign init[0] = init_0;
  assign init[1] = init_1;
  assign init[2] = init_2;
  assign init[3] = init_3;
  assign init[4] = init_4;
  assign init[5] = init_5;
  assign init[6] = init_6;
  assign init[7] = init_7;
  assign init[8] = init_8;
  assign init[9] = init_9;
  assign init[10] = init_10;
  assign init[11] = init_11;
  assign init[12] = init_12;

  assign enb_1_2_0_gated_3 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= {13{1'b0}};
      end
      else begin
        if (enb_1_2_0_gated_3) begin
          Delay_out1 <= init;
        end
      end
    end



  assign Delay_out1_1[0] = Delay_out1[0];
  assign Delay_out1_1[1] = Delay_out1[1];
  assign Delay_out1_1[2] = Delay_out1[2];
  assign Delay_out1_1[3] = Delay_out1[3];
  assign Delay_out1_1[4] = Delay_out1[4];
  assign Delay_out1_1[5] = Delay_out1[5];
  assign Delay_out1_1[6] = Delay_out1[6];
  assign Delay_out1_1[7] = Delay_out1[7];
  assign Delay_out1_1[8] = Delay_out1[8];
  assign Delay_out1_1[9] = Delay_out1[9];
  assign Delay_out1_1[10] = Delay_out1[10];
  assign Delay_out1_1[11] = Delay_out1[11];
  assign Delay_out1_1[12] = Delay_out1[12];

  assign enb_1_2_0_gated_4 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay8_process
      if (reset_x == 1'b1) begin
        Delay8_out1 <= {13{1'b0}};
      end
      else begin
        if (enb_1_2_0_gated_4) begin
          Delay8_out1 <= Delay_out1_1;
        end
      end
    end



  assign enb_1_2_0_gated_5 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_5) begin
          Delay1_out1 <= new_rsvd;
        end
      end
    end



  assign enb_1_2_0_gated_6 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay7_process
      if (reset_x == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_6) begin
          Delay7_out1 <= Delay1_out1;
        end
      end
    end



  tx_125_src_sync_constellation_scrambler u_sync_constellation_scrambler (.clk(clk),
                                                                          .reset_x(reset_x),
                                                                          .enb_1_2_0(enb_1_2_0),
                                                                          .valid_in(Delay9_out1),
                                                                          .init_0(Delay8_out1[0]),  // boolean
                                                                          .init_1(Delay8_out1[1]),  // boolean
                                                                          .init_2(Delay8_out1[2]),  // boolean
                                                                          .init_3(Delay8_out1[3]),  // boolean
                                                                          .init_4(Delay8_out1[4]),  // boolean
                                                                          .init_5(Delay8_out1[5]),  // boolean
                                                                          .init_6(Delay8_out1[6]),  // boolean
                                                                          .init_7(Delay8_out1[7]),  // boolean
                                                                          .init_8(Delay8_out1[8]),  // boolean
                                                                          .init_9(Delay8_out1[9]),  // boolean
                                                                          .init_10(Delay8_out1[10]),  // boolean
                                                                          .init_11(Delay8_out1[11]),  // boolean
                                                                          .init_12(Delay8_out1[12]),  // boolean
                                                                          .new_ofdm_symbol(Delay7_out1),
                                                                          .ready_out(Enable),
                                                                          .s1(sync_constellation_scrambler_out1),
                                                                          .s2(sync_constellation_scrambler_out2)
                                                                          );

  tx_125_src_constellation_scrambler u_constellation_scrambler (.clk(clk),
                                                                .reset_x(reset_x),
                                                                .enb_1_2_0(enb_1_2_0),
                                                                .data_in_re(Delay10_out1_re),  // sfix16_En14
                                                                .data_in_im(Delay10_out1_im),  // sfix16_En14
                                                                .valid_in(Delay9_out1),
                                                                .s1_in(sync_constellation_scrambler_out1),
                                                                .s2_in(sync_constellation_scrambler_out2),
                                                                .ready_out(Enable),
                                                                .data_out_re(out_new_re),  // sfix16_En14
                                                                .data_out_im(out_new_im),  // sfix16_En14
                                                                .valid_out(constellation_scrambler_out2)
                                                                );

  assign enb_1_2_0_gated_7 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        valid_new_re <= 16'sb0000000000000000;
        valid_new_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated_7) begin
          valid_new_re <= out_new_re;
          valid_new_im <= out_new_im;
        end
      end
    end



  always @(posedge clk)
    begin : Delay13_process
      if (reset_x == 1'b1) begin
        for(Delay13_t_1 = 32'sd0; Delay13_t_1 <= 32'sd1; Delay13_t_1 = Delay13_t_1 + 32'sd1) begin
          Delay13_reg_re[Delay13_t_1] <= 16'sb0000000000000000;
          Delay13_reg_im[Delay13_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0_gated) begin
          for(Delay13_t_0_0 = 32'sd0; Delay13_t_0_0 <= 32'sd1; Delay13_t_0_0 = Delay13_t_0_0 + 32'sd1) begin
            Delay13_reg_re[Delay13_t_0_0] <= Delay13_reg_next_re[Delay13_t_0_0];
            Delay13_reg_im[Delay13_t_0_0] <= Delay13_reg_next_im[Delay13_t_0_0];
          end
        end
      end
    end

  assign Delay13_out1_re = Delay13_reg_re[1];
  assign Delay13_out1_im = Delay13_reg_im[1];
  assign Delay13_reg_next_re[0] = valid_new_re;
  assign Delay13_reg_next_im[0] = valid_new_im;
  assign Delay13_reg_next_re[1] = Delay13_reg_re[0];
  assign Delay13_reg_next_im[1] = Delay13_reg_im[0];



  always @(posedge clk)
    begin : out0_bypass_process
      if (reset_x == 1'b1) begin
        Delay13_out1_last_value_re <= 16'sb0000000000000000;
        Delay13_out1_last_value_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated) begin
          Delay13_out1_last_value_re <= Delay13_out1_re_1;
          Delay13_out1_last_value_im <= Delay13_out1_im_1;
        end
      end
    end



  assign Delay13_out1_re_1 = (ready_out == 1'b0 ? Delay13_out1_last_value_re :
              Delay13_out1_re);
  assign Delay13_out1_im_1 = (ready_out == 1'b0 ? Delay13_out1_last_value_im :
              Delay13_out1_im);



  assign data_out_re = Delay13_out1_re_1;

  assign data_out_im = Delay13_out1_im_1;

  assign enb_1_2_0_gated_8 = Enable && enb_1_2_0;

  assign enb_1_2_0_gated_9 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_9) begin
          Delay4_out1 <= constellation_scrambler_out2;
        end
      end
    end



  assign valid_new = ofdm_en & Delay4_out1;



  always @(posedge clk)
    begin : Delay12_process
      if (reset_x == 1'b1) begin
        Delay12_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0_gated_8) begin
          Delay12_reg[0] <= valid_new;
          Delay12_reg[1] <= Delay12_reg[0];
        end
      end
    end

  assign Delay12_out1 = Delay12_reg[1];



  always @(posedge clk)
    begin : out0_bypass_1_process
      if (reset_x == 1'b1) begin
        Delay12_out1_last_value <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_8) begin
          Delay12_out1_last_value <= Delay12_out1_1;
        end
      end
    end



  assign Delay12_out1_1 = (ready_out == 1'b0 ? Delay12_out1_last_value :
              Delay12_out1);



  assign valid_out = Delay12_out1_1;

  assign enb_1_2_0_gated_10 = Enable && enb_1_2_0;

  assign enb_1_2_0_gated_11 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0_gated_11) begin
          Delay2_out1 <= cp_len;
        end
      end
    end



  assign enb_1_2_0_gated_12 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay11_process
      if (reset_x == 1'b1) begin
        Delay11_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0_gated_12) begin
          Delay11_out1 <= Delay2_out1;
        end
      end
    end



  assign enb_1_2_0_gated_13 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        for(Delay3_t_1 = 32'sd0; Delay3_t_1 <= 32'sd2; Delay3_t_1 = Delay3_t_1 + 32'sd1) begin
          Delay3_reg[Delay3_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb_1_2_0_gated_13) begin
          for(Delay3_t_0_1 = 32'sd0; Delay3_t_0_1 <= 32'sd2; Delay3_t_0_1 = Delay3_t_0_1 + 32'sd1) begin
            Delay3_reg[Delay3_t_0_1] <= Delay3_reg_next[Delay3_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay3_out1 = Delay3_reg[2];
    Delay3_reg_next[0] = Delay11_out1;

    for(Delay3_t_0_0 = 32'sd0; Delay3_t_0_0 <= 32'sd1; Delay3_t_0_0 = Delay3_t_0_0 + 32'sd1) begin
      Delay3_reg_next[Delay3_t_0_0 + 32'sd1] = Delay3_reg[Delay3_t_0_0];
    end

  end



  assign enb_1_2_0_gated_14 = Enable && enb_1_2_0;

  always @(posedge clk)
    begin : Delay6_process
      if (reset_x == 1'b1) begin
        Delay6_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0_gated_14) begin
          Delay6_out1 <= Delay3_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay14_process
      if (reset_x == 1'b1) begin
        for(Delay14_t_1 = 32'sd0; Delay14_t_1 <= 32'sd1; Delay14_t_1 = Delay14_t_1 + 32'sd1) begin
          Delay14_reg[Delay14_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb_1_2_0_gated_10) begin
          for(Delay14_t_0_0 = 32'sd0; Delay14_t_0_0 <= 32'sd1; Delay14_t_0_0 = Delay14_t_0_0 + 32'sd1) begin
            Delay14_reg[Delay14_t_0_0] <= Delay14_reg_next[Delay14_t_0_0];
          end
        end
      end
    end

  assign Delay14_out1 = Delay14_reg[1];
  assign Delay14_reg_next[0] = Delay6_out1;
  assign Delay14_reg_next[1] = Delay14_reg[0];



  always @(posedge clk)
    begin : out0_bypass_2_process
      if (reset_x == 1'b1) begin
        Delay14_out1_last_value <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0_gated_10) begin
          Delay14_out1_last_value <= Delay14_out1_1;
        end
      end
    end



  assign Delay14_out1_1 = (ready_out == 1'b0 ? Delay14_out1_last_value :
              Delay14_out1);



  assign cp_len_out = Delay14_out1_1;

endmodule  // tx_125_src_enabled_qam_and_scrambler

