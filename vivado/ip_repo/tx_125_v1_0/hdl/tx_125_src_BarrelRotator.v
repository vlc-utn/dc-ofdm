// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_BarrelRotator.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_BarrelRotator
// Source Path: HDLTx/full_tx/header_full/header_fec/Hc_12H_B14/Calculate Alpha/BarrelRotator
// Hierarchy Level: 5
// Model version: 4.114
// 
// Barrel Rotator Unit
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_BarrelRotator
          (data_0,
           data_1,
           data_2,
           data_3,
           data_4,
           data_5,
           data_6,
           data_7,
           data_8,
           data_9,
           data_10,
           data_11,
           data_12,
           data_13,
           shift,
           shiftData_0,
           shiftData_1,
           shiftData_2,
           shiftData_3,
           shiftData_4,
           shiftData_5,
           shiftData_6,
           shiftData_7,
           shiftData_8,
           shiftData_9,
           shiftData_10,
           shiftData_11,
           shiftData_12,
           shiftData_13);


  input   data_0;  // ufix1
  input   data_1;  // ufix1
  input   data_2;  // ufix1
  input   data_3;  // ufix1
  input   data_4;  // ufix1
  input   data_5;  // ufix1
  input   data_6;  // ufix1
  input   data_7;  // ufix1
  input   data_8;  // ufix1
  input   data_9;  // ufix1
  input   data_10;  // ufix1
  input   data_11;  // ufix1
  input   data_12;  // ufix1
  input   data_13;  // ufix1
  input   [3:0] shift;  // ufix4
  output  shiftData_0;  // ufix1
  output  shiftData_1;  // ufix1
  output  shiftData_2;  // ufix1
  output  shiftData_3;  // ufix1
  output  shiftData_4;  // ufix1
  output  shiftData_5;  // ufix1
  output  shiftData_6;  // ufix1
  output  shiftData_7;  // ufix1
  output  shiftData_8;  // ufix1
  output  shiftData_9;  // ufix1
  output  shiftData_10;  // ufix1
  output  shiftData_11;  // ufix1
  output  shiftData_12;  // ufix1
  output  shiftData_13;  // ufix1


  wire vShift_4;  // ufix1
  wire vShift_3;  // ufix1
  wire vShift_2;  // ufix1
  wire vShift_1;  // ufix1
  wire dout_stage1_1;  // ufix1
  wire dout_stage1_3;  // ufix1
  wire dout_stage2_1;  // ufix1
  wire dout_stage1_5;  // ufix1
  wire dout_stage1_7;  // ufix1
  wire dout_stage2_5;  // ufix1
  wire dout_stage3_1;  // ufix1
  wire dout_stage1_9;  // ufix1
  wire dout_stage1_11;  // ufix1
  wire dout_stage2_9;  // ufix1
  wire dout_stage1_13;  // ufix1
  wire dout_stage2_13;  // ufix1
  wire dout_stage3_9;  // ufix1
  wire dout_stage4_1;  // ufix1
  wire dout_stage1_2;  // ufix1
  wire dout_stage1_4;  // ufix1
  wire dout_stage2_2;  // ufix1
  wire dout_stage1_6;  // ufix1
  wire dout_stage1_8;  // ufix1
  wire dout_stage2_6;  // ufix1
  wire dout_stage3_2;  // ufix1
  wire dout_stage1_10;  // ufix1
  wire dout_stage1_12;  // ufix1
  wire dout_stage2_10;  // ufix1
  wire dout_stage1_14;  // ufix1
  wire dout_stage2_14;  // ufix1
  wire dout_stage3_10;  // ufix1
  wire dout_stage4_2;  // ufix1
  wire dout_stage2_3;  // ufix1
  wire dout_stage2_7;  // ufix1
  wire dout_stage3_3;  // ufix1
  wire dout_stage2_11;  // ufix1
  wire dout_stage3_11;  // ufix1
  wire dout_stage4_3;  // ufix1
  wire dout_stage2_4;  // ufix1
  wire dout_stage2_8;  // ufix1
  wire dout_stage3_4;  // ufix1
  wire dout_stage2_12;  // ufix1
  wire dout_stage3_12;  // ufix1
  wire dout_stage4_4;  // ufix1
  wire dout_stage3_5;  // ufix1
  wire dout_stage3_13;  // ufix1
  wire dout_stage4_5;  // ufix1
  wire dout_stage3_6;  // ufix1
  wire dout_stage3_14;  // ufix1
  wire dout_stage4_6;  // ufix1
  wire dout_stage3_7;  // ufix1
  wire dout_stage4_7;  // ufix1
  wire dout_stage3_8;  // ufix1
  wire dout_stage4_8;  // ufix1
  wire dout_stage4_9;  // ufix1
  wire dout_stage4_10;  // ufix1
  wire dout_stage4_11;  // ufix1
  wire dout_stage4_12;  // ufix1
  wire dout_stage4_13;  // ufix1
  wire dout_stage4_14;  // ufix1


  assign vShift_4 = shift[3];



  assign vShift_3 = shift[2];



  assign vShift_2 = shift[1];



  assign vShift_1 = shift[0];



  assign dout_stage1_1 = (vShift_1 == 1'b0 ? data_0 :
              data_1);



  assign dout_stage1_3 = (vShift_1 == 1'b0 ? data_2 :
              data_3);



  assign dout_stage2_1 = (vShift_2 == 1'b0 ? dout_stage1_1 :
              dout_stage1_3);



  assign dout_stage1_5 = (vShift_1 == 1'b0 ? data_4 :
              data_5);



  assign dout_stage1_7 = (vShift_1 == 1'b0 ? data_6 :
              data_7);



  assign dout_stage2_5 = (vShift_2 == 1'b0 ? dout_stage1_5 :
              dout_stage1_7);



  assign dout_stage3_1 = (vShift_3 == 1'b0 ? dout_stage2_1 :
              dout_stage2_5);



  assign dout_stage1_9 = (vShift_1 == 1'b0 ? data_8 :
              data_9);



  assign dout_stage1_11 = (vShift_1 == 1'b0 ? data_10 :
              data_11);



  assign dout_stage2_9 = (vShift_2 == 1'b0 ? dout_stage1_9 :
              dout_stage1_11);



  assign dout_stage1_13 = (vShift_1 == 1'b0 ? data_12 :
              data_13);



  assign dout_stage2_13 = (vShift_2 == 1'b0 ? dout_stage1_13 :
              dout_stage1_1);



  assign dout_stage3_9 = (vShift_3 == 1'b0 ? dout_stage2_9 :
              dout_stage2_13);



  assign dout_stage4_1 = (vShift_4 == 1'b0 ? dout_stage3_1 :
              dout_stage3_9);



  assign shiftData_0 = dout_stage4_1;

  assign dout_stage1_2 = (vShift_1 == 1'b0 ? data_1 :
              data_2);



  assign dout_stage1_4 = (vShift_1 == 1'b0 ? data_3 :
              data_4);



  assign dout_stage2_2 = (vShift_2 == 1'b0 ? dout_stage1_2 :
              dout_stage1_4);



  assign dout_stage1_6 = (vShift_1 == 1'b0 ? data_5 :
              data_6);



  assign dout_stage1_8 = (vShift_1 == 1'b0 ? data_7 :
              data_8);



  assign dout_stage2_6 = (vShift_2 == 1'b0 ? dout_stage1_6 :
              dout_stage1_8);



  assign dout_stage3_2 = (vShift_3 == 1'b0 ? dout_stage2_2 :
              dout_stage2_6);



  assign dout_stage1_10 = (vShift_1 == 1'b0 ? data_9 :
              data_10);



  assign dout_stage1_12 = (vShift_1 == 1'b0 ? data_11 :
              data_12);



  assign dout_stage2_10 = (vShift_2 == 1'b0 ? dout_stage1_10 :
              dout_stage1_12);



  assign dout_stage1_14 = (vShift_1 == 1'b0 ? data_13 :
              data_0);



  assign dout_stage2_14 = (vShift_2 == 1'b0 ? dout_stage1_14 :
              dout_stage1_2);



  assign dout_stage3_10 = (vShift_3 == 1'b0 ? dout_stage2_10 :
              dout_stage2_14);



  assign dout_stage4_2 = (vShift_4 == 1'b0 ? dout_stage3_2 :
              dout_stage3_10);



  assign shiftData_1 = dout_stage4_2;

  assign dout_stage2_3 = (vShift_2 == 1'b0 ? dout_stage1_3 :
              dout_stage1_5);



  assign dout_stage2_7 = (vShift_2 == 1'b0 ? dout_stage1_7 :
              dout_stage1_9);



  assign dout_stage3_3 = (vShift_3 == 1'b0 ? dout_stage2_3 :
              dout_stage2_7);



  assign dout_stage2_11 = (vShift_2 == 1'b0 ? dout_stage1_11 :
              dout_stage1_13);



  assign dout_stage3_11 = (vShift_3 == 1'b0 ? dout_stage2_11 :
              dout_stage2_1);



  assign dout_stage4_3 = (vShift_4 == 1'b0 ? dout_stage3_3 :
              dout_stage3_11);



  assign shiftData_2 = dout_stage4_3;

  assign dout_stage2_4 = (vShift_2 == 1'b0 ? dout_stage1_4 :
              dout_stage1_6);



  assign dout_stage2_8 = (vShift_2 == 1'b0 ? dout_stage1_8 :
              dout_stage1_10);



  assign dout_stage3_4 = (vShift_3 == 1'b0 ? dout_stage2_4 :
              dout_stage2_8);



  assign dout_stage2_12 = (vShift_2 == 1'b0 ? dout_stage1_12 :
              dout_stage1_14);



  assign dout_stage3_12 = (vShift_3 == 1'b0 ? dout_stage2_12 :
              dout_stage2_2);



  assign dout_stage4_4 = (vShift_4 == 1'b0 ? dout_stage3_4 :
              dout_stage3_12);



  assign shiftData_3 = dout_stage4_4;

  assign dout_stage3_5 = (vShift_3 == 1'b0 ? dout_stage2_5 :
              dout_stage2_9);



  assign dout_stage3_13 = (vShift_3 == 1'b0 ? dout_stage2_13 :
              dout_stage2_3);



  assign dout_stage4_5 = (vShift_4 == 1'b0 ? dout_stage3_5 :
              dout_stage3_13);



  assign shiftData_4 = dout_stage4_5;

  assign dout_stage3_6 = (vShift_3 == 1'b0 ? dout_stage2_6 :
              dout_stage2_10);



  assign dout_stage3_14 = (vShift_3 == 1'b0 ? dout_stage2_14 :
              dout_stage2_4);



  assign dout_stage4_6 = (vShift_4 == 1'b0 ? dout_stage3_6 :
              dout_stage3_14);



  assign shiftData_5 = dout_stage4_6;

  assign dout_stage3_7 = (vShift_3 == 1'b0 ? dout_stage2_7 :
              dout_stage2_11);



  assign dout_stage4_7 = (vShift_4 == 1'b0 ? dout_stage3_7 :
              dout_stage3_1);



  assign shiftData_6 = dout_stage4_7;

  assign dout_stage3_8 = (vShift_3 == 1'b0 ? dout_stage2_8 :
              dout_stage2_12);



  assign dout_stage4_8 = (vShift_4 == 1'b0 ? dout_stage3_8 :
              dout_stage3_2);



  assign shiftData_7 = dout_stage4_8;

  assign dout_stage4_9 = (vShift_4 == 1'b0 ? dout_stage3_9 :
              dout_stage3_3);



  assign shiftData_8 = dout_stage4_9;

  assign dout_stage4_10 = (vShift_4 == 1'b0 ? dout_stage3_10 :
              dout_stage3_4);



  assign shiftData_9 = dout_stage4_10;

  assign dout_stage4_11 = (vShift_4 == 1'b0 ? dout_stage3_11 :
              dout_stage3_5);



  assign shiftData_10 = dout_stage4_11;

  assign dout_stage4_12 = (vShift_4 == 1'b0 ? dout_stage3_12 :
              dout_stage3_6);



  assign shiftData_11 = dout_stage4_12;

  assign dout_stage4_13 = (vShift_4 == 1'b0 ? dout_stage3_13 :
              dout_stage3_7);



  assign shiftData_12 = dout_stage4_13;

  assign dout_stage4_14 = (vShift_4 == 1'b0 ? dout_stage3_14 :
              dout_stage3_8);



  assign shiftData_13 = dout_stage4_14;

endmodule  // tx_125_src_BarrelRotator

