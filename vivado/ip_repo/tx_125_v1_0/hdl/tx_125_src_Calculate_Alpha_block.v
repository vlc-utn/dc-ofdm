// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_Calculate_Alpha_block.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_Calculate_Alpha_block
// Source Path: HDLTx/full_tx/payload_full/reduced_ldpc/Hc_12S-B80/Calculate Alpha
// Hierarchy Level: 4
// Model version: 4.114
// 
// Calculate Alpha
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_Calculate_Alpha_block
          (clk,
           reset_x,
           enb,
           data_0,
           data_1,
           data_2,
           data_3,
           data_4,
           data_5,
           data_6,
           data_7,
           data_8,
           data_9,
           data_10,
           data_11,
           data_12,
           data_13,
           data_14,
           data_15,
           data_16,
           data_17,
           data_18,
           data_19,
           data_20,
           data_21,
           data_22,
           data_23,
           data_24,
           data_25,
           data_26,
           data_27,
           data_28,
           data_29,
           data_30,
           data_31,
           data_32,
           data_33,
           data_34,
           data_35,
           data_36,
           data_37,
           data_38,
           data_39,
           data_40,
           data_41,
           data_42,
           data_43,
           data_44,
           data_45,
           data_46,
           data_47,
           data_48,
           data_49,
           data_50,
           data_51,
           data_52,
           data_53,
           data_54,
           data_55,
           data_56,
           data_57,
           data_58,
           data_59,
           data_60,
           data_61,
           data_62,
           data_63,
           data_64,
           data_65,
           data_66,
           data_67,
           data_68,
           data_69,
           data_70,
           data_71,
           data_72,
           data_73,
           data_74,
           data_75,
           data_76,
           data_77,
           data_78,
           data_79,
           reset,
           encEnable,
           alpha_0,
           alpha_1,
           alpha_2,
           alpha_3,
           alpha_4,
           alpha_5,
           alpha_6,
           alpha_7,
           alpha_8,
           alpha_9,
           alpha_10,
           alpha_11,
           alpha_12,
           alpha_13,
           alpha_14,
           alpha_15,
           alpha_16,
           alpha_17,
           alpha_18,
           alpha_19,
           alpha_20,
           alpha_21,
           alpha_22,
           alpha_23,
           alpha_24,
           alpha_25,
           alpha_26,
           alpha_27,
           alpha_28,
           alpha_29,
           alpha_30,
           alpha_31,
           alpha_32,
           alpha_33,
           alpha_34,
           alpha_35,
           alpha_36,
           alpha_37,
           alpha_38,
           alpha_39,
           alpha_40,
           alpha_41,
           alpha_42,
           alpha_43,
           alpha_44,
           alpha_45,
           alpha_46,
           alpha_47,
           alpha_48,
           alpha_49,
           alpha_50,
           alpha_51,
           alpha_52,
           alpha_53,
           alpha_54,
           alpha_55,
           alpha_56,
           alpha_57,
           alpha_58,
           alpha_59,
           alpha_60,
           alpha_61,
           alpha_62,
           alpha_63,
           alpha_64,
           alpha_65,
           alpha_66,
           alpha_67,
           alpha_68,
           alpha_69,
           alpha_70,
           alpha_71,
           alpha_72,
           alpha_73,
           alpha_74,
           alpha_75,
           alpha_76,
           alpha_77,
           alpha_78,
           alpha_79,
           alphaValid,
           alphaAddr,
           columnVal,
           parity1_0,
           parity1_1,
           parity1_2,
           parity1_3,
           parity1_4,
           parity1_5,
           parity1_6,
           parity1_7,
           parity1_8,
           parity1_9,
           parity1_10,
           parity1_11,
           parity1_12,
           parity1_13,
           parity1_14,
           parity1_15,
           parity1_16,
           parity1_17,
           parity1_18,
           parity1_19,
           parity1_20,
           parity1_21,
           parity1_22,
           parity1_23,
           parity1_24,
           parity1_25,
           parity1_26,
           parity1_27,
           parity1_28,
           parity1_29,
           parity1_30,
           parity1_31,
           parity1_32,
           parity1_33,
           parity1_34,
           parity1_35,
           parity1_36,
           parity1_37,
           parity1_38,
           parity1_39,
           parity1_40,
           parity1_41,
           parity1_42,
           parity1_43,
           parity1_44,
           parity1_45,
           parity1_46,
           parity1_47,
           parity1_48,
           parity1_49,
           parity1_50,
           parity1_51,
           parity1_52,
           parity1_53,
           parity1_54,
           parity1_55,
           parity1_56,
           parity1_57,
           parity1_58,
           parity1_59,
           parity1_60,
           parity1_61,
           parity1_62,
           parity1_63,
           parity1_64,
           parity1_65,
           parity1_66,
           parity1_67,
           parity1_68,
           parity1_69,
           parity1_70,
           parity1_71,
           parity1_72,
           parity1_73,
           parity1_74,
           parity1_75,
           parity1_76,
           parity1_77,
           parity1_78,
           parity1_79);


  input   clk;
  input   reset_x;
  input   enb;
  input   data_0;  // ufix1
  input   data_1;  // ufix1
  input   data_2;  // ufix1
  input   data_3;  // ufix1
  input   data_4;  // ufix1
  input   data_5;  // ufix1
  input   data_6;  // ufix1
  input   data_7;  // ufix1
  input   data_8;  // ufix1
  input   data_9;  // ufix1
  input   data_10;  // ufix1
  input   data_11;  // ufix1
  input   data_12;  // ufix1
  input   data_13;  // ufix1
  input   data_14;  // ufix1
  input   data_15;  // ufix1
  input   data_16;  // ufix1
  input   data_17;  // ufix1
  input   data_18;  // ufix1
  input   data_19;  // ufix1
  input   data_20;  // ufix1
  input   data_21;  // ufix1
  input   data_22;  // ufix1
  input   data_23;  // ufix1
  input   data_24;  // ufix1
  input   data_25;  // ufix1
  input   data_26;  // ufix1
  input   data_27;  // ufix1
  input   data_28;  // ufix1
  input   data_29;  // ufix1
  input   data_30;  // ufix1
  input   data_31;  // ufix1
  input   data_32;  // ufix1
  input   data_33;  // ufix1
  input   data_34;  // ufix1
  input   data_35;  // ufix1
  input   data_36;  // ufix1
  input   data_37;  // ufix1
  input   data_38;  // ufix1
  input   data_39;  // ufix1
  input   data_40;  // ufix1
  input   data_41;  // ufix1
  input   data_42;  // ufix1
  input   data_43;  // ufix1
  input   data_44;  // ufix1
  input   data_45;  // ufix1
  input   data_46;  // ufix1
  input   data_47;  // ufix1
  input   data_48;  // ufix1
  input   data_49;  // ufix1
  input   data_50;  // ufix1
  input   data_51;  // ufix1
  input   data_52;  // ufix1
  input   data_53;  // ufix1
  input   data_54;  // ufix1
  input   data_55;  // ufix1
  input   data_56;  // ufix1
  input   data_57;  // ufix1
  input   data_58;  // ufix1
  input   data_59;  // ufix1
  input   data_60;  // ufix1
  input   data_61;  // ufix1
  input   data_62;  // ufix1
  input   data_63;  // ufix1
  input   data_64;  // ufix1
  input   data_65;  // ufix1
  input   data_66;  // ufix1
  input   data_67;  // ufix1
  input   data_68;  // ufix1
  input   data_69;  // ufix1
  input   data_70;  // ufix1
  input   data_71;  // ufix1
  input   data_72;  // ufix1
  input   data_73;  // ufix1
  input   data_74;  // ufix1
  input   data_75;  // ufix1
  input   data_76;  // ufix1
  input   data_77;  // ufix1
  input   data_78;  // ufix1
  input   data_79;  // ufix1
  input   reset;  // ufix1
  input   encEnable;  // ufix1
  output  alpha_0;  // ufix1
  output  alpha_1;  // ufix1
  output  alpha_2;  // ufix1
  output  alpha_3;  // ufix1
  output  alpha_4;  // ufix1
  output  alpha_5;  // ufix1
  output  alpha_6;  // ufix1
  output  alpha_7;  // ufix1
  output  alpha_8;  // ufix1
  output  alpha_9;  // ufix1
  output  alpha_10;  // ufix1
  output  alpha_11;  // ufix1
  output  alpha_12;  // ufix1
  output  alpha_13;  // ufix1
  output  alpha_14;  // ufix1
  output  alpha_15;  // ufix1
  output  alpha_16;  // ufix1
  output  alpha_17;  // ufix1
  output  alpha_18;  // ufix1
  output  alpha_19;  // ufix1
  output  alpha_20;  // ufix1
  output  alpha_21;  // ufix1
  output  alpha_22;  // ufix1
  output  alpha_23;  // ufix1
  output  alpha_24;  // ufix1
  output  alpha_25;  // ufix1
  output  alpha_26;  // ufix1
  output  alpha_27;  // ufix1
  output  alpha_28;  // ufix1
  output  alpha_29;  // ufix1
  output  alpha_30;  // ufix1
  output  alpha_31;  // ufix1
  output  alpha_32;  // ufix1
  output  alpha_33;  // ufix1
  output  alpha_34;  // ufix1
  output  alpha_35;  // ufix1
  output  alpha_36;  // ufix1
  output  alpha_37;  // ufix1
  output  alpha_38;  // ufix1
  output  alpha_39;  // ufix1
  output  alpha_40;  // ufix1
  output  alpha_41;  // ufix1
  output  alpha_42;  // ufix1
  output  alpha_43;  // ufix1
  output  alpha_44;  // ufix1
  output  alpha_45;  // ufix1
  output  alpha_46;  // ufix1
  output  alpha_47;  // ufix1
  output  alpha_48;  // ufix1
  output  alpha_49;  // ufix1
  output  alpha_50;  // ufix1
  output  alpha_51;  // ufix1
  output  alpha_52;  // ufix1
  output  alpha_53;  // ufix1
  output  alpha_54;  // ufix1
  output  alpha_55;  // ufix1
  output  alpha_56;  // ufix1
  output  alpha_57;  // ufix1
  output  alpha_58;  // ufix1
  output  alpha_59;  // ufix1
  output  alpha_60;  // ufix1
  output  alpha_61;  // ufix1
  output  alpha_62;  // ufix1
  output  alpha_63;  // ufix1
  output  alpha_64;  // ufix1
  output  alpha_65;  // ufix1
  output  alpha_66;  // ufix1
  output  alpha_67;  // ufix1
  output  alpha_68;  // ufix1
  output  alpha_69;  // ufix1
  output  alpha_70;  // ufix1
  output  alpha_71;  // ufix1
  output  alpha_72;  // ufix1
  output  alpha_73;  // ufix1
  output  alpha_74;  // ufix1
  output  alpha_75;  // ufix1
  output  alpha_76;  // ufix1
  output  alpha_77;  // ufix1
  output  alpha_78;  // ufix1
  output  alpha_79;  // ufix1
  output  alphaValid;  // ufix1
  output  [3:0] alphaAddr;  // ufix4
  output  [4:0] columnVal;  // ufix5
  output  parity1_0;  // ufix1
  output  parity1_1;  // ufix1
  output  parity1_2;  // ufix1
  output  parity1_3;  // ufix1
  output  parity1_4;  // ufix1
  output  parity1_5;  // ufix1
  output  parity1_6;  // ufix1
  output  parity1_7;  // ufix1
  output  parity1_8;  // ufix1
  output  parity1_9;  // ufix1
  output  parity1_10;  // ufix1
  output  parity1_11;  // ufix1
  output  parity1_12;  // ufix1
  output  parity1_13;  // ufix1
  output  parity1_14;  // ufix1
  output  parity1_15;  // ufix1
  output  parity1_16;  // ufix1
  output  parity1_17;  // ufix1
  output  parity1_18;  // ufix1
  output  parity1_19;  // ufix1
  output  parity1_20;  // ufix1
  output  parity1_21;  // ufix1
  output  parity1_22;  // ufix1
  output  parity1_23;  // ufix1
  output  parity1_24;  // ufix1
  output  parity1_25;  // ufix1
  output  parity1_26;  // ufix1
  output  parity1_27;  // ufix1
  output  parity1_28;  // ufix1
  output  parity1_29;  // ufix1
  output  parity1_30;  // ufix1
  output  parity1_31;  // ufix1
  output  parity1_32;  // ufix1
  output  parity1_33;  // ufix1
  output  parity1_34;  // ufix1
  output  parity1_35;  // ufix1
  output  parity1_36;  // ufix1
  output  parity1_37;  // ufix1
  output  parity1_38;  // ufix1
  output  parity1_39;  // ufix1
  output  parity1_40;  // ufix1
  output  parity1_41;  // ufix1
  output  parity1_42;  // ufix1
  output  parity1_43;  // ufix1
  output  parity1_44;  // ufix1
  output  parity1_45;  // ufix1
  output  parity1_46;  // ufix1
  output  parity1_47;  // ufix1
  output  parity1_48;  // ufix1
  output  parity1_49;  // ufix1
  output  parity1_50;  // ufix1
  output  parity1_51;  // ufix1
  output  parity1_52;  // ufix1
  output  parity1_53;  // ufix1
  output  parity1_54;  // ufix1
  output  parity1_55;  // ufix1
  output  parity1_56;  // ufix1
  output  parity1_57;  // ufix1
  output  parity1_58;  // ufix1
  output  parity1_59;  // ufix1
  output  parity1_60;  // ufix1
  output  parity1_61;  // ufix1
  output  parity1_62;  // ufix1
  output  parity1_63;  // ufix1
  output  parity1_64;  // ufix1
  output  parity1_65;  // ufix1
  output  parity1_66;  // ufix1
  output  parity1_67;  // ufix1
  output  parity1_68;  // ufix1
  output  parity1_69;  // ufix1
  output  parity1_70;  // ufix1
  output  parity1_71;  // ufix1
  output  parity1_72;  // ufix1
  output  parity1_73;  // ufix1
  output  parity1_74;  // ufix1
  output  parity1_75;  // ufix1
  output  parity1_76;  // ufix1
  output  parity1_77;  // ufix1
  output  parity1_78;  // ufix1
  output  parity1_79;  // ufix1


  reg [3:0] alphaController_countLayer;  // ufix4
  reg  alphaController_layerDone;
  reg [4:0] alphaController_idxCount;  // ufix5
  reg [3:0] alphaController_xIdx;  // ufix4
  reg [4:0] alphaController_yIdx;  // ufix5
  reg  alphaController_encEnb;
  reg  alphaController_alphaEnb;
  reg  alphaController_alphaDone;
  reg [3:0] alphaController_rdCount;  // ufix4
  reg [3:0] alphaController_countLayer_next;  // ufix4
  reg  alphaController_layerDone_next;
  reg [4:0] alphaController_idxCount_next;  // ufix5
  reg [3:0] alphaController_xIdx_next;  // ufix4
  reg [4:0] alphaController_yIdx_next;  // ufix5
  reg  alphaController_encEnb_next;
  reg  alphaController_alphaEnb_next;
  reg  alphaController_alphaDone_next;
  reg [3:0] alphaController_rdCount_next;  // ufix4
  reg [3:0] countLayer;  // ufix4
  reg [3:0] xIndex;  // ufix4
  reg [4:0] yIndex;  // ufix5
  reg  layerDone;  // ufix1
  reg  rdValid;  // ufix1
  reg [3:0] rdAddr;  // ufix4
  reg  aValid;  // ufix1
  reg  [2:0] rdvalid_register_reg;  // ufix1 [3]
  wire rdValidReg;  // ufix1
  reg  rdValidReg1;  // ufix1
  wire switch_compare_1;
  wire [79:0] zeroData;  // ufix1 [80]
  wire [79:0] data;  // ufix1 [80]
  reg  [79:0] rdData;  // ufix1 [80]
  wire const1;  // ufix1
  wire [3:0] alpha;  // ufix4
  wire [3:0] xIdx;  // ufix4
  wire [4:0] alpha_80;  // ufix5
  wire [4:0] yIdx;  // ufix5
  wire [6:0] Shift_LUT_1 [0:83];  // ufix7 [84]
  wire signed [37:0] Shift_LUT_mul_temp;  // sfix38
  wire signed [5:0] Shift_LUT_2;  // sfix6
  wire [6:0] sVal;  // ufix7
  reg [6:0] shift_register_reg [0:2];  // ufix7 [3]
  reg [6:0] shift_register_reg_next [0:2];  // ufix7 [3]
  reg [6:0] shiftVal;  // ufix7
  wire sData_0;  // ufix1
  wire sData_1;  // ufix1
  wire sData_2;  // ufix1
  wire sData_3;  // ufix1
  wire sData_4;  // ufix1
  wire sData_5;  // ufix1
  wire sData_6;  // ufix1
  wire sData_7;  // ufix1
  wire sData_8;  // ufix1
  wire sData_9;  // ufix1
  wire sData_10;  // ufix1
  wire sData_11;  // ufix1
  wire sData_12;  // ufix1
  wire sData_13;  // ufix1
  wire sData_14;  // ufix1
  wire sData_15;  // ufix1
  wire sData_16;  // ufix1
  wire sData_17;  // ufix1
  wire sData_18;  // ufix1
  wire sData_19;  // ufix1
  wire sData_20;  // ufix1
  wire sData_21;  // ufix1
  wire sData_22;  // ufix1
  wire sData_23;  // ufix1
  wire sData_24;  // ufix1
  wire sData_25;  // ufix1
  wire sData_26;  // ufix1
  wire sData_27;  // ufix1
  wire sData_28;  // ufix1
  wire sData_29;  // ufix1
  wire sData_30;  // ufix1
  wire sData_31;  // ufix1
  wire sData_32;  // ufix1
  wire sData_33;  // ufix1
  wire sData_34;  // ufix1
  wire sData_35;  // ufix1
  wire sData_36;  // ufix1
  wire sData_37;  // ufix1
  wire sData_38;  // ufix1
  wire sData_39;  // ufix1
  wire sData_40;  // ufix1
  wire sData_41;  // ufix1
  wire sData_42;  // ufix1
  wire sData_43;  // ufix1
  wire sData_44;  // ufix1
  wire sData_45;  // ufix1
  wire sData_46;  // ufix1
  wire sData_47;  // ufix1
  wire sData_48;  // ufix1
  wire sData_49;  // ufix1
  wire sData_50;  // ufix1
  wire sData_51;  // ufix1
  wire sData_52;  // ufix1
  wire sData_53;  // ufix1
  wire sData_54;  // ufix1
  wire sData_55;  // ufix1
  wire sData_56;  // ufix1
  wire sData_57;  // ufix1
  wire sData_58;  // ufix1
  wire sData_59;  // ufix1
  wire sData_60;  // ufix1
  wire sData_61;  // ufix1
  wire sData_62;  // ufix1
  wire sData_63;  // ufix1
  wire sData_64;  // ufix1
  wire sData_65;  // ufix1
  wire sData_66;  // ufix1
  wire sData_67;  // ufix1
  wire sData_68;  // ufix1
  wire sData_69;  // ufix1
  wire sData_70;  // ufix1
  wire sData_71;  // ufix1
  wire sData_72;  // ufix1
  wire sData_73;  // ufix1
  wire sData_74;  // ufix1
  wire sData_75;  // ufix1
  wire sData_76;  // ufix1
  wire sData_77;  // ufix1
  wire sData_78;  // ufix1
  wire sData_79;  // ufix1
  wire [79:0] sData;  // ufix1 [80]
  reg  [79:0] sDataReg;  // ufix1 [80]
  wire [79:0] sDataTmp;  // ufix1 [80]
  reg  [79:0] shiftData;  // ufix1 [80]
  wire shiftData_0;  // ufix1
  reg  [3:0] layerdone_register_reg;  // ufix1 [4]
  wire layerDoneReg;  // ufix1
  wire encEnb_neg;  // ufix1
  reg  encEnbNegReg;  // ufix1
  wire encEnbTmp;  // ufix1
  reg  [4:0] encenb_tmp_register_reg;  // ufix1 [5]
  wire encEnbTmp1;  // ufix1
  wire wrEnb;  // ufix1
  reg  wrEnbReg;  // ufix1
  wire switch_compare_1_1;
  reg  const1Reg;  // ufix1
  wire shiftData_1;  // ufix1
  wire shiftData_2;  // ufix1
  wire shiftData_3;  // ufix1
  wire shiftData_4;  // ufix1
  wire shiftData_5;  // ufix1
  wire shiftData_6;  // ufix1
  wire shiftData_7;  // ufix1
  wire shiftData_8;  // ufix1
  wire shiftData_9;  // ufix1
  wire shiftData_10;  // ufix1
  wire shiftData_11;  // ufix1
  wire shiftData_12;  // ufix1
  wire shiftData_13;  // ufix1
  wire shiftData_14;  // ufix1
  wire shiftData_15;  // ufix1
  wire shiftData_16;  // ufix1
  wire shiftData_17;  // ufix1
  wire shiftData_18;  // ufix1
  wire shiftData_19;  // ufix1
  wire shiftData_20;  // ufix1
  wire shiftData_21;  // ufix1
  wire shiftData_22;  // ufix1
  wire shiftData_23;  // ufix1
  wire shiftData_24;  // ufix1
  wire shiftData_25;  // ufix1
  wire shiftData_26;  // ufix1
  wire shiftData_27;  // ufix1
  wire shiftData_28;  // ufix1
  wire shiftData_29;  // ufix1
  wire shiftData_30;  // ufix1
  wire shiftData_31;  // ufix1
  wire shiftData_32;  // ufix1
  wire shiftData_33;  // ufix1
  wire shiftData_34;  // ufix1
  wire shiftData_35;  // ufix1
  wire shiftData_36;  // ufix1
  wire shiftData_37;  // ufix1
  wire shiftData_38;  // ufix1
  wire shiftData_39;  // ufix1
  wire shiftData_40;  // ufix1
  wire shiftData_41;  // ufix1
  wire shiftData_42;  // ufix1
  wire shiftData_43;  // ufix1
  wire shiftData_44;  // ufix1
  wire shiftData_45;  // ufix1
  wire shiftData_46;  // ufix1
  wire shiftData_47;  // ufix1
  wire shiftData_48;  // ufix1
  wire shiftData_49;  // ufix1
  wire shiftData_50;  // ufix1
  wire shiftData_51;  // ufix1
  wire shiftData_52;  // ufix1
  wire shiftData_53;  // ufix1
  wire shiftData_54;  // ufix1
  wire shiftData_55;  // ufix1
  wire shiftData_56;  // ufix1
  wire shiftData_57;  // ufix1
  wire shiftData_58;  // ufix1
  wire shiftData_59;  // ufix1
  wire shiftData_60;  // ufix1
  wire shiftData_61;  // ufix1
  wire shiftData_62;  // ufix1
  wire shiftData_63;  // ufix1
  wire shiftData_64;  // ufix1
  wire shiftData_65;  // ufix1
  wire shiftData_66;  // ufix1
  wire shiftData_67;  // ufix1
  wire shiftData_68;  // ufix1
  wire shiftData_69;  // ufix1
  wire shiftData_70;  // ufix1
  wire shiftData_71;  // ufix1
  wire shiftData_72;  // ufix1
  wire shiftData_73;  // ufix1
  wire shiftData_74;  // ufix1
  wire shiftData_75;  // ufix1
  wire shiftData_76;  // ufix1
  wire shiftData_77;  // ufix1
  wire shiftData_78;  // ufix1
  wire shiftData_79;  // ufix1
  wire [79:0] switchData;  // ufix1 [80]
  wire switchData_79;  // ufix1
  wire shiftData_79_1;  // ufix1
  wire switchData_78;  // ufix1
  wire shiftData_78_1;  // ufix1
  wire switchData_77;  // ufix1
  wire shiftData_77_1;  // ufix1
  wire switchData_76;  // ufix1
  wire shiftData_76_1;  // ufix1
  wire switchData_75;  // ufix1
  wire shiftData_75_1;  // ufix1
  wire switchData_74;  // ufix1
  wire shiftData_74_1;  // ufix1
  wire switchData_73;  // ufix1
  wire shiftData_73_1;  // ufix1
  wire switchData_72;  // ufix1
  wire shiftData_72_1;  // ufix1
  wire switchData_71;  // ufix1
  wire shiftData_71_1;  // ufix1
  wire switchData_70;  // ufix1
  wire shiftData_70_1;  // ufix1
  wire switchData_69;  // ufix1
  wire shiftData_69_1;  // ufix1
  wire switchData_68;  // ufix1
  wire shiftData_68_1;  // ufix1
  wire switchData_67;  // ufix1
  wire shiftData_67_1;  // ufix1
  wire switchData_66;  // ufix1
  wire shiftData_66_1;  // ufix1
  wire switchData_65;  // ufix1
  wire shiftData_65_1;  // ufix1
  wire switchData_64;  // ufix1
  wire shiftData_64_1;  // ufix1
  wire switchData_63;  // ufix1
  wire shiftData_63_1;  // ufix1
  wire switchData_62;  // ufix1
  wire shiftData_62_1;  // ufix1
  wire switchData_61;  // ufix1
  wire shiftData_61_1;  // ufix1
  wire switchData_60;  // ufix1
  wire shiftData_60_1;  // ufix1
  wire switchData_59;  // ufix1
  wire shiftData_59_1;  // ufix1
  wire switchData_58;  // ufix1
  wire shiftData_58_1;  // ufix1
  wire switchData_57;  // ufix1
  wire shiftData_57_1;  // ufix1
  wire switchData_56;  // ufix1
  wire shiftData_56_1;  // ufix1
  wire switchData_55;  // ufix1
  wire shiftData_55_1;  // ufix1
  wire switchData_54;  // ufix1
  wire shiftData_54_1;  // ufix1
  wire switchData_53;  // ufix1
  wire shiftData_53_1;  // ufix1
  wire switchData_52;  // ufix1
  wire shiftData_52_1;  // ufix1
  wire switchData_51;  // ufix1
  wire shiftData_51_1;  // ufix1
  wire switchData_50;  // ufix1
  wire shiftData_50_1;  // ufix1
  wire switchData_49;  // ufix1
  wire shiftData_49_1;  // ufix1
  wire switchData_48;  // ufix1
  wire shiftData_48_1;  // ufix1
  wire switchData_47;  // ufix1
  wire shiftData_47_1;  // ufix1
  wire switchData_46;  // ufix1
  wire shiftData_46_1;  // ufix1
  wire switchData_45;  // ufix1
  wire shiftData_45_1;  // ufix1
  wire switchData_44;  // ufix1
  wire shiftData_44_1;  // ufix1
  wire switchData_43;  // ufix1
  wire shiftData_43_1;  // ufix1
  wire switchData_42;  // ufix1
  wire shiftData_42_1;  // ufix1
  wire switchData_41;  // ufix1
  wire shiftData_41_1;  // ufix1
  wire switchData_40;  // ufix1
  wire shiftData_40_1;  // ufix1
  wire switchData_39;  // ufix1
  wire shiftData_39_1;  // ufix1
  wire switchData_38;  // ufix1
  wire shiftData_38_1;  // ufix1
  wire switchData_37;  // ufix1
  wire shiftData_37_1;  // ufix1
  wire switchData_36;  // ufix1
  wire shiftData_36_1;  // ufix1
  wire switchData_35;  // ufix1
  wire shiftData_35_1;  // ufix1
  wire switchData_34;  // ufix1
  wire shiftData_34_1;  // ufix1
  wire switchData_33;  // ufix1
  wire shiftData_33_1;  // ufix1
  wire switchData_32;  // ufix1
  wire shiftData_32_1;  // ufix1
  wire switchData_31;  // ufix1
  wire shiftData_31_1;  // ufix1
  wire switchData_30;  // ufix1
  wire shiftData_30_1;  // ufix1
  wire switchData_29;  // ufix1
  wire shiftData_29_1;  // ufix1
  wire switchData_28;  // ufix1
  wire shiftData_28_1;  // ufix1
  wire switchData_27;  // ufix1
  wire shiftData_27_1;  // ufix1
  wire switchData_26;  // ufix1
  wire shiftData_26_1;  // ufix1
  wire switchData_25;  // ufix1
  wire shiftData_25_1;  // ufix1
  wire switchData_24;  // ufix1
  wire shiftData_24_1;  // ufix1
  wire switchData_23;  // ufix1
  wire shiftData_23_1;  // ufix1
  wire switchData_22;  // ufix1
  wire shiftData_22_1;  // ufix1
  wire switchData_21;  // ufix1
  wire shiftData_21_1;  // ufix1
  wire switchData_20;  // ufix1
  wire shiftData_20_1;  // ufix1
  wire switchData_19;  // ufix1
  wire shiftData_19_1;  // ufix1
  wire switchData_18;  // ufix1
  wire shiftData_18_1;  // ufix1
  wire switchData_17;  // ufix1
  wire shiftData_17_1;  // ufix1
  wire switchData_16;  // ufix1
  wire shiftData_16_1;  // ufix1
  wire switchData_15;  // ufix1
  wire shiftData_15_1;  // ufix1
  wire switchData_14;  // ufix1
  wire shiftData_14_1;  // ufix1
  wire switchData_13;  // ufix1
  wire shiftData_13_1;  // ufix1
  wire switchData_12;  // ufix1
  wire shiftData_12_1;  // ufix1
  wire switchData_11;  // ufix1
  wire shiftData_11_1;  // ufix1
  wire switchData_10;  // ufix1
  wire shiftData_10_1;  // ufix1
  wire switchData_9;  // ufix1
  wire shiftData_9_1;  // ufix1
  wire switchData_8;  // ufix1
  wire shiftData_8_1;  // ufix1
  wire switchData_7;  // ufix1
  wire shiftData_7_1;  // ufix1
  wire switchData_6;  // ufix1
  wire shiftData_6_1;  // ufix1
  wire switchData_5;  // ufix1
  wire shiftData_5_1;  // ufix1
  wire switchData_4;  // ufix1
  wire shiftData_4_1;  // ufix1
  wire switchData_3;  // ufix1
  wire shiftData_3_1;  // ufix1
  wire switchData_2;  // ufix1
  wire shiftData_2_1;  // ufix1
  wire switchData_1;  // ufix1
  wire shiftData_1_1;  // ufix1
  wire [79:0] xorData;  // ufix1 [80]
  reg  [79:0] alpha_switch_delay;  // ufix1 [80]
  wire [79:0] xorDataReg;  // ufix1 [80]
  wire switchData_0;  // ufix1
  wire shiftData_0_1;  // ufix1
  reg  [79:0] wrData;  // ufix1 [80]
  reg [3:0] wraddr_register_reg [0:5];  // ufix4 [6]
  reg [3:0] wraddr_register_reg_next [0:5];  // ufix4 [6]
  reg [3:0] wrAddr;  // ufix4
  reg [3:0] rdaddr_register_reg [0:4];  // ufix4 [5]
  reg [3:0] rdaddr_register_reg_next [0:4];  // ufix4 [5]
  reg [3:0] rdAddrReg;  // ufix4
  wire pri_rd_out_1;  // ufix1
  wire pri_rd_out_1_1;  // ufix1
  wire pri_rd_out_1_2;  // ufix1
  wire pri_rd_out_1_3;  // ufix1
  wire pri_rd_out_1_4;  // ufix1
  wire pri_rd_out_1_5;  // ufix1
  wire pri_rd_out_1_6;  // ufix1
  wire pri_rd_out_1_7;  // ufix1
  wire pri_rd_out_1_8;  // ufix1
  wire pri_rd_out_1_9;  // ufix1
  wire pri_rd_out_1_10;  // ufix1
  wire pri_rd_out_1_11;  // ufix1
  wire pri_rd_out_1_12;  // ufix1
  wire pri_rd_out_1_13;  // ufix1
  wire pri_rd_out_1_14;  // ufix1
  wire pri_rd_out_1_15;  // ufix1
  wire pri_rd_out_1_16;  // ufix1
  wire pri_rd_out_1_17;  // ufix1
  wire pri_rd_out_1_18;  // ufix1
  wire pri_rd_out_1_19;  // ufix1
  wire pri_rd_out_1_20;  // ufix1
  wire pri_rd_out_1_21;  // ufix1
  wire pri_rd_out_1_22;  // ufix1
  wire pri_rd_out_1_23;  // ufix1
  wire pri_rd_out_1_24;  // ufix1
  wire pri_rd_out_1_25;  // ufix1
  wire pri_rd_out_1_26;  // ufix1
  wire pri_rd_out_1_27;  // ufix1
  wire pri_rd_out_1_28;  // ufix1
  wire pri_rd_out_1_29;  // ufix1
  wire pri_rd_out_1_30;  // ufix1
  wire pri_rd_out_1_31;  // ufix1
  wire pri_rd_out_1_32;  // ufix1
  wire pri_rd_out_1_33;  // ufix1
  wire pri_rd_out_1_34;  // ufix1
  wire pri_rd_out_1_35;  // ufix1
  wire pri_rd_out_1_36;  // ufix1
  wire pri_rd_out_1_37;  // ufix1
  wire pri_rd_out_1_38;  // ufix1
  wire pri_rd_out_1_39;  // ufix1
  wire pri_rd_out_1_40;  // ufix1
  wire pri_rd_out_1_41;  // ufix1
  wire pri_rd_out_1_42;  // ufix1
  wire pri_rd_out_1_43;  // ufix1
  wire pri_rd_out_1_44;  // ufix1
  wire pri_rd_out_1_45;  // ufix1
  wire pri_rd_out_1_46;  // ufix1
  wire pri_rd_out_1_47;  // ufix1
  wire pri_rd_out_1_48;  // ufix1
  wire pri_rd_out_1_49;  // ufix1
  wire pri_rd_out_1_50;  // ufix1
  wire pri_rd_out_1_51;  // ufix1
  wire pri_rd_out_1_52;  // ufix1
  wire pri_rd_out_1_53;  // ufix1
  wire pri_rd_out_1_54;  // ufix1
  wire pri_rd_out_1_55;  // ufix1
  wire pri_rd_out_1_56;  // ufix1
  wire pri_rd_out_1_57;  // ufix1
  wire pri_rd_out_1_58;  // ufix1
  wire pri_rd_out_1_59;  // ufix1
  wire pri_rd_out_1_60;  // ufix1
  wire pri_rd_out_1_61;  // ufix1
  wire pri_rd_out_1_62;  // ufix1
  wire pri_rd_out_1_63;  // ufix1
  wire pri_rd_out_1_64;  // ufix1
  wire pri_rd_out_1_65;  // ufix1
  wire pri_rd_out_1_66;  // ufix1
  wire pri_rd_out_1_67;  // ufix1
  wire pri_rd_out_1_68;  // ufix1
  wire pri_rd_out_1_69;  // ufix1
  wire pri_rd_out_1_70;  // ufix1
  wire pri_rd_out_1_71;  // ufix1
  wire pri_rd_out_1_72;  // ufix1
  wire pri_rd_out_1_73;  // ufix1
  wire pri_rd_out_1_74;  // ufix1
  wire pri_rd_out_1_75;  // ufix1
  wire pri_rd_out_1_76;  // ufix1
  wire pri_rd_out_1_77;  // ufix1
  wire pri_rd_out_1_78;  // ufix1
  wire pri_rd_out_1_79;  // ufix1
  reg  [4:0] alphavalid_register_reg;  // ufix1 [5]
  reg [3:0] alphaAddr_1;  // ufix4
  wire [4:0] Column_LUT_1 [0:83];  // ufix5 [84]
  wire signed [37:0] Column_LUT_mul_temp;  // sfix38
  wire signed [5:0] Column_LUT_2;  // sfix6
  wire [4:0] cVal;  // ufix5
  reg [4:0] columnVal_1;  // ufix5
  wire shiftData_0_2;  // ufix1
  wire shiftData_1_2;  // ufix1
  wire shiftData_2_2;  // ufix1
  wire shiftData_3_2;  // ufix1
  wire shiftData_4_2;  // ufix1
  wire shiftData_5_2;  // ufix1
  wire shiftData_6_2;  // ufix1
  wire shiftData_7_2;  // ufix1
  wire shiftData_8_2;  // ufix1
  wire shiftData_9_2;  // ufix1
  wire shiftData_10_2;  // ufix1
  wire shiftData_11_2;  // ufix1
  wire shiftData_12_2;  // ufix1
  wire shiftData_13_2;  // ufix1
  wire shiftData_14_2;  // ufix1
  wire shiftData_15_2;  // ufix1
  wire shiftData_16_2;  // ufix1
  wire shiftData_17_2;  // ufix1
  wire shiftData_18_2;  // ufix1
  wire shiftData_19_2;  // ufix1
  wire shiftData_20_2;  // ufix1
  wire shiftData_21_2;  // ufix1
  wire shiftData_22_2;  // ufix1
  wire shiftData_23_2;  // ufix1
  wire shiftData_24_2;  // ufix1
  wire shiftData_25_2;  // ufix1
  wire shiftData_26_2;  // ufix1
  wire shiftData_27_2;  // ufix1
  wire shiftData_28_2;  // ufix1
  wire shiftData_29_2;  // ufix1
  wire shiftData_30_2;  // ufix1
  wire shiftData_31_2;  // ufix1
  wire shiftData_32_2;  // ufix1
  wire shiftData_33_2;  // ufix1
  wire shiftData_34_2;  // ufix1
  wire shiftData_35_2;  // ufix1
  wire shiftData_36_2;  // ufix1
  wire shiftData_37_2;  // ufix1
  wire shiftData_38_2;  // ufix1
  wire shiftData_39_2;  // ufix1
  wire shiftData_40_2;  // ufix1
  wire shiftData_41_2;  // ufix1
  wire shiftData_42_2;  // ufix1
  wire shiftData_43_2;  // ufix1
  wire shiftData_44_2;  // ufix1
  wire shiftData_45_2;  // ufix1
  wire shiftData_46_2;  // ufix1
  wire shiftData_47_2;  // ufix1
  wire shiftData_48_2;  // ufix1
  wire shiftData_49_2;  // ufix1
  wire shiftData_50_2;  // ufix1
  wire shiftData_51_2;  // ufix1
  wire shiftData_52_2;  // ufix1
  wire shiftData_53_2;  // ufix1
  wire shiftData_54_2;  // ufix1
  wire shiftData_55_2;  // ufix1
  wire shiftData_56_2;  // ufix1
  wire shiftData_57_2;  // ufix1
  wire shiftData_58_2;  // ufix1
  wire shiftData_59_2;  // ufix1
  wire shiftData_60_2;  // ufix1
  wire shiftData_61_2;  // ufix1
  wire shiftData_62_2;  // ufix1
  wire shiftData_63_2;  // ufix1
  wire shiftData_64_2;  // ufix1
  wire shiftData_65_2;  // ufix1
  wire shiftData_66_2;  // ufix1
  wire shiftData_67_2;  // ufix1
  wire shiftData_68_2;  // ufix1
  wire shiftData_69_2;  // ufix1
  wire shiftData_70_2;  // ufix1
  wire shiftData_71_2;  // ufix1
  wire shiftData_72_2;  // ufix1
  wire shiftData_73_2;  // ufix1
  wire shiftData_74_2;  // ufix1
  wire shiftData_75_2;  // ufix1
  wire shiftData_76_2;  // ufix1
  wire shiftData_77_2;  // ufix1
  wire shiftData_78_2;  // ufix1
  wire shiftData_79_2;  // ufix1
  wire [79:0] xorDataParityReg;  // ufix1 [80]
  wire xorDataParityReg_79;  // ufix1
  wire shiftData_79_3;  // ufix1
  wire xorDataParityReg_78;  // ufix1
  wire shiftData_78_3;  // ufix1
  wire xorDataParityReg_77;  // ufix1
  wire shiftData_77_3;  // ufix1
  wire xorDataParityReg_76;  // ufix1
  wire shiftData_76_3;  // ufix1
  wire xorDataParityReg_75;  // ufix1
  wire shiftData_75_3;  // ufix1
  wire xorDataParityReg_74;  // ufix1
  wire shiftData_74_3;  // ufix1
  wire xorDataParityReg_73;  // ufix1
  wire shiftData_73_3;  // ufix1
  wire xorDataParityReg_72;  // ufix1
  wire shiftData_72_3;  // ufix1
  wire xorDataParityReg_71;  // ufix1
  wire shiftData_71_3;  // ufix1
  wire xorDataParityReg_70;  // ufix1
  wire shiftData_70_3;  // ufix1
  wire xorDataParityReg_69;  // ufix1
  wire shiftData_69_3;  // ufix1
  wire xorDataParityReg_68;  // ufix1
  wire shiftData_68_3;  // ufix1
  wire xorDataParityReg_67;  // ufix1
  wire shiftData_67_3;  // ufix1
  wire xorDataParityReg_66;  // ufix1
  wire shiftData_66_3;  // ufix1
  wire xorDataParityReg_65;  // ufix1
  wire shiftData_65_3;  // ufix1
  wire xorDataParityReg_64;  // ufix1
  wire shiftData_64_3;  // ufix1
  wire xorDataParityReg_63;  // ufix1
  wire shiftData_63_3;  // ufix1
  wire xorDataParityReg_62;  // ufix1
  wire shiftData_62_3;  // ufix1
  wire xorDataParityReg_61;  // ufix1
  wire shiftData_61_3;  // ufix1
  wire xorDataParityReg_60;  // ufix1
  wire shiftData_60_3;  // ufix1
  wire xorDataParityReg_59;  // ufix1
  wire shiftData_59_3;  // ufix1
  wire xorDataParityReg_58;  // ufix1
  wire shiftData_58_3;  // ufix1
  wire xorDataParityReg_57;  // ufix1
  wire shiftData_57_3;  // ufix1
  wire xorDataParityReg_56;  // ufix1
  wire shiftData_56_3;  // ufix1
  wire xorDataParityReg_55;  // ufix1
  wire shiftData_55_3;  // ufix1
  wire xorDataParityReg_54;  // ufix1
  wire shiftData_54_3;  // ufix1
  wire xorDataParityReg_53;  // ufix1
  wire shiftData_53_3;  // ufix1
  wire xorDataParityReg_52;  // ufix1
  wire shiftData_52_3;  // ufix1
  wire xorDataParityReg_51;  // ufix1
  wire shiftData_51_3;  // ufix1
  wire xorDataParityReg_50;  // ufix1
  wire shiftData_50_3;  // ufix1
  wire xorDataParityReg_49;  // ufix1
  wire shiftData_49_3;  // ufix1
  wire xorDataParityReg_48;  // ufix1
  wire shiftData_48_3;  // ufix1
  wire xorDataParityReg_47;  // ufix1
  wire shiftData_47_3;  // ufix1
  wire xorDataParityReg_46;  // ufix1
  wire shiftData_46_3;  // ufix1
  wire xorDataParityReg_45;  // ufix1
  wire shiftData_45_3;  // ufix1
  wire xorDataParityReg_44;  // ufix1
  wire shiftData_44_3;  // ufix1
  wire xorDataParityReg_43;  // ufix1
  wire shiftData_43_3;  // ufix1
  wire xorDataParityReg_42;  // ufix1
  wire shiftData_42_3;  // ufix1
  wire xorDataParityReg_41;  // ufix1
  wire shiftData_41_3;  // ufix1
  wire xorDataParityReg_40;  // ufix1
  wire shiftData_40_3;  // ufix1
  wire xorDataParityReg_39;  // ufix1
  wire shiftData_39_3;  // ufix1
  wire xorDataParityReg_38;  // ufix1
  wire shiftData_38_3;  // ufix1
  wire xorDataParityReg_37;  // ufix1
  wire shiftData_37_3;  // ufix1
  wire xorDataParityReg_36;  // ufix1
  wire shiftData_36_3;  // ufix1
  wire xorDataParityReg_35;  // ufix1
  wire shiftData_35_3;  // ufix1
  wire xorDataParityReg_34;  // ufix1
  wire shiftData_34_3;  // ufix1
  wire xorDataParityReg_33;  // ufix1
  wire shiftData_33_3;  // ufix1
  wire xorDataParityReg_32;  // ufix1
  wire shiftData_32_3;  // ufix1
  wire xorDataParityReg_31;  // ufix1
  wire shiftData_31_3;  // ufix1
  wire xorDataParityReg_30;  // ufix1
  wire shiftData_30_3;  // ufix1
  wire xorDataParityReg_29;  // ufix1
  wire shiftData_29_3;  // ufix1
  wire xorDataParityReg_28;  // ufix1
  wire shiftData_28_3;  // ufix1
  wire xorDataParityReg_27;  // ufix1
  wire shiftData_27_3;  // ufix1
  wire xorDataParityReg_26;  // ufix1
  wire shiftData_26_3;  // ufix1
  wire xorDataParityReg_25;  // ufix1
  wire shiftData_25_3;  // ufix1
  wire xorDataParityReg_24;  // ufix1
  wire shiftData_24_3;  // ufix1
  wire xorDataParityReg_23;  // ufix1
  wire shiftData_23_3;  // ufix1
  wire xorDataParityReg_22;  // ufix1
  wire shiftData_22_3;  // ufix1
  wire xorDataParityReg_21;  // ufix1
  wire shiftData_21_3;  // ufix1
  wire xorDataParityReg_20;  // ufix1
  wire shiftData_20_3;  // ufix1
  wire xorDataParityReg_19;  // ufix1
  wire shiftData_19_3;  // ufix1
  wire xorDataParityReg_18;  // ufix1
  wire shiftData_18_3;  // ufix1
  wire xorDataParityReg_17;  // ufix1
  wire shiftData_17_3;  // ufix1
  wire xorDataParityReg_16;  // ufix1
  wire shiftData_16_3;  // ufix1
  wire xorDataParityReg_15;  // ufix1
  wire shiftData_15_3;  // ufix1
  wire xorDataParityReg_14;  // ufix1
  wire shiftData_14_3;  // ufix1
  wire xorDataParityReg_13;  // ufix1
  wire shiftData_13_3;  // ufix1
  wire xorDataParityReg_12;  // ufix1
  wire shiftData_12_3;  // ufix1
  wire xorDataParityReg_11;  // ufix1
  wire shiftData_11_3;  // ufix1
  wire xorDataParityReg_10;  // ufix1
  wire shiftData_10_3;  // ufix1
  wire xorDataParityReg_9;  // ufix1
  wire shiftData_9_3;  // ufix1
  wire xorDataParityReg_8;  // ufix1
  wire shiftData_8_3;  // ufix1
  wire xorDataParityReg_7;  // ufix1
  wire shiftData_7_3;  // ufix1
  wire xorDataParityReg_6;  // ufix1
  wire shiftData_6_3;  // ufix1
  wire xorDataParityReg_5;  // ufix1
  wire shiftData_5_3;  // ufix1
  wire xorDataParityReg_4;  // ufix1
  wire shiftData_4_3;  // ufix1
  wire xorDataParityReg_3;  // ufix1
  wire shiftData_3_3;  // ufix1
  wire xorDataParityReg_2;  // ufix1
  wire shiftData_2_3;  // ufix1
  wire xorDataParityReg_1;  // ufix1
  wire shiftData_1_3;  // ufix1
  wire [79:0] xorDataParity1;  // ufix1 [80]
  reg  [79:0] alpha_switch_delay_1;  // ufix1 [80]
  wire xorDataParityReg_0;  // ufix1
  wire shiftData_0_3;  // ufix1
  reg  [79:0] parity1;  // ufix1 [80]
  reg [4:0] alphaController_countIdx;  // ufix5
  reg [3:0] alphaController_countLayer_temp;  // ufix4
  reg [4:0] alphaController_idxCount_temp;  // ufix5
  reg  alphaController_encEnb_temp;
  reg  alphaController_alphaDone_temp;
  reg signed [7:0] alphaController_t_0_0 [0:11];  // int8 [12]
  reg signed [7:0] alphaController_t_1 [0:12];  // int8 [13]
  reg signed [31:0] shift_register_t_0_0;  // int32
  reg signed [31:0] shift_register_t_0_1;  // int32
  reg signed [31:0] shift_register_t_1;  // int32
  reg signed [31:0] wraddr_register_t_0_0;  // int32
  reg signed [31:0] wraddr_register_t_0_1;  // int32
  reg signed [31:0] wraddr_register_t_1;  // int32
  reg signed [31:0] rdaddr_register_t_0_0;  // int32
  reg signed [31:0] rdaddr_register_t_0_1;  // int32
  reg signed [31:0] rdaddr_register_t_1;  // int32


  always @(posedge clk)
    begin : alphaController_process
      if (reset_x == 1'b1) begin
        alphaController_countLayer <= 4'b0001;
        alphaController_layerDone <= 1'b0;
        alphaController_idxCount <= 5'b00001;
        alphaController_encEnb <= 1'b0;
        alphaController_xIdx <= 4'b0001;
        alphaController_yIdx <= 5'b00001;
        alphaController_alphaEnb <= 1'b0;
        alphaController_alphaDone <= 1'b0;
        alphaController_rdCount <= 4'b0001;
      end
      else begin
        if (enb) begin
          alphaController_countLayer <= alphaController_countLayer_next;
          alphaController_layerDone <= alphaController_layerDone_next;
          alphaController_idxCount <= alphaController_idxCount_next;
          alphaController_xIdx <= alphaController_xIdx_next;
          alphaController_yIdx <= alphaController_yIdx_next;
          alphaController_encEnb <= alphaController_encEnb_next;
          alphaController_alphaEnb <= alphaController_alphaEnb_next;
          alphaController_alphaDone <= alphaController_alphaDone_next;
          alphaController_rdCount <= alphaController_rdCount_next;
        end
      end
    end

  always @(alphaController_alphaDone, alphaController_alphaEnb,
       alphaController_countLayer, alphaController_encEnb,
       alphaController_idxCount, alphaController_layerDone,
       alphaController_rdCount, alphaController_xIdx, alphaController_yIdx,
       encEnable, reset) begin
    alphaController_t_0_0[0] = 8'sd6;
    alphaController_t_0_0[1] = 8'sd7;
    alphaController_t_0_0[2] = 8'sd7;
    alphaController_t_0_0[3] = 8'sd6;
    alphaController_t_0_0[4] = 8'sd6;
    alphaController_t_0_0[5] = 8'sd6;
    alphaController_t_0_0[6] = 8'sd6;
    alphaController_t_0_0[7] = 8'sd6;
    alphaController_t_0_0[8] = 8'sd7;
    alphaController_t_0_0[9] = 8'sd6;
    alphaController_t_0_0[10] = 8'sd7;
    alphaController_t_0_0[11] = 8'sd6;
    alphaController_t_1[0] = 8'sd1;
    alphaController_t_1[1] = 8'sd2;
    alphaController_t_1[2] = 8'sd3;
    alphaController_t_1[3] = 8'sd4;
    alphaController_t_1[4] = 8'sd5;
    alphaController_t_1[5] = 8'sd6;
    alphaController_t_1[6] = 8'sd7;
    alphaController_t_1[7] = 8'sd8;
    alphaController_t_1[8] = 8'sd9;
    alphaController_t_1[9] = 8'sd10;
    alphaController_t_1[10] = 8'sd11;
    alphaController_t_1[11] = 8'sd12;
    alphaController_t_1[12] = 8'sd1;
    alphaController_countLayer_temp = alphaController_countLayer;
    alphaController_idxCount_temp = alphaController_idxCount;
    alphaController_encEnb_temp = alphaController_encEnb;
    alphaController_alphaDone_temp = alphaController_alphaDone;
    alphaController_layerDone_next = alphaController_layerDone;
    alphaController_rdCount_next = alphaController_rdCount;
    alphaController_countIdx = alphaController_t_0_0[$signed({1'b0, alphaController_countLayer}) - 32'sd1][4:0];
    if (reset != 1'b0) begin
      alphaController_countLayer_temp = 4'b0001;
      alphaController_encEnb_temp = 1'b1;
      alphaController_layerDone_next = 1'b0;
      alphaController_idxCount_temp = 5'b00001;
      alphaController_alphaDone_temp = 1'b0;
    end
    else if (alphaController_alphaEnb) begin
      if (alphaController_idxCount == alphaController_countIdx) begin
        if (alphaController_countLayer == 4'b1100) begin
          alphaController_countLayer_temp = 4'b0001;
          alphaController_layerDone_next = 1'b1;
          alphaController_idxCount_temp = 5'b00001;
          alphaController_encEnb_temp = 1'b0;
          alphaController_alphaDone_temp = 1'b1;
        end
        else begin
          alphaController_countLayer_temp = alphaController_countLayer + 4'b0001;
          alphaController_layerDone_next = 1'b1;
          alphaController_idxCount_temp = 5'b00001;
          alphaController_alphaDone_temp = 1'b0;
        end
      end
      else begin
        alphaController_idxCount_temp = alphaController_idxCount + 5'b00001;
        alphaController_layerDone_next = 1'b0;
        alphaController_alphaDone_temp = 1'b0;
      end
    end
    alphaController_xIdx_next = alphaController_countLayer_temp;
    alphaController_yIdx_next = alphaController_idxCount_temp;
    if (reset != 1'b0) begin
      alphaController_alphaEnb_next = 1'b0;
    end
    else begin
      alphaController_alphaEnb_next = encEnable && alphaController_encEnb_temp;
    end
    if (reset != 1'b0) begin
      alphaController_rdCount_next = 4'b0001;
      alphaController_alphaDone_temp = 1'b0;
    end
    else if (alphaController_alphaDone_temp) begin
      if (alphaController_rdCount == 4'b1101) begin
        alphaController_alphaDone_temp = 1'b0;
      end
      else begin
        alphaController_rdCount_next = alphaController_rdCount + 4'b0001;
      end
    end
    countLayer = alphaController_countLayer;
    xIndex = alphaController_xIdx;
    yIndex = alphaController_yIdx;
    layerDone = alphaController_layerDone;
    rdValid = alphaController_alphaEnb;
    rdAddr = alphaController_t_1[$signed({1'b0, alphaController_rdCount}) - 32'sd1][3:0];
    aValid = alphaController_alphaDone;
    alphaController_countLayer_next = alphaController_countLayer_temp;
    alphaController_idxCount_next = alphaController_idxCount_temp;
    alphaController_encEnb_next = alphaController_encEnb_temp;
    alphaController_alphaDone_next = alphaController_alphaDone_temp;
  end



  always @(posedge clk)
    begin : rdvalid_register_process
      if (reset_x == 1'b1) begin
        rdvalid_register_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rdvalid_register_reg[0] <= rdValid;
          rdvalid_register_reg[32'sd2:32'sd1] <= rdvalid_register_reg[32'sd1:32'sd0];
        end
      end
    end

  assign rdValidReg = rdvalid_register_reg[2];



  always @(posedge clk)
    begin : rdValid_register_1_process
      if (reset_x == 1'b1) begin
        rdValidReg1 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdValidReg1 <= rdValidReg;
        end
      end
    end



  assign switch_compare_1 = rdValidReg1 > 1'b0;



  assign zeroData = {80{1'b0}};



  assign data[0] = data_0;
  assign data[1] = data_1;
  assign data[2] = data_2;
  assign data[3] = data_3;
  assign data[4] = data_4;
  assign data[5] = data_5;
  assign data[6] = data_6;
  assign data[7] = data_7;
  assign data[8] = data_8;
  assign data[9] = data_9;
  assign data[10] = data_10;
  assign data[11] = data_11;
  assign data[12] = data_12;
  assign data[13] = data_13;
  assign data[14] = data_14;
  assign data[15] = data_15;
  assign data[16] = data_16;
  assign data[17] = data_17;
  assign data[18] = data_18;
  assign data[19] = data_19;
  assign data[20] = data_20;
  assign data[21] = data_21;
  assign data[22] = data_22;
  assign data[23] = data_23;
  assign data[24] = data_24;
  assign data[25] = data_25;
  assign data[26] = data_26;
  assign data[27] = data_27;
  assign data[28] = data_28;
  assign data[29] = data_29;
  assign data[30] = data_30;
  assign data[31] = data_31;
  assign data[32] = data_32;
  assign data[33] = data_33;
  assign data[34] = data_34;
  assign data[35] = data_35;
  assign data[36] = data_36;
  assign data[37] = data_37;
  assign data[38] = data_38;
  assign data[39] = data_39;
  assign data[40] = data_40;
  assign data[41] = data_41;
  assign data[42] = data_42;
  assign data[43] = data_43;
  assign data[44] = data_44;
  assign data[45] = data_45;
  assign data[46] = data_46;
  assign data[47] = data_47;
  assign data[48] = data_48;
  assign data[49] = data_49;
  assign data[50] = data_50;
  assign data[51] = data_51;
  assign data[52] = data_52;
  assign data[53] = data_53;
  assign data[54] = data_54;
  assign data[55] = data_55;
  assign data[56] = data_56;
  assign data[57] = data_57;
  assign data[58] = data_58;
  assign data[59] = data_59;
  assign data[60] = data_60;
  assign data[61] = data_61;
  assign data[62] = data_62;
  assign data[63] = data_63;
  assign data[64] = data_64;
  assign data[65] = data_65;
  assign data[66] = data_66;
  assign data[67] = data_67;
  assign data[68] = data_68;
  assign data[69] = data_69;
  assign data[70] = data_70;
  assign data[71] = data_71;
  assign data[72] = data_72;
  assign data[73] = data_73;
  assign data[74] = data_74;
  assign data[75] = data_75;
  assign data[76] = data_76;
  assign data[77] = data_77;
  assign data[78] = data_78;
  assign data[79] = data_79;

  always @(posedge clk)
    begin : data_register_process
      if (reset_x == 1'b1) begin
        rdData <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          rdData <= data;
        end
      end
    end



  assign const1 = 1'b1;



  assign alpha = {3'b0, const1};
  assign xIdx = xIndex - alpha;



  assign alpha_80 = {4'b0, const1};
  assign yIdx = yIndex - alpha_80;



  assign Shift_LUT_1[0] = 7'b0011011;
  assign Shift_LUT_1[1] = 7'b0000000;
  assign Shift_LUT_1[2] = 7'b0101001;
  assign Shift_LUT_1[3] = 7'b0010000;
  assign Shift_LUT_1[4] = 7'b0101101;
  assign Shift_LUT_1[5] = 7'b0111111;
  assign Shift_LUT_1[6] = 7'b0101010;
  assign Shift_LUT_1[7] = 7'b1001110;
  assign Shift_LUT_1[8] = 7'b0011101;
  assign Shift_LUT_1[9] = 7'b0010110;
  assign Shift_LUT_1[10] = 7'b0100011;
  assign Shift_LUT_1[11] = 7'b0101110;
  assign Shift_LUT_1[12] = 7'b0110111;
  assign Shift_LUT_1[13] = 7'b0000001;
  assign Shift_LUT_1[14] = 7'b0101100;
  assign Shift_LUT_1[15] = 7'b1001101;
  assign Shift_LUT_1[16] = 7'b0011011;
  assign Shift_LUT_1[17] = 7'b0110111;
  assign Shift_LUT_1[18] = 7'b0010101;
  assign Shift_LUT_1[19] = 7'b0000000;
  assign Shift_LUT_1[20] = 7'b0001001;
  assign Shift_LUT_1[21] = 7'b1001000;
  assign Shift_LUT_1[22] = 7'b0001101;
  assign Shift_LUT_1[23] = 7'b0011100;
  assign Shift_LUT_1[24] = 7'b0010011;
  assign Shift_LUT_1[25] = 7'b1000110;
  assign Shift_LUT_1[26] = 7'b0111011;
  assign Shift_LUT_1[27] = 7'b0000101;
  assign Shift_LUT_1[28] = 7'b0101110;
  assign Shift_LUT_1[29] = 7'b0110000;
  assign Shift_LUT_1[30] = 7'b0111010;
  assign Shift_LUT_1[31] = 7'b0000111;
  assign Shift_LUT_1[32] = 7'b0100101;
  assign Shift_LUT_1[33] = 7'b0101111;
  assign Shift_LUT_1[34] = 7'b0100011;
  assign Shift_LUT_1[35] = 7'b0100110;
  assign Shift_LUT_1[36] = 7'b0011110;
  assign Shift_LUT_1[37] = 7'b0101111;
  assign Shift_LUT_1[38] = 7'b0111100;
  assign Shift_LUT_1[39] = 7'b0110000;
  assign Shift_LUT_1[40] = 7'b0010011;
  assign Shift_LUT_1[41] = 7'b0011010;
  assign Shift_LUT_1[42] = 7'b0101001;
  assign Shift_LUT_1[43] = 7'b0110100;
  assign Shift_LUT_1[44] = 7'b0100011;
  assign Shift_LUT_1[45] = 7'b0000000;
  assign Shift_LUT_1[46] = 7'b1000110;
  assign Shift_LUT_1[47] = 7'b0001000;
  assign Shift_LUT_1[48] = 7'b0001010;
  assign Shift_LUT_1[49] = 7'b0111110;
  assign Shift_LUT_1[50] = 7'b0011001;
  assign Shift_LUT_1[51] = 7'b0000000;
  assign Shift_LUT_1[52] = 7'b0000000;
  assign Shift_LUT_1[53] = 7'b0000000;
  assign Shift_LUT_1[54] = 7'b0000000;
  assign Shift_LUT_1[55] = 7'b0000000;
  assign Shift_LUT_1[56] = 7'b0010101;
  assign Shift_LUT_1[57] = 7'b0000000;
  assign Shift_LUT_1[58] = 7'b0000000;
  assign Shift_LUT_1[59] = 7'b0001010;
  assign Shift_LUT_1[60] = 7'b0000000;
  assign Shift_LUT_1[61] = 7'b0000000;
  assign Shift_LUT_1[62] = 7'b0000000;
  assign Shift_LUT_1[63] = 7'b0000000;
  assign Shift_LUT_1[64] = 7'b0000000;
  assign Shift_LUT_1[65] = 7'b0000000;
  assign Shift_LUT_1[66] = 7'b0000000;
  assign Shift_LUT_1[67] = 7'b0000000;
  assign Shift_LUT_1[68] = 7'b0000000;
  assign Shift_LUT_1[69] = 7'b0000000;
  assign Shift_LUT_1[70] = 7'b0000000;
  assign Shift_LUT_1[71] = 7'b0000000;
  assign Shift_LUT_1[72] = 7'b0000000;
  assign Shift_LUT_1[73] = 7'b0000000;
  assign Shift_LUT_1[74] = 7'b0000000;
  assign Shift_LUT_1[75] = 7'b0000000;
  assign Shift_LUT_1[76] = 7'b0000000;
  assign Shift_LUT_1[77] = 7'b0000000;
  assign Shift_LUT_1[78] = 7'b0000000;
  assign Shift_LUT_1[79] = 7'b0000000;
  assign Shift_LUT_1[80] = 7'b0000000;
  assign Shift_LUT_1[81] = 7'b0000000;
  assign Shift_LUT_1[82] = 7'b0000000;
  assign Shift_LUT_1[83] = 7'b0000000;
  assign Shift_LUT_2 = {1'b0, yIdx};
  assign Shift_LUT_mul_temp = Shift_LUT_2 * 32'sd12;
  assign sVal = Shift_LUT_1[$signed({1'b0, xIdx}) + Shift_LUT_mul_temp];



  always @(posedge clk)
    begin : shift_register_process
      if (reset_x == 1'b1) begin
        for(shift_register_t_1 = 32'sd0; shift_register_t_1 <= 32'sd2; shift_register_t_1 = shift_register_t_1 + 32'sd1) begin
          shift_register_reg[shift_register_t_1] <= 7'b0000000;
        end
      end
      else begin
        if (enb) begin
          for(shift_register_t_0_1 = 32'sd0; shift_register_t_0_1 <= 32'sd2; shift_register_t_0_1 = shift_register_t_0_1 + 32'sd1) begin
            shift_register_reg[shift_register_t_0_1] <= shift_register_reg_next[shift_register_t_0_1];
          end
        end
      end
    end

  always @* begin
    shiftVal = shift_register_reg[2];
    shift_register_reg_next[0] = sVal;

    for(shift_register_t_0_0 = 32'sd0; shift_register_t_0_0 <= 32'sd1; shift_register_t_0_0 = shift_register_t_0_0 + 32'sd1) begin
      shift_register_reg_next[shift_register_t_0_0 + 32'sd1] = shift_register_reg[shift_register_t_0_0];
    end

  end



  tx_125_src_BarrelRotator_block u_Barrel_Rotator_Unit (.data_0(rdData[0]),  // ufix1
                                                        .data_1(rdData[1]),  // ufix1
                                                        .data_2(rdData[2]),  // ufix1
                                                        .data_3(rdData[3]),  // ufix1
                                                        .data_4(rdData[4]),  // ufix1
                                                        .data_5(rdData[5]),  // ufix1
                                                        .data_6(rdData[6]),  // ufix1
                                                        .data_7(rdData[7]),  // ufix1
                                                        .data_8(rdData[8]),  // ufix1
                                                        .data_9(rdData[9]),  // ufix1
                                                        .data_10(rdData[10]),  // ufix1
                                                        .data_11(rdData[11]),  // ufix1
                                                        .data_12(rdData[12]),  // ufix1
                                                        .data_13(rdData[13]),  // ufix1
                                                        .data_14(rdData[14]),  // ufix1
                                                        .data_15(rdData[15]),  // ufix1
                                                        .data_16(rdData[16]),  // ufix1
                                                        .data_17(rdData[17]),  // ufix1
                                                        .data_18(rdData[18]),  // ufix1
                                                        .data_19(rdData[19]),  // ufix1
                                                        .data_20(rdData[20]),  // ufix1
                                                        .data_21(rdData[21]),  // ufix1
                                                        .data_22(rdData[22]),  // ufix1
                                                        .data_23(rdData[23]),  // ufix1
                                                        .data_24(rdData[24]),  // ufix1
                                                        .data_25(rdData[25]),  // ufix1
                                                        .data_26(rdData[26]),  // ufix1
                                                        .data_27(rdData[27]),  // ufix1
                                                        .data_28(rdData[28]),  // ufix1
                                                        .data_29(rdData[29]),  // ufix1
                                                        .data_30(rdData[30]),  // ufix1
                                                        .data_31(rdData[31]),  // ufix1
                                                        .data_32(rdData[32]),  // ufix1
                                                        .data_33(rdData[33]),  // ufix1
                                                        .data_34(rdData[34]),  // ufix1
                                                        .data_35(rdData[35]),  // ufix1
                                                        .data_36(rdData[36]),  // ufix1
                                                        .data_37(rdData[37]),  // ufix1
                                                        .data_38(rdData[38]),  // ufix1
                                                        .data_39(rdData[39]),  // ufix1
                                                        .data_40(rdData[40]),  // ufix1
                                                        .data_41(rdData[41]),  // ufix1
                                                        .data_42(rdData[42]),  // ufix1
                                                        .data_43(rdData[43]),  // ufix1
                                                        .data_44(rdData[44]),  // ufix1
                                                        .data_45(rdData[45]),  // ufix1
                                                        .data_46(rdData[46]),  // ufix1
                                                        .data_47(rdData[47]),  // ufix1
                                                        .data_48(rdData[48]),  // ufix1
                                                        .data_49(rdData[49]),  // ufix1
                                                        .data_50(rdData[50]),  // ufix1
                                                        .data_51(rdData[51]),  // ufix1
                                                        .data_52(rdData[52]),  // ufix1
                                                        .data_53(rdData[53]),  // ufix1
                                                        .data_54(rdData[54]),  // ufix1
                                                        .data_55(rdData[55]),  // ufix1
                                                        .data_56(rdData[56]),  // ufix1
                                                        .data_57(rdData[57]),  // ufix1
                                                        .data_58(rdData[58]),  // ufix1
                                                        .data_59(rdData[59]),  // ufix1
                                                        .data_60(rdData[60]),  // ufix1
                                                        .data_61(rdData[61]),  // ufix1
                                                        .data_62(rdData[62]),  // ufix1
                                                        .data_63(rdData[63]),  // ufix1
                                                        .data_64(rdData[64]),  // ufix1
                                                        .data_65(rdData[65]),  // ufix1
                                                        .data_66(rdData[66]),  // ufix1
                                                        .data_67(rdData[67]),  // ufix1
                                                        .data_68(rdData[68]),  // ufix1
                                                        .data_69(rdData[69]),  // ufix1
                                                        .data_70(rdData[70]),  // ufix1
                                                        .data_71(rdData[71]),  // ufix1
                                                        .data_72(rdData[72]),  // ufix1
                                                        .data_73(rdData[73]),  // ufix1
                                                        .data_74(rdData[74]),  // ufix1
                                                        .data_75(rdData[75]),  // ufix1
                                                        .data_76(rdData[76]),  // ufix1
                                                        .data_77(rdData[77]),  // ufix1
                                                        .data_78(rdData[78]),  // ufix1
                                                        .data_79(rdData[79]),  // ufix1
                                                        .shift(shiftVal),  // ufix7
                                                        .shiftData_0(sData_0),  // ufix1
                                                        .shiftData_1(sData_1),  // ufix1
                                                        .shiftData_2(sData_2),  // ufix1
                                                        .shiftData_3(sData_3),  // ufix1
                                                        .shiftData_4(sData_4),  // ufix1
                                                        .shiftData_5(sData_5),  // ufix1
                                                        .shiftData_6(sData_6),  // ufix1
                                                        .shiftData_7(sData_7),  // ufix1
                                                        .shiftData_8(sData_8),  // ufix1
                                                        .shiftData_9(sData_9),  // ufix1
                                                        .shiftData_10(sData_10),  // ufix1
                                                        .shiftData_11(sData_11),  // ufix1
                                                        .shiftData_12(sData_12),  // ufix1
                                                        .shiftData_13(sData_13),  // ufix1
                                                        .shiftData_14(sData_14),  // ufix1
                                                        .shiftData_15(sData_15),  // ufix1
                                                        .shiftData_16(sData_16),  // ufix1
                                                        .shiftData_17(sData_17),  // ufix1
                                                        .shiftData_18(sData_18),  // ufix1
                                                        .shiftData_19(sData_19),  // ufix1
                                                        .shiftData_20(sData_20),  // ufix1
                                                        .shiftData_21(sData_21),  // ufix1
                                                        .shiftData_22(sData_22),  // ufix1
                                                        .shiftData_23(sData_23),  // ufix1
                                                        .shiftData_24(sData_24),  // ufix1
                                                        .shiftData_25(sData_25),  // ufix1
                                                        .shiftData_26(sData_26),  // ufix1
                                                        .shiftData_27(sData_27),  // ufix1
                                                        .shiftData_28(sData_28),  // ufix1
                                                        .shiftData_29(sData_29),  // ufix1
                                                        .shiftData_30(sData_30),  // ufix1
                                                        .shiftData_31(sData_31),  // ufix1
                                                        .shiftData_32(sData_32),  // ufix1
                                                        .shiftData_33(sData_33),  // ufix1
                                                        .shiftData_34(sData_34),  // ufix1
                                                        .shiftData_35(sData_35),  // ufix1
                                                        .shiftData_36(sData_36),  // ufix1
                                                        .shiftData_37(sData_37),  // ufix1
                                                        .shiftData_38(sData_38),  // ufix1
                                                        .shiftData_39(sData_39),  // ufix1
                                                        .shiftData_40(sData_40),  // ufix1
                                                        .shiftData_41(sData_41),  // ufix1
                                                        .shiftData_42(sData_42),  // ufix1
                                                        .shiftData_43(sData_43),  // ufix1
                                                        .shiftData_44(sData_44),  // ufix1
                                                        .shiftData_45(sData_45),  // ufix1
                                                        .shiftData_46(sData_46),  // ufix1
                                                        .shiftData_47(sData_47),  // ufix1
                                                        .shiftData_48(sData_48),  // ufix1
                                                        .shiftData_49(sData_49),  // ufix1
                                                        .shiftData_50(sData_50),  // ufix1
                                                        .shiftData_51(sData_51),  // ufix1
                                                        .shiftData_52(sData_52),  // ufix1
                                                        .shiftData_53(sData_53),  // ufix1
                                                        .shiftData_54(sData_54),  // ufix1
                                                        .shiftData_55(sData_55),  // ufix1
                                                        .shiftData_56(sData_56),  // ufix1
                                                        .shiftData_57(sData_57),  // ufix1
                                                        .shiftData_58(sData_58),  // ufix1
                                                        .shiftData_59(sData_59),  // ufix1
                                                        .shiftData_60(sData_60),  // ufix1
                                                        .shiftData_61(sData_61),  // ufix1
                                                        .shiftData_62(sData_62),  // ufix1
                                                        .shiftData_63(sData_63),  // ufix1
                                                        .shiftData_64(sData_64),  // ufix1
                                                        .shiftData_65(sData_65),  // ufix1
                                                        .shiftData_66(sData_66),  // ufix1
                                                        .shiftData_67(sData_67),  // ufix1
                                                        .shiftData_68(sData_68),  // ufix1
                                                        .shiftData_69(sData_69),  // ufix1
                                                        .shiftData_70(sData_70),  // ufix1
                                                        .shiftData_71(sData_71),  // ufix1
                                                        .shiftData_72(sData_72),  // ufix1
                                                        .shiftData_73(sData_73),  // ufix1
                                                        .shiftData_74(sData_74),  // ufix1
                                                        .shiftData_75(sData_75),  // ufix1
                                                        .shiftData_76(sData_76),  // ufix1
                                                        .shiftData_77(sData_77),  // ufix1
                                                        .shiftData_78(sData_78),  // ufix1
                                                        .shiftData_79(sData_79)  // ufix1
                                                        );

  assign sData[0] = sData_0;
  assign sData[1] = sData_1;
  assign sData[2] = sData_2;
  assign sData[3] = sData_3;
  assign sData[4] = sData_4;
  assign sData[5] = sData_5;
  assign sData[6] = sData_6;
  assign sData[7] = sData_7;
  assign sData[8] = sData_8;
  assign sData[9] = sData_9;
  assign sData[10] = sData_10;
  assign sData[11] = sData_11;
  assign sData[12] = sData_12;
  assign sData[13] = sData_13;
  assign sData[14] = sData_14;
  assign sData[15] = sData_15;
  assign sData[16] = sData_16;
  assign sData[17] = sData_17;
  assign sData[18] = sData_18;
  assign sData[19] = sData_19;
  assign sData[20] = sData_20;
  assign sData[21] = sData_21;
  assign sData[22] = sData_22;
  assign sData[23] = sData_23;
  assign sData[24] = sData_24;
  assign sData[25] = sData_25;
  assign sData[26] = sData_26;
  assign sData[27] = sData_27;
  assign sData[28] = sData_28;
  assign sData[29] = sData_29;
  assign sData[30] = sData_30;
  assign sData[31] = sData_31;
  assign sData[32] = sData_32;
  assign sData[33] = sData_33;
  assign sData[34] = sData_34;
  assign sData[35] = sData_35;
  assign sData[36] = sData_36;
  assign sData[37] = sData_37;
  assign sData[38] = sData_38;
  assign sData[39] = sData_39;
  assign sData[40] = sData_40;
  assign sData[41] = sData_41;
  assign sData[42] = sData_42;
  assign sData[43] = sData_43;
  assign sData[44] = sData_44;
  assign sData[45] = sData_45;
  assign sData[46] = sData_46;
  assign sData[47] = sData_47;
  assign sData[48] = sData_48;
  assign sData[49] = sData_49;
  assign sData[50] = sData_50;
  assign sData[51] = sData_51;
  assign sData[52] = sData_52;
  assign sData[53] = sData_53;
  assign sData[54] = sData_54;
  assign sData[55] = sData_55;
  assign sData[56] = sData_56;
  assign sData[57] = sData_57;
  assign sData[58] = sData_58;
  assign sData[59] = sData_59;
  assign sData[60] = sData_60;
  assign sData[61] = sData_61;
  assign sData[62] = sData_62;
  assign sData[63] = sData_63;
  assign sData[64] = sData_64;
  assign sData[65] = sData_65;
  assign sData[66] = sData_66;
  assign sData[67] = sData_67;
  assign sData[68] = sData_68;
  assign sData[69] = sData_69;
  assign sData[70] = sData_70;
  assign sData[71] = sData_71;
  assign sData[72] = sData_72;
  assign sData[73] = sData_73;
  assign sData[74] = sData_74;
  assign sData[75] = sData_75;
  assign sData[76] = sData_76;
  assign sData[77] = sData_77;
  assign sData[78] = sData_78;
  assign sData[79] = sData_79;

  always @(posedge clk)
    begin : shift_register_1_process
      if (reset_x == 1'b1) begin
        sDataReg <= {80{1'b0}};
      end
      else begin
        if (enb && rdValidReg) begin
          sDataReg <= sData;
        end
      end
    end



  assign sDataTmp = (switch_compare_1 == 1'b0 ? zeroData :
              sDataReg);



  always @(posedge clk)
    begin : shift_register_2_process
      if (reset_x == 1'b1) begin
        shiftData <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          shiftData <= sDataTmp;
        end
      end
    end



  assign shiftData_0 = shiftData[0];

  always @(posedge clk)
    begin : layerdone_register_process
      if (reset_x == 1'b1) begin
        layerdone_register_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          layerdone_register_reg[0] <= layerDone;
          layerdone_register_reg[32'sd3:32'sd1] <= layerdone_register_reg[32'sd2:32'sd0];
        end
      end
    end

  assign layerDoneReg = layerdone_register_reg[3];



  assign encEnb_neg =  ~ encEnable;



  always @(posedge clk)
    begin : encenb_reg_register_process
      if (reset_x == 1'b1) begin
        encEnbNegReg <= 1'b0;
      end
      else begin
        if (enb) begin
          encEnbNegReg <= encEnb_neg;
        end
      end
    end



  assign encEnbTmp = encEnbNegReg & encEnable;



  always @(posedge clk)
    begin : encenb_tmp_register_process
      if (reset_x == 1'b1) begin
        encenb_tmp_register_reg <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          encenb_tmp_register_reg[0] <= encEnbTmp;
          encenb_tmp_register_reg[32'sd4:32'sd1] <= encenb_tmp_register_reg[32'sd3:32'sd0];
        end
      end
    end

  assign encEnbTmp1 = encenb_tmp_register_reg[4];



  assign wrEnb = layerDoneReg | encEnbTmp1;



  always @(posedge clk)
    begin : wrenb_register_process
      if (reset_x == 1'b1) begin
        wrEnbReg <= 1'b0;
      end
      else begin
        if (enb) begin
          wrEnbReg <= wrEnb;
        end
      end
    end



  assign switch_compare_1_1 = wrEnbReg > 1'b0;



  always @(posedge clk)
    begin : const_register_process
      if (reset_x == 1'b1) begin
        const1Reg <= 1'b0;
      end
      else begin
        if (enb) begin
          const1Reg <= const1;
        end
      end
    end



  assign shiftData_1 = shiftData[1];

  assign shiftData_2 = shiftData[2];

  assign shiftData_3 = shiftData[3];

  assign shiftData_4 = shiftData[4];

  assign shiftData_5 = shiftData[5];

  assign shiftData_6 = shiftData[6];

  assign shiftData_7 = shiftData[7];

  assign shiftData_8 = shiftData[8];

  assign shiftData_9 = shiftData[9];

  assign shiftData_10 = shiftData[10];

  assign shiftData_11 = shiftData[11];

  assign shiftData_12 = shiftData[12];

  assign shiftData_13 = shiftData[13];

  assign shiftData_14 = shiftData[14];

  assign shiftData_15 = shiftData[15];

  assign shiftData_16 = shiftData[16];

  assign shiftData_17 = shiftData[17];

  assign shiftData_18 = shiftData[18];

  assign shiftData_19 = shiftData[19];

  assign shiftData_20 = shiftData[20];

  assign shiftData_21 = shiftData[21];

  assign shiftData_22 = shiftData[22];

  assign shiftData_23 = shiftData[23];

  assign shiftData_24 = shiftData[24];

  assign shiftData_25 = shiftData[25];

  assign shiftData_26 = shiftData[26];

  assign shiftData_27 = shiftData[27];

  assign shiftData_28 = shiftData[28];

  assign shiftData_29 = shiftData[29];

  assign shiftData_30 = shiftData[30];

  assign shiftData_31 = shiftData[31];

  assign shiftData_32 = shiftData[32];

  assign shiftData_33 = shiftData[33];

  assign shiftData_34 = shiftData[34];

  assign shiftData_35 = shiftData[35];

  assign shiftData_36 = shiftData[36];

  assign shiftData_37 = shiftData[37];

  assign shiftData_38 = shiftData[38];

  assign shiftData_39 = shiftData[39];

  assign shiftData_40 = shiftData[40];

  assign shiftData_41 = shiftData[41];

  assign shiftData_42 = shiftData[42];

  assign shiftData_43 = shiftData[43];

  assign shiftData_44 = shiftData[44];

  assign shiftData_45 = shiftData[45];

  assign shiftData_46 = shiftData[46];

  assign shiftData_47 = shiftData[47];

  assign shiftData_48 = shiftData[48];

  assign shiftData_49 = shiftData[49];

  assign shiftData_50 = shiftData[50];

  assign shiftData_51 = shiftData[51];

  assign shiftData_52 = shiftData[52];

  assign shiftData_53 = shiftData[53];

  assign shiftData_54 = shiftData[54];

  assign shiftData_55 = shiftData[55];

  assign shiftData_56 = shiftData[56];

  assign shiftData_57 = shiftData[57];

  assign shiftData_58 = shiftData[58];

  assign shiftData_59 = shiftData[59];

  assign shiftData_60 = shiftData[60];

  assign shiftData_61 = shiftData[61];

  assign shiftData_62 = shiftData[62];

  assign shiftData_63 = shiftData[63];

  assign shiftData_64 = shiftData[64];

  assign shiftData_65 = shiftData[65];

  assign shiftData_66 = shiftData[66];

  assign shiftData_67 = shiftData[67];

  assign shiftData_68 = shiftData[68];

  assign shiftData_69 = shiftData[69];

  assign shiftData_70 = shiftData[70];

  assign shiftData_71 = shiftData[71];

  assign shiftData_72 = shiftData[72];

  assign shiftData_73 = shiftData[73];

  assign shiftData_74 = shiftData[74];

  assign shiftData_75 = shiftData[75];

  assign shiftData_76 = shiftData[76];

  assign shiftData_77 = shiftData[77];

  assign shiftData_78 = shiftData[78];

  assign shiftData_79 = shiftData[79];

  assign switchData_79 = switchData[79];

  assign shiftData_79_1 = shiftData_79 ^ switchData_79;



  assign switchData_78 = switchData[78];

  assign shiftData_78_1 = shiftData_78 ^ switchData_78;



  assign switchData_77 = switchData[77];

  assign shiftData_77_1 = shiftData_77 ^ switchData_77;



  assign switchData_76 = switchData[76];

  assign shiftData_76_1 = shiftData_76 ^ switchData_76;



  assign switchData_75 = switchData[75];

  assign shiftData_75_1 = shiftData_75 ^ switchData_75;



  assign switchData_74 = switchData[74];

  assign shiftData_74_1 = shiftData_74 ^ switchData_74;



  assign switchData_73 = switchData[73];

  assign shiftData_73_1 = shiftData_73 ^ switchData_73;



  assign switchData_72 = switchData[72];

  assign shiftData_72_1 = shiftData_72 ^ switchData_72;



  assign switchData_71 = switchData[71];

  assign shiftData_71_1 = shiftData_71 ^ switchData_71;



  assign switchData_70 = switchData[70];

  assign shiftData_70_1 = shiftData_70 ^ switchData_70;



  assign switchData_69 = switchData[69];

  assign shiftData_69_1 = shiftData_69 ^ switchData_69;



  assign switchData_68 = switchData[68];

  assign shiftData_68_1 = shiftData_68 ^ switchData_68;



  assign switchData_67 = switchData[67];

  assign shiftData_67_1 = shiftData_67 ^ switchData_67;



  assign switchData_66 = switchData[66];

  assign shiftData_66_1 = shiftData_66 ^ switchData_66;



  assign switchData_65 = switchData[65];

  assign shiftData_65_1 = shiftData_65 ^ switchData_65;



  assign switchData_64 = switchData[64];

  assign shiftData_64_1 = shiftData_64 ^ switchData_64;



  assign switchData_63 = switchData[63];

  assign shiftData_63_1 = shiftData_63 ^ switchData_63;



  assign switchData_62 = switchData[62];

  assign shiftData_62_1 = shiftData_62 ^ switchData_62;



  assign switchData_61 = switchData[61];

  assign shiftData_61_1 = shiftData_61 ^ switchData_61;



  assign switchData_60 = switchData[60];

  assign shiftData_60_1 = shiftData_60 ^ switchData_60;



  assign switchData_59 = switchData[59];

  assign shiftData_59_1 = shiftData_59 ^ switchData_59;



  assign switchData_58 = switchData[58];

  assign shiftData_58_1 = shiftData_58 ^ switchData_58;



  assign switchData_57 = switchData[57];

  assign shiftData_57_1 = shiftData_57 ^ switchData_57;



  assign switchData_56 = switchData[56];

  assign shiftData_56_1 = shiftData_56 ^ switchData_56;



  assign switchData_55 = switchData[55];

  assign shiftData_55_1 = shiftData_55 ^ switchData_55;



  assign switchData_54 = switchData[54];

  assign shiftData_54_1 = shiftData_54 ^ switchData_54;



  assign switchData_53 = switchData[53];

  assign shiftData_53_1 = shiftData_53 ^ switchData_53;



  assign switchData_52 = switchData[52];

  assign shiftData_52_1 = shiftData_52 ^ switchData_52;



  assign switchData_51 = switchData[51];

  assign shiftData_51_1 = shiftData_51 ^ switchData_51;



  assign switchData_50 = switchData[50];

  assign shiftData_50_1 = shiftData_50 ^ switchData_50;



  assign switchData_49 = switchData[49];

  assign shiftData_49_1 = shiftData_49 ^ switchData_49;



  assign switchData_48 = switchData[48];

  assign shiftData_48_1 = shiftData_48 ^ switchData_48;



  assign switchData_47 = switchData[47];

  assign shiftData_47_1 = shiftData_47 ^ switchData_47;



  assign switchData_46 = switchData[46];

  assign shiftData_46_1 = shiftData_46 ^ switchData_46;



  assign switchData_45 = switchData[45];

  assign shiftData_45_1 = shiftData_45 ^ switchData_45;



  assign switchData_44 = switchData[44];

  assign shiftData_44_1 = shiftData_44 ^ switchData_44;



  assign switchData_43 = switchData[43];

  assign shiftData_43_1 = shiftData_43 ^ switchData_43;



  assign switchData_42 = switchData[42];

  assign shiftData_42_1 = shiftData_42 ^ switchData_42;



  assign switchData_41 = switchData[41];

  assign shiftData_41_1 = shiftData_41 ^ switchData_41;



  assign switchData_40 = switchData[40];

  assign shiftData_40_1 = shiftData_40 ^ switchData_40;



  assign switchData_39 = switchData[39];

  assign shiftData_39_1 = shiftData_39 ^ switchData_39;



  assign switchData_38 = switchData[38];

  assign shiftData_38_1 = shiftData_38 ^ switchData_38;



  assign switchData_37 = switchData[37];

  assign shiftData_37_1 = shiftData_37 ^ switchData_37;



  assign switchData_36 = switchData[36];

  assign shiftData_36_1 = shiftData_36 ^ switchData_36;



  assign switchData_35 = switchData[35];

  assign shiftData_35_1 = shiftData_35 ^ switchData_35;



  assign switchData_34 = switchData[34];

  assign shiftData_34_1 = shiftData_34 ^ switchData_34;



  assign switchData_33 = switchData[33];

  assign shiftData_33_1 = shiftData_33 ^ switchData_33;



  assign switchData_32 = switchData[32];

  assign shiftData_32_1 = shiftData_32 ^ switchData_32;



  assign switchData_31 = switchData[31];

  assign shiftData_31_1 = shiftData_31 ^ switchData_31;



  assign switchData_30 = switchData[30];

  assign shiftData_30_1 = shiftData_30 ^ switchData_30;



  assign switchData_29 = switchData[29];

  assign shiftData_29_1 = shiftData_29 ^ switchData_29;



  assign switchData_28 = switchData[28];

  assign shiftData_28_1 = shiftData_28 ^ switchData_28;



  assign switchData_27 = switchData[27];

  assign shiftData_27_1 = shiftData_27 ^ switchData_27;



  assign switchData_26 = switchData[26];

  assign shiftData_26_1 = shiftData_26 ^ switchData_26;



  assign switchData_25 = switchData[25];

  assign shiftData_25_1 = shiftData_25 ^ switchData_25;



  assign switchData_24 = switchData[24];

  assign shiftData_24_1 = shiftData_24 ^ switchData_24;



  assign switchData_23 = switchData[23];

  assign shiftData_23_1 = shiftData_23 ^ switchData_23;



  assign switchData_22 = switchData[22];

  assign shiftData_22_1 = shiftData_22 ^ switchData_22;



  assign switchData_21 = switchData[21];

  assign shiftData_21_1 = shiftData_21 ^ switchData_21;



  assign switchData_20 = switchData[20];

  assign shiftData_20_1 = shiftData_20 ^ switchData_20;



  assign switchData_19 = switchData[19];

  assign shiftData_19_1 = shiftData_19 ^ switchData_19;



  assign switchData_18 = switchData[18];

  assign shiftData_18_1 = shiftData_18 ^ switchData_18;



  assign switchData_17 = switchData[17];

  assign shiftData_17_1 = shiftData_17 ^ switchData_17;



  assign switchData_16 = switchData[16];

  assign shiftData_16_1 = shiftData_16 ^ switchData_16;



  assign switchData_15 = switchData[15];

  assign shiftData_15_1 = shiftData_15 ^ switchData_15;



  assign switchData_14 = switchData[14];

  assign shiftData_14_1 = shiftData_14 ^ switchData_14;



  assign switchData_13 = switchData[13];

  assign shiftData_13_1 = shiftData_13 ^ switchData_13;



  assign switchData_12 = switchData[12];

  assign shiftData_12_1 = shiftData_12 ^ switchData_12;



  assign switchData_11 = switchData[11];

  assign shiftData_11_1 = shiftData_11 ^ switchData_11;



  assign switchData_10 = switchData[10];

  assign shiftData_10_1 = shiftData_10 ^ switchData_10;



  assign switchData_9 = switchData[9];

  assign shiftData_9_1 = shiftData_9 ^ switchData_9;



  assign switchData_8 = switchData[8];

  assign shiftData_8_1 = shiftData_8 ^ switchData_8;



  assign switchData_7 = switchData[7];

  assign shiftData_7_1 = shiftData_7 ^ switchData_7;



  assign switchData_6 = switchData[6];

  assign shiftData_6_1 = shiftData_6 ^ switchData_6;



  assign switchData_5 = switchData[5];

  assign shiftData_5_1 = shiftData_5 ^ switchData_5;



  assign switchData_4 = switchData[4];

  assign shiftData_4_1 = shiftData_4 ^ switchData_4;



  assign switchData_3 = switchData[3];

  assign shiftData_3_1 = shiftData_3 ^ switchData_3;



  assign switchData_2 = switchData[2];

  assign shiftData_2_1 = shiftData_2 ^ switchData_2;



  assign switchData_1 = switchData[1];

  assign shiftData_1_1 = shiftData_1 ^ switchData_1;



  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        alpha_switch_delay <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          if (reset == 1'b1) begin
            alpha_switch_delay <= {80{1'b0}};
          end
          else begin
            if (const1Reg) begin
              alpha_switch_delay <= xorData;
            end
          end
        end
      end
    end

  assign xorDataReg = (reset == 1'b1 ? {80{1'b0}} :
              alpha_switch_delay);



  assign switchData = (switch_compare_1_1 == 1'b0 ? xorDataReg :
              zeroData);



  assign switchData_0 = switchData[0];

  assign shiftData_0_1 = shiftData_0 ^ switchData_0;



  assign xorData[0] = shiftData_0_1;
  assign xorData[1] = shiftData_1_1;
  assign xorData[2] = shiftData_2_1;
  assign xorData[3] = shiftData_3_1;
  assign xorData[4] = shiftData_4_1;
  assign xorData[5] = shiftData_5_1;
  assign xorData[6] = shiftData_6_1;
  assign xorData[7] = shiftData_7_1;
  assign xorData[8] = shiftData_8_1;
  assign xorData[9] = shiftData_9_1;
  assign xorData[10] = shiftData_10_1;
  assign xorData[11] = shiftData_11_1;
  assign xorData[12] = shiftData_12_1;
  assign xorData[13] = shiftData_13_1;
  assign xorData[14] = shiftData_14_1;
  assign xorData[15] = shiftData_15_1;
  assign xorData[16] = shiftData_16_1;
  assign xorData[17] = shiftData_17_1;
  assign xorData[18] = shiftData_18_1;
  assign xorData[19] = shiftData_19_1;
  assign xorData[20] = shiftData_20_1;
  assign xorData[21] = shiftData_21_1;
  assign xorData[22] = shiftData_22_1;
  assign xorData[23] = shiftData_23_1;
  assign xorData[24] = shiftData_24_1;
  assign xorData[25] = shiftData_25_1;
  assign xorData[26] = shiftData_26_1;
  assign xorData[27] = shiftData_27_1;
  assign xorData[28] = shiftData_28_1;
  assign xorData[29] = shiftData_29_1;
  assign xorData[30] = shiftData_30_1;
  assign xorData[31] = shiftData_31_1;
  assign xorData[32] = shiftData_32_1;
  assign xorData[33] = shiftData_33_1;
  assign xorData[34] = shiftData_34_1;
  assign xorData[35] = shiftData_35_1;
  assign xorData[36] = shiftData_36_1;
  assign xorData[37] = shiftData_37_1;
  assign xorData[38] = shiftData_38_1;
  assign xorData[39] = shiftData_39_1;
  assign xorData[40] = shiftData_40_1;
  assign xorData[41] = shiftData_41_1;
  assign xorData[42] = shiftData_42_1;
  assign xorData[43] = shiftData_43_1;
  assign xorData[44] = shiftData_44_1;
  assign xorData[45] = shiftData_45_1;
  assign xorData[46] = shiftData_46_1;
  assign xorData[47] = shiftData_47_1;
  assign xorData[48] = shiftData_48_1;
  assign xorData[49] = shiftData_49_1;
  assign xorData[50] = shiftData_50_1;
  assign xorData[51] = shiftData_51_1;
  assign xorData[52] = shiftData_52_1;
  assign xorData[53] = shiftData_53_1;
  assign xorData[54] = shiftData_54_1;
  assign xorData[55] = shiftData_55_1;
  assign xorData[56] = shiftData_56_1;
  assign xorData[57] = shiftData_57_1;
  assign xorData[58] = shiftData_58_1;
  assign xorData[59] = shiftData_59_1;
  assign xorData[60] = shiftData_60_1;
  assign xorData[61] = shiftData_61_1;
  assign xorData[62] = shiftData_62_1;
  assign xorData[63] = shiftData_63_1;
  assign xorData[64] = shiftData_64_1;
  assign xorData[65] = shiftData_65_1;
  assign xorData[66] = shiftData_66_1;
  assign xorData[67] = shiftData_67_1;
  assign xorData[68] = shiftData_68_1;
  assign xorData[69] = shiftData_69_1;
  assign xorData[70] = shiftData_70_1;
  assign xorData[71] = shiftData_71_1;
  assign xorData[72] = shiftData_72_1;
  assign xorData[73] = shiftData_73_1;
  assign xorData[74] = shiftData_74_1;
  assign xorData[75] = shiftData_75_1;
  assign xorData[76] = shiftData_76_1;
  assign xorData[77] = shiftData_77_1;
  assign xorData[78] = shiftData_78_1;
  assign xorData[79] = shiftData_79_1;

  always @(posedge clk)
    begin : wrdata_register_process
      if (reset_x == 1'b1) begin
        wrData <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          wrData <= xorData;
        end
      end
    end



  always @(posedge clk)
    begin : wraddr_register_process
      if (reset_x == 1'b1) begin
        for(wraddr_register_t_1 = 32'sd0; wraddr_register_t_1 <= 32'sd5; wraddr_register_t_1 = wraddr_register_t_1 + 32'sd1) begin
          wraddr_register_reg[wraddr_register_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(wraddr_register_t_0_1 = 32'sd0; wraddr_register_t_0_1 <= 32'sd5; wraddr_register_t_0_1 = wraddr_register_t_0_1 + 32'sd1) begin
            wraddr_register_reg[wraddr_register_t_0_1] <= wraddr_register_reg_next[wraddr_register_t_0_1];
          end
        end
      end
    end

  always @* begin
    wrAddr = wraddr_register_reg[5];
    wraddr_register_reg_next[0] = countLayer;

    for(wraddr_register_t_0_0 = 32'sd0; wraddr_register_t_0_0 <= 32'sd4; wraddr_register_t_0_0 = wraddr_register_t_0_0 + 32'sd1) begin
      wraddr_register_reg_next[wraddr_register_t_0_0 + 32'sd1] = wraddr_register_reg[wraddr_register_t_0_0];
    end

  end



  always @(posedge clk)
    begin : rdaddr_register_process
      if (reset_x == 1'b1) begin
        for(rdaddr_register_t_1 = 32'sd0; rdaddr_register_t_1 <= 32'sd4; rdaddr_register_t_1 = rdaddr_register_t_1 + 32'sd1) begin
          rdaddr_register_reg[rdaddr_register_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(rdaddr_register_t_0_1 = 32'sd0; rdaddr_register_t_0_1 <= 32'sd4; rdaddr_register_t_0_1 = rdaddr_register_t_0_1 + 32'sd1) begin
            rdaddr_register_reg[rdaddr_register_t_0_1] <= rdaddr_register_reg_next[rdaddr_register_t_0_1];
          end
        end
      end
    end

  always @* begin
    rdAddrReg = rdaddr_register_reg[4];
    rdaddr_register_reg_next[0] = rdAddr;

    for(rdaddr_register_t_0_0 = 32'sd0; rdaddr_register_t_0_0 <= 32'sd3; rdaddr_register_t_0_0 = rdaddr_register_t_0_0 + 32'sd1) begin
      rdaddr_register_reg_next[rdaddr_register_t_0_0 + 32'sd1] = rdaddr_register_reg[rdaddr_register_t_0_0];
    end

  end



  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank0 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[0]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1)  // ufix1
                                                                            );

  assign alpha_0 = pri_rd_out_1;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank1 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[1]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_1)  // ufix1
                                                                            );

  assign alpha_1 = pri_rd_out_1_1;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank2 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[2]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_2)  // ufix1
                                                                            );

  assign alpha_2 = pri_rd_out_1_2;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank3 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[3]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_3)  // ufix1
                                                                            );

  assign alpha_3 = pri_rd_out_1_3;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank4 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[4]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_4)  // ufix1
                                                                            );

  assign alpha_4 = pri_rd_out_1_4;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank5 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[5]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_5)  // ufix1
                                                                            );

  assign alpha_5 = pri_rd_out_1_5;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank6 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[6]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_6)  // ufix1
                                                                            );

  assign alpha_6 = pri_rd_out_1_6;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank7 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[7]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_7)  // ufix1
                                                                            );

  assign alpha_7 = pri_rd_out_1_7;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank8 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[8]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_8)  // ufix1
                                                                            );

  assign alpha_8 = pri_rd_out_1_8;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank9 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[9]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_9)  // ufix1
                                                                            );

  assign alpha_9 = pri_rd_out_1_9;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank10 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[10]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_10)  // ufix1
                                                                             );

  assign alpha_10 = pri_rd_out_1_10;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank11 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[11]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_11)  // ufix1
                                                                             );

  assign alpha_11 = pri_rd_out_1_11;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank12 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[12]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_12)  // ufix1
                                                                             );

  assign alpha_12 = pri_rd_out_1_12;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank13 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[13]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_13)  // ufix1
                                                                             );

  assign alpha_13 = pri_rd_out_1_13;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank14 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[14]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_14)  // ufix1
                                                                             );

  assign alpha_14 = pri_rd_out_1_14;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank15 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[15]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_15)  // ufix1
                                                                             );

  assign alpha_15 = pri_rd_out_1_15;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank16 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[16]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_16)  // ufix1
                                                                             );

  assign alpha_16 = pri_rd_out_1_16;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank17 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[17]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_17)  // ufix1
                                                                             );

  assign alpha_17 = pri_rd_out_1_17;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank18 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[18]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_18)  // ufix1
                                                                             );

  assign alpha_18 = pri_rd_out_1_18;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank19 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[19]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_19)  // ufix1
                                                                             );

  assign alpha_19 = pri_rd_out_1_19;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank20 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[20]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_20)  // ufix1
                                                                             );

  assign alpha_20 = pri_rd_out_1_20;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank21 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[21]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_21)  // ufix1
                                                                             );

  assign alpha_21 = pri_rd_out_1_21;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank22 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[22]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_22)  // ufix1
                                                                             );

  assign alpha_22 = pri_rd_out_1_22;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank23 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[23]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_23)  // ufix1
                                                                             );

  assign alpha_23 = pri_rd_out_1_23;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank24 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[24]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_24)  // ufix1
                                                                             );

  assign alpha_24 = pri_rd_out_1_24;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank25 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[25]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_25)  // ufix1
                                                                             );

  assign alpha_25 = pri_rd_out_1_25;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank26 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[26]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_26)  // ufix1
                                                                             );

  assign alpha_26 = pri_rd_out_1_26;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank27 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[27]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_27)  // ufix1
                                                                             );

  assign alpha_27 = pri_rd_out_1_27;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank28 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[28]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_28)  // ufix1
                                                                             );

  assign alpha_28 = pri_rd_out_1_28;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank29 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[29]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_29)  // ufix1
                                                                             );

  assign alpha_29 = pri_rd_out_1_29;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank30 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[30]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_30)  // ufix1
                                                                             );

  assign alpha_30 = pri_rd_out_1_30;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank31 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[31]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_31)  // ufix1
                                                                             );

  assign alpha_31 = pri_rd_out_1_31;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank32 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[32]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_32)  // ufix1
                                                                             );

  assign alpha_32 = pri_rd_out_1_32;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank33 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[33]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_33)  // ufix1
                                                                             );

  assign alpha_33 = pri_rd_out_1_33;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank34 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[34]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_34)  // ufix1
                                                                             );

  assign alpha_34 = pri_rd_out_1_34;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank35 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[35]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_35)  // ufix1
                                                                             );

  assign alpha_35 = pri_rd_out_1_35;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank36 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[36]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_36)  // ufix1
                                                                             );

  assign alpha_36 = pri_rd_out_1_36;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank37 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[37]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_37)  // ufix1
                                                                             );

  assign alpha_37 = pri_rd_out_1_37;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank38 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[38]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_38)  // ufix1
                                                                             );

  assign alpha_38 = pri_rd_out_1_38;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank39 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[39]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_39)  // ufix1
                                                                             );

  assign alpha_39 = pri_rd_out_1_39;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank40 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[40]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_40)  // ufix1
                                                                             );

  assign alpha_40 = pri_rd_out_1_40;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank41 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[41]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_41)  // ufix1
                                                                             );

  assign alpha_41 = pri_rd_out_1_41;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank42 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[42]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_42)  // ufix1
                                                                             );

  assign alpha_42 = pri_rd_out_1_42;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank43 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[43]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_43)  // ufix1
                                                                             );

  assign alpha_43 = pri_rd_out_1_43;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank44 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[44]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_44)  // ufix1
                                                                             );

  assign alpha_44 = pri_rd_out_1_44;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank45 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[45]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_45)  // ufix1
                                                                             );

  assign alpha_45 = pri_rd_out_1_45;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank46 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[46]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_46)  // ufix1
                                                                             );

  assign alpha_46 = pri_rd_out_1_46;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank47 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[47]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_47)  // ufix1
                                                                             );

  assign alpha_47 = pri_rd_out_1_47;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank48 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[48]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_48)  // ufix1
                                                                             );

  assign alpha_48 = pri_rd_out_1_48;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank49 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[49]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_49)  // ufix1
                                                                             );

  assign alpha_49 = pri_rd_out_1_49;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank50 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[50]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_50)  // ufix1
                                                                             );

  assign alpha_50 = pri_rd_out_1_50;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank51 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[51]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_51)  // ufix1
                                                                             );

  assign alpha_51 = pri_rd_out_1_51;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank52 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[52]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_52)  // ufix1
                                                                             );

  assign alpha_52 = pri_rd_out_1_52;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank53 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[53]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_53)  // ufix1
                                                                             );

  assign alpha_53 = pri_rd_out_1_53;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank54 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[54]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_54)  // ufix1
                                                                             );

  assign alpha_54 = pri_rd_out_1_54;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank55 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[55]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_55)  // ufix1
                                                                             );

  assign alpha_55 = pri_rd_out_1_55;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank56 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[56]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_56)  // ufix1
                                                                             );

  assign alpha_56 = pri_rd_out_1_56;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank57 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[57]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_57)  // ufix1
                                                                             );

  assign alpha_57 = pri_rd_out_1_57;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank58 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[58]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_58)  // ufix1
                                                                             );

  assign alpha_58 = pri_rd_out_1_58;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank59 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[59]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_59)  // ufix1
                                                                             );

  assign alpha_59 = pri_rd_out_1_59;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank60 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[60]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_60)  // ufix1
                                                                             );

  assign alpha_60 = pri_rd_out_1_60;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank61 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[61]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_61)  // ufix1
                                                                             );

  assign alpha_61 = pri_rd_out_1_61;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank62 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[62]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_62)  // ufix1
                                                                             );

  assign alpha_62 = pri_rd_out_1_62;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank63 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[63]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_63)  // ufix1
                                                                             );

  assign alpha_63 = pri_rd_out_1_63;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank64 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[64]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_64)  // ufix1
                                                                             );

  assign alpha_64 = pri_rd_out_1_64;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank65 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[65]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_65)  // ufix1
                                                                             );

  assign alpha_65 = pri_rd_out_1_65;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank66 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[66]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_66)  // ufix1
                                                                             );

  assign alpha_66 = pri_rd_out_1_66;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank67 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[67]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_67)  // ufix1
                                                                             );

  assign alpha_67 = pri_rd_out_1_67;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank68 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[68]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_68)  // ufix1
                                                                             );

  assign alpha_68 = pri_rd_out_1_68;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank69 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[69]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_69)  // ufix1
                                                                             );

  assign alpha_69 = pri_rd_out_1_69;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank70 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[70]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_70)  // ufix1
                                                                             );

  assign alpha_70 = pri_rd_out_1_70;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank71 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[71]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_71)  // ufix1
                                                                             );

  assign alpha_71 = pri_rd_out_1_71;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank72 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[72]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_72)  // ufix1
                                                                             );

  assign alpha_72 = pri_rd_out_1_72;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank73 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[73]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_73)  // ufix1
                                                                             );

  assign alpha_73 = pri_rd_out_1_73;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank74 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[74]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_74)  // ufix1
                                                                             );

  assign alpha_74 = pri_rd_out_1_74;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank75 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[75]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_75)  // ufix1
                                                                             );

  assign alpha_75 = pri_rd_out_1_75;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank76 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[76]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_76)  // ufix1
                                                                             );

  assign alpha_76 = pri_rd_out_1_76;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank77 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[77]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_77)  // ufix1
                                                                             );

  assign alpha_77 = pri_rd_out_1_77;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank78 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[78]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_78)  // ufix1
                                                                             );

  assign alpha_78 = pri_rd_out_1_78;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank79 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[79]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_79)  // ufix1
                                                                             );

  assign alpha_79 = pri_rd_out_1_79;

  always @(posedge clk)
    begin : alphavalid_register_process
      if (reset_x == 1'b1) begin
        alphavalid_register_reg <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          alphavalid_register_reg[0] <= aValid;
          alphavalid_register_reg[32'sd4:32'sd1] <= alphavalid_register_reg[32'sd3:32'sd0];
        end
      end
    end

  assign alphaValid = alphavalid_register_reg[4];



  always @(posedge clk)
    begin : alphaaddr_register_process
      if (reset_x == 1'b1) begin
        alphaAddr_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          alphaAddr_1 <= rdAddrReg;
        end
      end
    end



  assign Column_LUT_1[0] = 5'b00001;
  assign Column_LUT_1[1] = 5'b00011;
  assign Column_LUT_1[2] = 5'b00011;
  assign Column_LUT_1[3] = 5'b00001;
  assign Column_LUT_1[4] = 5'b00100;
  assign Column_LUT_1[5] = 5'b00011;
  assign Column_LUT_1[6] = 5'b00100;
  assign Column_LUT_1[7] = 5'b00101;
  assign Column_LUT_1[8] = 5'b00010;
  assign Column_LUT_1[9] = 5'b00011;
  assign Column_LUT_1[10] = 5'b00001;
  assign Column_LUT_1[11] = 5'b00010;
  assign Column_LUT_1[12] = 5'b00101;
  assign Column_LUT_1[13] = 5'b00101;
  assign Column_LUT_1[14] = 5'b00111;
  assign Column_LUT_1[15] = 5'b00010;
  assign Column_LUT_1[16] = 5'b00110;
  assign Column_LUT_1[17] = 5'b00111;
  assign Column_LUT_1[18] = 5'b00110;
  assign Column_LUT_1[19] = 5'b00110;
  assign Column_LUT_1[20] = 5'b00011;
  assign Column_LUT_1[21] = 5'b00100;
  assign Column_LUT_1[22] = 5'b00110;
  assign Column_LUT_1[23] = 5'b00011;
  assign Column_LUT_1[24] = 5'b00110;
  assign Column_LUT_1[25] = 5'b00111;
  assign Column_LUT_1[26] = 5'b01010;
  assign Column_LUT_1[27] = 5'b00110;
  assign Column_LUT_1[28] = 5'b01000;
  assign Column_LUT_1[29] = 5'b01011;
  assign Column_LUT_1[30] = 5'b01000;
  assign Column_LUT_1[31] = 5'b01000;
  assign Column_LUT_1[32] = 5'b00111;
  assign Column_LUT_1[33] = 5'b00111;
  assign Column_LUT_1[34] = 5'b01000;
  assign Column_LUT_1[35] = 5'b00111;
  assign Column_LUT_1[36] = 5'b01000;
  assign Column_LUT_1[37] = 5'b01001;
  assign Column_LUT_1[38] = 5'b01011;
  assign Column_LUT_1[39] = 5'b01000;
  assign Column_LUT_1[40] = 5'b01001;
  assign Column_LUT_1[41] = 5'b01100;
  assign Column_LUT_1[42] = 5'b01010;
  assign Column_LUT_1[43] = 5'b01001;
  assign Column_LUT_1[44] = 5'b01011;
  assign Column_LUT_1[45] = 5'b01011;
  assign Column_LUT_1[46] = 5'b01010;
  assign Column_LUT_1[47] = 5'b01011;
  assign Column_LUT_1[48] = 5'b01101;
  assign Column_LUT_1[49] = 5'b01011;
  assign Column_LUT_1[50] = 5'b01100;
  assign Column_LUT_1[51] = 5'b10000;
  assign Column_LUT_1[52] = 5'b10001;
  assign Column_LUT_1[53] = 5'b10010;
  assign Column_LUT_1[54] = 5'b10011;
  assign Column_LUT_1[55] = 5'b10100;
  assign Column_LUT_1[56] = 5'b01100;
  assign Column_LUT_1[57] = 5'b10110;
  assign Column_LUT_1[58] = 5'b01101;
  assign Column_LUT_1[59] = 5'b01101;
  assign Column_LUT_1[60] = 5'b01110;
  assign Column_LUT_1[61] = 5'b01110;
  assign Column_LUT_1[62] = 5'b01111;
  assign Column_LUT_1[63] = 5'b10001;
  assign Column_LUT_1[64] = 5'b10010;
  assign Column_LUT_1[65] = 5'b10011;
  assign Column_LUT_1[66] = 5'b10100;
  assign Column_LUT_1[67] = 5'b10101;
  assign Column_LUT_1[68] = 5'b10101;
  assign Column_LUT_1[69] = 5'b10111;
  assign Column_LUT_1[70] = 5'b10111;
  assign Column_LUT_1[71] = 5'b11000;
  assign Column_LUT_1[72] = 5'b00000;
  assign Column_LUT_1[73] = 5'b01111;
  assign Column_LUT_1[74] = 5'b10000;
  assign Column_LUT_1[75] = 5'b00000;
  assign Column_LUT_1[76] = 5'b00000;
  assign Column_LUT_1[77] = 5'b00000;
  assign Column_LUT_1[78] = 5'b00000;
  assign Column_LUT_1[79] = 5'b00000;
  assign Column_LUT_1[80] = 5'b10110;
  assign Column_LUT_1[81] = 5'b00000;
  assign Column_LUT_1[82] = 5'b11000;
  assign Column_LUT_1[83] = 5'b00000;
  assign Column_LUT_2 = {1'b0, yIdx};
  assign Column_LUT_mul_temp = Column_LUT_2 * 32'sd12;
  assign cVal = Column_LUT_1[$signed({1'b0, xIdx}) + Column_LUT_mul_temp];



  always @(posedge clk)
    begin : column_value_process
      if (reset_x == 1'b1) begin
        columnVal_1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          columnVal_1 <= cVal;
        end
      end
    end



  assign shiftData_0_2 = shiftData[0];

  assign shiftData_1_2 = shiftData[1];

  assign shiftData_2_2 = shiftData[2];

  assign shiftData_3_2 = shiftData[3];

  assign shiftData_4_2 = shiftData[4];

  assign shiftData_5_2 = shiftData[5];

  assign shiftData_6_2 = shiftData[6];

  assign shiftData_7_2 = shiftData[7];

  assign shiftData_8_2 = shiftData[8];

  assign shiftData_9_2 = shiftData[9];

  assign shiftData_10_2 = shiftData[10];

  assign shiftData_11_2 = shiftData[11];

  assign shiftData_12_2 = shiftData[12];

  assign shiftData_13_2 = shiftData[13];

  assign shiftData_14_2 = shiftData[14];

  assign shiftData_15_2 = shiftData[15];

  assign shiftData_16_2 = shiftData[16];

  assign shiftData_17_2 = shiftData[17];

  assign shiftData_18_2 = shiftData[18];

  assign shiftData_19_2 = shiftData[19];

  assign shiftData_20_2 = shiftData[20];

  assign shiftData_21_2 = shiftData[21];

  assign shiftData_22_2 = shiftData[22];

  assign shiftData_23_2 = shiftData[23];

  assign shiftData_24_2 = shiftData[24];

  assign shiftData_25_2 = shiftData[25];

  assign shiftData_26_2 = shiftData[26];

  assign shiftData_27_2 = shiftData[27];

  assign shiftData_28_2 = shiftData[28];

  assign shiftData_29_2 = shiftData[29];

  assign shiftData_30_2 = shiftData[30];

  assign shiftData_31_2 = shiftData[31];

  assign shiftData_32_2 = shiftData[32];

  assign shiftData_33_2 = shiftData[33];

  assign shiftData_34_2 = shiftData[34];

  assign shiftData_35_2 = shiftData[35];

  assign shiftData_36_2 = shiftData[36];

  assign shiftData_37_2 = shiftData[37];

  assign shiftData_38_2 = shiftData[38];

  assign shiftData_39_2 = shiftData[39];

  assign shiftData_40_2 = shiftData[40];

  assign shiftData_41_2 = shiftData[41];

  assign shiftData_42_2 = shiftData[42];

  assign shiftData_43_2 = shiftData[43];

  assign shiftData_44_2 = shiftData[44];

  assign shiftData_45_2 = shiftData[45];

  assign shiftData_46_2 = shiftData[46];

  assign shiftData_47_2 = shiftData[47];

  assign shiftData_48_2 = shiftData[48];

  assign shiftData_49_2 = shiftData[49];

  assign shiftData_50_2 = shiftData[50];

  assign shiftData_51_2 = shiftData[51];

  assign shiftData_52_2 = shiftData[52];

  assign shiftData_53_2 = shiftData[53];

  assign shiftData_54_2 = shiftData[54];

  assign shiftData_55_2 = shiftData[55];

  assign shiftData_56_2 = shiftData[56];

  assign shiftData_57_2 = shiftData[57];

  assign shiftData_58_2 = shiftData[58];

  assign shiftData_59_2 = shiftData[59];

  assign shiftData_60_2 = shiftData[60];

  assign shiftData_61_2 = shiftData[61];

  assign shiftData_62_2 = shiftData[62];

  assign shiftData_63_2 = shiftData[63];

  assign shiftData_64_2 = shiftData[64];

  assign shiftData_65_2 = shiftData[65];

  assign shiftData_66_2 = shiftData[66];

  assign shiftData_67_2 = shiftData[67];

  assign shiftData_68_2 = shiftData[68];

  assign shiftData_69_2 = shiftData[69];

  assign shiftData_70_2 = shiftData[70];

  assign shiftData_71_2 = shiftData[71];

  assign shiftData_72_2 = shiftData[72];

  assign shiftData_73_2 = shiftData[73];

  assign shiftData_74_2 = shiftData[74];

  assign shiftData_75_2 = shiftData[75];

  assign shiftData_76_2 = shiftData[76];

  assign shiftData_77_2 = shiftData[77];

  assign shiftData_78_2 = shiftData[78];

  assign shiftData_79_2 = shiftData[79];

  assign xorDataParityReg_79 = xorDataParityReg[79];

  assign shiftData_79_3 = shiftData_79_2 ^ xorDataParityReg_79;



  assign xorDataParityReg_78 = xorDataParityReg[78];

  assign shiftData_78_3 = shiftData_78_2 ^ xorDataParityReg_78;



  assign xorDataParityReg_77 = xorDataParityReg[77];

  assign shiftData_77_3 = shiftData_77_2 ^ xorDataParityReg_77;



  assign xorDataParityReg_76 = xorDataParityReg[76];

  assign shiftData_76_3 = shiftData_76_2 ^ xorDataParityReg_76;



  assign xorDataParityReg_75 = xorDataParityReg[75];

  assign shiftData_75_3 = shiftData_75_2 ^ xorDataParityReg_75;



  assign xorDataParityReg_74 = xorDataParityReg[74];

  assign shiftData_74_3 = shiftData_74_2 ^ xorDataParityReg_74;



  assign xorDataParityReg_73 = xorDataParityReg[73];

  assign shiftData_73_3 = shiftData_73_2 ^ xorDataParityReg_73;



  assign xorDataParityReg_72 = xorDataParityReg[72];

  assign shiftData_72_3 = shiftData_72_2 ^ xorDataParityReg_72;



  assign xorDataParityReg_71 = xorDataParityReg[71];

  assign shiftData_71_3 = shiftData_71_2 ^ xorDataParityReg_71;



  assign xorDataParityReg_70 = xorDataParityReg[70];

  assign shiftData_70_3 = shiftData_70_2 ^ xorDataParityReg_70;



  assign xorDataParityReg_69 = xorDataParityReg[69];

  assign shiftData_69_3 = shiftData_69_2 ^ xorDataParityReg_69;



  assign xorDataParityReg_68 = xorDataParityReg[68];

  assign shiftData_68_3 = shiftData_68_2 ^ xorDataParityReg_68;



  assign xorDataParityReg_67 = xorDataParityReg[67];

  assign shiftData_67_3 = shiftData_67_2 ^ xorDataParityReg_67;



  assign xorDataParityReg_66 = xorDataParityReg[66];

  assign shiftData_66_3 = shiftData_66_2 ^ xorDataParityReg_66;



  assign xorDataParityReg_65 = xorDataParityReg[65];

  assign shiftData_65_3 = shiftData_65_2 ^ xorDataParityReg_65;



  assign xorDataParityReg_64 = xorDataParityReg[64];

  assign shiftData_64_3 = shiftData_64_2 ^ xorDataParityReg_64;



  assign xorDataParityReg_63 = xorDataParityReg[63];

  assign shiftData_63_3 = shiftData_63_2 ^ xorDataParityReg_63;



  assign xorDataParityReg_62 = xorDataParityReg[62];

  assign shiftData_62_3 = shiftData_62_2 ^ xorDataParityReg_62;



  assign xorDataParityReg_61 = xorDataParityReg[61];

  assign shiftData_61_3 = shiftData_61_2 ^ xorDataParityReg_61;



  assign xorDataParityReg_60 = xorDataParityReg[60];

  assign shiftData_60_3 = shiftData_60_2 ^ xorDataParityReg_60;



  assign xorDataParityReg_59 = xorDataParityReg[59];

  assign shiftData_59_3 = shiftData_59_2 ^ xorDataParityReg_59;



  assign xorDataParityReg_58 = xorDataParityReg[58];

  assign shiftData_58_3 = shiftData_58_2 ^ xorDataParityReg_58;



  assign xorDataParityReg_57 = xorDataParityReg[57];

  assign shiftData_57_3 = shiftData_57_2 ^ xorDataParityReg_57;



  assign xorDataParityReg_56 = xorDataParityReg[56];

  assign shiftData_56_3 = shiftData_56_2 ^ xorDataParityReg_56;



  assign xorDataParityReg_55 = xorDataParityReg[55];

  assign shiftData_55_3 = shiftData_55_2 ^ xorDataParityReg_55;



  assign xorDataParityReg_54 = xorDataParityReg[54];

  assign shiftData_54_3 = shiftData_54_2 ^ xorDataParityReg_54;



  assign xorDataParityReg_53 = xorDataParityReg[53];

  assign shiftData_53_3 = shiftData_53_2 ^ xorDataParityReg_53;



  assign xorDataParityReg_52 = xorDataParityReg[52];

  assign shiftData_52_3 = shiftData_52_2 ^ xorDataParityReg_52;



  assign xorDataParityReg_51 = xorDataParityReg[51];

  assign shiftData_51_3 = shiftData_51_2 ^ xorDataParityReg_51;



  assign xorDataParityReg_50 = xorDataParityReg[50];

  assign shiftData_50_3 = shiftData_50_2 ^ xorDataParityReg_50;



  assign xorDataParityReg_49 = xorDataParityReg[49];

  assign shiftData_49_3 = shiftData_49_2 ^ xorDataParityReg_49;



  assign xorDataParityReg_48 = xorDataParityReg[48];

  assign shiftData_48_3 = shiftData_48_2 ^ xorDataParityReg_48;



  assign xorDataParityReg_47 = xorDataParityReg[47];

  assign shiftData_47_3 = shiftData_47_2 ^ xorDataParityReg_47;



  assign xorDataParityReg_46 = xorDataParityReg[46];

  assign shiftData_46_3 = shiftData_46_2 ^ xorDataParityReg_46;



  assign xorDataParityReg_45 = xorDataParityReg[45];

  assign shiftData_45_3 = shiftData_45_2 ^ xorDataParityReg_45;



  assign xorDataParityReg_44 = xorDataParityReg[44];

  assign shiftData_44_3 = shiftData_44_2 ^ xorDataParityReg_44;



  assign xorDataParityReg_43 = xorDataParityReg[43];

  assign shiftData_43_3 = shiftData_43_2 ^ xorDataParityReg_43;



  assign xorDataParityReg_42 = xorDataParityReg[42];

  assign shiftData_42_3 = shiftData_42_2 ^ xorDataParityReg_42;



  assign xorDataParityReg_41 = xorDataParityReg[41];

  assign shiftData_41_3 = shiftData_41_2 ^ xorDataParityReg_41;



  assign xorDataParityReg_40 = xorDataParityReg[40];

  assign shiftData_40_3 = shiftData_40_2 ^ xorDataParityReg_40;



  assign xorDataParityReg_39 = xorDataParityReg[39];

  assign shiftData_39_3 = shiftData_39_2 ^ xorDataParityReg_39;



  assign xorDataParityReg_38 = xorDataParityReg[38];

  assign shiftData_38_3 = shiftData_38_2 ^ xorDataParityReg_38;



  assign xorDataParityReg_37 = xorDataParityReg[37];

  assign shiftData_37_3 = shiftData_37_2 ^ xorDataParityReg_37;



  assign xorDataParityReg_36 = xorDataParityReg[36];

  assign shiftData_36_3 = shiftData_36_2 ^ xorDataParityReg_36;



  assign xorDataParityReg_35 = xorDataParityReg[35];

  assign shiftData_35_3 = shiftData_35_2 ^ xorDataParityReg_35;



  assign xorDataParityReg_34 = xorDataParityReg[34];

  assign shiftData_34_3 = shiftData_34_2 ^ xorDataParityReg_34;



  assign xorDataParityReg_33 = xorDataParityReg[33];

  assign shiftData_33_3 = shiftData_33_2 ^ xorDataParityReg_33;



  assign xorDataParityReg_32 = xorDataParityReg[32];

  assign shiftData_32_3 = shiftData_32_2 ^ xorDataParityReg_32;



  assign xorDataParityReg_31 = xorDataParityReg[31];

  assign shiftData_31_3 = shiftData_31_2 ^ xorDataParityReg_31;



  assign xorDataParityReg_30 = xorDataParityReg[30];

  assign shiftData_30_3 = shiftData_30_2 ^ xorDataParityReg_30;



  assign xorDataParityReg_29 = xorDataParityReg[29];

  assign shiftData_29_3 = shiftData_29_2 ^ xorDataParityReg_29;



  assign xorDataParityReg_28 = xorDataParityReg[28];

  assign shiftData_28_3 = shiftData_28_2 ^ xorDataParityReg_28;



  assign xorDataParityReg_27 = xorDataParityReg[27];

  assign shiftData_27_3 = shiftData_27_2 ^ xorDataParityReg_27;



  assign xorDataParityReg_26 = xorDataParityReg[26];

  assign shiftData_26_3 = shiftData_26_2 ^ xorDataParityReg_26;



  assign xorDataParityReg_25 = xorDataParityReg[25];

  assign shiftData_25_3 = shiftData_25_2 ^ xorDataParityReg_25;



  assign xorDataParityReg_24 = xorDataParityReg[24];

  assign shiftData_24_3 = shiftData_24_2 ^ xorDataParityReg_24;



  assign xorDataParityReg_23 = xorDataParityReg[23];

  assign shiftData_23_3 = shiftData_23_2 ^ xorDataParityReg_23;



  assign xorDataParityReg_22 = xorDataParityReg[22];

  assign shiftData_22_3 = shiftData_22_2 ^ xorDataParityReg_22;



  assign xorDataParityReg_21 = xorDataParityReg[21];

  assign shiftData_21_3 = shiftData_21_2 ^ xorDataParityReg_21;



  assign xorDataParityReg_20 = xorDataParityReg[20];

  assign shiftData_20_3 = shiftData_20_2 ^ xorDataParityReg_20;



  assign xorDataParityReg_19 = xorDataParityReg[19];

  assign shiftData_19_3 = shiftData_19_2 ^ xorDataParityReg_19;



  assign xorDataParityReg_18 = xorDataParityReg[18];

  assign shiftData_18_3 = shiftData_18_2 ^ xorDataParityReg_18;



  assign xorDataParityReg_17 = xorDataParityReg[17];

  assign shiftData_17_3 = shiftData_17_2 ^ xorDataParityReg_17;



  assign xorDataParityReg_16 = xorDataParityReg[16];

  assign shiftData_16_3 = shiftData_16_2 ^ xorDataParityReg_16;



  assign xorDataParityReg_15 = xorDataParityReg[15];

  assign shiftData_15_3 = shiftData_15_2 ^ xorDataParityReg_15;



  assign xorDataParityReg_14 = xorDataParityReg[14];

  assign shiftData_14_3 = shiftData_14_2 ^ xorDataParityReg_14;



  assign xorDataParityReg_13 = xorDataParityReg[13];

  assign shiftData_13_3 = shiftData_13_2 ^ xorDataParityReg_13;



  assign xorDataParityReg_12 = xorDataParityReg[12];

  assign shiftData_12_3 = shiftData_12_2 ^ xorDataParityReg_12;



  assign xorDataParityReg_11 = xorDataParityReg[11];

  assign shiftData_11_3 = shiftData_11_2 ^ xorDataParityReg_11;



  assign xorDataParityReg_10 = xorDataParityReg[10];

  assign shiftData_10_3 = shiftData_10_2 ^ xorDataParityReg_10;



  assign xorDataParityReg_9 = xorDataParityReg[9];

  assign shiftData_9_3 = shiftData_9_2 ^ xorDataParityReg_9;



  assign xorDataParityReg_8 = xorDataParityReg[8];

  assign shiftData_8_3 = shiftData_8_2 ^ xorDataParityReg_8;



  assign xorDataParityReg_7 = xorDataParityReg[7];

  assign shiftData_7_3 = shiftData_7_2 ^ xorDataParityReg_7;



  assign xorDataParityReg_6 = xorDataParityReg[6];

  assign shiftData_6_3 = shiftData_6_2 ^ xorDataParityReg_6;



  assign xorDataParityReg_5 = xorDataParityReg[5];

  assign shiftData_5_3 = shiftData_5_2 ^ xorDataParityReg_5;



  assign xorDataParityReg_4 = xorDataParityReg[4];

  assign shiftData_4_3 = shiftData_4_2 ^ xorDataParityReg_4;



  assign xorDataParityReg_3 = xorDataParityReg[3];

  assign shiftData_3_3 = shiftData_3_2 ^ xorDataParityReg_3;



  assign xorDataParityReg_2 = xorDataParityReg[2];

  assign shiftData_2_3 = shiftData_2_2 ^ xorDataParityReg_2;



  assign xorDataParityReg_1 = xorDataParityReg[1];

  assign shiftData_1_3 = shiftData_1_2 ^ xorDataParityReg_1;



  always @(posedge clk)
    begin : c_3_process
      if (reset_x == 1'b1) begin
        alpha_switch_delay_1 <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          if (reset == 1'b1) begin
            alpha_switch_delay_1 <= {80{1'b0}};
          end
          else begin
            if (const1Reg) begin
              alpha_switch_delay_1 <= xorDataParity1;
            end
          end
        end
      end
    end

  assign xorDataParityReg = (reset == 1'b1 ? {80{1'b0}} :
              alpha_switch_delay_1);



  assign xorDataParityReg_0 = xorDataParityReg[0];

  assign shiftData_0_3 = shiftData_0_2 ^ xorDataParityReg_0;



  assign xorDataParity1[0] = shiftData_0_3;
  assign xorDataParity1[1] = shiftData_1_3;
  assign xorDataParity1[2] = shiftData_2_3;
  assign xorDataParity1[3] = shiftData_3_3;
  assign xorDataParity1[4] = shiftData_4_3;
  assign xorDataParity1[5] = shiftData_5_3;
  assign xorDataParity1[6] = shiftData_6_3;
  assign xorDataParity1[7] = shiftData_7_3;
  assign xorDataParity1[8] = shiftData_8_3;
  assign xorDataParity1[9] = shiftData_9_3;
  assign xorDataParity1[10] = shiftData_10_3;
  assign xorDataParity1[11] = shiftData_11_3;
  assign xorDataParity1[12] = shiftData_12_3;
  assign xorDataParity1[13] = shiftData_13_3;
  assign xorDataParity1[14] = shiftData_14_3;
  assign xorDataParity1[15] = shiftData_15_3;
  assign xorDataParity1[16] = shiftData_16_3;
  assign xorDataParity1[17] = shiftData_17_3;
  assign xorDataParity1[18] = shiftData_18_3;
  assign xorDataParity1[19] = shiftData_19_3;
  assign xorDataParity1[20] = shiftData_20_3;
  assign xorDataParity1[21] = shiftData_21_3;
  assign xorDataParity1[22] = shiftData_22_3;
  assign xorDataParity1[23] = shiftData_23_3;
  assign xorDataParity1[24] = shiftData_24_3;
  assign xorDataParity1[25] = shiftData_25_3;
  assign xorDataParity1[26] = shiftData_26_3;
  assign xorDataParity1[27] = shiftData_27_3;
  assign xorDataParity1[28] = shiftData_28_3;
  assign xorDataParity1[29] = shiftData_29_3;
  assign xorDataParity1[30] = shiftData_30_3;
  assign xorDataParity1[31] = shiftData_31_3;
  assign xorDataParity1[32] = shiftData_32_3;
  assign xorDataParity1[33] = shiftData_33_3;
  assign xorDataParity1[34] = shiftData_34_3;
  assign xorDataParity1[35] = shiftData_35_3;
  assign xorDataParity1[36] = shiftData_36_3;
  assign xorDataParity1[37] = shiftData_37_3;
  assign xorDataParity1[38] = shiftData_38_3;
  assign xorDataParity1[39] = shiftData_39_3;
  assign xorDataParity1[40] = shiftData_40_3;
  assign xorDataParity1[41] = shiftData_41_3;
  assign xorDataParity1[42] = shiftData_42_3;
  assign xorDataParity1[43] = shiftData_43_3;
  assign xorDataParity1[44] = shiftData_44_3;
  assign xorDataParity1[45] = shiftData_45_3;
  assign xorDataParity1[46] = shiftData_46_3;
  assign xorDataParity1[47] = shiftData_47_3;
  assign xorDataParity1[48] = shiftData_48_3;
  assign xorDataParity1[49] = shiftData_49_3;
  assign xorDataParity1[50] = shiftData_50_3;
  assign xorDataParity1[51] = shiftData_51_3;
  assign xorDataParity1[52] = shiftData_52_3;
  assign xorDataParity1[53] = shiftData_53_3;
  assign xorDataParity1[54] = shiftData_54_3;
  assign xorDataParity1[55] = shiftData_55_3;
  assign xorDataParity1[56] = shiftData_56_3;
  assign xorDataParity1[57] = shiftData_57_3;
  assign xorDataParity1[58] = shiftData_58_3;
  assign xorDataParity1[59] = shiftData_59_3;
  assign xorDataParity1[60] = shiftData_60_3;
  assign xorDataParity1[61] = shiftData_61_3;
  assign xorDataParity1[62] = shiftData_62_3;
  assign xorDataParity1[63] = shiftData_63_3;
  assign xorDataParity1[64] = shiftData_64_3;
  assign xorDataParity1[65] = shiftData_65_3;
  assign xorDataParity1[66] = shiftData_66_3;
  assign xorDataParity1[67] = shiftData_67_3;
  assign xorDataParity1[68] = shiftData_68_3;
  assign xorDataParity1[69] = shiftData_69_3;
  assign xorDataParity1[70] = shiftData_70_3;
  assign xorDataParity1[71] = shiftData_71_3;
  assign xorDataParity1[72] = shiftData_72_3;
  assign xorDataParity1[73] = shiftData_73_3;
  assign xorDataParity1[74] = shiftData_74_3;
  assign xorDataParity1[75] = shiftData_75_3;
  assign xorDataParity1[76] = shiftData_76_3;
  assign xorDataParity1[77] = shiftData_77_3;
  assign xorDataParity1[78] = shiftData_78_3;
  assign xorDataParity1[79] = shiftData_79_3;

  always @(posedge clk)
    begin : first_parity_value_process
      if (reset_x == 1'b1) begin
        parity1 <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          parity1 <= xorDataParity1;
        end
      end
    end



  assign parity1_0 = parity1[0];

  assign parity1_1 = parity1[1];

  assign parity1_2 = parity1[2];

  assign parity1_3 = parity1[3];

  assign parity1_4 = parity1[4];

  assign parity1_5 = parity1[5];

  assign parity1_6 = parity1[6];

  assign parity1_7 = parity1[7];

  assign parity1_8 = parity1[8];

  assign parity1_9 = parity1[9];

  assign parity1_10 = parity1[10];

  assign parity1_11 = parity1[11];

  assign parity1_12 = parity1[12];

  assign parity1_13 = parity1[13];

  assign parity1_14 = parity1[14];

  assign parity1_15 = parity1[15];

  assign parity1_16 = parity1[16];

  assign parity1_17 = parity1[17];

  assign parity1_18 = parity1[18];

  assign parity1_19 = parity1[19];

  assign parity1_20 = parity1[20];

  assign parity1_21 = parity1[21];

  assign parity1_22 = parity1[22];

  assign parity1_23 = parity1[23];

  assign parity1_24 = parity1[24];

  assign parity1_25 = parity1[25];

  assign parity1_26 = parity1[26];

  assign parity1_27 = parity1[27];

  assign parity1_28 = parity1[28];

  assign parity1_29 = parity1[29];

  assign parity1_30 = parity1[30];

  assign parity1_31 = parity1[31];

  assign parity1_32 = parity1[32];

  assign parity1_33 = parity1[33];

  assign parity1_34 = parity1[34];

  assign parity1_35 = parity1[35];

  assign parity1_36 = parity1[36];

  assign parity1_37 = parity1[37];

  assign parity1_38 = parity1[38];

  assign parity1_39 = parity1[39];

  assign parity1_40 = parity1[40];

  assign parity1_41 = parity1[41];

  assign parity1_42 = parity1[42];

  assign parity1_43 = parity1[43];

  assign parity1_44 = parity1[44];

  assign parity1_45 = parity1[45];

  assign parity1_46 = parity1[46];

  assign parity1_47 = parity1[47];

  assign parity1_48 = parity1[48];

  assign parity1_49 = parity1[49];

  assign parity1_50 = parity1[50];

  assign parity1_51 = parity1[51];

  assign parity1_52 = parity1[52];

  assign parity1_53 = parity1[53];

  assign parity1_54 = parity1[54];

  assign parity1_55 = parity1[55];

  assign parity1_56 = parity1[56];

  assign parity1_57 = parity1[57];

  assign parity1_58 = parity1[58];

  assign parity1_59 = parity1[59];

  assign parity1_60 = parity1[60];

  assign parity1_61 = parity1[61];

  assign parity1_62 = parity1[62];

  assign parity1_63 = parity1[63];

  assign parity1_64 = parity1[64];

  assign parity1_65 = parity1[65];

  assign parity1_66 = parity1[66];

  assign parity1_67 = parity1[67];

  assign parity1_68 = parity1[68];

  assign parity1_69 = parity1[69];

  assign parity1_70 = parity1[70];

  assign parity1_71 = parity1[71];

  assign parity1_72 = parity1[72];

  assign parity1_73 = parity1[73];

  assign parity1_74 = parity1[74];

  assign parity1_75 = parity1[75];

  assign parity1_76 = parity1[76];

  assign parity1_77 = parity1[77];

  assign parity1_78 = parity1[78];

  assign parity1_79 = parity1[79];

  assign alphaAddr = alphaAddr_1;

  assign columnVal = columnVal_1;

endmodule  // tx_125_src_Calculate_Alpha_block

