// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_clock_crossing.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_clock_crossing
// Source Path: HDLTx/full_tx/clock_crossing
// Hierarchy Level: 1
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_clock_crossing
          (clk,
           reset_x,
           enb_1_8_0,
           enb,
           enb_1_2_1,
           preamble_in,
           preamble_ctrl_in_valid,
           channel,
           channel_ctrl_valid,
           header_in,
           header_ctrl_in_valid,
           payload_in,
           payload_ctrl_in_valid,
           cp_len_in_0,
           cp_len_in_1,
           cp_len_in_2,
           payload_len_in,
           bits_per_subcarrier_in,
           preamble_out,
           preamble_valid,
           channel_out,
           channel_valid,
           header_out_0,
           header_out_1,
           header_valid,
           payload_out_0,
           payload_out_1,
           payload_valid_out,
           payload_len_out,
           bits_per_subcarrier_out,
           cp_len_out_0,
           cp_len_out_1,
           cp_len_out_2);


  input   clk;
  input   reset_x;
  input   enb_1_8_0;
  input   enb;
  input   enb_1_2_1;
  input   preamble_in;
  input   preamble_ctrl_in_valid;
  input   channel;
  input   channel_ctrl_valid;
  input   header_in;
  input   header_ctrl_in_valid;
  input   payload_in;
  input   payload_ctrl_in_valid;
  input   cp_len_in_0;  // boolean
  input   cp_len_in_1;  // boolean
  input   cp_len_in_2;  // boolean
  input   [15:0] payload_len_in;  // uint16
  input   [3:0] bits_per_subcarrier_in;  // ufix4
  output  preamble_out;
  output  preamble_valid;
  output  channel_out;
  output  channel_valid;
  output  header_out_0;  // boolean
  output  header_out_1;  // boolean
  output  header_valid;
  output  payload_out_0;  // boolean
  output  payload_out_1;  // boolean
  output  payload_valid_out;
  output  [15:0] payload_len_out;  // uint16
  output  [3:0] bits_per_subcarrier_out;  // ufix4
  output  cp_len_out_0;  // boolean
  output  cp_len_out_1;  // boolean
  output  cp_len_out_2;  // boolean


  wire valid;
  wire valid_1;
  wire valid_2;
  reg [1:0] Deserializer1D_contl_cnt;  // ufix2
  reg [1:0] Deserializer1D_contl_cntGlobal;  // ufix2
  reg [1:0] Deserializer1D_contl_cntInnerRegCtrol;  // ufix2
  reg [1:0] Deserializer1D_contl_cnt_next;  // ufix2
  reg [1:0] Deserializer1D_contl_cntGlobal_next;  // ufix2
  reg [1:0] Deserializer1D_contl_cntInnerRegCtrol_next;  // ufix2
  reg  Deserializer1D_innerRegEn;
  reg  Deserializer1D_innerRegCtrolEn;
  reg  Deserializer1D_outBypassEn;
  reg  Deserializer1D_tapDelayEn;
  reg  Deserializer1D_hOutSignalsContl;
  wire Deserializer1D_tapDelayEn_1;
  reg  Deserializer1D_tapout;
  wire [1:0] Deserializer1D_muxOut;  // boolean [2]
  reg  [1:0] Deserializer1D_deserInnerOut;  // boolean [2]
  reg  [1:0] Deserializer1D_OutRegComp_reg;  // ufix1 [2]
  wire [1:0] deserializer_PostProcessed;  // boolean [2]
  reg  Deserializer1D_deserInnerOut_1;
  reg  Deserializer1D_OutRegComp_reg_1;  // ufix1
  wire Deserializer1D_out2;
  wire valid_3;
  reg [1:0] Deserializer1D1_contl_cnt;  // ufix2
  reg [1:0] Deserializer1D1_contl_cntGlobal;  // ufix2
  reg [1:0] Deserializer1D1_contl_cntInnerRegCtrol;  // ufix2
  reg [1:0] Deserializer1D1_contl_cnt_next;  // ufix2
  reg [1:0] Deserializer1D1_contl_cntGlobal_next;  // ufix2
  reg [1:0] Deserializer1D1_contl_cntInnerRegCtrol_next;  // ufix2
  reg  Deserializer1D1_innerRegEn;
  reg  Deserializer1D1_innerRegCtrolEn;
  reg  Deserializer1D1_outBypassEn;
  reg  Deserializer1D1_tapDelayEn;
  reg  Deserializer1D1_hOutSignalsContl;
  wire Deserializer1D1_tapDelayEn_1;
  reg  Deserializer1D1_tapout;
  wire [1:0] Deserializer1D1_muxOut;  // boolean [2]
  reg  [1:0] Deserializer1D1_deserInnerOut;  // boolean [2]
  reg  [1:0] Deserializer1D1_OutRegComp_reg;  // ufix1 [2]
  wire [1:0] deserializer_PostProcessed_1;  // boolean [2]
  reg  Deserializer1D1_deserInnerOut_1;
  reg  Deserializer1D1_OutRegComp_reg_1;  // ufix1
  wire Deserializer1D1_out2;
  reg [15:0] Rate_Transition1_bypass_reg;  // ufix16
  wire [15:0] Rate_Transition1_out1;  // uint16
  reg [3:0] Rate_Transition2_bypass_reg;  // ufix4
  wire [3:0] Rate_Transition2_out1;  // ufix4
  wire [2:0] cp_len_in;  // boolean [3]
  reg  [2:0] Rate_Transition_out1;  // boolean [3]
  reg  Deserializer1D_contl_out0_0;
  reg  Deserializer1D_contl_validOutput;
  reg [1:0] Deserializer1D_contl_cntInnerRegCtrol_temp;  // ufix2
  reg  Deserializer1D1_contl_out0_0;
  reg  Deserializer1D1_contl_validOutput;
  reg [1:0] Deserializer1D1_contl_cntInnerRegCtrol_temp;  // ufix2


  assign preamble_out = preamble_in;

  assign valid = preamble_ctrl_in_valid;

  assign preamble_valid = valid;

  assign channel_out = channel;

  assign valid_1 = channel_ctrl_valid;

  assign channel_valid = valid_1;

  assign valid_2 = header_ctrl_in_valid;

  always @(posedge clk)
    begin : Deserializer1D_contl_process
      if (reset_x == 1'b1) begin
        Deserializer1D_contl_cnt <= 2'b00;
        Deserializer1D_contl_cntGlobal <= 2'b00;
        Deserializer1D_contl_cntInnerRegCtrol <= 2'b10;
      end
      else begin
        if (enb) begin
          Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt_next;
          Deserializer1D_contl_cntGlobal <= Deserializer1D_contl_cntGlobal_next;
          Deserializer1D_contl_cntInnerRegCtrol <= Deserializer1D_contl_cntInnerRegCtrol_next;
        end
      end
    end

  always @(Deserializer1D_contl_cnt, Deserializer1D_contl_cntGlobal,
       Deserializer1D_contl_cntInnerRegCtrol, valid_2) begin
    Deserializer1D_contl_cntInnerRegCtrol_temp = Deserializer1D_contl_cntInnerRegCtrol;
    Deserializer1D_contl_cnt_next = Deserializer1D_contl_cnt;
    Deserializer1D_tapDelayEn = valid_2 != 1'b0;
    Deserializer1D_hOutSignalsContl = 1'b0;
    Deserializer1D_contl_out0_0 = 1'b0;
    Deserializer1D_innerRegCtrolEn = 1'b0;
    Deserializer1D_contl_validOutput = 1'b0;
    if ((valid_2 != 1'b0) && (Deserializer1D_contl_cnt == 2'b01)) begin
      Deserializer1D_contl_validOutput = 1'b1;
    end
    if (Deserializer1D_contl_validOutput) begin
      Deserializer1D_hOutSignalsContl = 1'b1;
      Deserializer1D_contl_out0_0 = 1'b1;
      Deserializer1D_innerRegCtrolEn = 1'b1;
      Deserializer1D_contl_cntInnerRegCtrol_temp = Deserializer1D_contl_cntGlobal;
    end
    if ( ! Deserializer1D_contl_out0_0 && (Deserializer1D_contl_cntGlobal == Deserializer1D_contl_cntInnerRegCtrol_temp)) begin
      Deserializer1D_innerRegCtrolEn = 1'b1;
      Deserializer1D_contl_cntInnerRegCtrol_temp = 2'b10;
    end
    if (valid_2 != 1'b0) begin
      if (Deserializer1D_contl_cnt == 2'b01) begin
        Deserializer1D_contl_cnt_next = 2'b00;
      end
      else begin
        Deserializer1D_contl_cnt_next = Deserializer1D_contl_cnt + 2'b01;
      end
    end
    if (Deserializer1D_contl_cntGlobal == 2'b01) begin
      Deserializer1D_contl_cntGlobal_next = 2'b00;
    end
    else begin
      Deserializer1D_contl_cntGlobal_next = Deserializer1D_contl_cntGlobal + 2'b01;
    end
    Deserializer1D_innerRegEn = Deserializer1D_contl_out0_0;
    Deserializer1D_outBypassEn = Deserializer1D_contl_cntGlobal == 2'b00;
    Deserializer1D_contl_cntInnerRegCtrol_next = Deserializer1D_contl_cntInnerRegCtrol_temp;
  end



  assign Deserializer1D_tapDelayEn_1 = enb & Deserializer1D_tapDelayEn;



  always @(posedge clk)
    begin : Deserializer1D_tapDelayComp_process
      if (reset_x == 1'b1) begin
        Deserializer1D_tapout <= 1'b0;
      end
      else begin
        if (enb && Deserializer1D_tapDelayEn_1) begin
          Deserializer1D_tapout <= header_in;
        end
      end
    end



  assign Deserializer1D_muxOut[0] = Deserializer1D_tapout;
  assign Deserializer1D_muxOut[1] = header_in;

  always @(posedge clk)
    begin : Deserializer1D_innerRegComp_process
      if (reset_x == 1'b1) begin
        Deserializer1D_deserInnerOut <= {2{1'b0}};
      end
      else begin
        if (enb && Deserializer1D_innerRegEn) begin
          Deserializer1D_deserInnerOut <= Deserializer1D_muxOut;
        end
      end
    end



  always @(posedge clk)
    begin : Deserializer1D_OutRegComp_process
      if (reset_x == 1'b1) begin
        Deserializer1D_OutRegComp_reg <= {2{1'b0}};
      end
      else begin
        if (Deserializer1D_outBypassEn && enb) begin
          Deserializer1D_OutRegComp_reg <= Deserializer1D_deserInnerOut;
        end
      end
    end

  assign deserializer_PostProcessed = (Deserializer1D_outBypassEn == 1'b1 ? Deserializer1D_deserInnerOut :
              Deserializer1D_OutRegComp_reg);



  assign header_out_0 = deserializer_PostProcessed[0];

  assign header_out_1 = deserializer_PostProcessed[1];

  always @(posedge clk)
    begin : Deserializer1D_innerRegComp_1_process
      if (reset_x == 1'b1) begin
        Deserializer1D_deserInnerOut_1 <= 1'b0;
      end
      else begin
        if (enb && Deserializer1D_innerRegCtrolEn) begin
          Deserializer1D_deserInnerOut_1 <= Deserializer1D_hOutSignalsContl;
        end
      end
    end



  always @(posedge clk)
    begin : Deserializer1D_OutRegComp_1_process
      if (reset_x == 1'b1) begin
        Deserializer1D_OutRegComp_reg_1 <= 1'b0;
      end
      else begin
        if (Deserializer1D_outBypassEn && enb) begin
          Deserializer1D_OutRegComp_reg_1 <= Deserializer1D_deserInnerOut_1;
        end
      end
    end

  assign Deserializer1D_out2 = (Deserializer1D_outBypassEn == 1'b1 ? Deserializer1D_deserInnerOut_1 :
              Deserializer1D_OutRegComp_reg_1);



  assign header_valid = Deserializer1D_out2;

  assign valid_3 = payload_ctrl_in_valid;

  always @(posedge clk)
    begin : Deserializer1D1_contl_process
      if (reset_x == 1'b1) begin
        Deserializer1D1_contl_cnt <= 2'b00;
        Deserializer1D1_contl_cntGlobal <= 2'b00;
        Deserializer1D1_contl_cntInnerRegCtrol <= 2'b10;
      end
      else begin
        if (enb) begin
          Deserializer1D1_contl_cnt <= Deserializer1D1_contl_cnt_next;
          Deserializer1D1_contl_cntGlobal <= Deserializer1D1_contl_cntGlobal_next;
          Deserializer1D1_contl_cntInnerRegCtrol <= Deserializer1D1_contl_cntInnerRegCtrol_next;
        end
      end
    end

  always @(Deserializer1D1_contl_cnt, Deserializer1D1_contl_cntGlobal,
       Deserializer1D1_contl_cntInnerRegCtrol, valid_3) begin
    Deserializer1D1_contl_cntInnerRegCtrol_temp = Deserializer1D1_contl_cntInnerRegCtrol;
    Deserializer1D1_contl_cnt_next = Deserializer1D1_contl_cnt;
    Deserializer1D1_tapDelayEn = valid_3 != 1'b0;
    Deserializer1D1_hOutSignalsContl = 1'b0;
    Deserializer1D1_contl_out0_0 = 1'b0;
    Deserializer1D1_innerRegCtrolEn = 1'b0;
    Deserializer1D1_contl_validOutput = 1'b0;
    if ((valid_3 != 1'b0) && (Deserializer1D1_contl_cnt == 2'b01)) begin
      Deserializer1D1_contl_validOutput = 1'b1;
    end
    if (Deserializer1D1_contl_validOutput) begin
      Deserializer1D1_hOutSignalsContl = 1'b1;
      Deserializer1D1_contl_out0_0 = 1'b1;
      Deserializer1D1_innerRegCtrolEn = 1'b1;
      Deserializer1D1_contl_cntInnerRegCtrol_temp = Deserializer1D1_contl_cntGlobal;
    end
    if ( ! Deserializer1D1_contl_out0_0 && (Deserializer1D1_contl_cntGlobal == Deserializer1D1_contl_cntInnerRegCtrol_temp)) begin
      Deserializer1D1_innerRegCtrolEn = 1'b1;
      Deserializer1D1_contl_cntInnerRegCtrol_temp = 2'b10;
    end
    if (valid_3 != 1'b0) begin
      if (Deserializer1D1_contl_cnt == 2'b01) begin
        Deserializer1D1_contl_cnt_next = 2'b00;
      end
      else begin
        Deserializer1D1_contl_cnt_next = Deserializer1D1_contl_cnt + 2'b01;
      end
    end
    if (Deserializer1D1_contl_cntGlobal == 2'b01) begin
      Deserializer1D1_contl_cntGlobal_next = 2'b00;
    end
    else begin
      Deserializer1D1_contl_cntGlobal_next = Deserializer1D1_contl_cntGlobal + 2'b01;
    end
    Deserializer1D1_innerRegEn = Deserializer1D1_contl_out0_0;
    Deserializer1D1_outBypassEn = Deserializer1D1_contl_cntGlobal == 2'b00;
    Deserializer1D1_contl_cntInnerRegCtrol_next = Deserializer1D1_contl_cntInnerRegCtrol_temp;
  end



  assign Deserializer1D1_tapDelayEn_1 = enb & Deserializer1D1_tapDelayEn;



  always @(posedge clk)
    begin : Deserializer1D1_tapDelayComp_process
      if (reset_x == 1'b1) begin
        Deserializer1D1_tapout <= 1'b0;
      end
      else begin
        if (enb && Deserializer1D1_tapDelayEn_1) begin
          Deserializer1D1_tapout <= payload_in;
        end
      end
    end



  assign Deserializer1D1_muxOut[0] = Deserializer1D1_tapout;
  assign Deserializer1D1_muxOut[1] = payload_in;

  always @(posedge clk)
    begin : Deserializer1D1_innerRegComp_process
      if (reset_x == 1'b1) begin
        Deserializer1D1_deserInnerOut <= {2{1'b0}};
      end
      else begin
        if (enb && Deserializer1D1_innerRegEn) begin
          Deserializer1D1_deserInnerOut <= Deserializer1D1_muxOut;
        end
      end
    end



  always @(posedge clk)
    begin : Deserializer1D1_OutRegComp_process
      if (reset_x == 1'b1) begin
        Deserializer1D1_OutRegComp_reg <= {2{1'b0}};
      end
      else begin
        if (Deserializer1D1_outBypassEn && enb) begin
          Deserializer1D1_OutRegComp_reg <= Deserializer1D1_deserInnerOut;
        end
      end
    end

  assign deserializer_PostProcessed_1 = (Deserializer1D1_outBypassEn == 1'b1 ? Deserializer1D1_deserInnerOut :
              Deserializer1D1_OutRegComp_reg);



  assign payload_out_0 = deserializer_PostProcessed_1[0];

  assign payload_out_1 = deserializer_PostProcessed_1[1];

  always @(posedge clk)
    begin : Deserializer1D1_innerRegComp_1_process
      if (reset_x == 1'b1) begin
        Deserializer1D1_deserInnerOut_1 <= 1'b0;
      end
      else begin
        if (enb && Deserializer1D1_innerRegCtrolEn) begin
          Deserializer1D1_deserInnerOut_1 <= Deserializer1D1_hOutSignalsContl;
        end
      end
    end



  always @(posedge clk)
    begin : Deserializer1D1_OutRegComp_1_process
      if (reset_x == 1'b1) begin
        Deserializer1D1_OutRegComp_reg_1 <= 1'b0;
      end
      else begin
        if (Deserializer1D1_outBypassEn && enb) begin
          Deserializer1D1_OutRegComp_reg_1 <= Deserializer1D1_deserInnerOut_1;
        end
      end
    end

  assign Deserializer1D1_out2 = (Deserializer1D1_outBypassEn == 1'b1 ? Deserializer1D1_deserInnerOut_1 :
              Deserializer1D1_OutRegComp_reg_1);



  assign payload_valid_out = Deserializer1D1_out2;

  always @(posedge clk)
    begin : Rate_Transition1_bypass_process
      if (reset_x == 1'b1) begin
        Rate_Transition1_bypass_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition1_bypass_reg <= payload_len_in;
        end
      end
    end

  assign Rate_Transition1_out1 = (enb_1_2_1 == 1'b1 ? payload_len_in :
              Rate_Transition1_bypass_reg);



  assign payload_len_out = Rate_Transition1_out1;

  always @(posedge clk)
    begin : Rate_Transition2_bypass_process
      if (reset_x == 1'b1) begin
        Rate_Transition2_bypass_reg <= 4'b0000;
      end
      else begin
        if (enb_1_2_1) begin
          Rate_Transition2_bypass_reg <= bits_per_subcarrier_in;
        end
      end
    end

  assign Rate_Transition2_out1 = (enb_1_2_1 == 1'b1 ? bits_per_subcarrier_in :
              Rate_Transition2_bypass_reg);



  assign bits_per_subcarrier_out = Rate_Transition2_out1;

  assign cp_len_in[0] = cp_len_in_0;
  assign cp_len_in[1] = cp_len_in_1;
  assign cp_len_in[2] = cp_len_in_2;

  always @(posedge clk)
    begin : Rate_Transition_process
      if (reset_x == 1'b1) begin
        Rate_Transition_out1 <= {3{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          Rate_Transition_out1 <= cp_len_in;
        end
      end
    end



  assign cp_len_out_0 = Rate_Transition_out1[0];

  assign cp_len_out_1 = Rate_Transition_out1[1];

  assign cp_len_out_2 = Rate_Transition_out1[2];

endmodule  // tx_125_src_clock_crossing

