// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_valid_frame.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_valid_frame
// Source Path: HDLTx/full_tx/store_frame_in_ram/read_frame_from_ram/valid_frame
// Hierarchy Level: 3
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_valid_frame
          (clk,
           reset_x,
           enb_1_2_0,
           valid_in,
           valid_out,
           new_rsvd);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   valid_in;
  output  valid_out;
  output  new_rsvd;


  reg  [1:0] Delay4_reg;  // ufix1 [2]
  wire Delay4_out1;
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  reg [7:0] HDL_Counter2_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] count_1;  // uint8
  wire Compare_To_Zero1_out1;
  wire Logical_Operator4_out1;


  always @(posedge clk)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay4_reg[0] <= valid_in;
          Delay4_reg[1] <= Delay4_reg[0];
        end
      end
    end

  assign Delay4_out1 = Delay4_reg[1];



  assign valid_out = Delay4_out1;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 193
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign count = HDL_Counter2_out1 + count_step;



  assign need_to_wrap = HDL_Counter2_out1 == 8'b11000001;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (Delay4_out1 == 1'b0 ? HDL_Counter2_out1 :
              count_value);



  always @(posedge clk)
    begin : HDL_Counter2_process
      if (reset_x == 1'b1) begin
        HDL_Counter2_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0) begin
          HDL_Counter2_out1 <= count_1;
        end
      end
    end



  tx_125_src_Compare_To_Zero1 u_Compare_To_Zero1 (.u(HDL_Counter2_out1),  // uint8
                                                  .y(Compare_To_Zero1_out1)
                                                  );

  assign Logical_Operator4_out1 = Delay4_out1 & Compare_To_Zero1_out1;



  assign new_rsvd = Logical_Operator4_out1;

endmodule  // tx_125_src_valid_frame

