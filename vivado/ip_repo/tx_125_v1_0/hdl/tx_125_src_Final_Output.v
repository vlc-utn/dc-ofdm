// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_Final_Output.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_Final_Output
// Source Path: HDLTx/full_tx/header_full/header_fec/Hc_12H_B14/Final Output
// Hierarchy Level: 4
// Model version: 4.114
// 
// Final output
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_Final_Output
          (clk,
           reset_x,
           enb,
           reset,
           inputData_0,
           inputData_1,
           inputData_2,
           inputData_3,
           inputData_4,
           inputData_5,
           inputData_6,
           inputData_7,
           inputData_8,
           inputData_9,
           inputData_10,
           inputData_11,
           inputData_12,
           inputData_13,
           inputValid,
           parity_0,
           parity_1,
           parity_2,
           parity_3,
           parity_4,
           parity_5,
           parity_6,
           parity_7,
           parity_8,
           parity_9,
           parity_10,
           parity_11,
           parity_12,
           parity_13,
           parityAddr,
           parityValid,
           dataOut,
           startOut,
           endOut,
           validOut);


  input   clk;
  input   reset_x;
  input   enb;
  input   reset;  // ufix1
  input   inputData_0;  // ufix1
  input   inputData_1;  // ufix1
  input   inputData_2;  // ufix1
  input   inputData_3;  // ufix1
  input   inputData_4;  // ufix1
  input   inputData_5;  // ufix1
  input   inputData_6;  // ufix1
  input   inputData_7;  // ufix1
  input   inputData_8;  // ufix1
  input   inputData_9;  // ufix1
  input   inputData_10;  // ufix1
  input   inputData_11;  // ufix1
  input   inputData_12;  // ufix1
  input   inputData_13;  // ufix1
  input   inputValid;  // ufix1
  input   parity_0;  // ufix1
  input   parity_1;  // ufix1
  input   parity_2;  // ufix1
  input   parity_3;  // ufix1
  input   parity_4;  // ufix1
  input   parity_5;  // ufix1
  input   parity_6;  // ufix1
  input   parity_7;  // ufix1
  input   parity_8;  // ufix1
  input   parity_9;  // ufix1
  input   parity_10;  // ufix1
  input   parity_11;  // ufix1
  input   parity_12;  // ufix1
  input   parity_13;  // ufix1
  input   [3:0] parityAddr;  // ufix4
  input   parityValid;  // ufix1
  output  dataOut;  // ufix1
  output  startOut;  // ufix1
  output  endOut;  // ufix1
  output  validOut;  // ufix1


  reg  [2:0] valid_reg;  // ufix1 [3]
  wire validReg;  // ufix1
  wire const0;  // ufix1
  wire [13:0] inputData;  // ufix1 [14]
  reg  validTmp;  // ufix1
  wire inValidNeg;  // ufix1
  wire parityStart;  // ufix1
  reg [3:0] idxOut;  // ufix4
  reg [3:0] index_reg [0:2];  // ufix4 [3]
  reg [3:0] index_reg_next [0:2];  // ufix4 [3]
  reg [3:0] parityIdx;  // ufix4
  reg [3:0] rdAddr;  // ufix4
  wire pri_rd_out_1;  // ufix1
  wire pri_rd_out_1_1;  // ufix1
  wire pri_rd_out_1_2;  // ufix1
  wire pri_rd_out_1_3;  // ufix1
  wire pri_rd_out_1_4;  // ufix1
  wire pri_rd_out_1_5;  // ufix1
  wire pri_rd_out_1_6;  // ufix1
  wire pri_rd_out_1_7;  // ufix1
  wire pri_rd_out_1_8;  // ufix1
  wire pri_rd_out_1_9;  // ufix1
  wire pri_rd_out_1_10;  // ufix1
  wire pri_rd_out_1_11;  // ufix1
  wire pri_rd_out_1_12;  // ufix1
  reg [3:0] pAddr;  // ufix4
  wire pri_rd_out_1_13;  // ufix1
  wire [13:0] parityRAM;  // ufix1 [14]
  reg  readParity_rdValid;
  reg [3:0] readParity_rdAddr;  // ufix4
  reg [3:0] readParity_idxCount;  // ufix4
  reg [3:0] readParity_jdxCount;  // ufix4
  reg [3:0] readParity_rdCount;  // ufix4
  reg  readParity_pRead;
  reg  readParity_rdValid_next;
  reg [3:0] readParity_rdAddr_next;  // ufix4
  reg [3:0] readParity_idxCount_next;  // ufix4
  reg [3:0] readParity_jdxCount_next;  // ufix4
  reg [3:0] readParity_rdCount_next;  // ufix4
  reg  readParity_pRead_next;
  reg  inputData_14;  // ufix1
  reg  parityData;  // ufix1
  reg  pValid;  // ufix1
  reg  [2:0] data_reg;  // ufix1 [3]
  wire dataReg;  // ufix1
  wire dataTmp;  // ufix1
  reg  [1:0] index_reg_1;  // ufix1 [2]
  wire pValidReg;  // ufix1
  wire pValidNeg;  // ufix1
  reg  validReg1;  // ufix1
  wire validRegNeg;  // ufix1
  reg  outputController_validReg;
  wire outputController_endO;
  reg  startO;  // ufix1
  wire endO;  // ufix1
  reg  validO;  // ufix1
  reg  dataO;  // ufix1
  reg  dataOut_2;  // ufix1
  reg  startOut_2;  // ufix1
  reg  endOut_2;  // ufix1
  reg  validOut_2;  // ufix1
  reg signed [31:0] index_t_0_0;  // int32
  reg signed [31:0] index_t_0_1;  // int32
  reg signed [31:0] index_t_1;  // int32
  reg  readParity_pRead_temp;
  reg [4:0] readParity_add_temp;  // ufix5
  reg [4:0] readParity_add_temp_0;  // ufix5
  reg [4:0] readParity_t_0_0;  // ufix5
  reg [4:0] readParity_t_1;  // ufix5


  always @(posedge clk)
    begin : valid_process
      if (reset_x == 1'b1) begin
        valid_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          valid_reg[0] <= inputValid;
          valid_reg[32'sd2:32'sd1] <= valid_reg[32'sd1:32'sd0];
        end
      end
    end

  assign validReg = valid_reg[2];



  assign const0 = 1'b0;



  assign inputData[0] = inputData_0;
  assign inputData[1] = inputData_1;
  assign inputData[2] = inputData_2;
  assign inputData[3] = inputData_3;
  assign inputData[4] = inputData_4;
  assign inputData[5] = inputData_5;
  assign inputData[6] = inputData_6;
  assign inputData[7] = inputData_7;
  assign inputData[8] = inputData_8;
  assign inputData[9] = inputData_9;
  assign inputData[10] = inputData_10;
  assign inputData[11] = inputData_11;
  assign inputData[12] = inputData_12;
  assign inputData[13] = inputData_13;

  always @(posedge clk)
    begin : valid_in_process
      if (reset_x == 1'b1) begin
        validTmp <= 1'b0;
      end
      else begin
        if (enb) begin
          validTmp <= inputValid;
        end
      end
    end



  assign inValidNeg =  ~ inputValid;



  assign parityStart = validTmp & inValidNeg;



  always @(posedge clk)
    begin : index_process
      if (reset_x == 1'b1) begin
        for(index_t_1 = 32'sd0; index_t_1 <= 32'sd2; index_t_1 = index_t_1 + 32'sd1) begin
          index_reg[index_t_1] <= 4'b0001;
        end
      end
      else begin
        if (enb) begin
          for(index_t_0_1 = 32'sd0; index_t_0_1 <= 32'sd2; index_t_0_1 = index_t_0_1 + 32'sd1) begin
            index_reg[index_t_0_1] <= index_reg_next[index_t_0_1];
          end
        end
      end
    end

  always @* begin
    parityIdx = index_reg[2];
    index_reg_next[0] = idxOut;

    for(index_t_0_0 = 32'sd0; index_t_0_0 <= 32'sd1; index_t_0_0 = index_t_0_0 + 32'sd1) begin
      index_reg_next[index_t_0_0 + 32'sd1] = index_reg[index_t_0_0];
    end

  end



  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank13 (.clk(clk),
                                                                              .enb(enb),
                                                                              .wr_din(parity_13),  // ufix1
                                                                              .wr_addr(parityAddr),
                                                                              .wr_en(parityValid),  // ufix1
                                                                              .rd_addr(rdAddr),
                                                                              .dout(pri_rd_out_1)  // ufix1
                                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank12 (.clk(clk),
                                                                              .enb(enb),
                                                                              .wr_din(parity_12),  // ufix1
                                                                              .wr_addr(parityAddr),
                                                                              .wr_en(parityValid),  // ufix1
                                                                              .rd_addr(rdAddr),
                                                                              .dout(pri_rd_out_1_1)  // ufix1
                                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank11 (.clk(clk),
                                                                              .enb(enb),
                                                                              .wr_din(parity_11),  // ufix1
                                                                              .wr_addr(parityAddr),
                                                                              .wr_en(parityValid),  // ufix1
                                                                              .rd_addr(rdAddr),
                                                                              .dout(pri_rd_out_1_2)  // ufix1
                                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank10 (.clk(clk),
                                                                              .enb(enb),
                                                                              .wr_din(parity_10),  // ufix1
                                                                              .wr_addr(parityAddr),
                                                                              .wr_en(parityValid),  // ufix1
                                                                              .rd_addr(rdAddr),
                                                                              .dout(pri_rd_out_1_3)  // ufix1
                                                                              );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank9 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_9),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_4)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank8 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_8),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_5)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank7 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_7),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_6)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank6 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_6),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_7)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank5 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_5),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_8)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank4 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_4),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_9)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank3 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_3),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_10)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank2 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_2),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_11)  // ufix1
                                                                             );

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank1 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_1),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_12)  // ufix1
                                                                             );

  always @(posedge clk)
    begin : rdaddr_1_process
      if (reset_x == 1'b1) begin
        rdAddr <= 4'b0000;
      end
      else begin
        if (enb) begin
          rdAddr <= pAddr;
        end
      end
    end



  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Parity_RAM_singlebit_bank0 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(parity_0),  // ufix1
                                                                             .wr_addr(parityAddr),
                                                                             .wr_en(parityValid),  // ufix1
                                                                             .rd_addr(rdAddr),
                                                                             .dout(pri_rd_out_1_13)  // ufix1
                                                                             );

  assign parityRAM[0] = pri_rd_out_1_13;
  assign parityRAM[1] = pri_rd_out_1_12;
  assign parityRAM[2] = pri_rd_out_1_11;
  assign parityRAM[3] = pri_rd_out_1_10;
  assign parityRAM[4] = pri_rd_out_1_9;
  assign parityRAM[5] = pri_rd_out_1_8;
  assign parityRAM[6] = pri_rd_out_1_7;
  assign parityRAM[7] = pri_rd_out_1_6;
  assign parityRAM[8] = pri_rd_out_1_5;
  assign parityRAM[9] = pri_rd_out_1_4;
  assign parityRAM[10] = pri_rd_out_1_3;
  assign parityRAM[11] = pri_rd_out_1_2;
  assign parityRAM[12] = pri_rd_out_1_1;
  assign parityRAM[13] = pri_rd_out_1;

  always @(posedge clk)
    begin : readParity_process
      if (reset_x == 1'b1) begin
        readParity_rdValid <= 1'b0;
        readParity_rdCount <= 4'b0001;
        readParity_rdAddr <= 4'b0001;
        readParity_idxCount <= 4'b0000;
        readParity_jdxCount <= 4'b0000;
        readParity_pRead <= 1'b0;
      end
      else begin
        if (enb) begin
          readParity_rdValid <= readParity_rdValid_next;
          readParity_rdAddr <= readParity_rdAddr_next;
          readParity_idxCount <= readParity_idxCount_next;
          readParity_jdxCount <= readParity_jdxCount_next;
          readParity_rdCount <= readParity_rdCount_next;
          readParity_pRead <= readParity_pRead_next;
        end
      end
    end

  always @* begin
    readParity_pRead_temp = readParity_pRead;
    readParity_rdValid_next = readParity_rdValid;
    readParity_rdAddr_next = readParity_rdAddr;
    readParity_idxCount_next = readParity_idxCount;
    readParity_jdxCount_next = readParity_jdxCount;
    readParity_rdCount_next = readParity_rdCount;
    readParity_t_0_0 = {1'b0, readParity_idxCount};
    readParity_add_temp = readParity_t_0_0 + 5'b00001;
    inputData_14 = inputData[$signed({1'b0, readParity_add_temp}) - 32'sd1];
    readParity_t_1 = {1'b0, parityIdx};
    readParity_add_temp_0 = readParity_t_1 + 5'b00001;
    parityData = parityRAM[$signed({1'b0, readParity_add_temp_0}) - 32'sd1];
    if (reset != 1'b0) begin
      readParity_pRead_temp = 1'b0;
    end
    else if (parityStart != 1'b0) begin
      readParity_pRead_temp = 1'b1;
    end
    if (reset != 1'b0) begin
      readParity_idxCount_next = 4'b0000;
    end
    else if (inputValid != 1'b0) begin
      if (readParity_idxCount == 4'b1101) begin
        readParity_idxCount_next = 4'b0000;
      end
      else begin
        readParity_idxCount_next = readParity_idxCount + 4'b0001;
      end
    end
    if (reset != 1'b0) begin
      readParity_rdValid_next = 1'b0;
      readParity_rdAddr_next = 4'b0001;
      readParity_rdCount_next = 4'b0001;
      readParity_jdxCount_next = 4'b0000;
    end
    else if (readParity_pRead_temp) begin
      if (readParity_rdCount == 4'b1101) begin
        readParity_rdAddr_next = readParity_rdCount;
        readParity_rdValid_next = 1'b0;
        readParity_pRead_temp = 1'b0;
      end
      else begin
        readParity_rdValid_next = 1'b1;
        readParity_rdAddr_next = readParity_rdCount;
      end
      if (readParity_jdxCount == 4'b1101) begin
        readParity_jdxCount_next = 4'b0000;
        readParity_rdCount_next = readParity_rdCount + 4'b0001;
      end
      else begin
        readParity_jdxCount_next = readParity_jdxCount + 4'b0001;
      end
    end
    pValid = readParity_rdValid;
    pAddr = readParity_rdAddr;
    idxOut = readParity_jdxCount;
    readParity_pRead_next = readParity_pRead_temp;
  end



  always @(posedge clk)
    begin : data_process
      if (reset_x == 1'b1) begin
        data_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          data_reg[0] <= inputData_14;
          data_reg[32'sd2:32'sd1] <= data_reg[32'sd1:32'sd0];
        end
      end
    end

  assign dataReg = data_reg[2];



  assign dataTmp = (validReg == 1'b0 ? const0 :
              dataReg);



  always @(posedge clk)
    begin : index_1_process
      if (reset_x == 1'b1) begin
        index_reg_1 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          index_reg_1[0] <= pValid;
          index_reg_1[1] <= index_reg_1[0];
        end
      end
    end

  assign pValidReg = index_reg_1[1];



  assign pValidNeg =  ~ pValidReg;



  always @(posedge clk)
    begin : valid_1_process
      if (reset_x == 1'b1) begin
        validReg1 <= 1'b0;
      end
      else begin
        if (enb) begin
          validReg1 <= validReg;
        end
      end
    end



  assign validRegNeg =  ~ validReg1;



  always @(posedge clk)
    begin : outputController_process
      if (reset_x == 1'b1) begin
        startO <= 1'b0;
        validO <= 1'b0;
        dataO <= 1'b0;
        outputController_validReg <= 1'b0;
      end
      else begin
        if (enb) begin
          outputController_validReg <= pValidReg;
          validO <= (validReg != 1'b0) || (pValidReg != 1'b0);
          startO <= (validReg != 1'b0) && (validRegNeg != 1'b0);
          if (reset != 1'b0) begin
            dataO <= 1'b0;
          end
          else if (validReg != 1'b0) begin
            dataO <= dataTmp;
          end
          else if (pValidReg != 1'b0) begin
            dataO <= parityData;
          end
          else begin
            dataO <= 1'b0;
          end
        end
      end
    end

  assign outputController_endO = pValidNeg && outputController_validReg;
  assign endO = outputController_endO;



  always @(posedge clk)
    begin : dataOut_1_process
      if (reset_x == 1'b1) begin
        dataOut_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          dataOut_2 <= dataO;
        end
      end
    end



  always @(posedge clk)
    begin : startOut_1_process
      if (reset_x == 1'b1) begin
        startOut_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          startOut_2 <= startO;
        end
      end
    end



  always @(posedge clk)
    begin : endOut_1_process
      if (reset_x == 1'b1) begin
        endOut_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          endOut_2 <= endO;
        end
      end
    end



  always @(posedge clk)
    begin : validOut_1_process
      if (reset_x == 1'b1) begin
        validOut_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_2 <= validO;
        end
      end
    end



  assign dataOut = dataOut_2;

  assign startOut = startOut_2;

  assign endOut = endOut_2;

  assign validOut = validOut_2;

endmodule  // tx_125_src_Final_Output

