// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_full_tx.v
// Created: 2024-09-14 22:22:21
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 8e-09
// Target subsystem base rate: 8e-09
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out_0      8e-09
// ce_out_1      6.4e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// data_out                      ce_out_0      8e-09
// valid_out                     ce_out_0      8e-09
// ready                         ce_out_1      6.4e-08
// debug_payload                 ce_out_0      8e-09
// debug_payload_ctrl_start      ce_out_0      8e-09
// debug_payload_ctrl_end        ce_out_0      8e-09
// debug_payload_ctrl_valid      ce_out_0      8e-09
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_full_tx
// Source Path: HDLTx/full_tx
// Hierarchy Level: 0
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_full_tx
          (clk,
           reset_x,
           clk_enable,
           new_frame_in,
           reg0,
           reg1,
           reg2,
           reg3,
           data_in,
           valid_in,
           last_frame,
           ce_out_0,
           ce_out_1,
           data_out,
           valid_out,
           ready,
           debug_payload,
           debug_payload_ctrl_start,
           debug_payload_ctrl_end,
           debug_payload_ctrl_valid);


  input   clk;
  input   reset_x;
  input   clk_enable;
  input   new_frame_in;
  input   [31:0] reg0;  // uint32
  input   [31:0] reg1;  // uint32
  input   [31:0] reg2;  // uint32
  input   [31:0] reg3;  // uint32
  input   [7:0] data_in;  // uint8
  input   valid_in;
  input   last_frame;
  output  ce_out_0;
  output  ce_out_1;
  output  signed [15:0] data_out;  // sfix16_En12
  output  valid_out;
  output  ready;
  output  debug_payload;
  output  debug_payload_ctrl_start;
  output  debug_payload_ctrl_end;
  output  debug_payload_ctrl_valid;


  wire enb_1_2_0;
  wire enb_1_8_0;
  wire enb;
  wire enb_1_2_1;
  wire enb_1_8_1;
  wire enb_1_1_1;
  wire reg_to_variable_out1;
  wire reg_to_variable_out2_0;
  wire reg_to_variable_out2_1;
  wire reg_to_variable_out2_2;
  wire reg_to_variable_out2_3;
  wire reg_to_variable_out2_4;
  wire reg_to_variable_out2_5;
  wire reg_to_variable_out2_6;
  wire reg_to_variable_out2_7;
  wire reg_to_variable_out2_8;
  wire reg_to_variable_out2_9;
  wire reg_to_variable_out2_10;
  wire reg_to_variable_out2_11;
  wire reg_to_variable_out2_12;
  wire reg_to_variable_out2_13;
  wire reg_to_variable_out2_14;
  wire reg_to_variable_out2_15;
  wire reg_to_variable_out2_16;
  wire reg_to_variable_out2_17;
  wire reg_to_variable_out2_18;
  wire reg_to_variable_out2_19;
  wire reg_to_variable_out2_20;
  wire reg_to_variable_out2_21;
  wire reg_to_variable_out2_22;
  wire reg_to_variable_out2_23;
  wire reg_to_variable_out3_0;
  wire reg_to_variable_out3_1;
  wire reg_to_variable_out3_2;
  wire reg_to_variable_out3_3;
  wire reg_to_variable_out3_4;
  wire reg_to_variable_out3_5;
  wire reg_to_variable_out3_6;
  wire reg_to_variable_out3_7;
  wire reg_to_variable_out3_8;
  wire reg_to_variable_out3_9;
  wire reg_to_variable_out3_10;
  wire reg_to_variable_out3_11;
  wire reg_to_variable_out3_12;
  wire reg_to_variable_out3_13;
  wire reg_to_variable_out3_14;
  wire reg_to_variable_out3_15;
  wire reg_to_variable_out4_0;
  wire reg_to_variable_out4_1;
  wire reg_to_variable_out5_0;
  wire reg_to_variable_out5_1;
  wire reg_to_variable_out5_2;
  wire reg_to_variable_out6_0;
  wire reg_to_variable_out6_1;
  wire reg_to_variable_out6_2;
  wire reg_to_variable_out7_0;
  wire reg_to_variable_out7_1;
  wire reg_to_variable_out7_2;
  wire reg_to_variable_out8_0;
  wire reg_to_variable_out8_1;
  wire reg_to_variable_out8_2;
  wire reg_to_variable_out8_3;
  wire reg_to_variable_out9_0;
  wire reg_to_variable_out9_1;
  wire reg_to_variable_out9_2;
  wire reg_to_variable_out9_3;
  wire reg_to_variable_out9_4;
  wire reg_to_variable_out10_0;
  wire reg_to_variable_out10_1;
  wire reg_to_variable_out10_2;
  wire reg_to_variable_out11_0;
  wire reg_to_variable_out11_1;
  wire reg_to_variable_out11_2;
  wire reg_to_variable_out12_0;
  wire reg_to_variable_out12_1;
  wire reg_to_variable_out12_2;
  reg  Rate_Transition_out1;
  wire preamble_gen_out1;
  wire preamble_gen_out2_end;
  wire preamble_gen_out2_valid;
  wire end_rsvd;
  wire channel_gen_out1;
  wire channel_gen_out2_end;
  wire channel_gen_out2_valid;
  wire new_frame_rate_conversion_out1;
  wire header_full_out1;
  wire header_full_out2_end;
  wire header_full_out2_valid;
  reg  Delay1_out1;
  wire payload_new_frame_in;
  wire payload_full_out1;
  wire payload_ctrl_out_start;
  wire payload_ctrl_out_end;
  wire payload_ctrl_out_valid;
  wire payload_full_out3;
  wire [15:0] payload_full_out4;  // uint16
  wire [3:0] payload_full_out5;  // ufix4
  wire clock_crossing_out1;
  wire clock_crossing_out2;
  wire clock_crossing_out3;
  wire clock_crossing_out4;
  wire deserializer_PostProcessed_0;
  wire deserializer_PostProcessed_1;
  wire clock_crossing_out6;
  wire deserializer_PostProcessed_0_1;
  wire deserializer_PostProcessed_1_1;
  wire clock_crossing_out8;
  wire [15:0] clock_crossing_out9;  // uint16
  wire [3:0] clock_crossing_out10;  // ufix4
  wire clock_crossing_out11_0;
  wire clock_crossing_out11_1;
  wire clock_crossing_out11_2;
  reg  [7:0] Delay17_reg;  // ufix1 [8]
  wire Delay17_out1;
  reg  [7:0] Delay16_reg;  // ufix1 [8]
  wire Delay16_out1;
  reg  Delay16_out1_1;
  reg  [7:0] Delay15_reg;  // ufix1 [8]
  wire Delay15_out1;
  reg  [7:0] Delay14_reg;  // ufix1 [8]
  wire Delay14_out1;
  reg  Delay14_out1_1;
  wire [1:0] deserializer_PostProcessed;  // boolean [2]
  reg  [15:0] Delay13_reg;  // ufix1 [16]
  wire [1:0] Delay13_out1;  // boolean [2]
  reg  [1:0] Delay13_out1_1;  // boolean [2]
  reg  [7:0] Delay12_reg;  // ufix1 [8]
  wire Delay12_out1;
  reg  Delay12_out1_1;
  wire [1:0] deserializer_PostProcessed_2;  // boolean [2]
  reg  [15:0] Delay11_reg;  // ufix1 [16]
  wire [1:0] Delay11_out1;  // boolean [2]
  reg  [1:0] Delay11_out1_1;  // boolean [2]
  reg  [7:0] Delay10_reg;  // ufix1 [8]
  wire Delay10_out1;
  reg  Delay10_out1_1;
  reg [15:0] Delay9_out1;  // uint16
  reg [15:0] Delay9_out1_1;  // uint16
  reg [3:0] Delay8_out1;  // ufix4
  reg [3:0] Delay8_out1_1;  // ufix4
  wire [2:0] clock_crossing_out11;  // boolean [3]
  reg  [2:0] Delay7_out1;  // boolean [3]
  reg  [2:0] Delay7_out1_1;  // boolean [3]
  wire stateControl;
  reg  stateControl_1;
  wire enb_1_2_0_gated;
  wire stateControl_2;
  reg  stateControl_3;
  wire enb_1_2_0_gated_1;
  wire stateControl_4;
  reg  stateControl_5;
  wire enb_1_2_0_gated_2;
  wire stateControl_6;
  reg  stateControl_7;
  wire enb_1_2_0_gated_3;
  wire stateControl_8;
  reg  stateControl_9;
  wire enb_1_2_0_gated_4;
  wire stateControl_11;
  reg  stateControl_12;
  wire enb_1_2_0_gated_5;
  wire [7:0] store_frame_in_ram_out6;  // uint8
  reg [7:0] Delay_out1;  // uint8
  wire store_frame_in_ram_out5;
  reg  Delay2_out1;
  reg  [12:0] Delay3_out1;  // boolean [13]
  wire store_frame_in_ram_out4_0;
  wire store_frame_in_ram_out4_1;
  wire store_frame_in_ram_out4_2;
  wire store_frame_in_ram_out4_3;
  wire store_frame_in_ram_out4_4;
  wire store_frame_in_ram_out4_5;
  wire store_frame_in_ram_out4_6;
  wire store_frame_in_ram_out4_7;
  wire store_frame_in_ram_out4_8;
  wire store_frame_in_ram_out4_9;
  wire store_frame_in_ram_out4_10;
  wire store_frame_in_ram_out4_11;
  wire store_frame_in_ram_out4_12;
  wire [12:0] store_frame_in_ram_out4;  // boolean [13]
  wire [3:0] store_frame_in_ram_out3;  // ufix4
  reg [3:0] Delay4_out1;  // ufix4
  wire store_frame_in_ram_out2;
  reg  Delay5_out1;
  wire ready_1;
  wire [11:0] dout_magic;  // ufix12
  reg [11:0] Delay6_out1;  // ufix12
  wire signed [15:0] full_ofdm_modulator_out1;  // sfix16_En12
  wire valid_out_1;
  reg signed [15:0] delayMatch15_reg [0:5];  // sfix16 [6]
  reg signed [15:0] delayMatch15_reg_next [0:5];  // sfix16_En12 [6]
  reg signed [15:0] full_ofdm_modulator_out1_1;  // sfix16_En12
  reg  [5:0] delayMatch16_reg;  // ufix1 [6]
  reg  payload_full_out3_1;
  reg  [7:0] delayMatch18_reg;  // ufix1 [8]
  wire payload_full_out1_1;
  reg  [7:0] alpha_reg;  // ufix1 [8]
  wire payload_ctrl_out_start_1;
  reg  [7:0] alpha_reg_1;  // ufix1 [8]
  wire payload_ctrl_out_end_1;
  reg  [7:0] alpha_reg_2;  // ufix1 [8]
  wire payload_ctrl_out_valid_1;
  reg signed [31:0] delayMatch15_t_0_0;  // int32
  reg signed [31:0] delayMatch15_t_0_1;  // int32
  reg signed [31:0] delayMatch15_t_1;  // int32


  tx_125_src_full_tx_tc u_full_tx_tc (.clk(clk),
                                      .reset_x(reset_x),
                                      .clk_enable(clk_enable),
                                      .enb(enb),
                                      .enb_1_1_1(enb_1_1_1),
                                      .enb_1_2_0(enb_1_2_0),
                                      .enb_1_2_1(enb_1_2_1),
                                      .enb_1_8_0(enb_1_8_0),
                                      .enb_1_8_1(enb_1_8_1)
                                      );

  tx_125_src_reg_to_variable u_reg_to_variable (.clk(clk),
                                                .reset_x(reset_x),
                                                .enb_1_8_0(enb_1_8_0),
                                                .new_frame_in(new_frame_in),
                                                .reg0(reg0),  // uint32
                                                .reg1(reg1),  // uint32
                                                .reg2(reg2),  // uint32
                                                .reg3(reg3),  // uint32
                                                .new_frame_out(reg_to_variable_out1),
                                                .psdu_size_0(reg_to_variable_out2_0),  // boolean
                                                .psdu_size_1(reg_to_variable_out2_1),  // boolean
                                                .psdu_size_2(reg_to_variable_out2_2),  // boolean
                                                .psdu_size_3(reg_to_variable_out2_3),  // boolean
                                                .psdu_size_4(reg_to_variable_out2_4),  // boolean
                                                .psdu_size_5(reg_to_variable_out2_5),  // boolean
                                                .psdu_size_6(reg_to_variable_out2_6),  // boolean
                                                .psdu_size_7(reg_to_variable_out2_7),  // boolean
                                                .psdu_size_8(reg_to_variable_out2_8),  // boolean
                                                .psdu_size_9(reg_to_variable_out2_9),  // boolean
                                                .psdu_size_10(reg_to_variable_out2_10),  // boolean
                                                .psdu_size_11(reg_to_variable_out2_11),  // boolean
                                                .psdu_size_12(reg_to_variable_out2_12),  // boolean
                                                .psdu_size_13(reg_to_variable_out2_13),  // boolean
                                                .psdu_size_14(reg_to_variable_out2_14),  // boolean
                                                .psdu_size_15(reg_to_variable_out2_15),  // boolean
                                                .psdu_size_16(reg_to_variable_out2_16),  // boolean
                                                .psdu_size_17(reg_to_variable_out2_17),  // boolean
                                                .psdu_size_18(reg_to_variable_out2_18),  // boolean
                                                .psdu_size_19(reg_to_variable_out2_19),  // boolean
                                                .psdu_size_20(reg_to_variable_out2_20),  // boolean
                                                .psdu_size_21(reg_to_variable_out2_21),  // boolean
                                                .psdu_size_22(reg_to_variable_out2_22),  // boolean
                                                .psdu_size_23(reg_to_variable_out2_23),  // boolean
                                                .msg_duration_0(reg_to_variable_out3_0),  // boolean
                                                .msg_duration_1(reg_to_variable_out3_1),  // boolean
                                                .msg_duration_2(reg_to_variable_out3_2),  // boolean
                                                .msg_duration_3(reg_to_variable_out3_3),  // boolean
                                                .msg_duration_4(reg_to_variable_out3_4),  // boolean
                                                .msg_duration_5(reg_to_variable_out3_5),  // boolean
                                                .msg_duration_6(reg_to_variable_out3_6),  // boolean
                                                .msg_duration_7(reg_to_variable_out3_7),  // boolean
                                                .msg_duration_8(reg_to_variable_out3_8),  // boolean
                                                .msg_duration_9(reg_to_variable_out3_9),  // boolean
                                                .msg_duration_10(reg_to_variable_out3_10),  // boolean
                                                .msg_duration_11(reg_to_variable_out3_11),  // boolean
                                                .msg_duration_12(reg_to_variable_out3_12),  // boolean
                                                .msg_duration_13(reg_to_variable_out3_13),  // boolean
                                                .msg_duration_14(reg_to_variable_out3_14),  // boolean
                                                .msg_duration_15(reg_to_variable_out3_15),  // boolean
                                                .block_size_0(reg_to_variable_out4_0),  // boolean
                                                .block_size_1(reg_to_variable_out4_1),  // boolean
                                                .fec_rate_0(reg_to_variable_out5_0),  // boolean
                                                .fec_rate_1(reg_to_variable_out5_1),  // boolean
                                                .fec_rate_2(reg_to_variable_out5_2),  // boolean
                                                .rep_number_0(reg_to_variable_out6_0),  // boolean
                                                .rep_number_1(reg_to_variable_out6_1),  // boolean
                                                .rep_number_2(reg_to_variable_out6_2),  // boolean
                                                .concat_factor_0(reg_to_variable_out7_0),  // boolean
                                                .concat_factor_1(reg_to_variable_out7_1),  // boolean
                                                .concat_factor_2(reg_to_variable_out7_2),  // boolean
                                                .scrambler_init_0(reg_to_variable_out8_0),  // boolean
                                                .scrambler_init_1(reg_to_variable_out8_1),  // boolean
                                                .scrambler_init_2(reg_to_variable_out8_2),  // boolean
                                                .scrambler_init_3(reg_to_variable_out8_3),  // boolean
                                                .bat_id_0(reg_to_variable_out9_0),  // boolean
                                                .bat_id_1(reg_to_variable_out9_1),  // boolean
                                                .bat_id_2(reg_to_variable_out9_2),  // boolean
                                                .bat_id_3(reg_to_variable_out9_3),  // boolean
                                                .bat_id_4(reg_to_variable_out9_4),  // boolean
                                                .cp_id_0(reg_to_variable_out10_0),  // boolean
                                                .cp_id_1(reg_to_variable_out10_1),  // boolean
                                                .cp_id_2(reg_to_variable_out10_2),  // boolean
                                                .mimo_spacing_0(reg_to_variable_out11_0),  // boolean
                                                .mimo_spacing_1(reg_to_variable_out11_1),  // boolean
                                                .mimo_spacing_2(reg_to_variable_out11_2),  // boolean
                                                .mimo_number_0(reg_to_variable_out12_0),  // boolean
                                                .mimo_number_1(reg_to_variable_out12_1),  // boolean
                                                .mimo_number_2(reg_to_variable_out12_2)  // boolean
                                                );

  always @(posedge clk)
    begin : Rate_Transition_process
      if (reset_x == 1'b1) begin
        Rate_Transition_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Rate_Transition_out1 <= reg_to_variable_out1;
        end
      end
    end



  tx_125_src_preamble_gen u_preamble_gen (.clk(clk),
                                          .reset_x(reset_x),
                                          .enb_1_2_0(enb_1_2_0),
                                          .new_frame(Rate_Transition_out1),
                                          .data_out(preamble_gen_out1),
                                          .ctrl_out_end(preamble_gen_out2_end),
                                          .ctrl_out_valid(preamble_gen_out2_valid)
                                          );

  assign end_rsvd = preamble_gen_out2_end;

  tx_125_src_channel_gen u_channel_gen (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_2_0(enb_1_2_0),
                                        .new_frame(end_rsvd),
                                        .data_out(channel_gen_out1),
                                        .ctrl_out_end(channel_gen_out2_end),
                                        .ctrl_out_valid(channel_gen_out2_valid)
                                        );

  tx_125_src_new_frame_rate_conversion u_new_frame_rate_conversion (.clk(clk),
                                                                    .reset_x(reset_x),
                                                                    .enb_1_2_0(enb_1_2_0),
                                                                    .enb_1_8_1(enb_1_8_1),
                                                                    .ctrl_in_end(channel_gen_out2_end),
                                                                    .new_frame(new_frame_rate_conversion_out1)
                                                                    );

  tx_125_src_header_full u_header_full (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_8_0(enb_1_8_0),
                                        .enb(enb),
                                        .new_frame(new_frame_rate_conversion_out1),
                                        .psdu_size_0(reg_to_variable_out2_0),  // boolean
                                        .psdu_size_1(reg_to_variable_out2_1),  // boolean
                                        .psdu_size_2(reg_to_variable_out2_2),  // boolean
                                        .psdu_size_3(reg_to_variable_out2_3),  // boolean
                                        .psdu_size_4(reg_to_variable_out2_4),  // boolean
                                        .psdu_size_5(reg_to_variable_out2_5),  // boolean
                                        .psdu_size_6(reg_to_variable_out2_6),  // boolean
                                        .psdu_size_7(reg_to_variable_out2_7),  // boolean
                                        .psdu_size_8(reg_to_variable_out2_8),  // boolean
                                        .psdu_size_9(reg_to_variable_out2_9),  // boolean
                                        .psdu_size_10(reg_to_variable_out2_10),  // boolean
                                        .psdu_size_11(reg_to_variable_out2_11),  // boolean
                                        .psdu_size_12(reg_to_variable_out2_12),  // boolean
                                        .psdu_size_13(reg_to_variable_out2_13),  // boolean
                                        .psdu_size_14(reg_to_variable_out2_14),  // boolean
                                        .psdu_size_15(reg_to_variable_out2_15),  // boolean
                                        .psdu_size_16(reg_to_variable_out2_16),  // boolean
                                        .psdu_size_17(reg_to_variable_out2_17),  // boolean
                                        .psdu_size_18(reg_to_variable_out2_18),  // boolean
                                        .psdu_size_19(reg_to_variable_out2_19),  // boolean
                                        .psdu_size_20(reg_to_variable_out2_20),  // boolean
                                        .psdu_size_21(reg_to_variable_out2_21),  // boolean
                                        .psdu_size_22(reg_to_variable_out2_22),  // boolean
                                        .psdu_size_23(reg_to_variable_out2_23),  // boolean
                                        .msg_duration_0(reg_to_variable_out3_0),  // boolean
                                        .msg_duration_1(reg_to_variable_out3_1),  // boolean
                                        .msg_duration_2(reg_to_variable_out3_2),  // boolean
                                        .msg_duration_3(reg_to_variable_out3_3),  // boolean
                                        .msg_duration_4(reg_to_variable_out3_4),  // boolean
                                        .msg_duration_5(reg_to_variable_out3_5),  // boolean
                                        .msg_duration_6(reg_to_variable_out3_6),  // boolean
                                        .msg_duration_7(reg_to_variable_out3_7),  // boolean
                                        .msg_duration_8(reg_to_variable_out3_8),  // boolean
                                        .msg_duration_9(reg_to_variable_out3_9),  // boolean
                                        .msg_duration_10(reg_to_variable_out3_10),  // boolean
                                        .msg_duration_11(reg_to_variable_out3_11),  // boolean
                                        .msg_duration_12(reg_to_variable_out3_12),  // boolean
                                        .msg_duration_13(reg_to_variable_out3_13),  // boolean
                                        .msg_duration_14(reg_to_variable_out3_14),  // boolean
                                        .msg_duration_15(reg_to_variable_out3_15),  // boolean
                                        .block_size_0(reg_to_variable_out4_0),  // boolean
                                        .block_size_1(reg_to_variable_out4_1),  // boolean
                                        .fec_rate_0(reg_to_variable_out5_0),  // boolean
                                        .fec_rate_1(reg_to_variable_out5_1),  // boolean
                                        .fec_rate_2(reg_to_variable_out5_2),  // boolean
                                        .rep_number_0(reg_to_variable_out6_0),  // boolean
                                        .rep_number_1(reg_to_variable_out6_1),  // boolean
                                        .rep_number_2(reg_to_variable_out6_2),  // boolean
                                        .concat_factor_0(reg_to_variable_out7_0),  // boolean
                                        .concat_factor_1(reg_to_variable_out7_1),  // boolean
                                        .concat_factor_2(reg_to_variable_out7_2),  // boolean
                                        .scrambler_init_0(reg_to_variable_out8_0),  // boolean
                                        .scrambler_init_1(reg_to_variable_out8_1),  // boolean
                                        .scrambler_init_2(reg_to_variable_out8_2),  // boolean
                                        .scrambler_init_3(reg_to_variable_out8_3),  // boolean
                                        .bat_id_0(reg_to_variable_out9_0),  // boolean
                                        .bat_id_1(reg_to_variable_out9_1),  // boolean
                                        .bat_id_2(reg_to_variable_out9_2),  // boolean
                                        .bat_id_3(reg_to_variable_out9_3),  // boolean
                                        .bat_id_4(reg_to_variable_out9_4),  // boolean
                                        .cp_id_0(reg_to_variable_out10_0),  // boolean
                                        .cp_id_1(reg_to_variable_out10_1),  // boolean
                                        .cp_id_2(reg_to_variable_out10_2),  // boolean
                                        .mimo_spacing_0(reg_to_variable_out11_0),  // boolean
                                        .mimo_spacing_1(reg_to_variable_out11_1),  // boolean
                                        .mimo_spacing_2(reg_to_variable_out11_2),  // boolean
                                        .mimo_number_0(reg_to_variable_out12_0),  // boolean
                                        .mimo_number_1(reg_to_variable_out12_1),  // boolean
                                        .mimo_number_2(reg_to_variable_out12_2),  // boolean
                                        .header(header_full_out1),
                                        .ctrl_out_end(header_full_out2_end),
                                        .ctrl_out_valid(header_full_out2_valid)
                                        );

  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay1_out1 <= last_frame;
        end
      end
    end



  tx_125_src_new_frame_rate_conversion1 u_new_frame_rate_conversion1 (.clk(clk),
                                                                      .reset_x(reset_x),
                                                                      .enb(enb),
                                                                      .enb_1_8_1(enb_1_8_1),
                                                                      .ctrl_in_end(header_full_out2_end),
                                                                      .new_frame(payload_new_frame_in)
                                                                      );

  tx_125_src_payload_full u_payload_full (.clk(clk),
                                          .reset_x(reset_x),
                                          .enb_1_8_0(enb_1_8_0),
                                          .enb(enb),
                                          .enb_1_8_1(enb_1_8_1),
                                          .data_in(data_in),  // uint8
                                          .valid_in(valid_in),
                                          .last_frame(Delay1_out1),
                                          .new_frame(payload_new_frame_in),
                                          .scrambler_init_0(reg_to_variable_out8_0),  // boolean
                                          .scrambler_init_1(reg_to_variable_out8_1),  // boolean
                                          .scrambler_init_2(reg_to_variable_out8_2),  // boolean
                                          .scrambler_init_3(reg_to_variable_out8_3),  // boolean
                                          .bat_id_0(reg_to_variable_out9_0),  // boolean
                                          .bat_id_1(reg_to_variable_out9_1),  // boolean
                                          .bat_id_2(reg_to_variable_out9_2),  // boolean
                                          .bat_id_3(reg_to_variable_out9_3),  // boolean
                                          .psdu_size_0(reg_to_variable_out2_0),  // boolean
                                          .psdu_size_1(reg_to_variable_out2_1),  // boolean
                                          .psdu_size_2(reg_to_variable_out2_2),  // boolean
                                          .psdu_size_3(reg_to_variable_out2_3),  // boolean
                                          .psdu_size_4(reg_to_variable_out2_4),  // boolean
                                          .psdu_size_5(reg_to_variable_out2_5),  // boolean
                                          .psdu_size_6(reg_to_variable_out2_6),  // boolean
                                          .psdu_size_7(reg_to_variable_out2_7),  // boolean
                                          .psdu_size_8(reg_to_variable_out2_8),  // boolean
                                          .psdu_size_9(reg_to_variable_out2_9),  // boolean
                                          .psdu_size_10(reg_to_variable_out2_10),  // boolean
                                          .psdu_size_11(reg_to_variable_out2_11),  // boolean
                                          .psdu_size_12(reg_to_variable_out2_12),  // boolean
                                          .psdu_size_13(reg_to_variable_out2_13),  // boolean
                                          .psdu_size_14(reg_to_variable_out2_14),  // boolean
                                          .psdu_size_15(reg_to_variable_out2_15),  // boolean
                                          .psdu_size_16(reg_to_variable_out2_16),  // boolean
                                          .psdu_size_17(reg_to_variable_out2_17),  // boolean
                                          .psdu_size_18(reg_to_variable_out2_18),  // boolean
                                          .psdu_size_19(reg_to_variable_out2_19),  // boolean
                                          .psdu_size_20(reg_to_variable_out2_20),  // boolean
                                          .psdu_size_21(reg_to_variable_out2_21),  // boolean
                                          .psdu_size_22(reg_to_variable_out2_22),  // boolean
                                          .psdu_size_23(reg_to_variable_out2_23),  // boolean
                                          .payload(payload_full_out1),
                                          .ctrl_out_start(payload_ctrl_out_start),
                                          .ctrl_out_end(payload_ctrl_out_end),
                                          .ctrl_out_valid(payload_ctrl_out_valid),
                                          .ready(payload_full_out3),
                                          .len_in_ofdm_symbols(payload_full_out4),  // uint16
                                          .bits_per_subcarrier(payload_full_out5)  // ufix4
                                          );

  tx_125_src_clock_crossing u_clock_crossing (.clk(clk),
                                              .reset_x(reset_x),
                                              .enb_1_8_0(enb_1_8_0),
                                              .enb(enb),
                                              .enb_1_2_1(enb_1_2_1),
                                              .preamble_in(preamble_gen_out1),
                                              .preamble_ctrl_in_valid(preamble_gen_out2_valid),
                                              .channel(channel_gen_out1),
                                              .channel_ctrl_valid(channel_gen_out2_valid),
                                              .header_in(header_full_out1),
                                              .header_ctrl_in_valid(header_full_out2_valid),
                                              .payload_in(payload_full_out1),
                                              .payload_ctrl_in_valid(payload_ctrl_out_valid),
                                              .cp_len_in_0(reg_to_variable_out10_0),  // boolean
                                              .cp_len_in_1(reg_to_variable_out10_1),  // boolean
                                              .cp_len_in_2(reg_to_variable_out10_2),  // boolean
                                              .payload_len_in(payload_full_out4),  // uint16
                                              .bits_per_subcarrier_in(payload_full_out5),  // ufix4
                                              .preamble_out(clock_crossing_out1),
                                              .preamble_valid(clock_crossing_out2),
                                              .channel_out(clock_crossing_out3),
                                              .channel_valid(clock_crossing_out4),
                                              .header_out_0(deserializer_PostProcessed_0),  // boolean
                                              .header_out_1(deserializer_PostProcessed_1),  // boolean
                                              .header_valid(clock_crossing_out6),
                                              .payload_out_0(deserializer_PostProcessed_0_1),  // boolean
                                              .payload_out_1(deserializer_PostProcessed_1_1),  // boolean
                                              .payload_valid_out(clock_crossing_out8),
                                              .payload_len_out(clock_crossing_out9),  // uint16
                                              .bits_per_subcarrier_out(clock_crossing_out10),  // ufix4
                                              .cp_len_out_0(clock_crossing_out11_0),  // boolean
                                              .cp_len_out_1(clock_crossing_out11_1),  // boolean
                                              .cp_len_out_2(clock_crossing_out11_2)  // boolean
                                              );

  always @(posedge clk)
    begin : Delay17_process
      if (reset_x == 1'b1) begin
        Delay17_reg <= {8{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay17_reg[0] <= clock_crossing_out1;
          Delay17_reg[32'sd7:32'sd1] <= Delay17_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay17_out1 = Delay17_reg[7];



  always @(posedge clk)
    begin : Delay16_process
      if (reset_x == 1'b1) begin
        Delay16_reg <= {8{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay16_reg[0] <= clock_crossing_out2;
          Delay16_reg[32'sd7:32'sd1] <= Delay16_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay16_out1 = Delay16_reg[7];



  always @(posedge clk)
    begin : delayMatch5_process
      if (reset_x == 1'b1) begin
        Delay16_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay16_out1_1 <= Delay16_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay15_process
      if (reset_x == 1'b1) begin
        Delay15_reg <= {8{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay15_reg[0] <= clock_crossing_out3;
          Delay15_reg[32'sd7:32'sd1] <= Delay15_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay15_out1 = Delay15_reg[7];



  always @(posedge clk)
    begin : Delay14_process
      if (reset_x == 1'b1) begin
        Delay14_reg <= {8{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay14_reg[0] <= clock_crossing_out4;
          Delay14_reg[32'sd7:32'sd1] <= Delay14_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay14_out1 = Delay14_reg[7];



  always @(posedge clk)
    begin : delayMatch6_process
      if (reset_x == 1'b1) begin
        Delay14_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay14_out1_1 <= Delay14_out1;
        end
      end
    end



  assign deserializer_PostProcessed[0] = deserializer_PostProcessed_0;
  assign deserializer_PostProcessed[1] = deserializer_PostProcessed_1;

  always @(posedge clk)
    begin : Delay13_process
      if (reset_x == 1'b1) begin
        Delay13_reg <= {16{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay13_reg[32'sd1:32'sd0] <= deserializer_PostProcessed[32'sd1:32'sd0];
          Delay13_reg[32'sd15:32'sd2] <= Delay13_reg[32'sd13:32'sd0];
        end
      end
    end

  assign Delay13_out1[32'sd1:32'sd0] = Delay13_reg[32'sd15:32'sd14];



  always @(posedge clk)
    begin : delayMatch7_process
      if (reset_x == 1'b1) begin
        Delay13_out1_1 <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay13_out1_1 <= Delay13_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay12_process
      if (reset_x == 1'b1) begin
        Delay12_reg <= {8{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay12_reg[0] <= clock_crossing_out6;
          Delay12_reg[32'sd7:32'sd1] <= Delay12_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay12_out1 = Delay12_reg[7];



  always @(posedge clk)
    begin : delayMatch8_process
      if (reset_x == 1'b1) begin
        Delay12_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay12_out1_1 <= Delay12_out1;
        end
      end
    end



  assign deserializer_PostProcessed_2[0] = deserializer_PostProcessed_0_1;
  assign deserializer_PostProcessed_2[1] = deserializer_PostProcessed_1_1;

  always @(posedge clk)
    begin : Delay11_process
      if (reset_x == 1'b1) begin
        Delay11_reg <= {16{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay11_reg[32'sd1:32'sd0] <= deserializer_PostProcessed_2[32'sd1:32'sd0];
          Delay11_reg[32'sd15:32'sd2] <= Delay11_reg[32'sd13:32'sd0];
        end
      end
    end

  assign Delay11_out1[32'sd1:32'sd0] = Delay11_reg[32'sd15:32'sd14];



  always @(posedge clk)
    begin : delayMatch9_process
      if (reset_x == 1'b1) begin
        Delay11_out1_1 <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay11_out1_1 <= Delay11_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay10_process
      if (reset_x == 1'b1) begin
        Delay10_reg <= {8{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay10_reg[0] <= clock_crossing_out8;
          Delay10_reg[32'sd7:32'sd1] <= Delay10_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay10_out1 = Delay10_reg[7];



  always @(posedge clk)
    begin : delayMatch10_process
      if (reset_x == 1'b1) begin
        Delay10_out1_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay10_out1_1 <= Delay10_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay9_process
      if (reset_x == 1'b1) begin
        Delay9_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay9_out1 <= clock_crossing_out9;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch11_process
      if (reset_x == 1'b1) begin
        Delay9_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay9_out1_1 <= Delay9_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay8_process
      if (reset_x == 1'b1) begin
        Delay8_out1 <= 4'b0000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay8_out1 <= clock_crossing_out10;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch12_process
      if (reset_x == 1'b1) begin
        Delay8_out1_1 <= 4'b0000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay8_out1_1 <= Delay8_out1;
        end
      end
    end



  assign clock_crossing_out11[0] = clock_crossing_out11_0;
  assign clock_crossing_out11[1] = clock_crossing_out11_1;
  assign clock_crossing_out11[2] = clock_crossing_out11_2;

  always @(posedge clk)
    begin : Delay7_process
      if (reset_x == 1'b1) begin
        Delay7_out1 <= {3{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay7_out1 <= clock_crossing_out11;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch13_process
      if (reset_x == 1'b1) begin
        Delay7_out1_1 <= {3{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          Delay7_out1_1 <= Delay7_out1;
        end
      end
    end



  assign stateControl = 1'b1;



  always @(posedge clk)
    begin : delayMatch14_process
      if (reset_x == 1'b1) begin
        stateControl_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_1 <= stateControl;
        end
      end
    end



  assign enb_1_2_0_gated = stateControl_1 && enb_1_2_0;

  assign stateControl_2 = 1'b1;



  always @(posedge clk)
    begin : delayMatch4_process
      if (reset_x == 1'b1) begin
        stateControl_3 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_3 <= stateControl_2;
        end
      end
    end



  assign enb_1_2_0_gated_1 = stateControl_3 && enb_1_2_0;

  assign stateControl_4 = 1'b1;



  always @(posedge clk)
    begin : delayMatch3_process
      if (reset_x == 1'b1) begin
        stateControl_5 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_5 <= stateControl_4;
        end
      end
    end



  assign enb_1_2_0_gated_2 = stateControl_5 && enb_1_2_0;

  assign stateControl_6 = 1'b1;



  always @(posedge clk)
    begin : delayMatch2_process
      if (reset_x == 1'b1) begin
        stateControl_7 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_7 <= stateControl_6;
        end
      end
    end



  assign enb_1_2_0_gated_3 = stateControl_7 && enb_1_2_0;

  assign stateControl_8 = 1'b1;



  always @(posedge clk)
    begin : delayMatch1_process
      if (reset_x == 1'b1) begin
        stateControl_9 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_9 <= stateControl_8;
        end
      end
    end



  assign enb_1_2_0_gated_4 = stateControl_9 && enb_1_2_0;

  assign stateControl_11 = 1'b1;



  always @(posedge clk)
    begin : delayMatch_process
      if (reset_x == 1'b1) begin
        stateControl_12 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_12 <= stateControl_11;
        end
      end
    end



  assign enb_1_2_0_gated_5 = stateControl_12 && enb_1_2_0;

  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_2_0_gated_5) begin
          Delay_out1 <= store_frame_in_ram_out6;
        end
      end
    end



  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_4) begin
          Delay2_out1 <= store_frame_in_ram_out5;
        end
      end
    end



  assign store_frame_in_ram_out4[0] = store_frame_in_ram_out4_0;
  assign store_frame_in_ram_out4[1] = store_frame_in_ram_out4_1;
  assign store_frame_in_ram_out4[2] = store_frame_in_ram_out4_2;
  assign store_frame_in_ram_out4[3] = store_frame_in_ram_out4_3;
  assign store_frame_in_ram_out4[4] = store_frame_in_ram_out4_4;
  assign store_frame_in_ram_out4[5] = store_frame_in_ram_out4_5;
  assign store_frame_in_ram_out4[6] = store_frame_in_ram_out4_6;
  assign store_frame_in_ram_out4[7] = store_frame_in_ram_out4_7;
  assign store_frame_in_ram_out4[8] = store_frame_in_ram_out4_8;
  assign store_frame_in_ram_out4[9] = store_frame_in_ram_out4_9;
  assign store_frame_in_ram_out4[10] = store_frame_in_ram_out4_10;
  assign store_frame_in_ram_out4[11] = store_frame_in_ram_out4_11;
  assign store_frame_in_ram_out4[12] = store_frame_in_ram_out4_12;

  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= {13{1'b0}};
      end
      else begin
        if (enb_1_2_0_gated_3) begin
          Delay3_out1 <= store_frame_in_ram_out4;
        end
      end
    end



  always @(posedge clk)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_out1 <= 4'b0000;
      end
      else begin
        if (enb_1_2_0_gated_2) begin
          Delay4_out1 <= store_frame_in_ram_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_1) begin
          Delay5_out1 <= store_frame_in_ram_out2;
        end
      end
    end



  tx_125_src_store_frame_in_ram u_store_frame_in_ram (.clk(clk),
                                                      .reset_x(reset_x),
                                                      .enb_1_2_0(enb_1_2_0),
                                                      .preamble(Delay17_out1),
                                                      .preamble_valid(Delay16_out1_1),
                                                      .channel(Delay15_out1),
                                                      .channel_valid(Delay14_out1_1),
                                                      .header_0(Delay13_out1_1[0]),  // boolean
                                                      .header_1(Delay13_out1_1[1]),  // boolean
                                                      .header_valid(Delay12_out1_1),
                                                      .payload_0(Delay11_out1_1[0]),  // boolean
                                                      .payload_1(Delay11_out1_1[1]),  // boolean
                                                      .payload_valid(Delay10_out1_1),
                                                      .payload_len(Delay9_out1_1),  // uint16
                                                      .bits_per_subcarrier(Delay8_out1_1),  // ufix4
                                                      .cp_len_in_0(Delay7_out1_1[0]),  // boolean
                                                      .cp_len_in_1(Delay7_out1_1[1]),  // boolean
                                                      .cp_len_in_2(Delay7_out1_1[2]),  // boolean
                                                      .ready(ready_1),
                                                      .data_out(dout_magic),  // ufix12
                                                      .valid_out(store_frame_in_ram_out2),
                                                      .bits_per_subcarrier_out(store_frame_in_ram_out3),  // ufix4
                                                      .init_0(store_frame_in_ram_out4_0),  // boolean
                                                      .init_1(store_frame_in_ram_out4_1),  // boolean
                                                      .init_2(store_frame_in_ram_out4_2),  // boolean
                                                      .init_3(store_frame_in_ram_out4_3),  // boolean
                                                      .init_4(store_frame_in_ram_out4_4),  // boolean
                                                      .init_5(store_frame_in_ram_out4_5),  // boolean
                                                      .init_6(store_frame_in_ram_out4_6),  // boolean
                                                      .init_7(store_frame_in_ram_out4_7),  // boolean
                                                      .init_8(store_frame_in_ram_out4_8),  // boolean
                                                      .init_9(store_frame_in_ram_out4_9),  // boolean
                                                      .init_10(store_frame_in_ram_out4_10),  // boolean
                                                      .init_11(store_frame_in_ram_out4_11),  // boolean
                                                      .init_12(store_frame_in_ram_out4_12),  // boolean
                                                      .new_rsvd(store_frame_in_ram_out5),
                                                      .cp_len(store_frame_in_ram_out6)  // uint8
                                                      );

  always @(posedge clk)
    begin : Delay6_process
      if (reset_x == 1'b1) begin
        Delay6_out1 <= 12'b000000000000;
      end
      else begin
        if (enb_1_2_0_gated) begin
          Delay6_out1 <= dout_magic;
        end
      end
    end



  tx_125_src_full_ofdm_modulator u_full_ofdm_modulator (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb_1_2_0(enb_1_2_0),
                                                        .enb(enb),
                                                        .data_in(Delay6_out1),  // ufix12
                                                        .valid_in(Delay5_out1),
                                                        .bits_per_subcarrier(Delay4_out1),  // ufix4
                                                        .init_0(Delay3_out1[0]),  // boolean
                                                        .init_1(Delay3_out1[1]),  // boolean
                                                        .init_2(Delay3_out1[2]),  // boolean
                                                        .init_3(Delay3_out1[3]),  // boolean
                                                        .init_4(Delay3_out1[4]),  // boolean
                                                        .init_5(Delay3_out1[5]),  // boolean
                                                        .init_6(Delay3_out1[6]),  // boolean
                                                        .init_7(Delay3_out1[7]),  // boolean
                                                        .init_8(Delay3_out1[8]),  // boolean
                                                        .init_9(Delay3_out1[9]),  // boolean
                                                        .init_10(Delay3_out1[10]),  // boolean
                                                        .init_11(Delay3_out1[11]),  // boolean
                                                        .init_12(Delay3_out1[12]),  // boolean
                                                        .new_ofdm_sym(Delay2_out1),
                                                        .cp_len(Delay_out1),  // uint8
                                                        .data_out(full_ofdm_modulator_out1),  // sfix16_En12
                                                        .valid_out(valid_out_1),
                                                        .ready(ready_1)
                                                        );

  always @(posedge clk)
    begin : delayMatch15_process
      if (reset_x == 1'b1) begin
        for(delayMatch15_t_1 = 32'sd0; delayMatch15_t_1 <= 32'sd5; delayMatch15_t_1 = delayMatch15_t_1 + 32'sd1) begin
          delayMatch15_reg[delayMatch15_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(delayMatch15_t_0_1 = 32'sd0; delayMatch15_t_0_1 <= 32'sd5; delayMatch15_t_0_1 = delayMatch15_t_0_1 + 32'sd1) begin
            delayMatch15_reg[delayMatch15_t_0_1] <= delayMatch15_reg_next[delayMatch15_t_0_1];
          end
        end
      end
    end

  always @* begin
    full_ofdm_modulator_out1_1 = delayMatch15_reg[5];
    delayMatch15_reg_next[0] = full_ofdm_modulator_out1;

    for(delayMatch15_t_0_0 = 32'sd0; delayMatch15_t_0_0 <= 32'sd4; delayMatch15_t_0_0 = delayMatch15_t_0_0 + 32'sd1) begin
      delayMatch15_reg_next[delayMatch15_t_0_0 + 32'sd1] = delayMatch15_reg[delayMatch15_t_0_0];
    end

  end



  assign data_out = full_ofdm_modulator_out1_1;

  always @(posedge clk)
    begin : delayMatch16_process
      if (reset_x == 1'b1) begin
        delayMatch16_reg <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch16_reg[0] <= valid_out_1;
          delayMatch16_reg[32'sd5:32'sd1] <= delayMatch16_reg[32'sd4:32'sd0];
        end
      end
    end

  assign valid_out = delayMatch16_reg[5];



  always @(posedge clk)
    begin : delayMatch17_process
      if (reset_x == 1'b1) begin
        payload_full_out3_1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          payload_full_out3_1 <= payload_full_out3;
        end
      end
    end



  assign ready = payload_full_out3_1;

  always @(posedge clk)
    begin : delayMatch18_process
      if (reset_x == 1'b1) begin
        delayMatch18_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          delayMatch18_reg[0] <= payload_full_out1;
          delayMatch18_reg[32'sd7:32'sd1] <= delayMatch18_reg[32'sd6:32'sd0];
        end
      end
    end

  assign payload_full_out1_1 = delayMatch18_reg[7];



  assign debug_payload = payload_full_out1_1;

  always @(posedge clk)
    begin : c_process
      if (reset_x == 1'b1) begin
        alpha_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          alpha_reg[0] <= payload_ctrl_out_start;
          alpha_reg[32'sd7:32'sd1] <= alpha_reg[32'sd6:32'sd0];
        end
      end
    end

  assign payload_ctrl_out_start_1 = alpha_reg[7];



  assign debug_payload_ctrl_start = payload_ctrl_out_start_1;

  always @(posedge clk)
    begin : c_1_process
      if (reset_x == 1'b1) begin
        alpha_reg_1 <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          alpha_reg_1[0] <= payload_ctrl_out_end;
          alpha_reg_1[32'sd7:32'sd1] <= alpha_reg_1[32'sd6:32'sd0];
        end
      end
    end

  assign payload_ctrl_out_end_1 = alpha_reg_1[7];



  assign debug_payload_ctrl_end = payload_ctrl_out_end_1;

  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        alpha_reg_2 <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          alpha_reg_2[0] <= payload_ctrl_out_valid;
          alpha_reg_2[32'sd7:32'sd1] <= alpha_reg_2[32'sd6:32'sd0];
        end
      end
    end

  assign payload_ctrl_out_valid_1 = alpha_reg_2[7];



  assign debug_payload_ctrl_valid = payload_ctrl_out_valid_1;

  assign ce_out_0 = enb_1_1_1;

  assign ce_out_1 = enb_1_8_1;

endmodule  // tx_125_src_full_tx

