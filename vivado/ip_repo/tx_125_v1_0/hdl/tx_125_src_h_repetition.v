// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_h_repetition.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_h_repetition
// Source Path: HDLTx/full_tx/header_full/h_repetition
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_h_repetition
          (clk,
           reset_x,
           enb,
           data_in,
           ctrl_in_end,
           ctrl_in_valid,
           data_out,
           ctrl_out_end,
           ctrl_out_valid);


  input   clk;
  input   reset_x;
  input   enb;
  input   data_in;
  input   ctrl_in_end;
  input   ctrl_in_valid;
  output  data_out;
  output  ctrl_out_end;
  output  ctrl_out_valid;


  wire end_rsvd;
  wire [8:0] count_step;  // ufix9
  wire [8:0] count_from;  // ufix9
  wire HDL_Counter3_out2;
  wire NOT_out1;
  reg [8:0] addrA;  // ufix9
  wire range_hit;
  wire [8:0] count;  // ufix9
  wire need_to_wrap;
  wire [8:0] count_value;  // ufix9
  reg  Unit_Delay_Enabled_Synchronous1_out1;
  wire [8:0] count_1;  // ufix9
  wire Logical_Operator1_out1;
  reg  Delay2_out1;
  wire Logical_Operator2_out1;
  wire HDL_Counter2_ctrl_const_out;
  reg  HDL_Counter2_ctrl_delay_out;
  wire [8:0] HDL_Counter2_Initial_Val_out;  // ufix9
  wire addrB_valid;
  wire [8:0] count_step_1;  // ufix9
  wire [8:0] count_from_1;  // ufix9
  wire [8:0] HDL_Counter2_out1;  // ufix9
  wire [8:0] count_2;  // ufix9
  wire need_to_wrap_1;
  wire [8:0] count_value_1;  // ufix9
  wire [8:0] count_3;  // ufix9
  reg [8:0] HDL_Counter2_out;  // ufix9
  wire Simple_Dual_Port_RAM_out1;
  wire datain;
  reg  Delay1_out1;
  wire Switch_out1;
  reg  Delay4_out1;
  wire Logical_Operator_out1;
  wire valid;
  reg  Delay3_out1;
  wire Switch1_out1;
  wire Sample_Control_Bus_Creator_out1_end;
  wire Sample_Control_Bus_Creator_out1_valid;


  assign end_rsvd = ctrl_in_end;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 51
  assign count_step = 9'b000000001;



  assign count_from = 9'b000000000;



  assign NOT_out1 =  ~ HDL_Counter3_out2;



  assign range_hit = addrA > 9'b111111110;



  assign count = addrA + count_step;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (Unit_Delay_Enabled_Synchronous1_out1 == 1'b0 ? addrA :
              count_value);



  always @(posedge clk)
    begin : HDL_Counter3_process
      if (reset_x == 1'b1) begin
        addrA <= 9'b000000000;
      end
      else begin
        if (enb) begin
          addrA <= count_1;
        end
      end
    end



  assign need_to_wrap = addrA == 9'b000110011;



  assign HDL_Counter3_out2 = need_to_wrap | range_hit;



  assign Logical_Operator1_out1 = end_rsvd | HDL_Counter3_out2;



  always @(posedge clk)
    begin : Unit_Delay_Enabled_Synchronous1_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous1_out1 <= 1'b0;
      end
      else begin
        if (enb && Logical_Operator1_out1) begin
          Unit_Delay_Enabled_Synchronous1_out1 <= NOT_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= Unit_Delay_Enabled_Synchronous1_out1;
        end
      end
    end



  assign Logical_Operator2_out1 =  ~ Delay2_out1;



  assign HDL_Counter2_ctrl_const_out = 1'b1;



  always @(posedge clk)
    begin : HDL_Counter2_ctrl_delay_process
      if (reset_x == 1'b1) begin
        HDL_Counter2_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_Counter2_ctrl_delay_out <= HDL_Counter2_ctrl_const_out;
        end
      end
    end



  assign HDL_Counter2_Initial_Val_out = 9'b101001110;



  assign addrB_valid = ctrl_in_valid;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 335
  assign count_step_1 = 9'b000000001;



  assign count_from_1 = 9'b000000000;



  assign count_2 = HDL_Counter2_out1 + count_step_1;



  assign need_to_wrap_1 = HDL_Counter2_out1 == 9'b101001111;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign count_3 = (addrB_valid == 1'b0 ? HDL_Counter2_out1 :
              count_value_1);



  always @(posedge clk)
    begin : HDL_Counter2_process
      if (reset_x == 1'b1) begin
        HDL_Counter2_out <= 9'b000000000;
      end
      else begin
        if (enb) begin
          HDL_Counter2_out <= count_3;
        end
      end
    end



  assign HDL_Counter2_out1 = (HDL_Counter2_ctrl_delay_out == 1'b0 ? HDL_Counter2_Initial_Val_out :
              HDL_Counter2_out);



  tx_125_src_SimpleDualPortRAM_singlebit #(.AddrWidth(9),
                                           .DataWidth(1)
                                           )
                                         u_Simple_Dual_Port_RAM (.clk(clk),
                                                                 .enb(enb),
                                                                 .wr_din(data_in),
                                                                 .wr_addr(HDL_Counter2_out1),
                                                                 .wr_en(ctrl_in_valid),
                                                                 .rd_addr(addrA),
                                                                 .dout(Simple_Dual_Port_RAM_out1)
                                                                 );

  assign datain = data_in;

  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= datain;
        end
      end
    end



  assign Switch_out1 = (Logical_Operator2_out1 == 1'b0 ? Simple_Dual_Port_RAM_out1 :
              Delay1_out1);



  assign data_out = Switch_out1;

  always @(posedge clk)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= HDL_Counter3_out2;
        end
      end
    end



  assign Logical_Operator_out1 =  ~ Delay2_out1;



  assign valid = ctrl_in_valid;

  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= valid;
        end
      end
    end



  assign Switch1_out1 = (Logical_Operator_out1 == 1'b0 ? Delay2_out1 :
              Delay3_out1);



  tx_125_src_Sample_Control_Bus_Creator_block2 u_Sample_Control_Bus_Creator (.In2(Delay4_out1),
                                                                             .In3(Switch1_out1),
                                                                             .Out1_end(Sample_Control_Bus_Creator_out1_end),
                                                                             .Out1_valid(Sample_Control_Bus_Creator_out1_valid)
                                                                             );

  assign ctrl_out_end = Sample_Control_Bus_Creator_out1_end;

  assign ctrl_out_valid = Sample_Control_Bus_Creator_out1_valid;

endmodule  // tx_125_src_h_repetition

