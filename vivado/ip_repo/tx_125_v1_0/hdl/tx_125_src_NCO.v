// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_NCO.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_NCO
// Source Path: HDLTx/full_tx/full_ofdm_modulator/frequency_upshift/NCO
// Hierarchy Level: 3
// Model version: 4.114
// 
// NCO
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_NCO
          (clk,
           reset_x,
           enb,
           resetPhase,
           validIn,
           complexexp_re,
           complexexp_im,
           validOut);


  input   clk;
  input   reset_x;
  input   enb;
  input   resetPhase;
  input   validIn;
  output  signed [15:0] complexexp_re;  // sfix16_En14
  output  signed [15:0] complexexp_im;  // sfix16_En14
  output  validOut;


  reg  [4:0] outsel_reg_reg;  // ufix1 [5]
  wire outsel;
  wire signed [15:0] outzero_re;  // sfix16_En14
  wire signed [15:0] outzero_im;  // sfix16_En14
  wire signed [13:0] const0;  // sfix14
  wire signed [13:0] pInc;  // sfix14
  wire signed [13:0] validPInc;  // sfix14
  reg signed [13:0] accphase_reg;  // sfix14
  wire signed [13:0] addpInc;  // sfix14
  wire signed [13:0] addPInc_rst;  // sfix14
  wire signed [13:0] pOffset;  // sfix14
  wire signed [13:0] accoffset;  // sfix14
  reg signed [13:0] accoffsete_reg;  // sfix14
  wire [11:0] accQuantized;  // ufix12_E2
  wire signed [15:0] outs_re;  // sfix16_En14
  wire signed [15:0] outs_im;  // sfix16_En14
  wire signed [15:0] validouts_re;  // sfix16_En14
  wire signed [15:0] validouts_im;  // sfix16_En14
  reg signed [15:0] complexexp_re_1;  // sfix16_En14
  reg signed [15:0] complexexp_im_1;  // sfix16_En14
  reg  validOut_1;


  always @(posedge clk)
    begin : outsel_reg_process
      if (reset_x == 1'b1) begin
        outsel_reg_reg <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          outsel_reg_reg[0] <= validIn;
          outsel_reg_reg[32'sd4:32'sd1] <= outsel_reg_reg[32'sd3:32'sd0];
        end
      end
    end

  assign outsel = outsel_reg_reg[4];



  assign outzero_re = 16'sb0000000000000000;
  assign outzero_im = 16'sb0000000000000000;



  // Constant Zero
  assign const0 = 14'sb00000000000000;



  assign pInc = 14'sb01000000000000;



  assign validPInc = (validIn == 1'b0 ? const0 :
              pInc);



  // Add phase increment
  assign addpInc = accphase_reg + validPInc;



  assign addPInc_rst = (resetPhase == 1'b0 ? addpInc :
              const0);



  // Phase increment accumulator register
  always @(posedge clk)
    begin : AccPhaseRegister_process
      if (reset_x == 1'b1) begin
        accphase_reg <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          accphase_reg <= addPInc_rst;
        end
      end
    end



  assign pOffset = 14'sb00000000000000;



  // Add phase offset
  assign accoffset = accphase_reg + pOffset;



  // Phase offset accumulator register
  always @(posedge clk)
    begin : AccOffsetRegister_process
      if (reset_x == 1'b1) begin
        accoffsete_reg <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          accoffsete_reg <= accoffset;
        end
      end
    end



  // Phase quantization
  assign accQuantized = accoffsete_reg[13:2];



  tx_125_src_WaveformGen u_Wave_inst (.clk(clk),
                                      .reset_x(reset_x),
                                      .enb(enb),
                                      .phaseIdx(accQuantized),  // ufix12_E2
                                      .exp_re(outs_re),  // sfix16_En14
                                      .exp_im(outs_im)  // sfix16_En14
                                      );

  assign validouts_re = (outsel == 1'b0 ? outzero_re :
              outs_re);
  assign validouts_im = (outsel == 1'b0 ? outzero_im :
              outs_im);



  // Output register
  always @(posedge clk)
    begin : OutputRegister_process
      if (reset_x == 1'b1) begin
        complexexp_re_1 <= 16'sb0000000000000000;
        complexexp_im_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          complexexp_re_1 <= validouts_re;
          complexexp_im_1 <= validouts_im;
        end
      end
    end



  // validOut register
  always @(posedge clk)
    begin : validOut_reg_process
      if (reset_x == 1'b1) begin
        validOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          validOut_1 <= outsel;
        end
      end
    end



  assign complexexp_re = complexexp_re_1;

  assign complexexp_im = complexexp_im_1;

  assign validOut = validOut_1;

endmodule  // tx_125_src_NCO

