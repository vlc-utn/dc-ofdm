// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_psdu_size_to_payload_len.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_psdu_size_to_payload_len
// Source Path: HDLTx/full_tx/payload_full/psdu_size_to_payload_len
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_psdu_size_to_payload_len
          (clk,
           reset_x,
           enb_1_8_0,
           bits_per_subcarrier,
           psdu_size_0,
           psdu_size_1,
           psdu_size_2,
           psdu_size_3,
           psdu_size_4,
           psdu_size_5,
           psdu_size_6,
           psdu_size_7,
           psdu_size_8,
           psdu_size_9,
           psdu_size_10,
           psdu_size_11,
           psdu_size_12,
           psdu_size_13,
           psdu_size_14,
           psdu_size_15,
           psdu_size_16,
           psdu_size_17,
           psdu_size_18,
           psdu_size_19,
           psdu_size_20,
           psdu_size_21,
           psdu_size_22,
           psdu_size_23,
           payload_len_in_ofdm_symbols);


  input   clk;
  input   reset_x;
  input   enb_1_8_0;
  input   [3:0] bits_per_subcarrier;  // ufix4
  input   psdu_size_0;  // boolean
  input   psdu_size_1;  // boolean
  input   psdu_size_2;  // boolean
  input   psdu_size_3;  // boolean
  input   psdu_size_4;  // boolean
  input   psdu_size_5;  // boolean
  input   psdu_size_6;  // boolean
  input   psdu_size_7;  // boolean
  input   psdu_size_8;  // boolean
  input   psdu_size_9;  // boolean
  input   psdu_size_10;  // boolean
  input   psdu_size_11;  // boolean
  input   psdu_size_12;  // boolean
  input   psdu_size_13;  // boolean
  input   psdu_size_14;  // boolean
  input   psdu_size_15;  // boolean
  input   psdu_size_16;  // boolean
  input   psdu_size_17;  // boolean
  input   psdu_size_18;  // boolean
  input   psdu_size_19;  // boolean
  input   psdu_size_20;  // boolean
  input   psdu_size_21;  // boolean
  input   psdu_size_22;  // boolean
  input   psdu_size_23;  // boolean
  output  [15:0] payload_len_in_ofdm_symbols;  // uint16


  reg [3:0] Delay1_reg [0:1];  // ufix4 [2]
  wire [3:0] Delay1_reg_next [0:1];  // ufix4 [2]
  wire [3:0] Delay1_out1;  // ufix4
  wire [23:0] psdu_size;  // boolean [24]
  wire [23:0] Data_Type_Conversion1_out1;  // ufix1 [24]
  wire Data_Type_Conversion1_out1_23;  // ufix1
  wire Data_Type_Conversion1_out1_22;  // ufix1
  wire Data_Type_Conversion1_out1_21;  // ufix1
  wire Data_Type_Conversion1_out1_20;  // ufix1
  wire Data_Type_Conversion1_out1_19;  // ufix1
  wire Data_Type_Conversion1_out1_18;  // ufix1
  wire Data_Type_Conversion1_out1_17;  // ufix1
  wire Data_Type_Conversion1_out1_16;  // ufix1
  wire Data_Type_Conversion1_out1_15;  // ufix1
  wire Data_Type_Conversion1_out1_14;  // ufix1
  wire Data_Type_Conversion1_out1_13;  // ufix1
  wire Data_Type_Conversion1_out1_12;  // ufix1
  wire Data_Type_Conversion1_out1_11;  // ufix1
  wire Data_Type_Conversion1_out1_10;  // ufix1
  wire Data_Type_Conversion1_out1_9;  // ufix1
  wire Data_Type_Conversion1_out1_8;  // ufix1
  wire Data_Type_Conversion1_out1_7;  // ufix1
  wire Data_Type_Conversion1_out1_6;  // ufix1
  wire Data_Type_Conversion1_out1_5;  // ufix1
  wire Data_Type_Conversion1_out1_4;  // ufix1
  wire Data_Type_Conversion1_out1_3;  // ufix1
  wire Data_Type_Conversion1_out1_2;  // ufix1
  wire Data_Type_Conversion1_out1_1;  // ufix1
  wire Data_Type_Conversion1_out1_0;  // ufix1
  wire [23:0] y;  // ufix24
  wire [23:0] Bit_Shift_out1;  // ufix24
  reg [23:0] Delay_reg [0:1];  // ufix24 [2]
  wire [23:0] Delay_reg_next [0:1];  // ufix24 [2]
  wire [23:0] Delay_out1;  // ufix24
  wire [23:0] Bit_Shift3_out1;  // ufix24
  wire [23:0] Bit_Shift5_out1;  // ufix24
  wire [23:0] Multiport_Switch_out1;  // ufix24
  reg [23:0] Delay3_out1;  // ufix24
  wire signed [24:0] Gain_cast;  // sfix25
  wire signed [40:0] Gain_mul_temp;  // sfix41_En15
  wire signed [39:0] Gain_cast_1;  // sfix40_En15
  wire [15:0] Gain_out1;  // uint16
  reg [15:0] Delay2_out1;  // uint16
  wire Constant4_out1;  // ufix1
  wire [15:0] Add1_1;  // ufix16
  wire [15:0] payloadNumOFDMSymbols;  // uint16
  reg [15:0] Delay6_out1;  // uint16
  reg signed [31:0] Delay1_t_0_0;  // int32
  reg signed [31:0] Delay1_t_1;  // int32
  reg signed [31:0] Delay_t_0_0;  // int32
  reg signed [31:0] Delay_t_1;  // int32

  // Get length of the payload expressed in OFDM Symbols:
  // 
  // bitsInPsdu = psduSize * 8 * fecRate [bits/payload]
  // bitsInOFDMSymbol = numDataCarriers * bitsPerSubcarrier [bits/OFDM]
  // 
  // payloadLenInOFDMSymbols = ceil( bitsInPsdu / bitsInOFDMSymbol ) [OFDM/payload]
  // Repetition not supported
  // Adding "1" is the same as doing a "ceil()" operation,
  // because the divider "floors" the previous result.
  // It is assumed that the division will never be an integer


  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        for(Delay1_t_1 = 32'sd0; Delay1_t_1 <= 32'sd1; Delay1_t_1 = Delay1_t_1 + 32'sd1) begin
          Delay1_reg[Delay1_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(Delay1_t_0_0 = 32'sd0; Delay1_t_0_0 <= 32'sd1; Delay1_t_0_0 = Delay1_t_0_0 + 32'sd1) begin
            Delay1_reg[Delay1_t_0_0] <= Delay1_reg_next[Delay1_t_0_0];
          end
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];
  assign Delay1_reg_next[0] = bits_per_subcarrier;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  assign psdu_size[0] = psdu_size_0;
  assign psdu_size[1] = psdu_size_1;
  assign psdu_size[2] = psdu_size_2;
  assign psdu_size[3] = psdu_size_3;
  assign psdu_size[4] = psdu_size_4;
  assign psdu_size[5] = psdu_size_5;
  assign psdu_size[6] = psdu_size_6;
  assign psdu_size[7] = psdu_size_7;
  assign psdu_size[8] = psdu_size_8;
  assign psdu_size[9] = psdu_size_9;
  assign psdu_size[10] = psdu_size_10;
  assign psdu_size[11] = psdu_size_11;
  assign psdu_size[12] = psdu_size_12;
  assign psdu_size[13] = psdu_size_13;
  assign psdu_size[14] = psdu_size_14;
  assign psdu_size[15] = psdu_size_15;
  assign psdu_size[16] = psdu_size_16;
  assign psdu_size[17] = psdu_size_17;
  assign psdu_size[18] = psdu_size_18;
  assign psdu_size[19] = psdu_size_19;
  assign psdu_size[20] = psdu_size_20;
  assign psdu_size[21] = psdu_size_21;
  assign psdu_size[22] = psdu_size_22;
  assign psdu_size[23] = psdu_size_23;

  assign Data_Type_Conversion1_out1 = psdu_size;



  assign Data_Type_Conversion1_out1_23 = Data_Type_Conversion1_out1[23];

  assign Data_Type_Conversion1_out1_22 = Data_Type_Conversion1_out1[22];

  assign Data_Type_Conversion1_out1_21 = Data_Type_Conversion1_out1[21];

  assign Data_Type_Conversion1_out1_20 = Data_Type_Conversion1_out1[20];

  assign Data_Type_Conversion1_out1_19 = Data_Type_Conversion1_out1[19];

  assign Data_Type_Conversion1_out1_18 = Data_Type_Conversion1_out1[18];

  assign Data_Type_Conversion1_out1_17 = Data_Type_Conversion1_out1[17];

  assign Data_Type_Conversion1_out1_16 = Data_Type_Conversion1_out1[16];

  assign Data_Type_Conversion1_out1_15 = Data_Type_Conversion1_out1[15];

  assign Data_Type_Conversion1_out1_14 = Data_Type_Conversion1_out1[14];

  assign Data_Type_Conversion1_out1_13 = Data_Type_Conversion1_out1[13];

  assign Data_Type_Conversion1_out1_12 = Data_Type_Conversion1_out1[12];

  assign Data_Type_Conversion1_out1_11 = Data_Type_Conversion1_out1[11];

  assign Data_Type_Conversion1_out1_10 = Data_Type_Conversion1_out1[10];

  assign Data_Type_Conversion1_out1_9 = Data_Type_Conversion1_out1[9];

  assign Data_Type_Conversion1_out1_8 = Data_Type_Conversion1_out1[8];

  assign Data_Type_Conversion1_out1_7 = Data_Type_Conversion1_out1[7];

  assign Data_Type_Conversion1_out1_6 = Data_Type_Conversion1_out1[6];

  assign Data_Type_Conversion1_out1_5 = Data_Type_Conversion1_out1[5];

  assign Data_Type_Conversion1_out1_4 = Data_Type_Conversion1_out1[4];

  assign Data_Type_Conversion1_out1_3 = Data_Type_Conversion1_out1[3];

  assign Data_Type_Conversion1_out1_2 = Data_Type_Conversion1_out1[2];

  assign Data_Type_Conversion1_out1_1 = Data_Type_Conversion1_out1[1];

  assign Data_Type_Conversion1_out1_0 = Data_Type_Conversion1_out1[0];

  assign y = {Data_Type_Conversion1_out1_23, Data_Type_Conversion1_out1_22, Data_Type_Conversion1_out1_21, Data_Type_Conversion1_out1_20, Data_Type_Conversion1_out1_19, Data_Type_Conversion1_out1_18, Data_Type_Conversion1_out1_17, Data_Type_Conversion1_out1_16, Data_Type_Conversion1_out1_15, Data_Type_Conversion1_out1_14, Data_Type_Conversion1_out1_13, Data_Type_Conversion1_out1_12, Data_Type_Conversion1_out1_11, Data_Type_Conversion1_out1_10, Data_Type_Conversion1_out1_9, Data_Type_Conversion1_out1_8, Data_Type_Conversion1_out1_7, Data_Type_Conversion1_out1_6, Data_Type_Conversion1_out1_5, Data_Type_Conversion1_out1_4, Data_Type_Conversion1_out1_3, Data_Type_Conversion1_out1_2, Data_Type_Conversion1_out1_1, Data_Type_Conversion1_out1_0};



  assign Bit_Shift_out1 = y <<< 8'd4;



  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        for(Delay_t_1 = 32'sd0; Delay_t_1 <= 32'sd1; Delay_t_1 = Delay_t_1 + 32'sd1) begin
          Delay_reg[Delay_t_1] <= 24'b000000000000000000000000;
        end
      end
      else begin
        if (enb_1_8_0) begin
          for(Delay_t_0_0 = 32'sd0; Delay_t_0_0 <= 32'sd1; Delay_t_0_0 = Delay_t_0_0 + 32'sd1) begin
            Delay_reg[Delay_t_0_0] <= Delay_reg_next[Delay_t_0_0];
          end
        end
      end
    end

  assign Delay_out1 = Delay_reg[1];
  assign Delay_reg_next[0] = Bit_Shift_out1;
  assign Delay_reg_next[1] = Delay_reg[0];



  assign Bit_Shift3_out1 = Delay_out1 >>> 8'd1;



  assign Bit_Shift5_out1 = Delay_out1 >>> 8'd4;



  assign Multiport_Switch_out1 = (Delay1_out1 == 4'b0000 ? Delay_out1 :
              (Delay1_out1 == 4'b0001 ? Delay_out1 :
              (Delay1_out1 == 4'b0010 ? Bit_Shift3_out1 :
              (Delay1_out1 == 4'b0011 ? Bit_Shift3_out1 :
              Bit_Shift5_out1))));



  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Delay3_out1 <= Multiport_Switch_out1;
        end
      end
    end



  assign Gain_cast = {1'b0, Delay3_out1};
  assign Gain_mul_temp = 16'sb0000000010101001 * Gain_cast;
  assign Gain_cast_1 = Gain_mul_temp[39:0];
  assign Gain_out1 = Gain_cast_1[30:15];



  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Delay2_out1 <= Gain_out1;
        end
      end
    end



  assign Constant4_out1 = 1'b1;



  assign Add1_1 = {15'b0, Constant4_out1};
  assign payloadNumOFDMSymbols = Delay2_out1 + Add1_1;



  always @(posedge clk)
    begin : Delay6_process
      if (reset_x == 1'b1) begin
        Delay6_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Delay6_out1 <= payloadNumOFDMSymbols;
        end
      end
    end



  assign payload_len_in_ofdm_symbols = Delay6_out1;

endmodule  // tx_125_src_psdu_size_to_payload_len

