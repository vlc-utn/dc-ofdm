// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_qam_mod.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_qam_mod
// Source Path: HDLTx/full_tx/full_ofdm_modulator/enabled_qam_and_scrambler/qam_mod
// Hierarchy Level: 3
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_qam_mod
          (clk,
           reset_x,
           enb_1_2_0,
           data_in,
           valid_in,
           bits_per_subcarrier,
           ready_out,
           data_out_re,
           data_out_im,
           valid_out);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   [11:0] data_in;  // ufix12
  input   valid_in;
  input   [3:0] bits_per_subcarrier;  // ufix4
  input   ready_out;
  output  signed [15:0] data_out_re;  // sfix16_En14
  output  signed [15:0] data_out_im;  // sfix16_En14
  output  valid_out;


  wire signed [15:0] Constant3_out1;  // sfix16_En14
  wire signed [15:0] Constant5_out1;  // sfix16_En14
  wire Bit_Slice_out1;  // ufix1
  wire signed [15:0] BPSK_Modulator_Baseband_out1_re;  // sfix16_En14
  wire signed [15:0] BPSK_Modulator_Baseband_out1_im;  // sfix16_En14
  wire [1:0] Bit_Slice1_out1;  // ufix2
  wire signed [15:0] alpha_table_data_re [0:3];  // sfix16_En14 [4]
  wire signed [15:0] alpha_table_data_im [0:3];  // sfix16_En14 [4]
  wire signed [15:0] batID_1_out1_re;  // sfix16_En14
  wire signed [15:0] batID_1_out1_im;  // sfix16_En14
  wire signed [15:0] Constant2_out1;  // sfix16_En14
  wire signed [15:0] Constant4_out1;  // sfix16_En14
  wire [3:0] Bit_Slice2_out1;  // ufix4
  wire signed [15:0] alpha_table_data_re_1 [0:15];  // sfix16_En14 [16]
  wire signed [15:0] alpha_table_data_im_1 [0:15];  // sfix16_En14 [16]
  wire signed [15:0] batID_8_out1_re;  // sfix16_En14
  wire signed [15:0] batID_8_out1_im;  // sfix16_En14
  wire signed [15:0] Constant6_out1;  // sfix16_En14
  wire signed [15:0] Constant7_out1;  // sfix16_En14
  wire signed [15:0] Constant9_out1;  // sfix16_En14
  wire signed [15:0] Constant10_out1;  // sfix16_En14
  wire signed [15:0] Constant1_out1;  // sfix16_En14
  wire signed [15:0] Constant8_out1;  // sfix16_En14
  wire signed [15:0] Multiport_Switch_out1_re;  // sfix16_En14
  wire signed [15:0] Multiport_Switch_out1_im;  // sfix16_En14
  wire enb_1_2_0_gated;
  reg signed [15:0] Delay_out1_re;  // sfix16_En14
  reg signed [15:0] Delay_out1_im;  // sfix16_En14
  wire enb_1_2_0_gated_1;
  reg  Delay1_out1;


  assign Constant3_out1 = 16'sb0000000000000000;



  assign Constant5_out1 = 16'sb0000000000000000;



  assign Bit_Slice_out1 = data_in[0];



  tx_125_src_BPSK_Modulator_Baseband u_BPSK_Modulator_Baseband (.in0(Bit_Slice_out1),  // ufix1
                                                                .out0_re(BPSK_Modulator_Baseband_out1_re),  // sfix16_En14
                                                                .out0_im(BPSK_Modulator_Baseband_out1_im)  // sfix16_En14
                                                                );

  assign Bit_Slice1_out1 = data_in[1:0];



  assign alpha_table_data_re[0] = 16'sb0010110101000001;
  assign alpha_table_data_re[1] = 16'sb0010110101000001;
  assign alpha_table_data_re[2] = 16'sb1101001010111111;
  assign alpha_table_data_re[3] = 16'sb1101001010111111;
  assign alpha_table_data_im[0] = 16'sb1101001010111111;
  assign alpha_table_data_im[1] = 16'sb0010110101000001;
  assign alpha_table_data_im[2] = 16'sb1101001010111111;
  assign alpha_table_data_im[3] = 16'sb0010110101000001;
  assign batID_1_out1_re = alpha_table_data_re[Bit_Slice1_out1];
  assign batID_1_out1_im = alpha_table_data_im[Bit_Slice1_out1];



  assign Constant2_out1 = 16'sb0000000000000000;



  assign Constant4_out1 = 16'sb0000000000000000;



  assign Bit_Slice2_out1 = data_in[3:0];



  assign alpha_table_data_re_1[0] = 16'sb1100001101001001;
  assign alpha_table_data_re_1[1] = 16'sb1100001101001001;
  assign alpha_table_data_re_1[2] = 16'sb1100001101001001;
  assign alpha_table_data_re_1[3] = 16'sb1100001101001001;
  assign alpha_table_data_re_1[4] = 16'sb1110101111000011;
  assign alpha_table_data_re_1[5] = 16'sb1110101111000011;
  assign alpha_table_data_re_1[6] = 16'sb1110101111000011;
  assign alpha_table_data_re_1[7] = 16'sb1110101111000011;
  assign alpha_table_data_re_1[8] = 16'sb0011110010110111;
  assign alpha_table_data_re_1[9] = 16'sb0011110010110111;
  assign alpha_table_data_re_1[10] = 16'sb0011110010110111;
  assign alpha_table_data_re_1[11] = 16'sb0011110010110111;
  assign alpha_table_data_re_1[12] = 16'sb0001010000111101;
  assign alpha_table_data_re_1[13] = 16'sb0001010000111101;
  assign alpha_table_data_re_1[14] = 16'sb0001010000111101;
  assign alpha_table_data_re_1[15] = 16'sb0001010000111101;
  assign alpha_table_data_im_1[0] = 16'sb1100001101001001;
  assign alpha_table_data_im_1[1] = 16'sb1110101111000011;
  assign alpha_table_data_im_1[2] = 16'sb0011110010110111;
  assign alpha_table_data_im_1[3] = 16'sb0001010000111101;
  assign alpha_table_data_im_1[4] = 16'sb1100001101001001;
  assign alpha_table_data_im_1[5] = 16'sb1110101111000011;
  assign alpha_table_data_im_1[6] = 16'sb0011110010110111;
  assign alpha_table_data_im_1[7] = 16'sb0001010000111101;
  assign alpha_table_data_im_1[8] = 16'sb1100001101001001;
  assign alpha_table_data_im_1[9] = 16'sb1110101111000011;
  assign alpha_table_data_im_1[10] = 16'sb0011110010110111;
  assign alpha_table_data_im_1[11] = 16'sb0001010000111101;
  assign alpha_table_data_im_1[12] = 16'sb1100001101001001;
  assign alpha_table_data_im_1[13] = 16'sb1110101111000011;
  assign alpha_table_data_im_1[14] = 16'sb0011110010110111;
  assign alpha_table_data_im_1[15] = 16'sb0001010000111101;
  assign batID_8_out1_re = alpha_table_data_re_1[Bit_Slice2_out1];
  assign batID_8_out1_im = alpha_table_data_im_1[Bit_Slice2_out1];



  assign Constant6_out1 = 16'sb0000000000000000;



  assign Constant7_out1 = 16'sb0000000000000000;



  assign Constant9_out1 = 16'sb0000000000000000;



  assign Constant10_out1 = 16'sb0000000000000000;



  assign Constant1_out1 = 16'sb0000000000000000;



  assign Constant8_out1 = 16'sb0000000000000000;



  assign Multiport_Switch_out1_re = (bits_per_subcarrier == 4'b0000 ? Constant3_out1 :
              (bits_per_subcarrier == 4'b0001 ? BPSK_Modulator_Baseband_out1_re :
              (bits_per_subcarrier == 4'b0010 ? batID_1_out1_re :
              (bits_per_subcarrier == 4'b0011 ? Constant2_out1 :
              (bits_per_subcarrier == 4'b0100 ? batID_8_out1_re :
              (bits_per_subcarrier == 4'b0101 ? Constant6_out1 :
              (bits_per_subcarrier == 4'b0110 ? Constant9_out1 :
              Constant1_out1)))))));
  assign Multiport_Switch_out1_im = (bits_per_subcarrier == 4'b0000 ? Constant5_out1 :
              (bits_per_subcarrier == 4'b0001 ? BPSK_Modulator_Baseband_out1_im :
              (bits_per_subcarrier == 4'b0010 ? batID_1_out1_im :
              (bits_per_subcarrier == 4'b0011 ? Constant4_out1 :
              (bits_per_subcarrier == 4'b0100 ? batID_8_out1_im :
              (bits_per_subcarrier == 4'b0101 ? Constant7_out1 :
              (bits_per_subcarrier == 4'b0110 ? Constant10_out1 :
              Constant8_out1)))))));



  assign enb_1_2_0_gated = ready_out && enb_1_2_0;

  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1_re <= 16'sb0000000000000000;
        Delay_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated) begin
          Delay_out1_re <= Multiport_Switch_out1_re;
          Delay_out1_im <= Multiport_Switch_out1_im;
        end
      end
    end



  assign data_out_re = Delay_out1_re;

  assign data_out_im = Delay_out1_im;

  assign enb_1_2_0_gated_1 = ready_out && enb_1_2_0;

  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_1) begin
          Delay1_out1 <= valid_in;
        end
      end
    end



  assign valid_out = Delay1_out1;

endmodule  // tx_125_src_qam_mod

