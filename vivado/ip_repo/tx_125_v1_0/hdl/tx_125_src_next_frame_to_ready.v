// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_next_frame_to_ready.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_next_frame_to_ready
// Source Path: HDLTx/full_tx/payload_full/next_frame_to_ready
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_next_frame_to_ready
          (clk,
           reset_x,
           enb_1_8_0,
           next_frame,
           ready);


  input   clk;
  input   reset_x;
  input   enb_1_8_0;
  input   next_frame;
  output  ready;


  wire rising_edge_detector_out1;
  wire [6:0] count_step;  // ufix7
  wire [6:0] count_from;  // ufix7
  wire HDL_Counter_out2;
  wire Logical_Operator2_out1;
  reg [6:0] HDL_Counter_out1;  // ufix7
  wire range_hit;
  wire [6:0] count;  // ufix7
  wire need_to_wrap;
  wire [6:0] count_value;  // ufix7
  reg  Unit_Delay_Enabled_Synchronous_out1;
  wire [6:0] count_1;  // ufix7
  wire Logical_Operator3_out1;

  // Given a next frame rising edge, this subsystem will generate a "ready" signal for the duration of "payloadWordsPerBlock0" 
  // clock cycle


  tx_125_src_rising_edge_detector u_rising_edge_detector (.clk(clk),
                                                          .reset_x(reset_x),
                                                          .enb_1_8_0(enb_1_8_0),
                                                          .In(next_frame),
                                                          .Out(rising_edge_detector_out1)
                                                          );

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 119
  assign count_step = 7'b0000001;



  assign count_from = 7'b0000000;



  assign Logical_Operator2_out1 =  ~ HDL_Counter_out2;



  assign range_hit = HDL_Counter_out1 > 7'b1111110;



  assign count = HDL_Counter_out1 + count_step;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (Unit_Delay_Enabled_Synchronous_out1 == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset_x == 1'b1) begin
        HDL_Counter_out1 <= 7'b0000000;
      end
      else begin
        if (enb_1_8_0) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  assign need_to_wrap = HDL_Counter_out1 == 7'b1110111;



  assign HDL_Counter_out2 = need_to_wrap | range_hit;



  assign Logical_Operator3_out1 = rising_edge_detector_out1 | HDL_Counter_out2;



  always @(posedge clk)
    begin : Unit_Delay_Enabled_Synchronous_process
      if (reset_x == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0 && Logical_Operator3_out1) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Logical_Operator2_out1;
        end
      end
    end



  assign ready = Unit_Delay_Enabled_Synchronous_out1;

endmodule  // tx_125_src_next_frame_to_ready

