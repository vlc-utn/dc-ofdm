// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_ofdm_modulator_block.v
// Created: 2024-09-14 22:22:21
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_ofdm_modulator_block
// Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_ofdm_modulator_block
          (clk,
           reset_x,
           enb_1_2_0,
           data_in_re,
           data_in_im,
           valid_in,
           cp_len,
           data_out_re,
           data_out_im,
           valid_out,
           ready);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   signed [15:0] data_in_re;  // sfix16_En14
  input   signed [15:0] data_in_im;  // sfix16_En14
  input   valid_in;
  input   [7:0] cp_len;  // uint8
  output  signed [15:0] data_out_re;  // sfix16_En14
  output  signed [15:0] data_out_im;  // sfix16_En14
  output  valid_out;
  output  ready;


  wire stateControl_1;
  reg  stateControl_2;
  wire enb_1_2_0_gated;
  wire [8:0] Constant2_out1;  // ufix9
  wire [5:0] Constant4_out1;  // ufix6
  wire [5:0] Constant3_out1;  // ufix6
  wire signed [15:0] data_re;  // sfix16_En14
  wire signed [15:0] data_im;  // sfix16_En14
  wire valid;
  wire ready_1;
  wire signed [15:0] data_re_1;  // sfix16_En14
  wire signed [15:0] data_im_1;  // sfix16_En14
  reg signed [15:0] data_last_value_re;  // sfix16_En14
  reg signed [15:0] data_last_value_im;  // sfix16_En14
  wire valid_1;
  reg  valid_last_value;
  reg  ready_last_value;


  assign stateControl_1 = 1'b1;



  always @(posedge clk)
    begin : delayMatch_process
      if (reset_x == 1'b1) begin
        stateControl_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_2 <= stateControl_1;
        end
      end
    end



  assign enb_1_2_0_gated = stateControl_2 && enb_1_2_0;

  assign Constant2_out1 = 9'b100000000;



  assign Constant4_out1 = 6'b011001;



  assign Constant3_out1 = 6'b100101;



  tx_125_src_OFDM_Modulator u_OFDM_Modulator (.clk(clk),
                                              .reset_x(reset_x),
                                              .enb_1_2_0(enb_1_2_0_gated),
                                              .data_re(data_in_re),  // sfix16_En14
                                              .data_im(data_in_im),  // sfix16_En14
                                              .valid(valid_in),
                                              .FFTLen(Constant2_out1),  // ufix9
                                              .CPLen(cp_len),  // uint8
                                              .numLgSc(Constant4_out1),  // ufix6
                                              .numRgSc(Constant3_out1),  // ufix6
                                              .data_re_1(data_re),  // sfix16_En14
                                              .data_im_1(data_im),  // sfix16_En14
                                              .valid_1(valid),
                                              .ready(ready_1)
                                              );

  always @(posedge clk)
    begin : out0_bypass_process
      if (reset_x == 1'b1) begin
        data_last_value_re <= 16'sb0000000000000000;
        data_last_value_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated) begin
          data_last_value_re <= data_re_1;
          data_last_value_im <= data_im_1;
        end
      end
    end



  assign data_re_1 = (stateControl_2 == 1'b0 ? data_last_value_re :
              data_re);
  assign data_im_1 = (stateControl_2 == 1'b0 ? data_last_value_im :
              data_im);



  assign data_out_re = data_re_1;

  assign data_out_im = data_im_1;

  always @(posedge clk)
    begin : out1_bypass_process
      if (reset_x == 1'b1) begin
        valid_last_value <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated) begin
          valid_last_value <= valid_1;
        end
      end
    end



  assign valid_1 = (stateControl_2 == 1'b0 ? valid_last_value :
              valid);



  assign valid_out = valid_1;

  always @(posedge clk)
    begin : out2_bypass_process
      if (reset_x == 1'b1) begin
        ready_last_value <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated) begin
          ready_last_value <= ready;
        end
      end
    end



  assign ready = (stateControl_2 == 1'b0 ? ready_last_value :
              ready_1);



endmodule  // tx_125_src_ofdm_modulator_block

