// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_OFDM_Modulator.v
// Created: 2024-09-14 22:22:21
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_OFDM_Modulator
// Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator/OFDM Modulator
// Hierarchy Level: 3
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_OFDM_Modulator
          (clk,
           reset_x,
           enb_1_2_0,
           data_re,
           data_im,
           valid,
           FFTLen,
           CPLen,
           numLgSc,
           numRgSc,
           data_re_1,
           data_im_1,
           valid_1,
           ready);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   signed [15:0] data_re;  // sfix16_En14
  input   signed [15:0] data_im;  // sfix16_En14
  input   valid;
  input   [8:0] FFTLen;  // ufix9
  input   [7:0] CPLen;  // uint8
  input   [5:0] numLgSc;  // ufix6
  input   [5:0] numRgSc;  // ufix6
  output  signed [15:0] data_re_1;  // sfix16_En14
  output  signed [15:0] data_im_1;  // sfix16_En14
  output  valid_1;
  output  ready;


  wire out;
  wire out_1;
  wire obj_readyLowFlag;
  wire out_2;
  wire out_3;
  wire [13:0] obj_readyLowCount;  // ufix14
  wire [13:0] obj_validInHighCount;  // ufix14
  wire obj_sampleInputs;
  wire out_4;
  wire out_5;
  wire [13:0] tmp;  // ufix14
  wire [13:0] tmp_1;  // ufix14
  wire [13:0] obj_insertDC;  // ufix14
  wire [13:0] tmp_2;  // ufix14
  wire [13:0] tmp_3;  // ufix14
  wire obj_readyLowFlag_1;
  wire out_6;
  wire out_7;
  wire obj_validInHighFlag;
  wire out_8;
  wire out_9;
  wire obj_validInHighFlag_1;
  wire out_10;
  wire out_11;
  wire obj_readyOut;
  wire obj_readyOut_1;
  wire obj_readyOut_2;
  wire obj_readyOut_3;
  wire out_12;
  wire out_13;
  wire tmp_4;
  wire tmp_5;
  wire tmp_6;
  wire tmp_7;
  reg [13:0] obj_validInHighCount_1;  // ufix14
  wire [13:0] tmp_8;  // ufix14
  wire [13:0] tmp_9;  // ufix14
  wire tmp_10;
  wire tmp_11;
  wire [13:0] tmp_12;  // ufix14
  reg [13:0] obj_numRgScReg;  // ufix14
  wire tmp_13;
  wire [13:0] tmp_14;  // ufix14
  reg [13:0] obj_numLgScReg;  // ufix14
  wire [13:0] tmp_15;  // ufix14
  reg [13:0] obj_FFTLengthReg;  // ufix14
  wire [13:0] obj_numDataSc;  // ufix14
  wire [13:0] tmp_16;  // ufix14
  reg [13:0] obj_CPLengthReg;  // ufix14
  wire [13:0] tmp_17;  // ufix14
  wire [13:0] tmp_18;  // ufix14
  wire [13:0] tmp_19;  // ufix14
  wire tmp_20;
  wire [13:0] tmp_21;  // ufix14
  wire tmp_22;
  reg  obj_sampleInputs_1;
  wire tmp_23;
  wire tmp_24;
  wire tmp_25;
  wire [13:0] obj_maxFFTPlusCP;  // ufix14
  wire [13:0] obj_readyLow;  // ufix14
  reg [13:0] obj_readyLowCount_1;  // ufix14
  wire [13:0] tmp_26;  // ufix14
  wire [13:0] tmp_27;  // ufix14
  wire [13:0] tmp_28;  // ufix14
  wire [13:0] tmp_29;  // ufix14
  wire tmp_30;
  wire tmp_31;
  wire tmp_32;
  wire tmp_33;
  wire tmp_34;
  reg  obj_readyLowFlag_2;
  reg  obj_validInHighFlag_2;
  wire s;
  wire tmp_35;
  wire tmp_36;
  wire tmp_37;
  wire tmp_38;
  wire tmp_39;
  wire tmp_40;
  wire tmp_41;
  wire tmp_42;
  wire tmp_43;
  wire tmp_44;
  reg  obj_delayedReady;
  wire s_1;
  wire signed [15:0] varargout_1_re;  // sfix16_En14
  wire signed [15:0] varargout_1_im;  // sfix16_En14
  wire varargout_2;
  wire [13:0] varargout_3;  // ufix14
  wire [13:0] varargout_4;  // ufix14
  wire signed [15:0] varargout_1_re_1;  // sfix16_En14
  wire signed [15:0] varargout_1_im_1;  // sfix16_En14
  wire varargout_2_1;
  wire [8:0] varargout_3_1;  // ufix9
  wire [8:0] varargout_4_1;  // ufix9
  wire signed [15:0] varargout_1_re_2;  // sfix16_En14
  wire signed [15:0] varargout_1_im_2;  // sfix16_En14
  wire varargout_2_2;
  wire varargout_3_2;
  wire [9:0] obj_fftInFFTDelayBal;  // ufix10
  wire sel;
  wire [9:0] obj_countReg;  // ufix10
  reg [9:0] obj_countReg_1;  // ufix10
  wire [9:0] tmp_45;  // ufix10
  wire s_2;
  wire [9:0] tmp_46;  // ufix10
  wire [9:0] tmp_47;  // ufix10
  wire s_3;
  wire sel_1;
  wire out_14;
  wire sel_2;
  wire sel_2_1;
  wire [6:0] obj_index;  // ufix7
  reg [6:0] obj_index_1;  // ufix7
  wire [6:0] tmp_48;  // ufix7
  wire s_4;
  wire [6:0] tmp_49;  // ufix7
  wire [6:0] tmp_50;  // ufix7
  wire [6:0] tmp_51;  // ufix7
  wire signed [31:0] tmp_52;  // int32
  reg [9:0] tmp_53 [0:2];  // ufix10 [3]
  wire [9:0] obj_FFTReg [0:2];  // ufix10 [3]
  reg [9:0] obj_FFTReg_reg_obj_FFTReg [0:2];  // ufix10 [3]
  wire [9:0] obj_FFTReg_reg_obj_FFTReg_next [0:2];  // ufix10 [3]
  reg [9:0] s_5 [0:2];  // ufix10 [3]
  wire [6:0] obj_index1;  // ufix7
  reg [6:0] obj_index1_1;  // ufix7
  wire [6:0] tmp_54;  // ufix7
  wire s_6;
  wire [6:0] tmp_55;  // ufix7
  wire [6:0] tmp_56;  // ufix7
  wire [9:0] tmp_57;  // ufix10
  reg [9:0] obj_FFTRegDelay;  // ufix10
  wire [9:0] tmp_58;  // ufix10
  wire [9:0] tmp_59;  // ufix10
  wire [9:0] tmp_60;  // ufix10
  wire [9:0] obj_cpInFFTDelayBal;  // ufix10
  wire sel_3;
  wire sel_4;
  wire out_15;
  wire sel_2_2;
  wire sel_2_3;
  wire signed [31:0] tmp_61;  // int32
  reg [9:0] tmp_62 [0:2];  // ufix10 [3]
  wire [9:0] obj_cpReg [0:2];  // ufix10 [3]
  reg [9:0] obj_cpReg_reg_obj_cpReg [0:2];  // ufix10 [3]
  wire [9:0] obj_cpReg_reg_obj_cpReg_next [0:2];  // ufix10 [3]
  reg [9:0] s_7 [0:2];  // ufix10 [3]
  wire [9:0] tmp_63;  // ufix10
  reg [9:0] obj_cpRegDelay;  // ufix10
  wire [9:0] tmp_64;  // ufix10
  wire [9:0] tmp_65;  // ufix10
  wire [9:0] tmp_66;  // ufix10
  wire signed [15:0] varargout_1_re_3;  // sfix16_En14
  wire signed [15:0] varargout_1_im_3;  // sfix16_En14
  wire varargout_2_3;
  wire [9:0] varargout_3_3;  // ufix10
  wire [9:0] varargout_4_2;  // ufix10
  wire signed [15:0] varargout_1_re_4;  // sfix16_En14
  wire signed [15:0] varargout_1_im_4;  // sfix16_En14
  wire varargout_2_4;
  wire [9:0] varargout_3_4;  // ufix10
  wire [9:0] varargout_4_3;  // ufix10
  wire signed [15:0] varargout_1_re_5;  // sfix16_En14
  wire signed [15:0] varargout_1_im_5;  // sfix16_En14
  wire varargout_2_5;
  reg signed [15:0] obj_dataOut_re;  // sfix16_En14
  reg signed [15:0] obj_dataOut_im;  // sfix16_En14
  reg  obj_validOut;
  wire obj_numDataSc_1;
  wire [13:0] tmp_67;  // ufix14
  wire [13:0] obj_readyLast;  // ufix14
  wire [13:0] tmp_68;  // ufix14
  wire tmp_69;
  wire obj_readyFlag;
  wire obj_readyLow_1;
  wire obj_readyFlag_1;
  wire obj_readyFlag_2;
  wire tmp_70;
  wire s_8;
  reg  obj_readyFlag_3;
  wire tmp_71;
  wire tmp_72;
  wire tmp_73;
  wire [14:0] p131tmp_1;  // ufix15
  wire [14:0] p131tmp_2;  // ufix15
  wire obj_triggerReady;
  wire obj_triggerReady_1;
  reg  obj_triggerReady_2;
  wire tmp_74;
  wire tmp_75;
  wire tmp_76;
  reg  obj_readyOut_4;
  wire varargout_3_5;
  wire tmp_77;
  wire varargout_3_6;
  wire tmp_78;
  reg signed [31:0] obj_FFTReg_reg_t_0_0;  // int32
  reg signed [31:0] obj_FFTReg_reg_t_1;  // int32
  reg signed [31:0] p51_t_0;  // int32
  reg signed [31:0] p45_t_0_0;  // int32
  reg signed [31:0] p45_t_1;  // int32
  reg signed [31:0] obj_cpReg_reg_t_0_0;  // int32
  reg signed [31:0] obj_cpReg_reg_t_1;  // int32
  reg signed [31:0] p55_t_0;  // int32
  reg signed [31:0] p43_t_0_0;  // int32
  reg signed [31:0] p43_t_1;  // int32


  assign out = 1'b0;



  assign out_1 = 1'b1;



  assign obj_readyLowFlag = 1'b0;



  assign out_2 = 1'b0;



  assign out_3 = 1'b1;



  assign obj_readyLowCount = 14'b00000000000000;



  assign obj_validInHighCount = 14'b00000000000000;



  assign obj_sampleInputs = 1'b1;



  assign out_4 = 1'b0;



  assign out_5 = 1'b1;



  assign tmp = {6'b0, CPLen};



  assign tmp_1 = {5'b0, FFTLen};



  assign obj_insertDC = 14'b00000000000000;



  assign tmp_2 = {8'b0, numLgSc};



  assign tmp_3 = {8'b0, numRgSc};



  assign obj_readyLowFlag_1 = 1'b1;



  assign out_6 = 1'b0;



  assign out_7 = 1'b1;



  assign obj_validInHighFlag = 1'b0;



  assign out_8 = 1'b0;



  assign out_9 = 1'b1;



  assign obj_validInHighFlag_1 = 1'b1;



  assign out_10 = 1'b0;



  assign out_11 = 1'b1;



  assign obj_readyOut = 1'b1;



  assign obj_readyOut_1 = 1'b1;



  assign obj_readyOut_2 = 1'b0;



  assign obj_readyOut_3 = 1'b1;



  assign out_12 = 1'b0;



  assign out_13 = 1'b1;



  assign tmp_5 = (tmp_4 == 1'b0 ? obj_readyOut :
              obj_readyOut_1);



  assign tmp_7 = (tmp_6 == 1'b0 ? tmp_5 :
              obj_readyOut_2);



  assign tmp_8 = obj_validInHighCount_1 + 14'b00000000000001;



  always @(posedge clk)
    begin : obj_validInHighCount_reg_process
      if (reset_x == 1'b1) begin
        obj_validInHighCount_1 <= 14'b00000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_validInHighCount_1 <= tmp_9;
        end
      end
    end



  assign tmp_11 = (tmp_4 == 1'b0 ? tmp_10 :
              obj_validInHighFlag);



  always @(posedge clk)
    begin : obj_numRgScReg_reg_process
      if (reset_x == 1'b1) begin
        obj_numRgScReg <= 14'b00000000000101;
      end
      else begin
        if (enb_1_2_0) begin
          obj_numRgScReg <= tmp_12;
        end
      end
    end



  assign tmp_12 = (tmp_13 == 1'b0 ? obj_numRgScReg :
              tmp_3);



  always @(posedge clk)
    begin : obj_numLgScReg_reg_process
      if (reset_x == 1'b1) begin
        obj_numLgScReg <= 14'b00000000000110;
      end
      else begin
        if (enb_1_2_0) begin
          obj_numLgScReg <= tmp_14;
        end
      end
    end



  assign tmp_14 = (tmp_13 == 1'b0 ? obj_numLgScReg :
              tmp_2);



  always @(posedge clk)
    begin : obj_FFTLengthReg_reg_process
      if (reset_x == 1'b1) begin
        obj_FFTLengthReg <= 14'b00000001000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_FFTLengthReg <= tmp_15;
        end
      end
    end



  assign tmp_15 = (tmp_13 == 1'b0 ? obj_FFTLengthReg :
              tmp_1);



  assign obj_numDataSc = tmp_15 - (obj_insertDC + (tmp_14 + tmp_12));



  always @(posedge clk)
    begin : obj_CPLengthReg_reg_process
      if (reset_x == 1'b1) begin
        obj_CPLengthReg <= 14'b00000000010000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_CPLengthReg <= tmp_16;
        end
      end
    end



  assign tmp_18 = (tmp_4 == 1'b0 ? tmp_17 :
              obj_validInHighCount);



  assign tmp_19 = (tmp_6 == 1'b0 ? tmp_18 :
              tmp_17);



  assign tmp_9 = (tmp_20 == 1'b0 ? tmp_19 :
              tmp_17);



  assign tmp_22 = (tmp_9 == 14'b00000000000000) && (tmp_21 == 14'b00000000000000);



  assign tmp_23 = (tmp_22 == 1'b0 ? obj_sampleInputs_1 :
              obj_sampleInputs);



  always @(posedge clk)
    begin : obj_sampleInputs_reg_process
      if (reset_x == 1'b1) begin
        obj_sampleInputs_1 <= 1'b1;
      end
      else begin
        if (enb_1_2_0) begin
          obj_sampleInputs_1 <= tmp_23;
        end
      end
    end



  assign tmp_25 = tmp_24 && obj_sampleInputs_1;



  assign tmp_13 = (tmp_25 == 1'b0 ? out_4 :
              out_5);



  assign tmp_16 = (tmp_13 == 1'b0 ? obj_CPLengthReg :
              tmp);



  assign obj_maxFFTPlusCP = tmp_16 + 14'b00000100000000;



  assign obj_readyLow = obj_maxFFTPlusCP - obj_numDataSc;



  assign tmp_26 = obj_readyLowCount_1 + 14'b00000000000001;



  assign tmp_28 = (tmp_4 == 1'b0 ? tmp_27 :
              obj_readyLowCount);



  assign tmp_29 = (tmp_6 == 1'b0 ? tmp_28 :
              tmp_27);



  assign tmp_21 = (tmp_20 == 1'b0 ? tmp_29 :
              tmp_27);



  always @(posedge clk)
    begin : obj_readyLowCount_reg_process
      if (reset_x == 1'b1) begin
        obj_readyLowCount_1 <= 14'b00000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_readyLowCount_1 <= tmp_21;
        end
      end
    end



  assign tmp_31 = tmp_10 && tmp_30;



  assign tmp_4 = (tmp_31 == 1'b0 ? out :
              out_1);



  assign tmp_32 = (tmp_4 == 1'b0 ? tmp_30 :
              obj_readyLowFlag);



  assign tmp_33 = (tmp_6 == 1'b0 ? tmp_32 :
              tmp_30);



  assign tmp_34 = (tmp_20 == 1'b0 ? tmp_33 :
              tmp_30);



  always @(posedge clk)
    begin : obj_readyLowFlag_reg_process
      if (reset_x == 1'b1) begin
        obj_readyLowFlag_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_readyLowFlag_2 <= tmp_34;
        end
      end
    end



  assign s = obj_validInHighFlag_2 && ( ! obj_readyLowFlag_2);



  assign tmp_35 = (s == 1'b0 ? out_2 :
              out_3);



  assign tmp_27 = (tmp_35 == 1'b0 ? obj_readyLowCount_1 :
              tmp_26);



  assign tmp_36 = tmp_27 == obj_readyLow;



  assign tmp_30 = (tmp_36 == 1'b0 ? obj_readyLowFlag_2 :
              obj_readyLowFlag_1);



  assign tmp_37 = tmp_10 && ( ! tmp_30);



  assign tmp_6 = (tmp_37 == 1'b0 ? out_6 :
              out_7);



  assign tmp_38 = (tmp_6 == 1'b0 ? tmp_11 :
              tmp_10);



  assign tmp_39 = (tmp_20 == 1'b0 ? tmp_38 :
              tmp_10);



  always @(posedge clk)
    begin : obj_validInHighFlag_reg_process
      if (reset_x == 1'b1) begin
        obj_validInHighFlag_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_validInHighFlag_2 <= tmp_39;
        end
      end
    end



  assign tmp_40 = tmp_24 && ( ! obj_validInHighFlag_2);



  assign tmp_41 = (tmp_40 == 1'b0 ? out_8 :
              out_9);



  assign tmp_17 = (tmp_41 == 1'b0 ? obj_validInHighCount_1 :
              tmp_8);



  assign tmp_42 = tmp_17 == obj_numDataSc;



  assign tmp_10 = (tmp_42 == 1'b0 ? obj_validInHighFlag_2 :
              obj_validInHighFlag_1);



  assign tmp_43 = ( ! tmp_10) && ( ! tmp_30);



  assign tmp_20 = (tmp_43 == 1'b0 ? out_10 :
              out_11);



  assign tmp_44 = (tmp_20 == 1'b0 ? tmp_7 :
              obj_readyOut_3);



  always @(posedge clk)
    begin : obj_delayedReady_reg_process
      if (reset_x == 1'b1) begin
        obj_delayedReady <= 1'b1;
      end
      else begin
        if (enb_1_2_0) begin
          obj_delayedReady <= tmp_44;
        end
      end
    end



  assign s_1 = obj_delayedReady && valid;



  assign tmp_24 = (s_1 == 1'b0 ? out_12 :
              out_13);



  tx_125_src_symbolFormation u_symbolFormation (.clk(clk),
                                                .reset_x(reset_x),
                                                .enb_1_2_0(enb_1_2_0),
                                                .varargin_1_re(data_re),  // sfix16_En14
                                                .varargin_1_im(data_im),  // sfix16_En14
                                                .varargin_2(tmp_24),
                                                .varargin_3(tmp_15),  // ufix14
                                                .varargin_4(tmp_16),  // ufix14
                                                .varargin_5(tmp_14),  // ufix14
                                                .varargin_6(tmp_12),  // ufix14
                                                .varargout_1_re(varargout_1_re),  // sfix16_En14
                                                .varargout_1_im(varargout_1_im),  // sfix16_En14
                                                .varargout_2(varargout_2),
                                                .varargout_3(varargout_3),  // ufix14
                                                .varargout_4(varargout_4)  // ufix14
                                                );

  tx_125_src_samplesRepetitionMod u_samplesRepetitionMod (.clk(clk),
                                                          .reset_x(reset_x),
                                                          .enb_1_2_0(enb_1_2_0),
                                                          .varargin_1_re(varargout_1_re),  // sfix16_En14
                                                          .varargin_1_im(varargout_1_im),  // sfix16_En14
                                                          .varargin_2(varargout_2),
                                                          .varargin_3(varargout_3),  // ufix14
                                                          .varargin_4(varargout_4),  // ufix14
                                                          .varargout_1_re(varargout_1_re_1),  // sfix16_En14
                                                          .varargout_1_im(varargout_1_im_1),  // sfix16_En14
                                                          .varargout_2(varargout_2_1),
                                                          .varargout_3(varargout_3_1),  // ufix9
                                                          .varargout_4(varargout_4_1)  // ufix9
                                                          );

  tx_125_src_dsphdl_IFFT u_dsphdl_IFFT (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_2_0(enb_1_2_0),
                                        .dataIn_re(varargout_1_re_1),  // sfix16_En14
                                        .dataIn_im(varargout_1_im_1),  // sfix16_En14
                                        .validIn(varargout_2_1),
                                        .dataOut_re(varargout_1_re_2),  // sfix16_En14
                                        .dataOut_im(varargout_1_im_2),  // sfix16_En14
                                        .startOut(varargout_2_2),
                                        .validOut(varargout_3_2)
                                        );

  assign obj_fftInFFTDelayBal = {1'b0, varargout_3_1};



  assign sel = 1'b0;



  assign obj_countReg = 10'b0000000000;



  assign tmp_45 = obj_countReg_1 + 10'b0000000001;



  assign s_2 = obj_countReg_1 == 10'b0011111111;



  assign tmp_46 = (s_2 == 1'b0 ? tmp_45 :
              obj_countReg);



  assign tmp_47 = (varargout_2_1 == 1'b0 ? obj_countReg_1 :
              tmp_46);



  always @(posedge clk)
    begin : obj_countReg_reg_process
      if (reset_x == 1'b1) begin
        obj_countReg_1 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_countReg_1 <= tmp_47;
        end
      end
    end



  assign s_3 = obj_countReg_1 == 10'b0000000000;



  assign sel_1 = 1'b0;



  assign out_14 = 1'b1;



  assign sel_2 = (s_3 == 1'b0 ? sel_1 :
              out_14);



  assign sel_2_1 = (varargout_2_1 == 1'b0 ? sel :
              sel_2);



  assign obj_index = 7'b0000000;



  assign tmp_48 = obj_index_1 + 7'b0000001;



  assign s_4 = obj_index_1 == 7'b0000010;



  assign tmp_49 = (s_4 == 1'b0 ? tmp_48 :
              obj_index);



  assign tmp_50 = (s_3 == 1'b0 ? obj_index_1 :
              tmp_49);



  assign tmp_51 = (varargout_2_1 == 1'b0 ? obj_index_1 :
              tmp_50);



  always @(posedge clk)
    begin : obj_index_reg_process
      if (reset_x == 1'b1) begin
        obj_index_1 <= 7'b0000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_index_1 <= tmp_51;
        end
      end
    end



  assign tmp_52 = {25'b0, obj_index_1};



  always @(posedge clk)
    begin : obj_FFTReg_reg_process
      if (reset_x == 1'b1) begin
        for(obj_FFTReg_reg_t_1 = 32'sd0; obj_FFTReg_reg_t_1 <= 32'sd2; obj_FFTReg_reg_t_1 = obj_FFTReg_reg_t_1 + 32'sd1) begin
          obj_FFTReg_reg_obj_FFTReg[obj_FFTReg_reg_t_1] <= 10'b0001000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          for(obj_FFTReg_reg_t_0_0 = 32'sd0; obj_FFTReg_reg_t_0_0 <= 32'sd2; obj_FFTReg_reg_t_0_0 = obj_FFTReg_reg_t_0_0 + 32'sd1) begin
            obj_FFTReg_reg_obj_FFTReg[obj_FFTReg_reg_t_0_0] <= obj_FFTReg_reg_obj_FFTReg_next[obj_FFTReg_reg_t_0_0];
          end
        end
      end
    end


  genvar t_02;
  generate
    for(t_02 = 32'sd0; t_02 <= 32'sd2; t_02 = t_02 + 32'sd1) begin:obj_FFTReg_reg_obj_FFTReg_next_gen
      assign obj_FFTReg[t_02] = obj_FFTReg_reg_obj_FFTReg[t_02];
      assign obj_FFTReg_reg_obj_FFTReg_next[t_02] = tmp_53[t_02];
    end
  endgenerate




  always @* begin

    for(p51_t_0 = 32'sd0; p51_t_0 <= 32'sd2; p51_t_0 = p51_t_0 + 32'sd1) begin
      s_5[p51_t_0] = obj_FFTReg[p51_t_0];
    end

    if (sel_2_1) begin
      s_5[tmp_52] = obj_fftInFFTDelayBal;
    end
  end



  always @* begin
    if (varargout_2_1 == 1'b0) begin
      for(p45_t_1 = 32'sd0; p45_t_1 <= 32'sd2; p45_t_1 = p45_t_1 + 32'sd1) begin
        tmp_53[p45_t_1] = s_5[p45_t_1];
      end
    end
    else begin
      for(p45_t_0_0 = 32'sd0; p45_t_0_0 <= 32'sd2; p45_t_0_0 = p45_t_0_0 + 32'sd1) begin
        tmp_53[p45_t_0_0] = s_5[p45_t_0_0];
      end
    end
  end



  assign obj_index1 = 7'b0000000;



  assign tmp_54 = obj_index1_1 + 7'b0000001;



  assign s_6 = obj_index1_1 == 7'b0000010;



  assign tmp_55 = (s_6 == 1'b0 ? tmp_54 :
              obj_index1);



  assign tmp_56 = (varargout_2_2 == 1'b0 ? obj_index1_1 :
              tmp_55);



  always @(posedge clk)
    begin : obj_index1_reg_process
      if (reset_x == 1'b1) begin
        obj_index1_1 <= 7'b0000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_index1_1 <= tmp_56;
        end
      end
    end



  assign tmp_57 = tmp_53[obj_index1_1];



  assign tmp_58 = (varargout_2_2 == 1'b0 ? obj_FFTRegDelay :
              tmp_57);



  always @(posedge clk)
    begin : obj_FFTRegDelay_reg_process
      if (reset_x == 1'b1) begin
        obj_FFTRegDelay <= 10'b0001000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_FFTRegDelay <= tmp_58;
        end
      end
    end



  assign tmp_59 = tmp_53[obj_index1_1];



  assign tmp_60 = (varargout_2_2 == 1'b0 ? obj_FFTRegDelay :
              tmp_59);



  assign obj_cpInFFTDelayBal = {1'b0, varargout_4_1};



  assign sel_3 = 1'b0;



  assign sel_4 = 1'b0;



  assign out_15 = 1'b1;



  assign sel_2_2 = (s_3 == 1'b0 ? sel_4 :
              out_15);



  assign sel_2_3 = (varargout_2_1 == 1'b0 ? sel_3 :
              sel_2_2);



  assign tmp_61 = {25'b0, obj_index_1};



  always @(posedge clk)
    begin : obj_cpReg_reg_process
      if (reset_x == 1'b1) begin
        for(obj_cpReg_reg_t_1 = 32'sd0; obj_cpReg_reg_t_1 <= 32'sd2; obj_cpReg_reg_t_1 = obj_cpReg_reg_t_1 + 32'sd1) begin
          obj_cpReg_reg_obj_cpReg[obj_cpReg_reg_t_1] <= 10'b0000010000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          for(obj_cpReg_reg_t_0_0 = 32'sd0; obj_cpReg_reg_t_0_0 <= 32'sd2; obj_cpReg_reg_t_0_0 = obj_cpReg_reg_t_0_0 + 32'sd1) begin
            obj_cpReg_reg_obj_cpReg[obj_cpReg_reg_t_0_0] <= obj_cpReg_reg_obj_cpReg_next[obj_cpReg_reg_t_0_0];
          end
        end
      end
    end


  genvar t_011;
  generate
    for(t_011 = 32'sd0; t_011 <= 32'sd2; t_011 = t_011 + 32'sd1) begin:obj_cpReg_reg_obj_cpReg_next_gen
      assign obj_cpReg[t_011] = obj_cpReg_reg_obj_cpReg[t_011];
      assign obj_cpReg_reg_obj_cpReg_next[t_011] = tmp_62[t_011];
    end
  endgenerate




  always @* begin

    for(p55_t_0 = 32'sd0; p55_t_0 <= 32'sd2; p55_t_0 = p55_t_0 + 32'sd1) begin
      s_7[p55_t_0] = obj_cpReg[p55_t_0];
    end

    if (sel_2_3) begin
      s_7[tmp_61] = obj_cpInFFTDelayBal;
    end
  end



  always @* begin
    if (varargout_2_1 == 1'b0) begin
      for(p43_t_1 = 32'sd0; p43_t_1 <= 32'sd2; p43_t_1 = p43_t_1 + 32'sd1) begin
        tmp_62[p43_t_1] = s_7[p43_t_1];
      end
    end
    else begin
      for(p43_t_0_0 = 32'sd0; p43_t_0_0 <= 32'sd2; p43_t_0_0 = p43_t_0_0 + 32'sd1) begin
        tmp_62[p43_t_0_0] = s_7[p43_t_0_0];
      end
    end
  end



  assign tmp_63 = tmp_62[obj_index1_1];



  assign tmp_64 = (varargout_2_2 == 1'b0 ? obj_cpRegDelay :
              tmp_63);



  always @(posedge clk)
    begin : obj_cpRegDelay_reg_process
      if (reset_x == 1'b1) begin
        obj_cpRegDelay <= 10'b0000010000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_cpRegDelay <= tmp_64;
        end
      end
    end



  assign tmp_65 = tmp_62[obj_index1_1];



  assign tmp_66 = (varargout_2_2 == 1'b0 ? obj_cpRegDelay :
              tmp_65);



  tx_125_src_DownSamplerMod u_DownSamplerMod (.clk(clk),
                                              .reset_x(reset_x),
                                              .enb_1_2_0(enb_1_2_0),
                                              .varargin_1_re(varargout_1_re_2),  // sfix16_En14
                                              .varargin_1_im(varargout_1_im_2),  // sfix16_En14
                                              .varargin_2(varargout_3_2),
                                              .varargin_3(tmp_60),  // ufix10
                                              .varargin_4(tmp_66),  // ufix10
                                              .varargout_1_re(varargout_1_re_3),  // sfix16_En14
                                              .varargout_1_im(varargout_1_im_3),  // sfix16_En14
                                              .varargout_2(varargout_2_3),
                                              .varargout_3(varargout_3_3),  // ufix10
                                              .varargout_4(varargout_4_2)  // ufix10
                                              );

  tx_125_src_HDLFFTShiftMod u_HDLFFTShiftMod (.clk(clk),
                                              .reset_x(reset_x),
                                              .enb_1_2_0(enb_1_2_0),
                                              .varargin_1_re(varargout_1_re_3),  // sfix16_En14
                                              .varargin_1_im(varargout_1_im_3),  // sfix16_En14
                                              .varargin_2(varargout_2_3),
                                              .varargin_3(varargout_3_3),  // ufix10
                                              .varargin_4(varargout_4_2),  // ufix10
                                              .varargout_1_re(varargout_1_re_4),  // sfix16_En14
                                              .varargout_1_im(varargout_1_im_4),  // sfix16_En14
                                              .varargout_2(varargout_2_4),
                                              .varargout_3(varargout_3_4),  // ufix10
                                              .varargout_4(varargout_4_3)  // ufix10
                                              );

  tx_125_src_CPAddition u_CPAddition (.clk(clk),
                                      .reset_x(reset_x),
                                      .enb_1_2_0(enb_1_2_0),
                                      .varargin_1_re(varargout_1_re_4),  // sfix16_En14
                                      .varargin_1_im(varargout_1_im_4),  // sfix16_En14
                                      .varargin_2(varargout_2_4),
                                      .varargin_3(varargout_3_4),  // ufix10
                                      .varargin_4(varargout_4_3),  // ufix10
                                      .varargout_1_re(varargout_1_re_5),  // sfix16_En14
                                      .varargout_1_im(varargout_1_im_5),  // sfix16_En14
                                      .varargout_2(varargout_2_5)
                                      );

  always @(posedge clk)
    begin : obj_dataOut_reg_process
      if (reset_x == 1'b1) begin
        obj_dataOut_re <= 16'sb0000000000000000;
        obj_dataOut_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataOut_re <= varargout_1_re_5;
          obj_dataOut_im <= varargout_1_im_5;
        end
      end
    end



  always @(posedge clk)
    begin : obj_validOut_reg_process
      if (reset_x == 1'b1) begin
        obj_validOut <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_validOut <= varargout_2_5;
        end
      end
    end



  assign obj_numDataSc_1 = obj_numDataSc == 14'b00000000000001;



  assign tmp_67 = obj_numDataSc - 14'b00000000000001;



  assign obj_readyLast = 14'b00000000000001;



  assign tmp_68 = (obj_numDataSc_1 == 1'b0 ? tmp_67 :
              obj_readyLast);



  assign tmp_69 = tmp_17 == tmp_68;



  assign obj_readyFlag = 1'b0;



  assign obj_readyLow_1 = obj_readyLow != 14'b00000000000000;



  assign obj_readyFlag_1 = 1'b0;



  assign obj_readyFlag_2 = 1'b1;



  assign tmp_70 = (obj_readyLow_1 == 1'b0 ? obj_readyFlag_1 :
              obj_readyFlag_2);



  assign tmp_71 = (s_8 == 1'b0 ? obj_readyFlag_3 :
              obj_readyFlag);



  assign tmp_72 = (tmp_69 == 1'b0 ? tmp_71 :
              tmp_70);



  always @(posedge clk)
    begin : obj_readyFlag_reg_process
      if (reset_x == 1'b1) begin
        obj_readyFlag_3 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_readyFlag_3 <= tmp_72;
        end
      end
    end



  assign s_8 = obj_readyFlag_3 && valid;



  assign p131tmp_1 = {1'b0, tmp_27};
  assign p131tmp_2 = {1'b0, obj_readyLow};
  assign tmp_73 = p131tmp_1 == (p131tmp_2 - 15'b000000000000001);



  assign obj_triggerReady = 1'b0;



  assign obj_triggerReady_1 = 1'b1;



  assign tmp_74 = (obj_triggerReady_2 == 1'b0 ? obj_triggerReady_2 :
              obj_triggerReady);



  assign tmp_75 = (s_8 == 1'b0 ? tmp_74 :
              obj_triggerReady_2);



  assign tmp_76 = (tmp_73 == 1'b0 ? tmp_75 :
              obj_triggerReady_1);



  always @(posedge clk)
    begin : obj_triggerReady_reg_process
      if (reset_x == 1'b1) begin
        obj_triggerReady_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_triggerReady_2 <= tmp_76;
        end
      end
    end



  always @(posedge clk)
    begin : obj_readyOut_reg_process
      if (reset_x == 1'b1) begin
        obj_readyOut_4 <= 1'b1;
      end
      else begin
        if (enb_1_2_0) begin
          obj_readyOut_4 <= tmp_44;
        end
      end
    end



  assign varargout_3_5 = 1'b1;



  assign tmp_77 = (obj_triggerReady_2 == 1'b0 ? obj_readyOut_4 :
              varargout_3_5);



  assign varargout_3_6 = 1'b0;



  assign tmp_78 = (s_8 == 1'b0 ? tmp_77 :
              varargout_3_6);



  assign ready = tmp_78;

  assign data_re_1 = obj_dataOut_re;

  assign data_im_1 = obj_dataOut_im;

  assign valid_1 = obj_validOut;

endmodule  // tx_125_src_OFDM_Modulator

