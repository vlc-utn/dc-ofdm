// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_Calculate_Alpha.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_Calculate_Alpha
// Source Path: HDLTx/full_tx/header_full/header_fec/Hc_12H_B14/Calculate Alpha
// Hierarchy Level: 4
// Model version: 4.114
// 
// Calculate Alpha
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_Calculate_Alpha
          (clk,
           reset_x,
           enb,
           data_0,
           data_1,
           data_2,
           data_3,
           data_4,
           data_5,
           data_6,
           data_7,
           data_8,
           data_9,
           data_10,
           data_11,
           data_12,
           data_13,
           reset,
           encEnable,
           alpha_0,
           alpha_1,
           alpha_2,
           alpha_3,
           alpha_4,
           alpha_5,
           alpha_6,
           alpha_7,
           alpha_8,
           alpha_9,
           alpha_10,
           alpha_11,
           alpha_12,
           alpha_13,
           alphaValid,
           alphaAddr,
           columnVal,
           parity1_0,
           parity1_1,
           parity1_2,
           parity1_3,
           parity1_4,
           parity1_5,
           parity1_6,
           parity1_7,
           parity1_8,
           parity1_9,
           parity1_10,
           parity1_11,
           parity1_12,
           parity1_13);


  input   clk;
  input   reset_x;
  input   enb;
  input   data_0;  // ufix1
  input   data_1;  // ufix1
  input   data_2;  // ufix1
  input   data_3;  // ufix1
  input   data_4;  // ufix1
  input   data_5;  // ufix1
  input   data_6;  // ufix1
  input   data_7;  // ufix1
  input   data_8;  // ufix1
  input   data_9;  // ufix1
  input   data_10;  // ufix1
  input   data_11;  // ufix1
  input   data_12;  // ufix1
  input   data_13;  // ufix1
  input   reset;  // ufix1
  input   encEnable;  // ufix1
  output  alpha_0;  // ufix1
  output  alpha_1;  // ufix1
  output  alpha_2;  // ufix1
  output  alpha_3;  // ufix1
  output  alpha_4;  // ufix1
  output  alpha_5;  // ufix1
  output  alpha_6;  // ufix1
  output  alpha_7;  // ufix1
  output  alpha_8;  // ufix1
  output  alpha_9;  // ufix1
  output  alpha_10;  // ufix1
  output  alpha_11;  // ufix1
  output  alpha_12;  // ufix1
  output  alpha_13;  // ufix1
  output  alphaValid;  // ufix1
  output  [3:0] alphaAddr;  // ufix4
  output  [4:0] columnVal;  // ufix5
  output  parity1_0;  // ufix1
  output  parity1_1;  // ufix1
  output  parity1_2;  // ufix1
  output  parity1_3;  // ufix1
  output  parity1_4;  // ufix1
  output  parity1_5;  // ufix1
  output  parity1_6;  // ufix1
  output  parity1_7;  // ufix1
  output  parity1_8;  // ufix1
  output  parity1_9;  // ufix1
  output  parity1_10;  // ufix1
  output  parity1_11;  // ufix1
  output  parity1_12;  // ufix1
  output  parity1_13;  // ufix1


  reg [3:0] alphaController_countLayer;  // ufix4
  reg  alphaController_layerDone;
  reg [4:0] alphaController_idxCount;  // ufix5
  reg [3:0] alphaController_xIdx;  // ufix4
  reg [4:0] alphaController_yIdx;  // ufix5
  reg  alphaController_encEnb;
  reg  alphaController_alphaEnb;
  reg  alphaController_alphaDone;
  reg [3:0] alphaController_rdCount;  // ufix4
  reg [3:0] alphaController_countLayer_next;  // ufix4
  reg  alphaController_layerDone_next;
  reg [4:0] alphaController_idxCount_next;  // ufix5
  reg [3:0] alphaController_xIdx_next;  // ufix4
  reg [4:0] alphaController_yIdx_next;  // ufix5
  reg  alphaController_encEnb_next;
  reg  alphaController_alphaEnb_next;
  reg  alphaController_alphaDone_next;
  reg [3:0] alphaController_rdCount_next;  // ufix4
  reg [3:0] countLayer;  // ufix4
  reg [3:0] xIndex;  // ufix4
  reg [4:0] yIndex;  // ufix5
  reg  layerDone;  // ufix1
  reg  rdValid;  // ufix1
  reg [3:0] rdAddr;  // ufix4
  reg  aValid;  // ufix1
  reg  [2:0] rdvalid_register_reg;  // ufix1 [3]
  wire rdValidReg;  // ufix1
  reg  rdValidReg1;  // ufix1
  wire switch_compare_1;
  wire [13:0] zeroData;  // ufix1 [14]
  wire [13:0] data;  // ufix1 [14]
  reg  [13:0] rdData;  // ufix1 [14]
  wire const1;  // ufix1
  wire [3:0] alpha;  // ufix4
  wire [3:0] xIdx;  // ufix4
  wire [4:0] alpha_14;  // ufix5
  wire [4:0] yIdx;  // ufix5
  wire [3:0] Shift_LUT_1 [0:83];  // ufix4 [84]
  wire signed [37:0] Shift_LUT_mul_temp;  // sfix38
  wire signed [5:0] Shift_LUT_2;  // sfix6
  wire [3:0] sVal;  // ufix4
  reg [3:0] shift_register_reg [0:2];  // ufix4 [3]
  reg [3:0] shift_register_reg_next [0:2];  // ufix4 [3]
  reg [3:0] shiftVal;  // ufix4
  wire sData_0;  // ufix1
  wire sData_1;  // ufix1
  wire sData_2;  // ufix1
  wire sData_3;  // ufix1
  wire sData_4;  // ufix1
  wire sData_5;  // ufix1
  wire sData_6;  // ufix1
  wire sData_7;  // ufix1
  wire sData_8;  // ufix1
  wire sData_9;  // ufix1
  wire sData_10;  // ufix1
  wire sData_11;  // ufix1
  wire sData_12;  // ufix1
  wire sData_13;  // ufix1
  wire [13:0] sData;  // ufix1 [14]
  reg  [13:0] sDataReg;  // ufix1 [14]
  wire [13:0] sDataTmp;  // ufix1 [14]
  reg  [13:0] shiftData;  // ufix1 [14]
  wire shiftData_0;  // ufix1
  reg  [3:0] layerdone_register_reg;  // ufix1 [4]
  wire layerDoneReg;  // ufix1
  wire encEnb_neg;  // ufix1
  reg  encEnbNegReg;  // ufix1
  wire encEnbTmp;  // ufix1
  reg  [4:0] encenb_tmp_register_reg;  // ufix1 [5]
  wire encEnbTmp1;  // ufix1
  wire wrEnb;  // ufix1
  reg  wrEnbReg;  // ufix1
  wire switch_compare_1_1;
  reg  const1Reg;  // ufix1
  wire shiftData_1;  // ufix1
  wire shiftData_2;  // ufix1
  wire shiftData_3;  // ufix1
  wire shiftData_4;  // ufix1
  wire shiftData_5;  // ufix1
  wire shiftData_6;  // ufix1
  wire shiftData_7;  // ufix1
  wire shiftData_8;  // ufix1
  wire shiftData_9;  // ufix1
  wire shiftData_10;  // ufix1
  wire shiftData_11;  // ufix1
  wire shiftData_12;  // ufix1
  wire shiftData_13;  // ufix1
  wire [13:0] switchData;  // ufix1 [14]
  wire switchData_13;  // ufix1
  wire shiftData_13_1;  // ufix1
  wire switchData_12;  // ufix1
  wire shiftData_12_1;  // ufix1
  wire switchData_11;  // ufix1
  wire shiftData_11_1;  // ufix1
  wire switchData_10;  // ufix1
  wire shiftData_10_1;  // ufix1
  wire switchData_9;  // ufix1
  wire shiftData_9_1;  // ufix1
  wire switchData_8;  // ufix1
  wire shiftData_8_1;  // ufix1
  wire switchData_7;  // ufix1
  wire shiftData_7_1;  // ufix1
  wire switchData_6;  // ufix1
  wire shiftData_6_1;  // ufix1
  wire switchData_5;  // ufix1
  wire shiftData_5_1;  // ufix1
  wire switchData_4;  // ufix1
  wire shiftData_4_1;  // ufix1
  wire switchData_3;  // ufix1
  wire shiftData_3_1;  // ufix1
  wire switchData_2;  // ufix1
  wire shiftData_2_1;  // ufix1
  wire switchData_1;  // ufix1
  wire shiftData_1_1;  // ufix1
  wire [13:0] xorData;  // ufix1 [14]
  reg  [13:0] alpha_switch_delay;  // ufix1 [14]
  wire [13:0] xorDataReg;  // ufix1 [14]
  wire switchData_0;  // ufix1
  wire shiftData_0_1;  // ufix1
  reg  [13:0] wrData;  // ufix1 [14]
  reg [3:0] wraddr_register_reg [0:5];  // ufix4 [6]
  reg [3:0] wraddr_register_reg_next [0:5];  // ufix4 [6]
  reg [3:0] wrAddr;  // ufix4
  reg [3:0] rdaddr_register_reg [0:4];  // ufix4 [5]
  reg [3:0] rdaddr_register_reg_next [0:4];  // ufix4 [5]
  reg [3:0] rdAddrReg;  // ufix4
  wire pri_rd_out_1;  // ufix1
  wire pri_rd_out_1_1;  // ufix1
  wire pri_rd_out_1_2;  // ufix1
  wire pri_rd_out_1_3;  // ufix1
  wire pri_rd_out_1_4;  // ufix1
  wire pri_rd_out_1_5;  // ufix1
  wire pri_rd_out_1_6;  // ufix1
  wire pri_rd_out_1_7;  // ufix1
  wire pri_rd_out_1_8;  // ufix1
  wire pri_rd_out_1_9;  // ufix1
  wire pri_rd_out_1_10;  // ufix1
  wire pri_rd_out_1_11;  // ufix1
  wire pri_rd_out_1_12;  // ufix1
  wire pri_rd_out_1_13;  // ufix1
  reg  [4:0] alphavalid_register_reg;  // ufix1 [5]
  reg [3:0] alphaAddr_1;  // ufix4
  wire [4:0] Column_LUT_1 [0:83];  // ufix5 [84]
  wire signed [37:0] Column_LUT_mul_temp;  // sfix38
  wire signed [5:0] Column_LUT_2;  // sfix6
  wire [4:0] cVal;  // ufix5
  reg [4:0] columnVal_1;  // ufix5
  wire shiftData_0_2;  // ufix1
  wire shiftData_1_2;  // ufix1
  wire shiftData_2_2;  // ufix1
  wire shiftData_3_2;  // ufix1
  wire shiftData_4_2;  // ufix1
  wire shiftData_5_2;  // ufix1
  wire shiftData_6_2;  // ufix1
  wire shiftData_7_2;  // ufix1
  wire shiftData_8_2;  // ufix1
  wire shiftData_9_2;  // ufix1
  wire shiftData_10_2;  // ufix1
  wire shiftData_11_2;  // ufix1
  wire shiftData_12_2;  // ufix1
  wire shiftData_13_2;  // ufix1
  wire [13:0] xorDataParityReg;  // ufix1 [14]
  wire xorDataParityReg_13;  // ufix1
  wire shiftData_13_3;  // ufix1
  wire xorDataParityReg_12;  // ufix1
  wire shiftData_12_3;  // ufix1
  wire xorDataParityReg_11;  // ufix1
  wire shiftData_11_3;  // ufix1
  wire xorDataParityReg_10;  // ufix1
  wire shiftData_10_3;  // ufix1
  wire xorDataParityReg_9;  // ufix1
  wire shiftData_9_3;  // ufix1
  wire xorDataParityReg_8;  // ufix1
  wire shiftData_8_3;  // ufix1
  wire xorDataParityReg_7;  // ufix1
  wire shiftData_7_3;  // ufix1
  wire xorDataParityReg_6;  // ufix1
  wire shiftData_6_3;  // ufix1
  wire xorDataParityReg_5;  // ufix1
  wire shiftData_5_3;  // ufix1
  wire xorDataParityReg_4;  // ufix1
  wire shiftData_4_3;  // ufix1
  wire xorDataParityReg_3;  // ufix1
  wire shiftData_3_3;  // ufix1
  wire xorDataParityReg_2;  // ufix1
  wire shiftData_2_3;  // ufix1
  wire xorDataParityReg_1;  // ufix1
  wire shiftData_1_3;  // ufix1
  wire [13:0] xorDataParity1;  // ufix1 [14]
  reg  [13:0] alpha_switch_delay_1;  // ufix1 [14]
  wire xorDataParityReg_0;  // ufix1
  wire shiftData_0_3;  // ufix1
  reg  [13:0] parity1;  // ufix1 [14]
  reg [4:0] alphaController_countIdx;  // ufix5
  reg [3:0] alphaController_countLayer_temp;  // ufix4
  reg [4:0] alphaController_idxCount_temp;  // ufix5
  reg  alphaController_encEnb_temp;
  reg  alphaController_alphaDone_temp;
  reg signed [7:0] alphaController_t_0_0 [0:11];  // int8 [12]
  reg signed [7:0] alphaController_t_1 [0:12];  // int8 [13]
  reg signed [31:0] shift_register_t_0_0;  // int32
  reg signed [31:0] shift_register_t_0_1;  // int32
  reg signed [31:0] shift_register_t_1;  // int32
  reg signed [31:0] wraddr_register_t_0_0;  // int32
  reg signed [31:0] wraddr_register_t_0_1;  // int32
  reg signed [31:0] wraddr_register_t_1;  // int32
  reg signed [31:0] rdaddr_register_t_0_0;  // int32
  reg signed [31:0] rdaddr_register_t_0_1;  // int32
  reg signed [31:0] rdaddr_register_t_1;  // int32


  always @(posedge clk)
    begin : alphaController_process
      if (reset_x == 1'b1) begin
        alphaController_countLayer <= 4'b0001;
        alphaController_layerDone <= 1'b0;
        alphaController_idxCount <= 5'b00001;
        alphaController_encEnb <= 1'b0;
        alphaController_xIdx <= 4'b0001;
        alphaController_yIdx <= 5'b00001;
        alphaController_alphaEnb <= 1'b0;
        alphaController_alphaDone <= 1'b0;
        alphaController_rdCount <= 4'b0001;
      end
      else begin
        if (enb) begin
          alphaController_countLayer <= alphaController_countLayer_next;
          alphaController_layerDone <= alphaController_layerDone_next;
          alphaController_idxCount <= alphaController_idxCount_next;
          alphaController_xIdx <= alphaController_xIdx_next;
          alphaController_yIdx <= alphaController_yIdx_next;
          alphaController_encEnb <= alphaController_encEnb_next;
          alphaController_alphaEnb <= alphaController_alphaEnb_next;
          alphaController_alphaDone <= alphaController_alphaDone_next;
          alphaController_rdCount <= alphaController_rdCount_next;
        end
      end
    end

  always @(alphaController_alphaDone, alphaController_alphaEnb,
       alphaController_countLayer, alphaController_encEnb,
       alphaController_idxCount, alphaController_layerDone,
       alphaController_rdCount, alphaController_xIdx, alphaController_yIdx,
       encEnable, reset) begin
    alphaController_t_0_0[0] = 8'sd6;
    alphaController_t_0_0[1] = 8'sd7;
    alphaController_t_0_0[2] = 8'sd7;
    alphaController_t_0_0[3] = 8'sd6;
    alphaController_t_0_0[4] = 8'sd6;
    alphaController_t_0_0[5] = 8'sd6;
    alphaController_t_0_0[6] = 8'sd6;
    alphaController_t_0_0[7] = 8'sd6;
    alphaController_t_0_0[8] = 8'sd7;
    alphaController_t_0_0[9] = 8'sd6;
    alphaController_t_0_0[10] = 8'sd7;
    alphaController_t_0_0[11] = 8'sd6;
    alphaController_t_1[0] = 8'sd1;
    alphaController_t_1[1] = 8'sd2;
    alphaController_t_1[2] = 8'sd3;
    alphaController_t_1[3] = 8'sd4;
    alphaController_t_1[4] = 8'sd5;
    alphaController_t_1[5] = 8'sd6;
    alphaController_t_1[6] = 8'sd7;
    alphaController_t_1[7] = 8'sd8;
    alphaController_t_1[8] = 8'sd9;
    alphaController_t_1[9] = 8'sd10;
    alphaController_t_1[10] = 8'sd11;
    alphaController_t_1[11] = 8'sd12;
    alphaController_t_1[12] = 8'sd1;
    alphaController_countLayer_temp = alphaController_countLayer;
    alphaController_idxCount_temp = alphaController_idxCount;
    alphaController_encEnb_temp = alphaController_encEnb;
    alphaController_alphaDone_temp = alphaController_alphaDone;
    alphaController_layerDone_next = alphaController_layerDone;
    alphaController_rdCount_next = alphaController_rdCount;
    alphaController_countIdx = alphaController_t_0_0[$signed({1'b0, alphaController_countLayer}) - 32'sd1][4:0];
    if (reset != 1'b0) begin
      alphaController_countLayer_temp = 4'b0001;
      alphaController_encEnb_temp = 1'b1;
      alphaController_layerDone_next = 1'b0;
      alphaController_idxCount_temp = 5'b00001;
      alphaController_alphaDone_temp = 1'b0;
    end
    else if (alphaController_alphaEnb) begin
      if (alphaController_idxCount == alphaController_countIdx) begin
        if (alphaController_countLayer == 4'b1100) begin
          alphaController_countLayer_temp = 4'b0001;
          alphaController_layerDone_next = 1'b1;
          alphaController_idxCount_temp = 5'b00001;
          alphaController_encEnb_temp = 1'b0;
          alphaController_alphaDone_temp = 1'b1;
        end
        else begin
          alphaController_countLayer_temp = alphaController_countLayer + 4'b0001;
          alphaController_layerDone_next = 1'b1;
          alphaController_idxCount_temp = 5'b00001;
          alphaController_alphaDone_temp = 1'b0;
        end
      end
      else begin
        alphaController_idxCount_temp = alphaController_idxCount + 5'b00001;
        alphaController_layerDone_next = 1'b0;
        alphaController_alphaDone_temp = 1'b0;
      end
    end
    alphaController_xIdx_next = alphaController_countLayer_temp;
    alphaController_yIdx_next = alphaController_idxCount_temp;
    if (reset != 1'b0) begin
      alphaController_alphaEnb_next = 1'b0;
    end
    else begin
      alphaController_alphaEnb_next = encEnable && alphaController_encEnb_temp;
    end
    if (reset != 1'b0) begin
      alphaController_rdCount_next = 4'b0001;
      alphaController_alphaDone_temp = 1'b0;
    end
    else if (alphaController_alphaDone_temp) begin
      if (alphaController_rdCount == 4'b1101) begin
        alphaController_alphaDone_temp = 1'b0;
      end
      else begin
        alphaController_rdCount_next = alphaController_rdCount + 4'b0001;
      end
    end
    countLayer = alphaController_countLayer;
    xIndex = alphaController_xIdx;
    yIndex = alphaController_yIdx;
    layerDone = alphaController_layerDone;
    rdValid = alphaController_alphaEnb;
    rdAddr = alphaController_t_1[$signed({1'b0, alphaController_rdCount}) - 32'sd1][3:0];
    aValid = alphaController_alphaDone;
    alphaController_countLayer_next = alphaController_countLayer_temp;
    alphaController_idxCount_next = alphaController_idxCount_temp;
    alphaController_encEnb_next = alphaController_encEnb_temp;
    alphaController_alphaDone_next = alphaController_alphaDone_temp;
  end



  always @(posedge clk)
    begin : rdvalid_register_process
      if (reset_x == 1'b1) begin
        rdvalid_register_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rdvalid_register_reg[0] <= rdValid;
          rdvalid_register_reg[32'sd2:32'sd1] <= rdvalid_register_reg[32'sd1:32'sd0];
        end
      end
    end

  assign rdValidReg = rdvalid_register_reg[2];



  always @(posedge clk)
    begin : rdValid_register_1_process
      if (reset_x == 1'b1) begin
        rdValidReg1 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdValidReg1 <= rdValidReg;
        end
      end
    end



  assign switch_compare_1 = rdValidReg1 > 1'b0;



  assign zeroData = {14{1'b0}};



  assign data[0] = data_0;
  assign data[1] = data_1;
  assign data[2] = data_2;
  assign data[3] = data_3;
  assign data[4] = data_4;
  assign data[5] = data_5;
  assign data[6] = data_6;
  assign data[7] = data_7;
  assign data[8] = data_8;
  assign data[9] = data_9;
  assign data[10] = data_10;
  assign data[11] = data_11;
  assign data[12] = data_12;
  assign data[13] = data_13;

  always @(posedge clk)
    begin : data_register_process
      if (reset_x == 1'b1) begin
        rdData <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          rdData <= data;
        end
      end
    end



  assign const1 = 1'b1;



  assign alpha = {3'b0, const1};
  assign xIdx = xIndex - alpha;



  assign alpha_14 = {4'b0, const1};
  assign yIdx = yIndex - alpha_14;



  assign Shift_LUT_1[0] = 4'b0110;
  assign Shift_LUT_1[1] = 4'b0000;
  assign Shift_LUT_1[2] = 4'b1001;
  assign Shift_LUT_1[3] = 4'b0001;
  assign Shift_LUT_1[4] = 4'b0100;
  assign Shift_LUT_1[5] = 4'b0011;
  assign Shift_LUT_1[6] = 4'b0000;
  assign Shift_LUT_1[7] = 4'b1001;
  assign Shift_LUT_1[8] = 4'b1001;
  assign Shift_LUT_1[9] = 4'b0101;
  assign Shift_LUT_1[10] = 4'b1000;
  assign Shift_LUT_1[11] = 4'b1010;
  assign Shift_LUT_1[12] = 4'b1001;
  assign Shift_LUT_1[13] = 4'b0011;
  assign Shift_LUT_1[14] = 4'b1011;
  assign Shift_LUT_1[15] = 4'b1011;
  assign Shift_LUT_1[16] = 4'b1000;
  assign Shift_LUT_1[17] = 4'b0000;
  assign Shift_LUT_1[18] = 4'b0110;
  assign Shift_LUT_1[19] = 4'b0011;
  assign Shift_LUT_1[20] = 4'b0000;
  assign Shift_LUT_1[21] = 4'b0001;
  assign Shift_LUT_1[22] = 4'b1000;
  assign Shift_LUT_1[23] = 4'b1011;
  assign Shift_LUT_1[24] = 4'b0110;
  assign Shift_LUT_1[25] = 4'b1100;
  assign Shift_LUT_1[26] = 4'b1101;
  assign Shift_LUT_1[27] = 4'b0111;
  assign Shift_LUT_1[28] = 4'b0010;
  assign Shift_LUT_1[29] = 4'b1000;
  assign Shift_LUT_1[30] = 4'b0101;
  assign Shift_LUT_1[31] = 4'b0011;
  assign Shift_LUT_1[32] = 4'b1101;
  assign Shift_LUT_1[33] = 4'b0100;
  assign Shift_LUT_1[34] = 4'b1001;
  assign Shift_LUT_1[35] = 4'b0011;
  assign Shift_LUT_1[36] = 4'b0010;
  assign Shift_LUT_1[37] = 4'b0001;
  assign Shift_LUT_1[38] = 4'b0010;
  assign Shift_LUT_1[39] = 4'b1011;
  assign Shift_LUT_1[40] = 4'b0101;
  assign Shift_LUT_1[41] = 4'b0001;
  assign Shift_LUT_1[42] = 4'b1101;
  assign Shift_LUT_1[43] = 4'b0001;
  assign Shift_LUT_1[44] = 4'b1100;
  assign Shift_LUT_1[45] = 4'b0101;
  assign Shift_LUT_1[46] = 4'b0000;
  assign Shift_LUT_1[47] = 4'b0000;
  assign Shift_LUT_1[48] = 4'b0100;
  assign Shift_LUT_1[49] = 4'b0011;
  assign Shift_LUT_1[50] = 4'b1100;
  assign Shift_LUT_1[51] = 4'b0000;
  assign Shift_LUT_1[52] = 4'b0000;
  assign Shift_LUT_1[53] = 4'b0000;
  assign Shift_LUT_1[54] = 4'b0000;
  assign Shift_LUT_1[55] = 4'b0000;
  assign Shift_LUT_1[56] = 4'b1000;
  assign Shift_LUT_1[57] = 4'b0000;
  assign Shift_LUT_1[58] = 4'b0000;
  assign Shift_LUT_1[59] = 4'b0100;
  assign Shift_LUT_1[60] = 4'b0000;
  assign Shift_LUT_1[61] = 4'b0000;
  assign Shift_LUT_1[62] = 4'b0000;
  assign Shift_LUT_1[63] = 4'b0000;
  assign Shift_LUT_1[64] = 4'b0000;
  assign Shift_LUT_1[65] = 4'b0000;
  assign Shift_LUT_1[66] = 4'b0000;
  assign Shift_LUT_1[67] = 4'b0000;
  assign Shift_LUT_1[68] = 4'b0000;
  assign Shift_LUT_1[69] = 4'b0000;
  assign Shift_LUT_1[70] = 4'b0000;
  assign Shift_LUT_1[71] = 4'b0000;
  assign Shift_LUT_1[72] = 4'b0000;
  assign Shift_LUT_1[73] = 4'b0000;
  assign Shift_LUT_1[74] = 4'b0000;
  assign Shift_LUT_1[75] = 4'b0000;
  assign Shift_LUT_1[76] = 4'b0000;
  assign Shift_LUT_1[77] = 4'b0000;
  assign Shift_LUT_1[78] = 4'b0000;
  assign Shift_LUT_1[79] = 4'b0000;
  assign Shift_LUT_1[80] = 4'b0000;
  assign Shift_LUT_1[81] = 4'b0000;
  assign Shift_LUT_1[82] = 4'b0000;
  assign Shift_LUT_1[83] = 4'b0000;
  assign Shift_LUT_2 = {1'b0, yIdx};
  assign Shift_LUT_mul_temp = Shift_LUT_2 * 32'sd12;
  assign sVal = Shift_LUT_1[$signed({1'b0, xIdx}) + Shift_LUT_mul_temp];



  always @(posedge clk)
    begin : shift_register_process
      if (reset_x == 1'b1) begin
        for(shift_register_t_1 = 32'sd0; shift_register_t_1 <= 32'sd2; shift_register_t_1 = shift_register_t_1 + 32'sd1) begin
          shift_register_reg[shift_register_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(shift_register_t_0_1 = 32'sd0; shift_register_t_0_1 <= 32'sd2; shift_register_t_0_1 = shift_register_t_0_1 + 32'sd1) begin
            shift_register_reg[shift_register_t_0_1] <= shift_register_reg_next[shift_register_t_0_1];
          end
        end
      end
    end

  always @* begin
    shiftVal = shift_register_reg[2];
    shift_register_reg_next[0] = sVal;

    for(shift_register_t_0_0 = 32'sd0; shift_register_t_0_0 <= 32'sd1; shift_register_t_0_0 = shift_register_t_0_0 + 32'sd1) begin
      shift_register_reg_next[shift_register_t_0_0 + 32'sd1] = shift_register_reg[shift_register_t_0_0];
    end

  end



  tx_125_src_BarrelRotator u_Barrel_Rotator_Unit (.data_0(rdData[0]),  // ufix1
                                                  .data_1(rdData[1]),  // ufix1
                                                  .data_2(rdData[2]),  // ufix1
                                                  .data_3(rdData[3]),  // ufix1
                                                  .data_4(rdData[4]),  // ufix1
                                                  .data_5(rdData[5]),  // ufix1
                                                  .data_6(rdData[6]),  // ufix1
                                                  .data_7(rdData[7]),  // ufix1
                                                  .data_8(rdData[8]),  // ufix1
                                                  .data_9(rdData[9]),  // ufix1
                                                  .data_10(rdData[10]),  // ufix1
                                                  .data_11(rdData[11]),  // ufix1
                                                  .data_12(rdData[12]),  // ufix1
                                                  .data_13(rdData[13]),  // ufix1
                                                  .shift(shiftVal),  // ufix4
                                                  .shiftData_0(sData_0),  // ufix1
                                                  .shiftData_1(sData_1),  // ufix1
                                                  .shiftData_2(sData_2),  // ufix1
                                                  .shiftData_3(sData_3),  // ufix1
                                                  .shiftData_4(sData_4),  // ufix1
                                                  .shiftData_5(sData_5),  // ufix1
                                                  .shiftData_6(sData_6),  // ufix1
                                                  .shiftData_7(sData_7),  // ufix1
                                                  .shiftData_8(sData_8),  // ufix1
                                                  .shiftData_9(sData_9),  // ufix1
                                                  .shiftData_10(sData_10),  // ufix1
                                                  .shiftData_11(sData_11),  // ufix1
                                                  .shiftData_12(sData_12),  // ufix1
                                                  .shiftData_13(sData_13)  // ufix1
                                                  );

  assign sData[0] = sData_0;
  assign sData[1] = sData_1;
  assign sData[2] = sData_2;
  assign sData[3] = sData_3;
  assign sData[4] = sData_4;
  assign sData[5] = sData_5;
  assign sData[6] = sData_6;
  assign sData[7] = sData_7;
  assign sData[8] = sData_8;
  assign sData[9] = sData_9;
  assign sData[10] = sData_10;
  assign sData[11] = sData_11;
  assign sData[12] = sData_12;
  assign sData[13] = sData_13;

  always @(posedge clk)
    begin : shift_register_1_process
      if (reset_x == 1'b1) begin
        sDataReg <= {14{1'b0}};
      end
      else begin
        if (enb && rdValidReg) begin
          sDataReg <= sData;
        end
      end
    end



  assign sDataTmp = (switch_compare_1 == 1'b0 ? zeroData :
              sDataReg);



  always @(posedge clk)
    begin : shift_register_2_process
      if (reset_x == 1'b1) begin
        shiftData <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          shiftData <= sDataTmp;
        end
      end
    end



  assign shiftData_0 = shiftData[0];

  always @(posedge clk)
    begin : layerdone_register_process
      if (reset_x == 1'b1) begin
        layerdone_register_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          layerdone_register_reg[0] <= layerDone;
          layerdone_register_reg[32'sd3:32'sd1] <= layerdone_register_reg[32'sd2:32'sd0];
        end
      end
    end

  assign layerDoneReg = layerdone_register_reg[3];



  assign encEnb_neg =  ~ encEnable;



  always @(posedge clk)
    begin : encenb_reg_register_process
      if (reset_x == 1'b1) begin
        encEnbNegReg <= 1'b0;
      end
      else begin
        if (enb) begin
          encEnbNegReg <= encEnb_neg;
        end
      end
    end



  assign encEnbTmp = encEnbNegReg & encEnable;



  always @(posedge clk)
    begin : encenb_tmp_register_process
      if (reset_x == 1'b1) begin
        encenb_tmp_register_reg <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          encenb_tmp_register_reg[0] <= encEnbTmp;
          encenb_tmp_register_reg[32'sd4:32'sd1] <= encenb_tmp_register_reg[32'sd3:32'sd0];
        end
      end
    end

  assign encEnbTmp1 = encenb_tmp_register_reg[4];



  assign wrEnb = layerDoneReg | encEnbTmp1;



  always @(posedge clk)
    begin : wrenb_register_process
      if (reset_x == 1'b1) begin
        wrEnbReg <= 1'b0;
      end
      else begin
        if (enb) begin
          wrEnbReg <= wrEnb;
        end
      end
    end



  assign switch_compare_1_1 = wrEnbReg > 1'b0;



  always @(posedge clk)
    begin : const_register_process
      if (reset_x == 1'b1) begin
        const1Reg <= 1'b0;
      end
      else begin
        if (enb) begin
          const1Reg <= const1;
        end
      end
    end



  assign shiftData_1 = shiftData[1];

  assign shiftData_2 = shiftData[2];

  assign shiftData_3 = shiftData[3];

  assign shiftData_4 = shiftData[4];

  assign shiftData_5 = shiftData[5];

  assign shiftData_6 = shiftData[6];

  assign shiftData_7 = shiftData[7];

  assign shiftData_8 = shiftData[8];

  assign shiftData_9 = shiftData[9];

  assign shiftData_10 = shiftData[10];

  assign shiftData_11 = shiftData[11];

  assign shiftData_12 = shiftData[12];

  assign shiftData_13 = shiftData[13];

  assign switchData_13 = switchData[13];

  assign shiftData_13_1 = shiftData_13 ^ switchData_13;



  assign switchData_12 = switchData[12];

  assign shiftData_12_1 = shiftData_12 ^ switchData_12;



  assign switchData_11 = switchData[11];

  assign shiftData_11_1 = shiftData_11 ^ switchData_11;



  assign switchData_10 = switchData[10];

  assign shiftData_10_1 = shiftData_10 ^ switchData_10;



  assign switchData_9 = switchData[9];

  assign shiftData_9_1 = shiftData_9 ^ switchData_9;



  assign switchData_8 = switchData[8];

  assign shiftData_8_1 = shiftData_8 ^ switchData_8;



  assign switchData_7 = switchData[7];

  assign shiftData_7_1 = shiftData_7 ^ switchData_7;



  assign switchData_6 = switchData[6];

  assign shiftData_6_1 = shiftData_6 ^ switchData_6;



  assign switchData_5 = switchData[5];

  assign shiftData_5_1 = shiftData_5 ^ switchData_5;



  assign switchData_4 = switchData[4];

  assign shiftData_4_1 = shiftData_4 ^ switchData_4;



  assign switchData_3 = switchData[3];

  assign shiftData_3_1 = shiftData_3 ^ switchData_3;



  assign switchData_2 = switchData[2];

  assign shiftData_2_1 = shiftData_2 ^ switchData_2;



  assign switchData_1 = switchData[1];

  assign shiftData_1_1 = shiftData_1 ^ switchData_1;



  always @(posedge clk)
    begin : c_2_process
      if (reset_x == 1'b1) begin
        alpha_switch_delay <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          if (reset == 1'b1) begin
            alpha_switch_delay <= {14{1'b0}};
          end
          else begin
            if (const1Reg) begin
              alpha_switch_delay <= xorData;
            end
          end
        end
      end
    end

  assign xorDataReg = (reset == 1'b1 ? {14{1'b0}} :
              alpha_switch_delay);



  assign switchData = (switch_compare_1_1 == 1'b0 ? xorDataReg :
              zeroData);



  assign switchData_0 = switchData[0];

  assign shiftData_0_1 = shiftData_0 ^ switchData_0;



  assign xorData[0] = shiftData_0_1;
  assign xorData[1] = shiftData_1_1;
  assign xorData[2] = shiftData_2_1;
  assign xorData[3] = shiftData_3_1;
  assign xorData[4] = shiftData_4_1;
  assign xorData[5] = shiftData_5_1;
  assign xorData[6] = shiftData_6_1;
  assign xorData[7] = shiftData_7_1;
  assign xorData[8] = shiftData_8_1;
  assign xorData[9] = shiftData_9_1;
  assign xorData[10] = shiftData_10_1;
  assign xorData[11] = shiftData_11_1;
  assign xorData[12] = shiftData_12_1;
  assign xorData[13] = shiftData_13_1;

  always @(posedge clk)
    begin : wrdata_register_process
      if (reset_x == 1'b1) begin
        wrData <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          wrData <= xorData;
        end
      end
    end



  always @(posedge clk)
    begin : wraddr_register_process
      if (reset_x == 1'b1) begin
        for(wraddr_register_t_1 = 32'sd0; wraddr_register_t_1 <= 32'sd5; wraddr_register_t_1 = wraddr_register_t_1 + 32'sd1) begin
          wraddr_register_reg[wraddr_register_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(wraddr_register_t_0_1 = 32'sd0; wraddr_register_t_0_1 <= 32'sd5; wraddr_register_t_0_1 = wraddr_register_t_0_1 + 32'sd1) begin
            wraddr_register_reg[wraddr_register_t_0_1] <= wraddr_register_reg_next[wraddr_register_t_0_1];
          end
        end
      end
    end

  always @* begin
    wrAddr = wraddr_register_reg[5];
    wraddr_register_reg_next[0] = countLayer;

    for(wraddr_register_t_0_0 = 32'sd0; wraddr_register_t_0_0 <= 32'sd4; wraddr_register_t_0_0 = wraddr_register_t_0_0 + 32'sd1) begin
      wraddr_register_reg_next[wraddr_register_t_0_0 + 32'sd1] = wraddr_register_reg[wraddr_register_t_0_0];
    end

  end



  always @(posedge clk)
    begin : rdaddr_register_process
      if (reset_x == 1'b1) begin
        for(rdaddr_register_t_1 = 32'sd0; rdaddr_register_t_1 <= 32'sd4; rdaddr_register_t_1 = rdaddr_register_t_1 + 32'sd1) begin
          rdaddr_register_reg[rdaddr_register_t_1] <= 4'b0000;
        end
      end
      else begin
        if (enb) begin
          for(rdaddr_register_t_0_1 = 32'sd0; rdaddr_register_t_0_1 <= 32'sd4; rdaddr_register_t_0_1 = rdaddr_register_t_0_1 + 32'sd1) begin
            rdaddr_register_reg[rdaddr_register_t_0_1] <= rdaddr_register_reg_next[rdaddr_register_t_0_1];
          end
        end
      end
    end

  always @* begin
    rdAddrReg = rdaddr_register_reg[4];
    rdaddr_register_reg_next[0] = rdAddr;

    for(rdaddr_register_t_0_0 = 32'sd0; rdaddr_register_t_0_0 <= 32'sd3; rdaddr_register_t_0_0 = rdaddr_register_t_0_0 + 32'sd1) begin
      rdaddr_register_reg_next[rdaddr_register_t_0_0 + 32'sd1] = rdaddr_register_reg[rdaddr_register_t_0_0];
    end

  end



  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank0 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[0]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1)  // ufix1
                                                                            );

  assign alpha_0 = pri_rd_out_1;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank1 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[1]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_1)  // ufix1
                                                                            );

  assign alpha_1 = pri_rd_out_1_1;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank2 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[2]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_2)  // ufix1
                                                                            );

  assign alpha_2 = pri_rd_out_1_2;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank3 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[3]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_3)  // ufix1
                                                                            );

  assign alpha_3 = pri_rd_out_1_3;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank4 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[4]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_4)  // ufix1
                                                                            );

  assign alpha_4 = pri_rd_out_1_4;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank5 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[5]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_5)  // ufix1
                                                                            );

  assign alpha_5 = pri_rd_out_1_5;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank6 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[6]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_6)  // ufix1
                                                                            );

  assign alpha_6 = pri_rd_out_1_6;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank7 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[7]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_7)  // ufix1
                                                                            );

  assign alpha_7 = pri_rd_out_1_7;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank8 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[8]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_8)  // ufix1
                                                                            );

  assign alpha_8 = pri_rd_out_1_8;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank9 (.clk(clk),
                                                                            .enb(enb),
                                                                            .wr_din(wrData[9]),  // ufix1
                                                                            .wr_addr(wrAddr),
                                                                            .wr_en(wrEnbReg),  // ufix1
                                                                            .rd_addr(rdAddrReg),
                                                                            .dout(pri_rd_out_1_9)  // ufix1
                                                                            );

  assign alpha_9 = pri_rd_out_1_9;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank10 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[10]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_10)  // ufix1
                                                                             );

  assign alpha_10 = pri_rd_out_1_10;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank11 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[11]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_11)  // ufix1
                                                                             );

  assign alpha_11 = pri_rd_out_1_11;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank12 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[12]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_12)  // ufix1
                                                                             );

  assign alpha_12 = pri_rd_out_1_12;

  tx_125_src_SimpleDualPortRAM_singlebit_block #(.AddrWidth(4),
                                                 .DataWidth(1)
                                                 )
                                               u_Alpha_RAM_singlebit_bank13 (.clk(clk),
                                                                             .enb(enb),
                                                                             .wr_din(wrData[13]),  // ufix1
                                                                             .wr_addr(wrAddr),
                                                                             .wr_en(wrEnbReg),  // ufix1
                                                                             .rd_addr(rdAddrReg),
                                                                             .dout(pri_rd_out_1_13)  // ufix1
                                                                             );

  assign alpha_13 = pri_rd_out_1_13;

  always @(posedge clk)
    begin : alphavalid_register_process
      if (reset_x == 1'b1) begin
        alphavalid_register_reg <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          alphavalid_register_reg[0] <= aValid;
          alphavalid_register_reg[32'sd4:32'sd1] <= alphavalid_register_reg[32'sd3:32'sd0];
        end
      end
    end

  assign alphaValid = alphavalid_register_reg[4];



  always @(posedge clk)
    begin : alphaaddr_register_process
      if (reset_x == 1'b1) begin
        alphaAddr_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          alphaAddr_1 <= rdAddrReg;
        end
      end
    end



  assign Column_LUT_1[0] = 5'b00100;
  assign Column_LUT_1[1] = 5'b00010;
  assign Column_LUT_1[2] = 5'b00010;
  assign Column_LUT_1[3] = 5'b00001;
  assign Column_LUT_1[4] = 5'b00100;
  assign Column_LUT_1[5] = 5'b00010;
  assign Column_LUT_1[6] = 5'b00100;
  assign Column_LUT_1[7] = 5'b00100;
  assign Column_LUT_1[8] = 5'b00001;
  assign Column_LUT_1[9] = 5'b00010;
  assign Column_LUT_1[10] = 5'b00100;
  assign Column_LUT_1[11] = 5'b00001;
  assign Column_LUT_1[12] = 5'b00111;
  assign Column_LUT_1[13] = 5'b00110;
  assign Column_LUT_1[14] = 5'b00011;
  assign Column_LUT_1[15] = 5'b00100;
  assign Column_LUT_1[16] = 5'b00101;
  assign Column_LUT_1[17] = 5'b00011;
  assign Column_LUT_1[18] = 5'b00101;
  assign Column_LUT_1[19] = 5'b01000;
  assign Column_LUT_1[20] = 5'b00010;
  assign Column_LUT_1[21] = 5'b00101;
  assign Column_LUT_1[22] = 5'b00111;
  assign Column_LUT_1[23] = 5'b00010;
  assign Column_LUT_1[24] = 5'b01000;
  assign Column_LUT_1[25] = 5'b01000;
  assign Column_LUT_1[26] = 5'b00110;
  assign Column_LUT_1[27] = 5'b00111;
  assign Column_LUT_1[28] = 5'b01011;
  assign Column_LUT_1[29] = 5'b00110;
  assign Column_LUT_1[30] = 5'b01010;
  assign Column_LUT_1[31] = 5'b01011;
  assign Column_LUT_1[32] = 5'b00011;
  assign Column_LUT_1[33] = 5'b00110;
  assign Column_LUT_1[34] = 5'b01010;
  assign Column_LUT_1[35] = 5'b00110;
  assign Column_LUT_1[36] = 5'b01011;
  assign Column_LUT_1[37] = 5'b01001;
  assign Column_LUT_1[38] = 5'b01001;
  assign Column_LUT_1[39] = 5'b01011;
  assign Column_LUT_1[40] = 5'b01100;
  assign Column_LUT_1[41] = 5'b01001;
  assign Column_LUT_1[42] = 5'b01011;
  assign Column_LUT_1[43] = 5'b01100;
  assign Column_LUT_1[44] = 5'b00110;
  assign Column_LUT_1[45] = 5'b01001;
  assign Column_LUT_1[46] = 5'b01011;
  assign Column_LUT_1[47] = 5'b01001;
  assign Column_LUT_1[48] = 5'b01101;
  assign Column_LUT_1[49] = 5'b01100;
  assign Column_LUT_1[50] = 5'b01010;
  assign Column_LUT_1[51] = 5'b10000;
  assign Column_LUT_1[52] = 5'b10001;
  assign Column_LUT_1[53] = 5'b10010;
  assign Column_LUT_1[54] = 5'b10011;
  assign Column_LUT_1[55] = 5'b10100;
  assign Column_LUT_1[56] = 5'b01001;
  assign Column_LUT_1[57] = 5'b10110;
  assign Column_LUT_1[58] = 5'b01101;
  assign Column_LUT_1[59] = 5'b01101;
  assign Column_LUT_1[60] = 5'b01110;
  assign Column_LUT_1[61] = 5'b01110;
  assign Column_LUT_1[62] = 5'b01111;
  assign Column_LUT_1[63] = 5'b10001;
  assign Column_LUT_1[64] = 5'b10010;
  assign Column_LUT_1[65] = 5'b10011;
  assign Column_LUT_1[66] = 5'b10100;
  assign Column_LUT_1[67] = 5'b10101;
  assign Column_LUT_1[68] = 5'b10101;
  assign Column_LUT_1[69] = 5'b10111;
  assign Column_LUT_1[70] = 5'b10111;
  assign Column_LUT_1[71] = 5'b11000;
  assign Column_LUT_1[72] = 5'b00000;
  assign Column_LUT_1[73] = 5'b01111;
  assign Column_LUT_1[74] = 5'b10000;
  assign Column_LUT_1[75] = 5'b00000;
  assign Column_LUT_1[76] = 5'b00000;
  assign Column_LUT_1[77] = 5'b00000;
  assign Column_LUT_1[78] = 5'b00000;
  assign Column_LUT_1[79] = 5'b00000;
  assign Column_LUT_1[80] = 5'b10110;
  assign Column_LUT_1[81] = 5'b00000;
  assign Column_LUT_1[82] = 5'b11000;
  assign Column_LUT_1[83] = 5'b00000;
  assign Column_LUT_2 = {1'b0, yIdx};
  assign Column_LUT_mul_temp = Column_LUT_2 * 32'sd12;
  assign cVal = Column_LUT_1[$signed({1'b0, xIdx}) + Column_LUT_mul_temp];



  always @(posedge clk)
    begin : column_value_process
      if (reset_x == 1'b1) begin
        columnVal_1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          columnVal_1 <= cVal;
        end
      end
    end



  assign shiftData_0_2 = shiftData[0];

  assign shiftData_1_2 = shiftData[1];

  assign shiftData_2_2 = shiftData[2];

  assign shiftData_3_2 = shiftData[3];

  assign shiftData_4_2 = shiftData[4];

  assign shiftData_5_2 = shiftData[5];

  assign shiftData_6_2 = shiftData[6];

  assign shiftData_7_2 = shiftData[7];

  assign shiftData_8_2 = shiftData[8];

  assign shiftData_9_2 = shiftData[9];

  assign shiftData_10_2 = shiftData[10];

  assign shiftData_11_2 = shiftData[11];

  assign shiftData_12_2 = shiftData[12];

  assign shiftData_13_2 = shiftData[13];

  assign xorDataParityReg_13 = xorDataParityReg[13];

  assign shiftData_13_3 = shiftData_13_2 ^ xorDataParityReg_13;



  assign xorDataParityReg_12 = xorDataParityReg[12];

  assign shiftData_12_3 = shiftData_12_2 ^ xorDataParityReg_12;



  assign xorDataParityReg_11 = xorDataParityReg[11];

  assign shiftData_11_3 = shiftData_11_2 ^ xorDataParityReg_11;



  assign xorDataParityReg_10 = xorDataParityReg[10];

  assign shiftData_10_3 = shiftData_10_2 ^ xorDataParityReg_10;



  assign xorDataParityReg_9 = xorDataParityReg[9];

  assign shiftData_9_3 = shiftData_9_2 ^ xorDataParityReg_9;



  assign xorDataParityReg_8 = xorDataParityReg[8];

  assign shiftData_8_3 = shiftData_8_2 ^ xorDataParityReg_8;



  assign xorDataParityReg_7 = xorDataParityReg[7];

  assign shiftData_7_3 = shiftData_7_2 ^ xorDataParityReg_7;



  assign xorDataParityReg_6 = xorDataParityReg[6];

  assign shiftData_6_3 = shiftData_6_2 ^ xorDataParityReg_6;



  assign xorDataParityReg_5 = xorDataParityReg[5];

  assign shiftData_5_3 = shiftData_5_2 ^ xorDataParityReg_5;



  assign xorDataParityReg_4 = xorDataParityReg[4];

  assign shiftData_4_3 = shiftData_4_2 ^ xorDataParityReg_4;



  assign xorDataParityReg_3 = xorDataParityReg[3];

  assign shiftData_3_3 = shiftData_3_2 ^ xorDataParityReg_3;



  assign xorDataParityReg_2 = xorDataParityReg[2];

  assign shiftData_2_3 = shiftData_2_2 ^ xorDataParityReg_2;



  assign xorDataParityReg_1 = xorDataParityReg[1];

  assign shiftData_1_3 = shiftData_1_2 ^ xorDataParityReg_1;



  always @(posedge clk)
    begin : c_3_process
      if (reset_x == 1'b1) begin
        alpha_switch_delay_1 <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          if (reset == 1'b1) begin
            alpha_switch_delay_1 <= {14{1'b0}};
          end
          else begin
            if (const1Reg) begin
              alpha_switch_delay_1 <= xorDataParity1;
            end
          end
        end
      end
    end

  assign xorDataParityReg = (reset == 1'b1 ? {14{1'b0}} :
              alpha_switch_delay_1);



  assign xorDataParityReg_0 = xorDataParityReg[0];

  assign shiftData_0_3 = shiftData_0_2 ^ xorDataParityReg_0;



  assign xorDataParity1[0] = shiftData_0_3;
  assign xorDataParity1[1] = shiftData_1_3;
  assign xorDataParity1[2] = shiftData_2_3;
  assign xorDataParity1[3] = shiftData_3_3;
  assign xorDataParity1[4] = shiftData_4_3;
  assign xorDataParity1[5] = shiftData_5_3;
  assign xorDataParity1[6] = shiftData_6_3;
  assign xorDataParity1[7] = shiftData_7_3;
  assign xorDataParity1[8] = shiftData_8_3;
  assign xorDataParity1[9] = shiftData_9_3;
  assign xorDataParity1[10] = shiftData_10_3;
  assign xorDataParity1[11] = shiftData_11_3;
  assign xorDataParity1[12] = shiftData_12_3;
  assign xorDataParity1[13] = shiftData_13_3;

  always @(posedge clk)
    begin : first_parity_value_process
      if (reset_x == 1'b1) begin
        parity1 <= {14{1'b0}};
      end
      else begin
        if (enb) begin
          parity1 <= xorDataParity1;
        end
      end
    end



  assign parity1_0 = parity1[0];

  assign parity1_1 = parity1[1];

  assign parity1_2 = parity1[2];

  assign parity1_3 = parity1[3];

  assign parity1_4 = parity1[4];

  assign parity1_5 = parity1[5];

  assign parity1_6 = parity1[6];

  assign parity1_7 = parity1[7];

  assign parity1_8 = parity1[8];

  assign parity1_9 = parity1[9];

  assign parity1_10 = parity1[10];

  assign parity1_11 = parity1[11];

  assign parity1_12 = parity1[12];

  assign parity1_13 = parity1[13];

  assign alphaAddr = alphaAddr_1;

  assign columnVal = columnVal_1;

endmodule  // tx_125_src_Calculate_Alpha

