// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_Calculate_Parity_block.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_Calculate_Parity_block
// Source Path: HDLTx/full_tx/payload_full/reduced_ldpc/Hc_12S-B80/Calculate Parity
// Hierarchy Level: 4
// Model version: 4.114
// 
// Calculate Parity
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_Calculate_Parity_block
          (clk,
           reset_x,
           enb,
           reset,
           alpha_0,
           alpha_1,
           alpha_2,
           alpha_3,
           alpha_4,
           alpha_5,
           alpha_6,
           alpha_7,
           alpha_8,
           alpha_9,
           alpha_10,
           alpha_11,
           alpha_12,
           alpha_13,
           alpha_14,
           alpha_15,
           alpha_16,
           alpha_17,
           alpha_18,
           alpha_19,
           alpha_20,
           alpha_21,
           alpha_22,
           alpha_23,
           alpha_24,
           alpha_25,
           alpha_26,
           alpha_27,
           alpha_28,
           alpha_29,
           alpha_30,
           alpha_31,
           alpha_32,
           alpha_33,
           alpha_34,
           alpha_35,
           alpha_36,
           alpha_37,
           alpha_38,
           alpha_39,
           alpha_40,
           alpha_41,
           alpha_42,
           alpha_43,
           alpha_44,
           alpha_45,
           alpha_46,
           alpha_47,
           alpha_48,
           alpha_49,
           alpha_50,
           alpha_51,
           alpha_52,
           alpha_53,
           alpha_54,
           alpha_55,
           alpha_56,
           alpha_57,
           alpha_58,
           alpha_59,
           alpha_60,
           alpha_61,
           alpha_62,
           alpha_63,
           alpha_64,
           alpha_65,
           alpha_66,
           alpha_67,
           alpha_68,
           alpha_69,
           alpha_70,
           alpha_71,
           alpha_72,
           alpha_73,
           alpha_74,
           alpha_75,
           alpha_76,
           alpha_77,
           alpha_78,
           alpha_79,
           alphaValid,
           alphaAddr,
           parity1_0,
           parity1_1,
           parity1_2,
           parity1_3,
           parity1_4,
           parity1_5,
           parity1_6,
           parity1_7,
           parity1_8,
           parity1_9,
           parity1_10,
           parity1_11,
           parity1_12,
           parity1_13,
           parity1_14,
           parity1_15,
           parity1_16,
           parity1_17,
           parity1_18,
           parity1_19,
           parity1_20,
           parity1_21,
           parity1_22,
           parity1_23,
           parity1_24,
           parity1_25,
           parity1_26,
           parity1_27,
           parity1_28,
           parity1_29,
           parity1_30,
           parity1_31,
           parity1_32,
           parity1_33,
           parity1_34,
           parity1_35,
           parity1_36,
           parity1_37,
           parity1_38,
           parity1_39,
           parity1_40,
           parity1_41,
           parity1_42,
           parity1_43,
           parity1_44,
           parity1_45,
           parity1_46,
           parity1_47,
           parity1_48,
           parity1_49,
           parity1_50,
           parity1_51,
           parity1_52,
           parity1_53,
           parity1_54,
           parity1_55,
           parity1_56,
           parity1_57,
           parity1_58,
           parity1_59,
           parity1_60,
           parity1_61,
           parity1_62,
           parity1_63,
           parity1_64,
           parity1_65,
           parity1_66,
           parity1_67,
           parity1_68,
           parity1_69,
           parity1_70,
           parity1_71,
           parity1_72,
           parity1_73,
           parity1_74,
           parity1_75,
           parity1_76,
           parity1_77,
           parity1_78,
           parity1_79,
           parityOut_0,
           parityOut_1,
           parityOut_2,
           parityOut_3,
           parityOut_4,
           parityOut_5,
           parityOut_6,
           parityOut_7,
           parityOut_8,
           parityOut_9,
           parityOut_10,
           parityOut_11,
           parityOut_12,
           parityOut_13,
           parityOut_14,
           parityOut_15,
           parityOut_16,
           parityOut_17,
           parityOut_18,
           parityOut_19,
           parityOut_20,
           parityOut_21,
           parityOut_22,
           parityOut_23,
           parityOut_24,
           parityOut_25,
           parityOut_26,
           parityOut_27,
           parityOut_28,
           parityOut_29,
           parityOut_30,
           parityOut_31,
           parityOut_32,
           parityOut_33,
           parityOut_34,
           parityOut_35,
           parityOut_36,
           parityOut_37,
           parityOut_38,
           parityOut_39,
           parityOut_40,
           parityOut_41,
           parityOut_42,
           parityOut_43,
           parityOut_44,
           parityOut_45,
           parityOut_46,
           parityOut_47,
           parityOut_48,
           parityOut_49,
           parityOut_50,
           parityOut_51,
           parityOut_52,
           parityOut_53,
           parityOut_54,
           parityOut_55,
           parityOut_56,
           parityOut_57,
           parityOut_58,
           parityOut_59,
           parityOut_60,
           parityOut_61,
           parityOut_62,
           parityOut_63,
           parityOut_64,
           parityOut_65,
           parityOut_66,
           parityOut_67,
           parityOut_68,
           parityOut_69,
           parityOut_70,
           parityOut_71,
           parityOut_72,
           parityOut_73,
           parityOut_74,
           parityOut_75,
           parityOut_76,
           parityOut_77,
           parityOut_78,
           parityOut_79,
           parityValid,
           parityAddr);


  input   clk;
  input   reset_x;
  input   enb;
  input   reset;  // ufix1
  input   alpha_0;  // ufix1
  input   alpha_1;  // ufix1
  input   alpha_2;  // ufix1
  input   alpha_3;  // ufix1
  input   alpha_4;  // ufix1
  input   alpha_5;  // ufix1
  input   alpha_6;  // ufix1
  input   alpha_7;  // ufix1
  input   alpha_8;  // ufix1
  input   alpha_9;  // ufix1
  input   alpha_10;  // ufix1
  input   alpha_11;  // ufix1
  input   alpha_12;  // ufix1
  input   alpha_13;  // ufix1
  input   alpha_14;  // ufix1
  input   alpha_15;  // ufix1
  input   alpha_16;  // ufix1
  input   alpha_17;  // ufix1
  input   alpha_18;  // ufix1
  input   alpha_19;  // ufix1
  input   alpha_20;  // ufix1
  input   alpha_21;  // ufix1
  input   alpha_22;  // ufix1
  input   alpha_23;  // ufix1
  input   alpha_24;  // ufix1
  input   alpha_25;  // ufix1
  input   alpha_26;  // ufix1
  input   alpha_27;  // ufix1
  input   alpha_28;  // ufix1
  input   alpha_29;  // ufix1
  input   alpha_30;  // ufix1
  input   alpha_31;  // ufix1
  input   alpha_32;  // ufix1
  input   alpha_33;  // ufix1
  input   alpha_34;  // ufix1
  input   alpha_35;  // ufix1
  input   alpha_36;  // ufix1
  input   alpha_37;  // ufix1
  input   alpha_38;  // ufix1
  input   alpha_39;  // ufix1
  input   alpha_40;  // ufix1
  input   alpha_41;  // ufix1
  input   alpha_42;  // ufix1
  input   alpha_43;  // ufix1
  input   alpha_44;  // ufix1
  input   alpha_45;  // ufix1
  input   alpha_46;  // ufix1
  input   alpha_47;  // ufix1
  input   alpha_48;  // ufix1
  input   alpha_49;  // ufix1
  input   alpha_50;  // ufix1
  input   alpha_51;  // ufix1
  input   alpha_52;  // ufix1
  input   alpha_53;  // ufix1
  input   alpha_54;  // ufix1
  input   alpha_55;  // ufix1
  input   alpha_56;  // ufix1
  input   alpha_57;  // ufix1
  input   alpha_58;  // ufix1
  input   alpha_59;  // ufix1
  input   alpha_60;  // ufix1
  input   alpha_61;  // ufix1
  input   alpha_62;  // ufix1
  input   alpha_63;  // ufix1
  input   alpha_64;  // ufix1
  input   alpha_65;  // ufix1
  input   alpha_66;  // ufix1
  input   alpha_67;  // ufix1
  input   alpha_68;  // ufix1
  input   alpha_69;  // ufix1
  input   alpha_70;  // ufix1
  input   alpha_71;  // ufix1
  input   alpha_72;  // ufix1
  input   alpha_73;  // ufix1
  input   alpha_74;  // ufix1
  input   alpha_75;  // ufix1
  input   alpha_76;  // ufix1
  input   alpha_77;  // ufix1
  input   alpha_78;  // ufix1
  input   alpha_79;  // ufix1
  input   alphaValid;  // ufix1
  input   [3:0] alphaAddr;  // ufix4
  input   parity1_0;  // ufix1
  input   parity1_1;  // ufix1
  input   parity1_2;  // ufix1
  input   parity1_3;  // ufix1
  input   parity1_4;  // ufix1
  input   parity1_5;  // ufix1
  input   parity1_6;  // ufix1
  input   parity1_7;  // ufix1
  input   parity1_8;  // ufix1
  input   parity1_9;  // ufix1
  input   parity1_10;  // ufix1
  input   parity1_11;  // ufix1
  input   parity1_12;  // ufix1
  input   parity1_13;  // ufix1
  input   parity1_14;  // ufix1
  input   parity1_15;  // ufix1
  input   parity1_16;  // ufix1
  input   parity1_17;  // ufix1
  input   parity1_18;  // ufix1
  input   parity1_19;  // ufix1
  input   parity1_20;  // ufix1
  input   parity1_21;  // ufix1
  input   parity1_22;  // ufix1
  input   parity1_23;  // ufix1
  input   parity1_24;  // ufix1
  input   parity1_25;  // ufix1
  input   parity1_26;  // ufix1
  input   parity1_27;  // ufix1
  input   parity1_28;  // ufix1
  input   parity1_29;  // ufix1
  input   parity1_30;  // ufix1
  input   parity1_31;  // ufix1
  input   parity1_32;  // ufix1
  input   parity1_33;  // ufix1
  input   parity1_34;  // ufix1
  input   parity1_35;  // ufix1
  input   parity1_36;  // ufix1
  input   parity1_37;  // ufix1
  input   parity1_38;  // ufix1
  input   parity1_39;  // ufix1
  input   parity1_40;  // ufix1
  input   parity1_41;  // ufix1
  input   parity1_42;  // ufix1
  input   parity1_43;  // ufix1
  input   parity1_44;  // ufix1
  input   parity1_45;  // ufix1
  input   parity1_46;  // ufix1
  input   parity1_47;  // ufix1
  input   parity1_48;  // ufix1
  input   parity1_49;  // ufix1
  input   parity1_50;  // ufix1
  input   parity1_51;  // ufix1
  input   parity1_52;  // ufix1
  input   parity1_53;  // ufix1
  input   parity1_54;  // ufix1
  input   parity1_55;  // ufix1
  input   parity1_56;  // ufix1
  input   parity1_57;  // ufix1
  input   parity1_58;  // ufix1
  input   parity1_59;  // ufix1
  input   parity1_60;  // ufix1
  input   parity1_61;  // ufix1
  input   parity1_62;  // ufix1
  input   parity1_63;  // ufix1
  input   parity1_64;  // ufix1
  input   parity1_65;  // ufix1
  input   parity1_66;  // ufix1
  input   parity1_67;  // ufix1
  input   parity1_68;  // ufix1
  input   parity1_69;  // ufix1
  input   parity1_70;  // ufix1
  input   parity1_71;  // ufix1
  input   parity1_72;  // ufix1
  input   parity1_73;  // ufix1
  input   parity1_74;  // ufix1
  input   parity1_75;  // ufix1
  input   parity1_76;  // ufix1
  input   parity1_77;  // ufix1
  input   parity1_78;  // ufix1
  input   parity1_79;  // ufix1
  output  parityOut_0;  // ufix1
  output  parityOut_1;  // ufix1
  output  parityOut_2;  // ufix1
  output  parityOut_3;  // ufix1
  output  parityOut_4;  // ufix1
  output  parityOut_5;  // ufix1
  output  parityOut_6;  // ufix1
  output  parityOut_7;  // ufix1
  output  parityOut_8;  // ufix1
  output  parityOut_9;  // ufix1
  output  parityOut_10;  // ufix1
  output  parityOut_11;  // ufix1
  output  parityOut_12;  // ufix1
  output  parityOut_13;  // ufix1
  output  parityOut_14;  // ufix1
  output  parityOut_15;  // ufix1
  output  parityOut_16;  // ufix1
  output  parityOut_17;  // ufix1
  output  parityOut_18;  // ufix1
  output  parityOut_19;  // ufix1
  output  parityOut_20;  // ufix1
  output  parityOut_21;  // ufix1
  output  parityOut_22;  // ufix1
  output  parityOut_23;  // ufix1
  output  parityOut_24;  // ufix1
  output  parityOut_25;  // ufix1
  output  parityOut_26;  // ufix1
  output  parityOut_27;  // ufix1
  output  parityOut_28;  // ufix1
  output  parityOut_29;  // ufix1
  output  parityOut_30;  // ufix1
  output  parityOut_31;  // ufix1
  output  parityOut_32;  // ufix1
  output  parityOut_33;  // ufix1
  output  parityOut_34;  // ufix1
  output  parityOut_35;  // ufix1
  output  parityOut_36;  // ufix1
  output  parityOut_37;  // ufix1
  output  parityOut_38;  // ufix1
  output  parityOut_39;  // ufix1
  output  parityOut_40;  // ufix1
  output  parityOut_41;  // ufix1
  output  parityOut_42;  // ufix1
  output  parityOut_43;  // ufix1
  output  parityOut_44;  // ufix1
  output  parityOut_45;  // ufix1
  output  parityOut_46;  // ufix1
  output  parityOut_47;  // ufix1
  output  parityOut_48;  // ufix1
  output  parityOut_49;  // ufix1
  output  parityOut_50;  // ufix1
  output  parityOut_51;  // ufix1
  output  parityOut_52;  // ufix1
  output  parityOut_53;  // ufix1
  output  parityOut_54;  // ufix1
  output  parityOut_55;  // ufix1
  output  parityOut_56;  // ufix1
  output  parityOut_57;  // ufix1
  output  parityOut_58;  // ufix1
  output  parityOut_59;  // ufix1
  output  parityOut_60;  // ufix1
  output  parityOut_61;  // ufix1
  output  parityOut_62;  // ufix1
  output  parityOut_63;  // ufix1
  output  parityOut_64;  // ufix1
  output  parityOut_65;  // ufix1
  output  parityOut_66;  // ufix1
  output  parityOut_67;  // ufix1
  output  parityOut_68;  // ufix1
  output  parityOut_69;  // ufix1
  output  parityOut_70;  // ufix1
  output  parityOut_71;  // ufix1
  output  parityOut_72;  // ufix1
  output  parityOut_73;  // ufix1
  output  parityOut_74;  // ufix1
  output  parityOut_75;  // ufix1
  output  parityOut_76;  // ufix1
  output  parityOut_77;  // ufix1
  output  parityOut_78;  // ufix1
  output  parityOut_79;  // ufix1
  output  parityValid;  // ufix1
  output  [3:0] parityAddr;  // ufix4


  wire [79:0] alpha;  // ufix1 [80]
  reg  [79:0] alphaReg;  // ufix1 [80]
  reg  alphaValidReg;  // ufix1
  reg [3:0] alphaAddrReg;  // ufix4
  wire [79:0] parity1;  // ufix1 [80]
  reg  [79:0] parity1Reg;  // ufix1 [80]
  wire [79:0] sParity;  // ufix1 [80]
  reg  [79:0] sParityReg;  // ufix1 [80]
  reg  [79:0] parityControllerDual_pOut;  // boolean [80]
  reg  parityControllerDual_pValid;
  reg [3:0] parityControllerDual_pAddr;  // ufix4
  reg  [79:0] parityControllerDual_alphaReg;  // boolean [80]
  reg  [79:0] parityControllerDual_pOut_next;  // boolean [80]
  reg  parityControllerDual_pValid_next;
  reg [3:0] parityControllerDual_pAddr_next;  // ufix4
  reg  [79:0] parityControllerDual_alphaReg_next;  // boolean [80]
  reg  [79:0] pOut;  // ufix1 [80]
  reg  pValid;  // ufix1
  reg [3:0] pAddr;  // ufix4
  reg  [79:0] parityOut;  // ufix1 [80]
  reg  parityValid_1;  // ufix1
  reg [3:0] parityAddr_1;  // ufix4
  reg signed [31:0] parityControllerDual_t_0_0;  // int32
  reg signed [31:0] parityControllerDual_t_1;  // int32
  reg signed [31:0] parityControllerDual_t_2_0;  // int32
  reg signed [31:0] parityControllerDual_t_3;  // int32
  reg signed [31:0] parityControllerDual_t_4_0;  // int32
  reg signed [31:0] parityControllerDual_t_5;  // int32
  reg signed [31:0] parityControllerDual_t_6 [0:79];  // int32 [80]
  reg  [79:0] parityControllerDual_t_7;  // boolean [80]
  reg signed [31:0] parityControllerDual_t_8 [0:79];  // int32 [80]
  reg  [79:0] parityControllerDual_t_9;  // boolean [80]
  reg signed [31:0] parityControllerDual_t_10 [0:79];  // int32 [80]
  reg signed [31:0] parityControllerDual_t_11 [0:79];  // int32 [80]


  assign alpha[0] = alpha_0;
  assign alpha[1] = alpha_1;
  assign alpha[2] = alpha_2;
  assign alpha[3] = alpha_3;
  assign alpha[4] = alpha_4;
  assign alpha[5] = alpha_5;
  assign alpha[6] = alpha_6;
  assign alpha[7] = alpha_7;
  assign alpha[8] = alpha_8;
  assign alpha[9] = alpha_9;
  assign alpha[10] = alpha_10;
  assign alpha[11] = alpha_11;
  assign alpha[12] = alpha_12;
  assign alpha[13] = alpha_13;
  assign alpha[14] = alpha_14;
  assign alpha[15] = alpha_15;
  assign alpha[16] = alpha_16;
  assign alpha[17] = alpha_17;
  assign alpha[18] = alpha_18;
  assign alpha[19] = alpha_19;
  assign alpha[20] = alpha_20;
  assign alpha[21] = alpha_21;
  assign alpha[22] = alpha_22;
  assign alpha[23] = alpha_23;
  assign alpha[24] = alpha_24;
  assign alpha[25] = alpha_25;
  assign alpha[26] = alpha_26;
  assign alpha[27] = alpha_27;
  assign alpha[28] = alpha_28;
  assign alpha[29] = alpha_29;
  assign alpha[30] = alpha_30;
  assign alpha[31] = alpha_31;
  assign alpha[32] = alpha_32;
  assign alpha[33] = alpha_33;
  assign alpha[34] = alpha_34;
  assign alpha[35] = alpha_35;
  assign alpha[36] = alpha_36;
  assign alpha[37] = alpha_37;
  assign alpha[38] = alpha_38;
  assign alpha[39] = alpha_39;
  assign alpha[40] = alpha_40;
  assign alpha[41] = alpha_41;
  assign alpha[42] = alpha_42;
  assign alpha[43] = alpha_43;
  assign alpha[44] = alpha_44;
  assign alpha[45] = alpha_45;
  assign alpha[46] = alpha_46;
  assign alpha[47] = alpha_47;
  assign alpha[48] = alpha_48;
  assign alpha[49] = alpha_49;
  assign alpha[50] = alpha_50;
  assign alpha[51] = alpha_51;
  assign alpha[52] = alpha_52;
  assign alpha[53] = alpha_53;
  assign alpha[54] = alpha_54;
  assign alpha[55] = alpha_55;
  assign alpha[56] = alpha_56;
  assign alpha[57] = alpha_57;
  assign alpha[58] = alpha_58;
  assign alpha[59] = alpha_59;
  assign alpha[60] = alpha_60;
  assign alpha[61] = alpha_61;
  assign alpha[62] = alpha_62;
  assign alpha[63] = alpha_63;
  assign alpha[64] = alpha_64;
  assign alpha[65] = alpha_65;
  assign alpha[66] = alpha_66;
  assign alpha[67] = alpha_67;
  assign alpha[68] = alpha_68;
  assign alpha[69] = alpha_69;
  assign alpha[70] = alpha_70;
  assign alpha[71] = alpha_71;
  assign alpha[72] = alpha_72;
  assign alpha[73] = alpha_73;
  assign alpha[74] = alpha_74;
  assign alpha[75] = alpha_75;
  assign alpha[76] = alpha_76;
  assign alpha[77] = alpha_77;
  assign alpha[78] = alpha_78;
  assign alpha[79] = alpha_79;

  always @(posedge clk)
    begin : data_register_process
      if (reset_x == 1'b1) begin
        alphaReg <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          alphaReg <= alpha;
        end
      end
    end



  always @(posedge clk)
    begin : valid_register_process
      if (reset_x == 1'b1) begin
        alphaValidReg <= 1'b0;
      end
      else begin
        if (enb) begin
          alphaValidReg <= alphaValid;
        end
      end
    end



  always @(posedge clk)
    begin : addr_register_process
      if (reset_x == 1'b1) begin
        alphaAddrReg <= 4'b0000;
      end
      else begin
        if (enb) begin
          alphaAddrReg <= alphaAddr;
        end
      end
    end



  assign parity1[0] = parity1_0;
  assign parity1[1] = parity1_1;
  assign parity1[2] = parity1_2;
  assign parity1[3] = parity1_3;
  assign parity1[4] = parity1_4;
  assign parity1[5] = parity1_5;
  assign parity1[6] = parity1_6;
  assign parity1[7] = parity1_7;
  assign parity1[8] = parity1_8;
  assign parity1[9] = parity1_9;
  assign parity1[10] = parity1_10;
  assign parity1[11] = parity1_11;
  assign parity1[12] = parity1_12;
  assign parity1[13] = parity1_13;
  assign parity1[14] = parity1_14;
  assign parity1[15] = parity1_15;
  assign parity1[16] = parity1_16;
  assign parity1[17] = parity1_17;
  assign parity1[18] = parity1_18;
  assign parity1[19] = parity1_19;
  assign parity1[20] = parity1_20;
  assign parity1[21] = parity1_21;
  assign parity1[22] = parity1_22;
  assign parity1[23] = parity1_23;
  assign parity1[24] = parity1_24;
  assign parity1[25] = parity1_25;
  assign parity1[26] = parity1_26;
  assign parity1[27] = parity1_27;
  assign parity1[28] = parity1_28;
  assign parity1[29] = parity1_29;
  assign parity1[30] = parity1_30;
  assign parity1[31] = parity1_31;
  assign parity1[32] = parity1_32;
  assign parity1[33] = parity1_33;
  assign parity1[34] = parity1_34;
  assign parity1[35] = parity1_35;
  assign parity1[36] = parity1_36;
  assign parity1[37] = parity1_37;
  assign parity1[38] = parity1_38;
  assign parity1[39] = parity1_39;
  assign parity1[40] = parity1_40;
  assign parity1[41] = parity1_41;
  assign parity1[42] = parity1_42;
  assign parity1[43] = parity1_43;
  assign parity1[44] = parity1_44;
  assign parity1[45] = parity1_45;
  assign parity1[46] = parity1_46;
  assign parity1[47] = parity1_47;
  assign parity1[48] = parity1_48;
  assign parity1[49] = parity1_49;
  assign parity1[50] = parity1_50;
  assign parity1[51] = parity1_51;
  assign parity1[52] = parity1_52;
  assign parity1[53] = parity1_53;
  assign parity1[54] = parity1_54;
  assign parity1[55] = parity1_55;
  assign parity1[56] = parity1_56;
  assign parity1[57] = parity1_57;
  assign parity1[58] = parity1_58;
  assign parity1[59] = parity1_59;
  assign parity1[60] = parity1_60;
  assign parity1[61] = parity1_61;
  assign parity1[62] = parity1_62;
  assign parity1[63] = parity1_63;
  assign parity1[64] = parity1_64;
  assign parity1[65] = parity1_65;
  assign parity1[66] = parity1_66;
  assign parity1[67] = parity1_67;
  assign parity1[68] = parity1_68;
  assign parity1[69] = parity1_69;
  assign parity1[70] = parity1_70;
  assign parity1[71] = parity1_71;
  assign parity1[72] = parity1_72;
  assign parity1[73] = parity1_73;
  assign parity1[74] = parity1_74;
  assign parity1[75] = parity1_75;
  assign parity1[76] = parity1_76;
  assign parity1[77] = parity1_77;
  assign parity1[78] = parity1_78;
  assign parity1[79] = parity1_79;

  always @(posedge clk)
    begin : parity_process
      if (reset_x == 1'b1) begin
        parity1Reg <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          parity1Reg <= parity1;
        end
      end
    end



  assign sParity[0] = parity1_10;
  assign sParity[1] = parity1_11;
  assign sParity[2] = parity1_12;
  assign sParity[3] = parity1_13;
  assign sParity[4] = parity1_14;
  assign sParity[5] = parity1_15;
  assign sParity[6] = parity1_16;
  assign sParity[7] = parity1_17;
  assign sParity[8] = parity1_18;
  assign sParity[9] = parity1_19;
  assign sParity[10] = parity1_20;
  assign sParity[11] = parity1_21;
  assign sParity[12] = parity1_22;
  assign sParity[13] = parity1_23;
  assign sParity[14] = parity1_24;
  assign sParity[15] = parity1_25;
  assign sParity[16] = parity1_26;
  assign sParity[17] = parity1_27;
  assign sParity[18] = parity1_28;
  assign sParity[19] = parity1_29;
  assign sParity[20] = parity1_30;
  assign sParity[21] = parity1_31;
  assign sParity[22] = parity1_32;
  assign sParity[23] = parity1_33;
  assign sParity[24] = parity1_34;
  assign sParity[25] = parity1_35;
  assign sParity[26] = parity1_36;
  assign sParity[27] = parity1_37;
  assign sParity[28] = parity1_38;
  assign sParity[29] = parity1_39;
  assign sParity[30] = parity1_40;
  assign sParity[31] = parity1_41;
  assign sParity[32] = parity1_42;
  assign sParity[33] = parity1_43;
  assign sParity[34] = parity1_44;
  assign sParity[35] = parity1_45;
  assign sParity[36] = parity1_46;
  assign sParity[37] = parity1_47;
  assign sParity[38] = parity1_48;
  assign sParity[39] = parity1_49;
  assign sParity[40] = parity1_50;
  assign sParity[41] = parity1_51;
  assign sParity[42] = parity1_52;
  assign sParity[43] = parity1_53;
  assign sParity[44] = parity1_54;
  assign sParity[45] = parity1_55;
  assign sParity[46] = parity1_56;
  assign sParity[47] = parity1_57;
  assign sParity[48] = parity1_58;
  assign sParity[49] = parity1_59;
  assign sParity[50] = parity1_60;
  assign sParity[51] = parity1_61;
  assign sParity[52] = parity1_62;
  assign sParity[53] = parity1_63;
  assign sParity[54] = parity1_64;
  assign sParity[55] = parity1_65;
  assign sParity[56] = parity1_66;
  assign sParity[57] = parity1_67;
  assign sParity[58] = parity1_68;
  assign sParity[59] = parity1_69;
  assign sParity[60] = parity1_70;
  assign sParity[61] = parity1_71;
  assign sParity[62] = parity1_72;
  assign sParity[63] = parity1_73;
  assign sParity[64] = parity1_74;
  assign sParity[65] = parity1_75;
  assign sParity[66] = parity1_76;
  assign sParity[67] = parity1_77;
  assign sParity[68] = parity1_78;
  assign sParity[69] = parity1_79;
  assign sParity[70] = parity1_0;
  assign sParity[71] = parity1_1;
  assign sParity[72] = parity1_2;
  assign sParity[73] = parity1_3;
  assign sParity[74] = parity1_4;
  assign sParity[75] = parity1_5;
  assign sParity[76] = parity1_6;
  assign sParity[77] = parity1_7;
  assign sParity[78] = parity1_8;
  assign sParity[79] = parity1_9;

  always @(posedge clk)
    begin : parity_1_process
      if (reset_x == 1'b1) begin
        sParityReg <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          sParityReg <= sParity;
        end
      end
    end



  always @(posedge clk)
    begin : parityControllerDual_process
      if (reset_x == 1'b1) begin
        parityControllerDual_pValid <= 1'b0;
        parityControllerDual_pAddr <= 4'b0001;
        parityControllerDual_pOut <= {80{1'b0}};
        parityControllerDual_alphaReg <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          parityControllerDual_pValid <= parityControllerDual_pValid_next;
          parityControllerDual_pAddr <= parityControllerDual_pAddr_next;
          parityControllerDual_pOut <= parityControllerDual_pOut_next;
          parityControllerDual_alphaReg <= parityControllerDual_alphaReg_next;
        end
      end
    end

  always @* begin
    parityControllerDual_pOut_next = parityControllerDual_pOut;
    if (reset != 1'b0) begin
      parityControllerDual_pOut_next = {80{1'b0}};
      parityControllerDual_pValid_next = 1'b0;
      parityControllerDual_pAddr_next = 4'b0001;
    end
    else if (alphaValidReg != 1'b0) begin
      parityControllerDual_pValid_next = 1'b1;
      parityControllerDual_pAddr_next = alphaAddrReg;
      if (alphaAddrReg == 4'b0001) begin
        for(parityControllerDual_t_0_0 = 32'sd0; parityControllerDual_t_0_0 <= 32'sd79; parityControllerDual_t_0_0 = parityControllerDual_t_0_0 + 32'sd1) begin
          parityControllerDual_pOut_next[parityControllerDual_t_0_0] = parity1Reg[parityControllerDual_t_0_0];
        end
      end
      else if (alphaAddrReg <= 4'b1011) begin
        if (alphaAddrReg == 4'b0010) begin
          for(parityControllerDual_t_5 = 32'sd0; parityControllerDual_t_5 <= 32'sd79; parityControllerDual_t_5 = parityControllerDual_t_5 + 32'sd1) begin
            parityControllerDual_t_9[parityControllerDual_t_5] = sParityReg[parityControllerDual_t_5] != 1'b0;
            parityControllerDual_t_10[parityControllerDual_t_5] = {31'b0, parityControllerDual_t_9[parityControllerDual_t_5]};
            parityControllerDual_t_11[parityControllerDual_t_5] = {31'b0, parityControllerDual_alphaReg[parityControllerDual_t_5]};
            parityControllerDual_pOut_next[parityControllerDual_t_5] = parityControllerDual_t_10[parityControllerDual_t_5] != parityControllerDual_t_11[parityControllerDual_t_5];
          end
        end
        else begin
          for(parityControllerDual_t_4_0 = 32'sd0; parityControllerDual_t_4_0 <= 32'sd79; parityControllerDual_t_4_0 = parityControllerDual_t_4_0 + 32'sd1) begin
            parityControllerDual_pOut_next[parityControllerDual_t_4_0] = parityControllerDual_pOut[parityControllerDual_t_4_0] ^ parityControllerDual_alphaReg[parityControllerDual_t_4_0];
          end
        end
      end
      else if (alphaAddrReg == 4'b1100) begin
        for(parityControllerDual_t_3 = 32'sd0; parityControllerDual_t_3 <= 32'sd79; parityControllerDual_t_3 = parityControllerDual_t_3 + 32'sd1) begin
          parityControllerDual_pOut_next[parityControllerDual_t_3] = (sParityReg[parityControllerDual_t_3] != 1'b0) != (alphaReg[parityControllerDual_t_3] != 1'b0);
        end
      end
      else begin
        for(parityControllerDual_t_2_0 = 32'sd0; parityControllerDual_t_2_0 <= 32'sd79; parityControllerDual_t_2_0 = parityControllerDual_t_2_0 + 32'sd1) begin
          parityControllerDual_t_6[parityControllerDual_t_2_0] = {31'b0, parityControllerDual_pOut[parityControllerDual_t_2_0]};
          parityControllerDual_t_7[parityControllerDual_t_2_0] = alphaReg[parityControllerDual_t_2_0] != 1'b0;
          parityControllerDual_t_8[parityControllerDual_t_2_0] = {31'b0, parityControllerDual_t_7[parityControllerDual_t_2_0]};
          parityControllerDual_pOut_next[parityControllerDual_t_2_0] = parityControllerDual_t_6[parityControllerDual_t_2_0] != parityControllerDual_t_8[parityControllerDual_t_2_0];
        end
      end
    end
    else begin
      parityControllerDual_pOut_next = {80{1'b0}};
      parityControllerDual_pValid_next = 1'b0;
      parityControllerDual_pAddr_next = 4'b0001;
    end

    for(parityControllerDual_t_1 = 32'sd0; parityControllerDual_t_1 <= 32'sd79; parityControllerDual_t_1 = parityControllerDual_t_1 + 32'sd1) begin
      parityControllerDual_alphaReg_next[parityControllerDual_t_1] = alphaReg[parityControllerDual_t_1];
      pOut[parityControllerDual_t_1] = parityControllerDual_pOut[parityControllerDual_t_1];
    end

    pValid = parityControllerDual_pValid;
    pAddr = parityControllerDual_pAddr;
  end



  always @(posedge clk)
    begin : parity_2_process
      if (reset_x == 1'b1) begin
        parityOut <= {80{1'b0}};
      end
      else begin
        if (enb) begin
          parityOut <= pOut;
        end
      end
    end



  assign parityOut_0 = parityOut[0];

  assign parityOut_1 = parityOut[1];

  assign parityOut_2 = parityOut[2];

  assign parityOut_3 = parityOut[3];

  assign parityOut_4 = parityOut[4];

  assign parityOut_5 = parityOut[5];

  assign parityOut_6 = parityOut[6];

  assign parityOut_7 = parityOut[7];

  assign parityOut_8 = parityOut[8];

  assign parityOut_9 = parityOut[9];

  assign parityOut_10 = parityOut[10];

  assign parityOut_11 = parityOut[11];

  assign parityOut_12 = parityOut[12];

  assign parityOut_13 = parityOut[13];

  assign parityOut_14 = parityOut[14];

  assign parityOut_15 = parityOut[15];

  assign parityOut_16 = parityOut[16];

  assign parityOut_17 = parityOut[17];

  assign parityOut_18 = parityOut[18];

  assign parityOut_19 = parityOut[19];

  assign parityOut_20 = parityOut[20];

  assign parityOut_21 = parityOut[21];

  assign parityOut_22 = parityOut[22];

  assign parityOut_23 = parityOut[23];

  assign parityOut_24 = parityOut[24];

  assign parityOut_25 = parityOut[25];

  assign parityOut_26 = parityOut[26];

  assign parityOut_27 = parityOut[27];

  assign parityOut_28 = parityOut[28];

  assign parityOut_29 = parityOut[29];

  assign parityOut_30 = parityOut[30];

  assign parityOut_31 = parityOut[31];

  assign parityOut_32 = parityOut[32];

  assign parityOut_33 = parityOut[33];

  assign parityOut_34 = parityOut[34];

  assign parityOut_35 = parityOut[35];

  assign parityOut_36 = parityOut[36];

  assign parityOut_37 = parityOut[37];

  assign parityOut_38 = parityOut[38];

  assign parityOut_39 = parityOut[39];

  assign parityOut_40 = parityOut[40];

  assign parityOut_41 = parityOut[41];

  assign parityOut_42 = parityOut[42];

  assign parityOut_43 = parityOut[43];

  assign parityOut_44 = parityOut[44];

  assign parityOut_45 = parityOut[45];

  assign parityOut_46 = parityOut[46];

  assign parityOut_47 = parityOut[47];

  assign parityOut_48 = parityOut[48];

  assign parityOut_49 = parityOut[49];

  assign parityOut_50 = parityOut[50];

  assign parityOut_51 = parityOut[51];

  assign parityOut_52 = parityOut[52];

  assign parityOut_53 = parityOut[53];

  assign parityOut_54 = parityOut[54];

  assign parityOut_55 = parityOut[55];

  assign parityOut_56 = parityOut[56];

  assign parityOut_57 = parityOut[57];

  assign parityOut_58 = parityOut[58];

  assign parityOut_59 = parityOut[59];

  assign parityOut_60 = parityOut[60];

  assign parityOut_61 = parityOut[61];

  assign parityOut_62 = parityOut[62];

  assign parityOut_63 = parityOut[63];

  assign parityOut_64 = parityOut[64];

  assign parityOut_65 = parityOut[65];

  assign parityOut_66 = parityOut[66];

  assign parityOut_67 = parityOut[67];

  assign parityOut_68 = parityOut[68];

  assign parityOut_69 = parityOut[69];

  assign parityOut_70 = parityOut[70];

  assign parityOut_71 = parityOut[71];

  assign parityOut_72 = parityOut[72];

  assign parityOut_73 = parityOut[73];

  assign parityOut_74 = parityOut[74];

  assign parityOut_75 = parityOut[75];

  assign parityOut_76 = parityOut[76];

  assign parityOut_77 = parityOut[77];

  assign parityOut_78 = parityOut[78];

  assign parityOut_79 = parityOut[79];

  always @(posedge clk)
    begin : parity_valid_process
      if (reset_x == 1'b1) begin
        parityValid_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          parityValid_1 <= pValid;
        end
      end
    end



  always @(posedge clk)
    begin : parity_addr_process
      if (reset_x == 1'b1) begin
        parityAddr_1 <= 4'b0000;
      end
      else begin
        if (enb) begin
          parityAddr_1 <= pAddr;
        end
      end
    end



  assign parityValid = parityValid_1;

  assign parityAddr = parityAddr_1;

endmodule  // tx_125_src_Calculate_Parity_block

