// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_constellation_scrambler.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_constellation_scrambler
// Source Path: HDLTx/full_tx/full_ofdm_modulator/enabled_qam_and_scrambler/constellation_scrambler
// Hierarchy Level: 3
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_constellation_scrambler
          (clk,
           reset_x,
           enb_1_2_0,
           data_in_re,
           data_in_im,
           valid_in,
           s1_in,
           s2_in,
           ready_out,
           data_out_re,
           data_out_im,
           valid_out);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   signed [15:0] data_in_re;  // sfix16_En14
  input   signed [15:0] data_in_im;  // sfix16_En14
  input   valid_in;
  input   s1_in;
  input   s2_in;
  input   ready_out;
  output  signed [15:0] data_out_re;  // sfix16_En14
  output  signed [15:0] data_out_im;  // sfix16_En14
  output  valid_out;


  wire s2;
  wire s1;
  wire enb_1_2_0_gated;
  reg signed [15:0] Delay_reg_re [0:1];  // sfix16_En14 [2]
  reg signed [15:0] Delay_reg_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] Delay_reg_next_re [0:1];  // sfix16_En14 [2]
  wire signed [15:0] Delay_reg_next_im [0:1];  // sfix16_En14 [2]
  wire signed [15:0] data_in_re_1;  // sfix16_En14
  wire signed [15:0] data_in_im_1;  // sfix16_En14
  wire signed [15:0] data_out_re_1;  // sfix16_En14
  wire signed [15:0] data_out_im_1;  // sfix16_En14
  wire enb_1_2_0_gated_1;
  reg signed [15:0] data_out_re_2;  // sfix16_En14
  reg signed [15:0] data_out_im_2;  // sfix16_En14
  wire en;
  wire enb_1_2_0_gated_2;
  reg  [1:0] Delay1_reg;  // ufix1 [2]
  wire Delay1_out1;
  wire enb_1_2_0_gated_3;
  reg  Delay3_out1;
  reg signed [31:0] Delay_t_0_0;  // int32
  reg signed [31:0] Delay_t_1;  // int32


  assign s2 = s2_in;

  assign s1 = s1_in;

  assign enb_1_2_0_gated = ready_out && enb_1_2_0;

  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        for(Delay_t_1 = 32'sd0; Delay_t_1 <= 32'sd1; Delay_t_1 = Delay_t_1 + 32'sd1) begin
          Delay_reg_re[Delay_t_1] <= 16'sb0000000000000000;
          Delay_reg_im[Delay_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0_gated) begin
          for(Delay_t_0_0 = 32'sd0; Delay_t_0_0 <= 32'sd1; Delay_t_0_0 = Delay_t_0_0 + 32'sd1) begin
            Delay_reg_re[Delay_t_0_0] <= Delay_reg_next_re[Delay_t_0_0];
            Delay_reg_im[Delay_t_0_0] <= Delay_reg_next_im[Delay_t_0_0];
          end
        end
      end
    end

  assign data_in_re_1 = Delay_reg_re[1];
  assign data_in_im_1 = Delay_reg_im[1];
  assign Delay_reg_next_re[0] = data_in_re;
  assign Delay_reg_next_im[0] = data_in_im;
  assign Delay_reg_next_re[1] = Delay_reg_re[0];
  assign Delay_reg_next_im[1] = Delay_reg_im[0];



  tx_125_src_rotate u_rotate (.s2(s2),
                              .s1(s1),
                              .data_in_re(data_in_re_1),  // sfix16_En14
                              .data_in_im(data_in_im_1),  // sfix16_En14
                              .data_out_re(data_out_re_1),  // sfix16_En14
                              .data_out_im(data_out_im_1)  // sfix16_En14
                              );

  assign enb_1_2_0_gated_1 = ready_out && enb_1_2_0;

  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        data_out_re_2 <= 16'sb0000000000000000;
        data_out_im_2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_2_0_gated_1) begin
          data_out_re_2 <= data_out_re_1;
          data_out_im_2 <= data_out_im_1;
        end
      end
    end



  assign en = valid_in;

  assign enb_1_2_0_gated_2 = ready_out && enb_1_2_0;

  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_reg <= {2{1'b0}};
      end
      else begin
        if (enb_1_2_0_gated_2) begin
          Delay1_reg[0] <= en;
          Delay1_reg[1] <= Delay1_reg[0];
        end
      end
    end

  assign Delay1_out1 = Delay1_reg[1];



  assign enb_1_2_0_gated_3 = ready_out && enb_1_2_0;

  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_3) begin
          Delay3_out1 <= Delay1_out1;
        end
      end
    end



  assign valid_out = Delay3_out1;

  assign data_out_re = data_out_re_2;

  assign data_out_im = data_out_im_2;

endmodule  // tx_125_src_constellation_scrambler

