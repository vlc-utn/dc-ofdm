// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_dsphdl_IFFT.v
// Created: 2024-09-14 22:22:21
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_dsphdl_IFFT
// Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator/OFDM Modulator/dsphdl.IFFT
// Hierarchy Level: 4
// Model version: 4.114
// 
// FFT
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_dsphdl_IFFT
          (clk,
           reset_x,
           enb_1_2_0,
           dataIn_re,
           dataIn_im,
           validIn,
           dataOut_re,
           dataOut_im,
           startOut,
           validOut);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   signed [15:0] dataIn_re;  // sfix16_En14
  input   signed [15:0] dataIn_im;  // sfix16_En14
  input   validIn;
  output  signed [15:0] dataOut_re;  // sfix16_En14
  output  signed [15:0] dataOut_im;  // sfix16_En14
  output  startOut;
  output  validOut;


  wire softReset;
  reg signed [15:0] intdelay_reg [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_1_1_re_dly;  // sfix16_En14
  reg signed [15:0] intdelay_reg_1 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_1 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_1_1_im_dly;  // sfix16_En14
  reg  [2:0] intdelay_reg_2;  // ufix1 [3]
  wire din_1_vld_dly;
  wire dinXTwdl_1_1_vld;
  wire [6:0] rd_1_Addr;  // ufix7
  wire rd_1_Enb;
  wire proc_1_enb;
  wire signed [15:0] dout_1_1_re;  // sfix16_En14
  wire signed [15:0] dout_1_1_im;  // sfix16_En14
  wire dout_1_1_vld;
  wire dinXTwdl_2_1_vld;
  wire [5:0] rd_2_Addr;  // ufix6
  wire rd_2_Enb;
  wire proc_2_enb;
  wire multiply_2_J;
  wire signed [15:0] dout_2_1_re;  // sfix16_En14
  wire signed [15:0] dout_2_1_im;  // sfix16_En14
  wire dout_2_1_vld;
  reg signed [15:0] intdelay_reg_3 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_2 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_3_1_re_dly;  // sfix16_En14
  reg signed [15:0] intdelay_reg_4 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_3 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_3_1_im_dly;  // sfix16_En14
  reg  [2:0] intdelay_reg_5;  // ufix1 [3]
  wire din_3_vld_dly;
  wire signed [15:0] twdl_3_1_re;  // sfix16_En14
  wire signed [15:0] twdl_3_1_im;  // sfix16_En14
  wire dinXTwdl_3_1_vld;
  wire [4:0] rd_3_Addr;  // ufix5
  wire rd_3_Enb;
  wire proc_3_enb;
  wire signed [15:0] dout_3_1_re;  // sfix16_En14
  wire signed [15:0] dout_3_1_im;  // sfix16_En14
  wire dout_3_1_vld;
  wire dinXTwdl_4_1_vld;
  wire [3:0] rd_4_Addr;  // ufix4
  wire rd_4_Enb;
  wire proc_4_enb;
  wire multiply_4_J;
  wire signed [15:0] dout_4_1_re;  // sfix16_En14
  wire signed [15:0] dout_4_1_im;  // sfix16_En14
  wire dout_4_1_vld;
  reg signed [15:0] intdelay_reg_6 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_4 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_5_1_re_dly;  // sfix16_En14
  reg signed [15:0] intdelay_reg_7 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_5 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_5_1_im_dly;  // sfix16_En14
  reg  [2:0] intdelay_reg_8;  // ufix1 [3]
  wire din_5_vld_dly;
  wire signed [15:0] twdl_5_1_re;  // sfix16_En14
  wire signed [15:0] twdl_5_1_im;  // sfix16_En14
  wire dinXTwdl_5_1_vld;
  wire [2:0] rd_5_Addr;  // ufix3
  wire rd_5_Enb;
  wire proc_5_enb;
  wire signed [15:0] dout_5_1_re;  // sfix16_En14
  wire signed [15:0] dout_5_1_im;  // sfix16_En14
  wire dout_5_1_vld;
  wire dinXTwdl_6_1_vld;
  wire [1:0] rd_6_Addr;  // ufix2
  wire rd_6_Enb;
  wire proc_6_enb;
  wire multiply_6_J;
  wire signed [15:0] dout_6_1_re;  // sfix16_En14
  wire signed [15:0] dout_6_1_im;  // sfix16_En14
  wire dout_6_1_vld;
  reg signed [15:0] intdelay_reg_9 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_6 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_7_1_re_dly;  // sfix16_En14
  reg signed [15:0] intdelay_reg_10 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_7 [0:2];  // sfix16_En14 [3]
  reg signed [15:0] din_7_1_im_dly;  // sfix16_En14
  reg  [2:0] intdelay_reg_11;  // ufix1 [3]
  wire din_7_vld_dly;
  wire signed [15:0] twdl_7_1_re;  // sfix16_En14
  wire signed [15:0] twdl_7_1_im;  // sfix16_En14
  wire dinXTwdl_7_1_vld;
  wire rd_7_Addr;  // ufix1
  wire rd_7_Enb;
  wire proc_7_enb;
  wire signed [15:0] dout_7_1_re;  // sfix16_En14
  wire signed [15:0] dout_7_1_im;  // sfix16_En14
  wire dout_7_1_vld;
  wire dinXTwdl_8_1_vld;
  wire rd_8_Addr;
  wire rd_8_Enb;
  wire proc_8_enb;
  wire multiply_8_J;
  wire signed [15:0] dout_8_1_re;  // sfix16_En14
  wire signed [15:0] dout_8_1_im;  // sfix16_En14
  wire dout_8_1_vld;
  wire signed [15:0] dout_re1;  // sfix16_En14
  wire signed [15:0] dout_im1;  // sfix16_En14
  wire dout_vld1;
  wire startOutS;
  reg signed [31:0] intdelay_t_0_0;  // int32
  reg signed [31:0] intdelay_t_0_1;  // int32
  reg signed [31:0] intdelay_t_1;  // int32
  reg signed [31:0] intdelay_t_0_01;  // int32
  reg signed [31:0] intdelay_t_0_02;  // int32
  reg signed [31:0] intdelay_t_0_1_1;  // int32
  reg signed [31:0] intdelay_t_1_1;  // int32
  reg signed [31:0] intdelay_t_0_03;  // int32
  reg signed [31:0] intdelay_t_0_1_2;  // int32
  reg signed [31:0] intdelay_t_1_2;  // int32
  reg signed [31:0] intdelay_t_0_04;  // int32
  reg signed [31:0] intdelay_t_0_1_3;  // int32
  reg signed [31:0] intdelay_t_1_3;  // int32
  reg signed [31:0] intdelay_t_0_05;  // int32
  reg signed [31:0] intdelay_t_0_1_4;  // int32
  reg signed [31:0] intdelay_t_1_4;  // int32
  reg signed [31:0] intdelay_t_0_06;  // int32
  reg signed [31:0] intdelay_t_0_1_5;  // int32
  reg signed [31:0] intdelay_t_1_5;  // int32
  reg signed [31:0] intdelay_t_0_07;  // int32
  reg signed [31:0] intdelay_t_0_1_6;  // int32
  reg signed [31:0] intdelay_t_1_6;  // int32


  assign softReset = 1'b0;



  always @(posedge clk)
    begin : intdelay_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg[intdelay_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
              intdelay_reg[intdelay_t_1] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd2; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
              intdelay_reg[intdelay_t_0_1] <= intdelay_reg_next[intdelay_t_0_1];
            end
          end
        end
      end
    end

  always @* begin
    din_1_1_re_dly = intdelay_reg[2];
    intdelay_reg_next[0] = dataIn_im;

    for(intdelay_t_0_0 = 32'sd0; intdelay_t_0_0 <= 32'sd1; intdelay_t_0_0 = intdelay_t_0_0 + 32'sd1) begin
      intdelay_reg_next[intdelay_t_0_0 + 32'sd1] = intdelay_reg[intdelay_t_0_0];
    end

  end



  always @(posedge clk)
    begin : intdelay_1_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg_1[intdelay_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
              intdelay_reg_1[intdelay_t_1] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd2; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
              intdelay_reg_1[intdelay_t_0_1] <= intdelay_reg_next_1[intdelay_t_0_1];
            end
          end
        end
      end
    end

  always @* begin
    din_1_1_im_dly = intdelay_reg_1[2];
    intdelay_reg_next_1[0] = dataIn_re;

    for(intdelay_t_0_01 = 32'sd0; intdelay_t_0_01 <= 32'sd1; intdelay_t_0_01 = intdelay_t_0_01 + 32'sd1) begin
      intdelay_reg_next_1[intdelay_t_0_01 + 32'sd1] = intdelay_reg_1[intdelay_t_0_01];
    end

  end



  always @(posedge clk)
    begin : intdelay_2_process
      if (reset_x == 1'b1) begin
        intdelay_reg_2 <= {3{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_2 <= {3{1'b0}};
          end
          else begin
            intdelay_reg_2[0] <= validIn;
            intdelay_reg_2[32'sd2:32'sd1] <= intdelay_reg_2[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_1_vld_dly = intdelay_reg_2[2];



  tx_125_src_RADIX22FFT_CTRL1_1 u_CTRL1_1_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld),
                                             .dinXTwdl_1_1_vld_1(dinXTwdl_1_1_vld),
                                             .rd_1_Addr(rd_1_Addr),  // ufix7
                                             .rd_1_Enb(rd_1_Enb),
                                             .proc_1_enb(proc_1_enb)
                                             );

  tx_125_src_RADIX22FFT_SDF1_1 u_SDF1_1_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .din_1_1_re_dly(din_1_1_re_dly),  // sfix16_En14
                                           .din_1_1_im_dly(din_1_1_im_dly),  // sfix16_En14
                                           .din_1_vld_dly(din_1_vld_dly),
                                           .rd_1_Addr(rd_1_Addr),  // ufix7
                                           .rd_1_Enb(rd_1_Enb),
                                           .proc_1_enb(proc_1_enb),
                                           .dout_1_1_re(dout_1_1_re),  // sfix16_En14
                                           .dout_1_1_im(dout_1_1_im),  // sfix16_En14
                                           .dout_1_1_vld(dout_1_1_vld),
                                           .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld)
                                           );

  tx_125_src_RADIX22FFT_CTRL1_2 u_CTRL2_2_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dout_1_1_vld(dout_1_1_vld),
                                             .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld),
                                             .rd_2_Addr(rd_2_Addr),  // ufix6
                                             .rd_2_Enb(rd_2_Enb),
                                             .proc_2_enb(proc_2_enb),
                                             .multiply_2_J(multiply_2_J)
                                             );

  tx_125_src_RADIX22FFT_SDF2_2 u_SDF2_2_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .dout_1_1_re(dout_1_1_re),  // sfix16_En14
                                           .dout_1_1_im(dout_1_1_im),  // sfix16_En14
                                           .dout_1_1_vld(dout_1_1_vld),
                                           .rd_2_Addr(rd_2_Addr),  // ufix6
                                           .rd_2_Enb(rd_2_Enb),
                                           .proc_2_enb(proc_2_enb),
                                           .multiply_2_J(multiply_2_J),
                                           .dout_2_1_re(dout_2_1_re),  // sfix16_En14
                                           .dout_2_1_im(dout_2_1_im),  // sfix16_En14
                                           .dout_2_1_vld(dout_2_1_vld),
                                           .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld)
                                           );

  always @(posedge clk)
    begin : intdelay_3_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd2; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
          intdelay_reg_3[intdelay_t_1_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd2; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
              intdelay_reg_3[intdelay_t_1_1] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1_1 = 32'sd0; intdelay_t_0_1_1 <= 32'sd2; intdelay_t_0_1_1 = intdelay_t_0_1_1 + 32'sd1) begin
              intdelay_reg_3[intdelay_t_0_1_1] <= intdelay_reg_next_2[intdelay_t_0_1_1];
            end
          end
        end
      end
    end

  always @* begin
    din_3_1_re_dly = intdelay_reg_3[2];
    intdelay_reg_next_2[0] = dout_2_1_re;

    for(intdelay_t_0_02 = 32'sd0; intdelay_t_0_02 <= 32'sd1; intdelay_t_0_02 = intdelay_t_0_02 + 32'sd1) begin
      intdelay_reg_next_2[intdelay_t_0_02 + 32'sd1] = intdelay_reg_3[intdelay_t_0_02];
    end

  end



  always @(posedge clk)
    begin : intdelay_4_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd2; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
          intdelay_reg_4[intdelay_t_1_2] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd2; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
              intdelay_reg_4[intdelay_t_1_2] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1_2 = 32'sd0; intdelay_t_0_1_2 <= 32'sd2; intdelay_t_0_1_2 = intdelay_t_0_1_2 + 32'sd1) begin
              intdelay_reg_4[intdelay_t_0_1_2] <= intdelay_reg_next_3[intdelay_t_0_1_2];
            end
          end
        end
      end
    end

  always @* begin
    din_3_1_im_dly = intdelay_reg_4[2];
    intdelay_reg_next_3[0] = dout_2_1_im;

    for(intdelay_t_0_03 = 32'sd0; intdelay_t_0_03 <= 32'sd1; intdelay_t_0_03 = intdelay_t_0_03 + 32'sd1) begin
      intdelay_reg_next_3[intdelay_t_0_03 + 32'sd1] = intdelay_reg_4[intdelay_t_0_03];
    end

  end



  always @(posedge clk)
    begin : intdelay_5_process
      if (reset_x == 1'b1) begin
        intdelay_reg_5 <= {3{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_5 <= {3{1'b0}};
          end
          else begin
            intdelay_reg_5[0] <= dout_2_1_vld;
            intdelay_reg_5[32'sd2:32'sd1] <= intdelay_reg_5[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_3_vld_dly = intdelay_reg_5[2];



  tx_125_src_TWDLROM_3_1 u_twdlROM_3_1 (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_2_0(enb_1_2_0),
                                        .dout_2_1_vld(dout_2_1_vld),
                                        .twdl_3_1_re(twdl_3_1_re),  // sfix16_En14
                                        .twdl_3_1_im(twdl_3_1_im)  // sfix16_En14
                                        );

  tx_125_src_RADIX22FFT_CTRL1_3 u_CTRL1_3_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld),
                                             .dinXTwdl_3_1_vld_1(dinXTwdl_3_1_vld),
                                             .rd_3_Addr(rd_3_Addr),  // ufix5
                                             .rd_3_Enb(rd_3_Enb),
                                             .proc_3_enb(proc_3_enb)
                                             );

  tx_125_src_RADIX22FFT_SDF1_3 u_SDF1_3_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .din_3_1_re_dly(din_3_1_re_dly),  // sfix16_En14
                                           .din_3_1_im_dly(din_3_1_im_dly),  // sfix16_En14
                                           .din_3_vld_dly(din_3_vld_dly),
                                           .rd_3_Addr(rd_3_Addr),  // ufix5
                                           .rd_3_Enb(rd_3_Enb),
                                           .twdl_3_1_re(twdl_3_1_re),  // sfix16_En14
                                           .twdl_3_1_im(twdl_3_1_im),  // sfix16_En14
                                           .proc_3_enb(proc_3_enb),
                                           .dout_3_1_re(dout_3_1_re),  // sfix16_En14
                                           .dout_3_1_im(dout_3_1_im),  // sfix16_En14
                                           .dout_3_1_vld(dout_3_1_vld),
                                           .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld)
                                           );

  tx_125_src_RADIX22FFT_CTRL1_4 u_CTRL2_4_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dout_3_1_vld(dout_3_1_vld),
                                             .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld),
                                             .rd_4_Addr(rd_4_Addr),  // ufix4
                                             .rd_4_Enb(rd_4_Enb),
                                             .proc_4_enb(proc_4_enb),
                                             .multiply_4_J(multiply_4_J)
                                             );

  tx_125_src_RADIX22FFT_SDF2_4 u_SDF2_4_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .dout_3_1_re(dout_3_1_re),  // sfix16_En14
                                           .dout_3_1_im(dout_3_1_im),  // sfix16_En14
                                           .dout_3_1_vld(dout_3_1_vld),
                                           .rd_4_Addr(rd_4_Addr),  // ufix4
                                           .rd_4_Enb(rd_4_Enb),
                                           .proc_4_enb(proc_4_enb),
                                           .multiply_4_J(multiply_4_J),
                                           .dout_4_1_re(dout_4_1_re),  // sfix16_En14
                                           .dout_4_1_im(dout_4_1_im),  // sfix16_En14
                                           .dout_4_1_vld(dout_4_1_vld),
                                           .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld)
                                           );

  always @(posedge clk)
    begin : intdelay_6_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1_3 = 32'sd0; intdelay_t_1_3 <= 32'sd2; intdelay_t_1_3 = intdelay_t_1_3 + 32'sd1) begin
          intdelay_reg_6[intdelay_t_1_3] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1_3 = 32'sd0; intdelay_t_1_3 <= 32'sd2; intdelay_t_1_3 = intdelay_t_1_3 + 32'sd1) begin
              intdelay_reg_6[intdelay_t_1_3] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1_3 = 32'sd0; intdelay_t_0_1_3 <= 32'sd2; intdelay_t_0_1_3 = intdelay_t_0_1_3 + 32'sd1) begin
              intdelay_reg_6[intdelay_t_0_1_3] <= intdelay_reg_next_4[intdelay_t_0_1_3];
            end
          end
        end
      end
    end

  always @* begin
    din_5_1_re_dly = intdelay_reg_6[2];
    intdelay_reg_next_4[0] = dout_4_1_re;

    for(intdelay_t_0_04 = 32'sd0; intdelay_t_0_04 <= 32'sd1; intdelay_t_0_04 = intdelay_t_0_04 + 32'sd1) begin
      intdelay_reg_next_4[intdelay_t_0_04 + 32'sd1] = intdelay_reg_6[intdelay_t_0_04];
    end

  end



  always @(posedge clk)
    begin : intdelay_7_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1_4 = 32'sd0; intdelay_t_1_4 <= 32'sd2; intdelay_t_1_4 = intdelay_t_1_4 + 32'sd1) begin
          intdelay_reg_7[intdelay_t_1_4] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1_4 = 32'sd0; intdelay_t_1_4 <= 32'sd2; intdelay_t_1_4 = intdelay_t_1_4 + 32'sd1) begin
              intdelay_reg_7[intdelay_t_1_4] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1_4 = 32'sd0; intdelay_t_0_1_4 <= 32'sd2; intdelay_t_0_1_4 = intdelay_t_0_1_4 + 32'sd1) begin
              intdelay_reg_7[intdelay_t_0_1_4] <= intdelay_reg_next_5[intdelay_t_0_1_4];
            end
          end
        end
      end
    end

  always @* begin
    din_5_1_im_dly = intdelay_reg_7[2];
    intdelay_reg_next_5[0] = dout_4_1_im;

    for(intdelay_t_0_05 = 32'sd0; intdelay_t_0_05 <= 32'sd1; intdelay_t_0_05 = intdelay_t_0_05 + 32'sd1) begin
      intdelay_reg_next_5[intdelay_t_0_05 + 32'sd1] = intdelay_reg_7[intdelay_t_0_05];
    end

  end



  always @(posedge clk)
    begin : intdelay_8_process
      if (reset_x == 1'b1) begin
        intdelay_reg_8 <= {3{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_8 <= {3{1'b0}};
          end
          else begin
            intdelay_reg_8[0] <= dout_4_1_vld;
            intdelay_reg_8[32'sd2:32'sd1] <= intdelay_reg_8[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_5_vld_dly = intdelay_reg_8[2];



  tx_125_src_TWDLROM_5_1 u_twdlROM_5_1 (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_2_0(enb_1_2_0),
                                        .dout_4_1_vld(dout_4_1_vld),
                                        .twdl_5_1_re(twdl_5_1_re),  // sfix16_En14
                                        .twdl_5_1_im(twdl_5_1_im)  // sfix16_En14
                                        );

  tx_125_src_RADIX22FFT_CTRL1_5 u_CTRL1_5_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld),
                                             .dinXTwdl_5_1_vld_1(dinXTwdl_5_1_vld),
                                             .rd_5_Addr(rd_5_Addr),  // ufix3
                                             .rd_5_Enb(rd_5_Enb),
                                             .proc_5_enb(proc_5_enb)
                                             );

  tx_125_src_RADIX22FFT_SDF1_5 u_SDF1_5_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .din_5_1_re_dly(din_5_1_re_dly),  // sfix16_En14
                                           .din_5_1_im_dly(din_5_1_im_dly),  // sfix16_En14
                                           .din_5_vld_dly(din_5_vld_dly),
                                           .rd_5_Addr(rd_5_Addr),  // ufix3
                                           .rd_5_Enb(rd_5_Enb),
                                           .twdl_5_1_re(twdl_5_1_re),  // sfix16_En14
                                           .twdl_5_1_im(twdl_5_1_im),  // sfix16_En14
                                           .proc_5_enb(proc_5_enb),
                                           .dout_5_1_re(dout_5_1_re),  // sfix16_En14
                                           .dout_5_1_im(dout_5_1_im),  // sfix16_En14
                                           .dout_5_1_vld(dout_5_1_vld),
                                           .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld)
                                           );

  tx_125_src_RADIX22FFT_CTRL1_6 u_CTRL2_6_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dout_5_1_vld(dout_5_1_vld),
                                             .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld),
                                             .rd_6_Addr(rd_6_Addr),  // ufix2
                                             .rd_6_Enb(rd_6_Enb),
                                             .proc_6_enb(proc_6_enb),
                                             .multiply_6_J(multiply_6_J)
                                             );

  tx_125_src_RADIX22FFT_SDF2_6 u_SDF2_6_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .dout_5_1_re(dout_5_1_re),  // sfix16_En14
                                           .dout_5_1_im(dout_5_1_im),  // sfix16_En14
                                           .dout_5_1_vld(dout_5_1_vld),
                                           .rd_6_Addr(rd_6_Addr),  // ufix2
                                           .rd_6_Enb(rd_6_Enb),
                                           .proc_6_enb(proc_6_enb),
                                           .multiply_6_J(multiply_6_J),
                                           .dout_6_1_re(dout_6_1_re),  // sfix16_En14
                                           .dout_6_1_im(dout_6_1_im),  // sfix16_En14
                                           .dout_6_1_vld(dout_6_1_vld),
                                           .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld)
                                           );

  always @(posedge clk)
    begin : intdelay_9_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1_5 = 32'sd0; intdelay_t_1_5 <= 32'sd2; intdelay_t_1_5 = intdelay_t_1_5 + 32'sd1) begin
          intdelay_reg_9[intdelay_t_1_5] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1_5 = 32'sd0; intdelay_t_1_5 <= 32'sd2; intdelay_t_1_5 = intdelay_t_1_5 + 32'sd1) begin
              intdelay_reg_9[intdelay_t_1_5] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1_5 = 32'sd0; intdelay_t_0_1_5 <= 32'sd2; intdelay_t_0_1_5 = intdelay_t_0_1_5 + 32'sd1) begin
              intdelay_reg_9[intdelay_t_0_1_5] <= intdelay_reg_next_6[intdelay_t_0_1_5];
            end
          end
        end
      end
    end

  always @* begin
    din_7_1_re_dly = intdelay_reg_9[2];
    intdelay_reg_next_6[0] = dout_6_1_re;

    for(intdelay_t_0_06 = 32'sd0; intdelay_t_0_06 <= 32'sd1; intdelay_t_0_06 = intdelay_t_0_06 + 32'sd1) begin
      intdelay_reg_next_6[intdelay_t_0_06 + 32'sd1] = intdelay_reg_9[intdelay_t_0_06];
    end

  end



  always @(posedge clk)
    begin : intdelay_10_process
      if (reset_x == 1'b1) begin
        for(intdelay_t_1_6 = 32'sd0; intdelay_t_1_6 <= 32'sd2; intdelay_t_1_6 = intdelay_t_1_6 + 32'sd1) begin
          intdelay_reg_10[intdelay_t_1_6] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            for(intdelay_t_1_6 = 32'sd0; intdelay_t_1_6 <= 32'sd2; intdelay_t_1_6 = intdelay_t_1_6 + 32'sd1) begin
              intdelay_reg_10[intdelay_t_1_6] <= 16'sb0000000000000000;
            end
          end
          else begin
            for(intdelay_t_0_1_6 = 32'sd0; intdelay_t_0_1_6 <= 32'sd2; intdelay_t_0_1_6 = intdelay_t_0_1_6 + 32'sd1) begin
              intdelay_reg_10[intdelay_t_0_1_6] <= intdelay_reg_next_7[intdelay_t_0_1_6];
            end
          end
        end
      end
    end

  always @* begin
    din_7_1_im_dly = intdelay_reg_10[2];
    intdelay_reg_next_7[0] = dout_6_1_im;

    for(intdelay_t_0_07 = 32'sd0; intdelay_t_0_07 <= 32'sd1; intdelay_t_0_07 = intdelay_t_0_07 + 32'sd1) begin
      intdelay_reg_next_7[intdelay_t_0_07 + 32'sd1] = intdelay_reg_10[intdelay_t_0_07];
    end

  end



  always @(posedge clk)
    begin : intdelay_11_process
      if (reset_x == 1'b1) begin
        intdelay_reg_11 <= {3{1'b0}};
      end
      else begin
        if (enb_1_2_0) begin
          if (softReset == 1'b1) begin
            intdelay_reg_11 <= {3{1'b0}};
          end
          else begin
            intdelay_reg_11[0] <= dout_6_1_vld;
            intdelay_reg_11[32'sd2:32'sd1] <= intdelay_reg_11[32'sd1:32'sd0];
          end
        end
      end
    end

  assign din_7_vld_dly = intdelay_reg_11[2];



  tx_125_src_TWDLROM_7_1 u_twdlROM_7_1 (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb_1_2_0(enb_1_2_0),
                                        .dout_6_1_vld(dout_6_1_vld),
                                        .twdl_7_1_re(twdl_7_1_re),  // sfix16_En14
                                        .twdl_7_1_im(twdl_7_1_im)  // sfix16_En14
                                        );

  tx_125_src_RADIX22FFT_CTRL1_7 u_CTRL1_7_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dinXTwdl_7_1_vld(dinXTwdl_7_1_vld),
                                             .dinXTwdl_7_1_vld_1(dinXTwdl_7_1_vld),
                                             .rd_7_Addr(rd_7_Addr),  // ufix1
                                             .rd_7_Enb(rd_7_Enb),
                                             .proc_7_enb(proc_7_enb)
                                             );

  tx_125_src_RADIX22FFT_SDF1_7 u_SDF1_7_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .din_7_1_re_dly(din_7_1_re_dly),  // sfix16_En14
                                           .din_7_1_im_dly(din_7_1_im_dly),  // sfix16_En14
                                           .din_7_vld_dly(din_7_vld_dly),
                                           .rd_7_Addr(rd_7_Addr),  // ufix1
                                           .rd_7_Enb(rd_7_Enb),
                                           .twdl_7_1_re(twdl_7_1_re),  // sfix16_En14
                                           .twdl_7_1_im(twdl_7_1_im),  // sfix16_En14
                                           .proc_7_enb(proc_7_enb),
                                           .dout_7_1_re(dout_7_1_re),  // sfix16_En14
                                           .dout_7_1_im(dout_7_1_im),  // sfix16_En14
                                           .dout_7_1_vld(dout_7_1_vld),
                                           .dinXTwdl_7_1_vld(dinXTwdl_7_1_vld)
                                           );

  tx_125_src_RADIX22FFT_CTRL1_8 u_CTRL2_8_1 (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb_1_2_0(enb_1_2_0),
                                             .dout_7_1_vld(dout_7_1_vld),
                                             .dinXTwdl_8_1_vld(dinXTwdl_8_1_vld),
                                             .rd_8_Addr(rd_8_Addr),
                                             .rd_8_Enb(rd_8_Enb),
                                             .proc_8_enb(proc_8_enb),
                                             .multiply_8_J(multiply_8_J)
                                             );

  tx_125_src_RADIX22FFT_SDF2_8 u_SDF2_8_1 (.clk(clk),
                                           .reset_x(reset_x),
                                           .enb_1_2_0(enb_1_2_0),
                                           .dout_7_1_re(dout_7_1_re),  // sfix16_En14
                                           .dout_7_1_im(dout_7_1_im),  // sfix16_En14
                                           .dout_7_1_vld(dout_7_1_vld),
                                           .rd_8_Addr(rd_8_Addr),
                                           .rd_8_Enb(rd_8_Enb),
                                           .proc_8_enb(proc_8_enb),
                                           .multiply_8_J(multiply_8_J),
                                           .dout_8_1_re(dout_8_1_re),  // sfix16_En14
                                           .dout_8_1_im(dout_8_1_im),  // sfix16_En14
                                           .dout_8_1_vld(dout_8_1_vld),
                                           .dinXTwdl_8_1_vld(dinXTwdl_8_1_vld)
                                           );

  tx_125_src_RADIX2FFT_bitNatural u_NaturalOrder_Stage (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb_1_2_0(enb_1_2_0),
                                                        .dout_8_1_re(dout_8_1_re),  // sfix16_En14
                                                        .dout_8_1_im(dout_8_1_im),  // sfix16_En14
                                                        .dout_8_1_vld(dout_8_1_vld),
                                                        .dout_re1(dout_re1),  // sfix16_En14
                                                        .dout_im1(dout_im1),  // sfix16_En14
                                                        .dout_vld1(dout_vld1),
                                                        .startOutS(startOutS)
                                                        );

  assign dataOut_re = dout_im1;

  assign dataOut_im = dout_re1;

  assign startOut = startOutS;

  assign validOut = dout_vld1;

endmodule  // tx_125_src_dsphdl_IFFT

