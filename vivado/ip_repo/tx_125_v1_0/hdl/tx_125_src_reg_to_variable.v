// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_reg_to_variable.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_reg_to_variable
// Source Path: HDLTx/full_tx/reg_to_variable
// Hierarchy Level: 1
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_reg_to_variable
          (clk,
           reset_x,
           enb_1_8_0,
           new_frame_in,
           reg0,
           reg1,
           reg2,
           reg3,
           new_frame_out,
           psdu_size_0,
           psdu_size_1,
           psdu_size_2,
           psdu_size_3,
           psdu_size_4,
           psdu_size_5,
           psdu_size_6,
           psdu_size_7,
           psdu_size_8,
           psdu_size_9,
           psdu_size_10,
           psdu_size_11,
           psdu_size_12,
           psdu_size_13,
           psdu_size_14,
           psdu_size_15,
           psdu_size_16,
           psdu_size_17,
           psdu_size_18,
           psdu_size_19,
           psdu_size_20,
           psdu_size_21,
           psdu_size_22,
           psdu_size_23,
           msg_duration_0,
           msg_duration_1,
           msg_duration_2,
           msg_duration_3,
           msg_duration_4,
           msg_duration_5,
           msg_duration_6,
           msg_duration_7,
           msg_duration_8,
           msg_duration_9,
           msg_duration_10,
           msg_duration_11,
           msg_duration_12,
           msg_duration_13,
           msg_duration_14,
           msg_duration_15,
           block_size_0,
           block_size_1,
           fec_rate_0,
           fec_rate_1,
           fec_rate_2,
           rep_number_0,
           rep_number_1,
           rep_number_2,
           concat_factor_0,
           concat_factor_1,
           concat_factor_2,
           scrambler_init_0,
           scrambler_init_1,
           scrambler_init_2,
           scrambler_init_3,
           bat_id_0,
           bat_id_1,
           bat_id_2,
           bat_id_3,
           bat_id_4,
           cp_id_0,
           cp_id_1,
           cp_id_2,
           mimo_spacing_0,
           mimo_spacing_1,
           mimo_spacing_2,
           mimo_number_0,
           mimo_number_1,
           mimo_number_2);


  input   clk;
  input   reset_x;
  input   enb_1_8_0;
  input   new_frame_in;
  input   [31:0] reg0;  // uint32
  input   [31:0] reg1;  // uint32
  input   [31:0] reg2;  // uint32
  input   [31:0] reg3;  // uint32
  output  new_frame_out;
  output  psdu_size_0;  // boolean
  output  psdu_size_1;  // boolean
  output  psdu_size_2;  // boolean
  output  psdu_size_3;  // boolean
  output  psdu_size_4;  // boolean
  output  psdu_size_5;  // boolean
  output  psdu_size_6;  // boolean
  output  psdu_size_7;  // boolean
  output  psdu_size_8;  // boolean
  output  psdu_size_9;  // boolean
  output  psdu_size_10;  // boolean
  output  psdu_size_11;  // boolean
  output  psdu_size_12;  // boolean
  output  psdu_size_13;  // boolean
  output  psdu_size_14;  // boolean
  output  psdu_size_15;  // boolean
  output  psdu_size_16;  // boolean
  output  psdu_size_17;  // boolean
  output  psdu_size_18;  // boolean
  output  psdu_size_19;  // boolean
  output  psdu_size_20;  // boolean
  output  psdu_size_21;  // boolean
  output  psdu_size_22;  // boolean
  output  psdu_size_23;  // boolean
  output  msg_duration_0;  // boolean
  output  msg_duration_1;  // boolean
  output  msg_duration_2;  // boolean
  output  msg_duration_3;  // boolean
  output  msg_duration_4;  // boolean
  output  msg_duration_5;  // boolean
  output  msg_duration_6;  // boolean
  output  msg_duration_7;  // boolean
  output  msg_duration_8;  // boolean
  output  msg_duration_9;  // boolean
  output  msg_duration_10;  // boolean
  output  msg_duration_11;  // boolean
  output  msg_duration_12;  // boolean
  output  msg_duration_13;  // boolean
  output  msg_duration_14;  // boolean
  output  msg_duration_15;  // boolean
  output  block_size_0;  // boolean
  output  block_size_1;  // boolean
  output  fec_rate_0;  // boolean
  output  fec_rate_1;  // boolean
  output  fec_rate_2;  // boolean
  output  rep_number_0;  // boolean
  output  rep_number_1;  // boolean
  output  rep_number_2;  // boolean
  output  concat_factor_0;  // boolean
  output  concat_factor_1;  // boolean
  output  concat_factor_2;  // boolean
  output  scrambler_init_0;  // boolean
  output  scrambler_init_1;  // boolean
  output  scrambler_init_2;  // boolean
  output  scrambler_init_3;  // boolean
  output  bat_id_0;  // boolean
  output  bat_id_1;  // boolean
  output  bat_id_2;  // boolean
  output  bat_id_3;  // boolean
  output  bat_id_4;  // boolean
  output  cp_id_0;  // boolean
  output  cp_id_1;  // boolean
  output  cp_id_2;  // boolean
  output  mimo_spacing_0;  // boolean
  output  mimo_spacing_1;  // boolean
  output  mimo_spacing_2;  // boolean
  output  mimo_number_0;  // boolean
  output  mimo_number_1;  // boolean
  output  mimo_number_2;  // boolean


  wire [23:0] Bit_Slice_out1;  // ufix24
  wire [23:0] Switch_out1;  // ufix24
  reg [23:0] Unit_Delay_out1;  // ufix24
  wire y_1;  // ufix1
  wire y_2;  // ufix1
  wire y_3;  // ufix1
  wire y_4;  // ufix1
  wire y_5;  // ufix1
  wire y_6;  // ufix1
  wire y_7;  // ufix1
  wire y_8;  // ufix1
  wire y_9;  // ufix1
  wire y_10;  // ufix1
  wire y_11;  // ufix1
  wire y_12;  // ufix1
  wire y_13;  // ufix1
  wire y_14;  // ufix1
  wire y_15;  // ufix1
  wire y_16;  // ufix1
  wire y_17;  // ufix1
  wire y_18;  // ufix1
  wire y_19;  // ufix1
  wire y_20;  // ufix1
  wire y_21;  // ufix1
  wire y_22;  // ufix1
  wire y_23;  // ufix1
  wire y_24;  // ufix1
  wire [23:0] y;  // ufix1 [24]
  reg  [23:0] Data_Type_Conversion10_out1;  // boolean [24]
  wire [15:0] Bit_Slice1_out1;  // uint16
  wire [15:0] Switch1_out1;  // uint16
  reg [15:0] Unit_Delay1_out1;  // uint16
  wire y_1_1;  // ufix1
  wire y_2_1;  // ufix1
  wire y_3_1;  // ufix1
  wire y_4_1;  // ufix1
  wire y_5_1;  // ufix1
  wire y_6_1;  // ufix1
  wire y_7_1;  // ufix1
  wire y_8_1;  // ufix1
  wire y_9_1;  // ufix1
  wire y_10_1;  // ufix1
  wire y_11_1;  // ufix1
  wire y_12_1;  // ufix1
  wire y_13_1;  // ufix1
  wire y_14_1;  // ufix1
  wire y_15_1;  // ufix1
  wire y_16_1;  // ufix1
  wire [15:0] y_25;  // ufix1 [16]
  reg  [15:0] Data_Type_Conversion11_out1;  // boolean [16]
  wire [1:0] Bit_Slice2_out1;  // ufix2
  wire [1:0] Switch2_out1;  // ufix2
  reg [1:0] Unit_Delay2_out1;  // ufix2
  wire y_1_2;  // ufix1
  wire y_2_2;  // ufix1
  wire [1:0] y_26;  // ufix1 [2]
  reg  [1:0] Data_Type_Conversion9_out1;  // boolean [2]
  wire [2:0] Bit_Slice3_out1;  // ufix3
  wire [2:0] Switch3_out1;  // ufix3
  reg [2:0] Unit_Delay3_out1;  // ufix3
  wire y_1_3;  // ufix1
  wire y_2_3;  // ufix1
  wire y_3_2;  // ufix1
  wire [2:0] y_27;  // ufix1 [3]
  reg  [2:0] Data_Type_Conversion8_out1;  // boolean [3]
  wire [2:0] Bit_Slice4_out1;  // ufix3
  wire [2:0] Switch4_out1;  // ufix3
  reg [2:0] Unit_Delay4_out1;  // ufix3
  wire y_1_4;  // ufix1
  wire y_2_4;  // ufix1
  wire y_3_3;  // ufix1
  wire [2:0] y_28;  // ufix1 [3]
  reg  [2:0] Data_Type_Conversion7_out1;  // boolean [3]
  wire [2:0] Bit_Slice5_out1;  // ufix3
  wire [2:0] Switch5_out1;  // ufix3
  reg [2:0] Unit_Delay5_out1;  // ufix3
  wire y_1_5;  // ufix1
  wire y_2_5;  // ufix1
  wire y_3_4;  // ufix1
  wire [2:0] y_29;  // ufix1 [3]
  reg  [2:0] Data_Type_Conversion6_out1;  // boolean [3]
  wire [3:0] Bit_Slice6_out1;  // ufix4
  wire [3:0] Switch6_out1;  // ufix4
  reg [3:0] Unit_Delay6_out1;  // ufix4
  wire y_1_6;  // ufix1
  wire y_2_6;  // ufix1
  wire y_3_5;  // ufix1
  wire y_4_2;  // ufix1
  wire [3:0] y_30;  // ufix1 [4]
  reg  [3:0] Data_Type_Conversion5_out1;  // boolean [4]
  wire [4:0] Bit_Slice7_out1;  // ufix5
  wire [4:0] Switch7_out1;  // ufix5
  reg [4:0] Unit_Delay7_out1;  // ufix5
  wire y_1_7;  // ufix1
  wire y_2_7;  // ufix1
  wire y_3_6;  // ufix1
  wire y_4_3;  // ufix1
  wire y_5_2;  // ufix1
  wire [4:0] y_31;  // ufix1 [5]
  reg  [4:0] Data_Type_Conversion4_out1;  // boolean [5]
  wire [2:0] Bit_Slice8_out1;  // ufix3
  wire [2:0] Switch8_out1;  // ufix3
  reg [2:0] Unit_Delay8_out1;  // ufix3
  wire y_1_8;  // ufix1
  wire y_2_8;  // ufix1
  wire y_3_7;  // ufix1
  wire [2:0] y_32;  // ufix1 [3]
  reg  [2:0] Data_Type_Conversion3_out1;  // boolean [3]
  wire [2:0] Bit_Slice9_out1;  // ufix3
  wire [2:0] Switch9_out1;  // ufix3
  reg [2:0] Unit_Delay9_out1;  // ufix3
  wire y_1_9;  // ufix1
  wire y_2_9;  // ufix1
  wire y_3_8;  // ufix1
  wire [2:0] y_33;  // ufix1 [3]
  reg  [2:0] Data_Type_Conversion2_out1;  // boolean [3]
  wire [2:0] Bit_Slice10_out1;  // ufix3
  wire [2:0] Switch10_out1;  // ufix3
  reg [2:0] Unit_Delay10_out1;  // ufix3
  wire y_1_10;  // ufix1
  wire y_2_10;  // ufix1
  wire y_3_9;  // ufix1
  wire [2:0] y_34;  // ufix1 [3]
  reg  [2:0] Data_Type_Conversion1_out1;  // boolean [3]
  reg signed [31:0] Data_Type_Conversion10_ii;  // int32
  reg  Data_Type_Conversion10_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion11_ii;  // int32
  reg  Data_Type_Conversion11_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion9_ii;  // int32
  reg  Data_Type_Conversion9_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion8_ii;  // int32
  reg  Data_Type_Conversion8_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion7_ii;  // int32
  reg  Data_Type_Conversion7_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion6_ii;  // int32
  reg  Data_Type_Conversion6_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion5_ii;  // int32
  reg  Data_Type_Conversion5_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion4_ii;  // int32
  reg  Data_Type_Conversion4_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion3_ii;  // int32
  reg  Data_Type_Conversion3_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion2_ii;  // int32
  reg  Data_Type_Conversion2_y;  // ufix1
  reg signed [31:0] Data_Type_Conversion1_ii;  // int32
  reg  Data_Type_Conversion1_y;  // ufix1

  // All outputs are LSB first


  assign new_frame_out = new_frame_in;

  assign Bit_Slice_out1 = reg0[23:0];



  always @(posedge clk)
    begin : Unit_Delay_process
      if (reset_x == 1'b1) begin
        Unit_Delay_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay_out1 <= Switch_out1;
        end
      end
    end



  assign Switch_out1 = (new_frame_in == 1'b0 ? Unit_Delay_out1 :
              Bit_Slice_out1);



  assign y_1 = Switch_out1[0];



  assign y_2 = Switch_out1[1];



  assign y_3 = Switch_out1[2];



  assign y_4 = Switch_out1[3];



  assign y_5 = Switch_out1[4];



  assign y_6 = Switch_out1[5];



  assign y_7 = Switch_out1[6];



  assign y_8 = Switch_out1[7];



  assign y_9 = Switch_out1[8];



  assign y_10 = Switch_out1[9];



  assign y_11 = Switch_out1[10];



  assign y_12 = Switch_out1[11];



  assign y_13 = Switch_out1[12];



  assign y_14 = Switch_out1[13];



  assign y_15 = Switch_out1[14];



  assign y_16 = Switch_out1[15];



  assign y_17 = Switch_out1[16];



  assign y_18 = Switch_out1[17];



  assign y_19 = Switch_out1[18];



  assign y_20 = Switch_out1[19];



  assign y_21 = Switch_out1[20];



  assign y_22 = Switch_out1[21];



  assign y_23 = Switch_out1[22];



  assign y_24 = Switch_out1[23];



  assign y[0] = y_1;
  assign y[1] = y_2;
  assign y[2] = y_3;
  assign y[3] = y_4;
  assign y[4] = y_5;
  assign y[5] = y_6;
  assign y[6] = y_7;
  assign y[7] = y_8;
  assign y[8] = y_9;
  assign y[9] = y_10;
  assign y[10] = y_11;
  assign y[11] = y_12;
  assign y[12] = y_13;
  assign y[13] = y_14;
  assign y[14] = y_15;
  assign y[15] = y_16;
  assign y[16] = y_17;
  assign y[17] = y_18;
  assign y[18] = y_19;
  assign y[19] = y_20;
  assign y[20] = y_21;
  assign y[21] = y_22;
  assign y[22] = y_23;
  assign y[23] = y_24;

  always @* begin
    Data_Type_Conversion10_y = 1'b0;

    for(Data_Type_Conversion10_ii = 32'sd0; Data_Type_Conversion10_ii <= 32'sd23; Data_Type_Conversion10_ii = Data_Type_Conversion10_ii + 32'sd1) begin
      if (y[Data_Type_Conversion10_ii] != 1'b0) begin
        Data_Type_Conversion10_y = 1'b1;
      end
      else begin
        Data_Type_Conversion10_y = 1'b0;
      end
      Data_Type_Conversion10_out1[Data_Type_Conversion10_ii] = Data_Type_Conversion10_y;
    end

  end



  assign psdu_size_0 = Data_Type_Conversion10_out1[0];

  assign psdu_size_1 = Data_Type_Conversion10_out1[1];

  assign psdu_size_2 = Data_Type_Conversion10_out1[2];

  assign psdu_size_3 = Data_Type_Conversion10_out1[3];

  assign psdu_size_4 = Data_Type_Conversion10_out1[4];

  assign psdu_size_5 = Data_Type_Conversion10_out1[5];

  assign psdu_size_6 = Data_Type_Conversion10_out1[6];

  assign psdu_size_7 = Data_Type_Conversion10_out1[7];

  assign psdu_size_8 = Data_Type_Conversion10_out1[8];

  assign psdu_size_9 = Data_Type_Conversion10_out1[9];

  assign psdu_size_10 = Data_Type_Conversion10_out1[10];

  assign psdu_size_11 = Data_Type_Conversion10_out1[11];

  assign psdu_size_12 = Data_Type_Conversion10_out1[12];

  assign psdu_size_13 = Data_Type_Conversion10_out1[13];

  assign psdu_size_14 = Data_Type_Conversion10_out1[14];

  assign psdu_size_15 = Data_Type_Conversion10_out1[15];

  assign psdu_size_16 = Data_Type_Conversion10_out1[16];

  assign psdu_size_17 = Data_Type_Conversion10_out1[17];

  assign psdu_size_18 = Data_Type_Conversion10_out1[18];

  assign psdu_size_19 = Data_Type_Conversion10_out1[19];

  assign psdu_size_20 = Data_Type_Conversion10_out1[20];

  assign psdu_size_21 = Data_Type_Conversion10_out1[21];

  assign psdu_size_22 = Data_Type_Conversion10_out1[22];

  assign psdu_size_23 = Data_Type_Conversion10_out1[23];

  assign Bit_Slice1_out1 = reg1[15:0];



  always @(posedge clk)
    begin : Unit_Delay1_process
      if (reset_x == 1'b1) begin
        Unit_Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay1_out1 <= Switch1_out1;
        end
      end
    end



  assign Switch1_out1 = (new_frame_in == 1'b0 ? Unit_Delay1_out1 :
              Bit_Slice1_out1);



  assign y_1_1 = Switch1_out1[0];



  assign y_2_1 = Switch1_out1[1];



  assign y_3_1 = Switch1_out1[2];



  assign y_4_1 = Switch1_out1[3];



  assign y_5_1 = Switch1_out1[4];



  assign y_6_1 = Switch1_out1[5];



  assign y_7_1 = Switch1_out1[6];



  assign y_8_1 = Switch1_out1[7];



  assign y_9_1 = Switch1_out1[8];



  assign y_10_1 = Switch1_out1[9];



  assign y_11_1 = Switch1_out1[10];



  assign y_12_1 = Switch1_out1[11];



  assign y_13_1 = Switch1_out1[12];



  assign y_14_1 = Switch1_out1[13];



  assign y_15_1 = Switch1_out1[14];



  assign y_16_1 = Switch1_out1[15];



  assign y_25[0] = y_1_1;
  assign y_25[1] = y_2_1;
  assign y_25[2] = y_3_1;
  assign y_25[3] = y_4_1;
  assign y_25[4] = y_5_1;
  assign y_25[5] = y_6_1;
  assign y_25[6] = y_7_1;
  assign y_25[7] = y_8_1;
  assign y_25[8] = y_9_1;
  assign y_25[9] = y_10_1;
  assign y_25[10] = y_11_1;
  assign y_25[11] = y_12_1;
  assign y_25[12] = y_13_1;
  assign y_25[13] = y_14_1;
  assign y_25[14] = y_15_1;
  assign y_25[15] = y_16_1;

  always @* begin
    Data_Type_Conversion11_y = 1'b0;

    for(Data_Type_Conversion11_ii = 32'sd0; Data_Type_Conversion11_ii <= 32'sd15; Data_Type_Conversion11_ii = Data_Type_Conversion11_ii + 32'sd1) begin
      if (y_25[Data_Type_Conversion11_ii] != 1'b0) begin
        Data_Type_Conversion11_y = 1'b1;
      end
      else begin
        Data_Type_Conversion11_y = 1'b0;
      end
      Data_Type_Conversion11_out1[Data_Type_Conversion11_ii] = Data_Type_Conversion11_y;
    end

  end



  assign msg_duration_0 = Data_Type_Conversion11_out1[0];

  assign msg_duration_1 = Data_Type_Conversion11_out1[1];

  assign msg_duration_2 = Data_Type_Conversion11_out1[2];

  assign msg_duration_3 = Data_Type_Conversion11_out1[3];

  assign msg_duration_4 = Data_Type_Conversion11_out1[4];

  assign msg_duration_5 = Data_Type_Conversion11_out1[5];

  assign msg_duration_6 = Data_Type_Conversion11_out1[6];

  assign msg_duration_7 = Data_Type_Conversion11_out1[7];

  assign msg_duration_8 = Data_Type_Conversion11_out1[8];

  assign msg_duration_9 = Data_Type_Conversion11_out1[9];

  assign msg_duration_10 = Data_Type_Conversion11_out1[10];

  assign msg_duration_11 = Data_Type_Conversion11_out1[11];

  assign msg_duration_12 = Data_Type_Conversion11_out1[12];

  assign msg_duration_13 = Data_Type_Conversion11_out1[13];

  assign msg_duration_14 = Data_Type_Conversion11_out1[14];

  assign msg_duration_15 = Data_Type_Conversion11_out1[15];

  assign Bit_Slice2_out1 = reg2[1:0];



  always @(posedge clk)
    begin : Unit_Delay2_process
      if (reset_x == 1'b1) begin
        Unit_Delay2_out1 <= 2'b00;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay2_out1 <= Switch2_out1;
        end
      end
    end



  assign Switch2_out1 = (new_frame_in == 1'b0 ? Unit_Delay2_out1 :
              Bit_Slice2_out1);



  assign y_1_2 = Switch2_out1[0];



  assign y_2_2 = Switch2_out1[1];



  assign y_26[0] = y_1_2;
  assign y_26[1] = y_2_2;

  always @* begin
    Data_Type_Conversion9_y = 1'b0;

    for(Data_Type_Conversion9_ii = 32'sd0; Data_Type_Conversion9_ii <= 32'sd1; Data_Type_Conversion9_ii = Data_Type_Conversion9_ii + 32'sd1) begin
      if (y_26[Data_Type_Conversion9_ii] != 1'b0) begin
        Data_Type_Conversion9_y = 1'b1;
      end
      else begin
        Data_Type_Conversion9_y = 1'b0;
      end
      Data_Type_Conversion9_out1[Data_Type_Conversion9_ii] = Data_Type_Conversion9_y;
    end

  end



  assign block_size_0 = Data_Type_Conversion9_out1[0];

  assign block_size_1 = Data_Type_Conversion9_out1[1];

  assign Bit_Slice3_out1 = reg2[10:8];



  always @(posedge clk)
    begin : Unit_Delay3_process
      if (reset_x == 1'b1) begin
        Unit_Delay3_out1 <= 3'b000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay3_out1 <= Switch3_out1;
        end
      end
    end



  assign Switch3_out1 = (new_frame_in == 1'b0 ? Unit_Delay3_out1 :
              Bit_Slice3_out1);



  assign y_1_3 = Switch3_out1[0];



  assign y_2_3 = Switch3_out1[1];



  assign y_3_2 = Switch3_out1[2];



  assign y_27[0] = y_1_3;
  assign y_27[1] = y_2_3;
  assign y_27[2] = y_3_2;

  always @* begin
    Data_Type_Conversion8_y = 1'b0;

    for(Data_Type_Conversion8_ii = 32'sd0; Data_Type_Conversion8_ii <= 32'sd2; Data_Type_Conversion8_ii = Data_Type_Conversion8_ii + 32'sd1) begin
      if (y_27[Data_Type_Conversion8_ii] != 1'b0) begin
        Data_Type_Conversion8_y = 1'b1;
      end
      else begin
        Data_Type_Conversion8_y = 1'b0;
      end
      Data_Type_Conversion8_out1[Data_Type_Conversion8_ii] = Data_Type_Conversion8_y;
    end

  end



  assign fec_rate_0 = Data_Type_Conversion8_out1[0];

  assign fec_rate_1 = Data_Type_Conversion8_out1[1];

  assign fec_rate_2 = Data_Type_Conversion8_out1[2];

  assign Bit_Slice4_out1 = reg2[18:16];



  always @(posedge clk)
    begin : Unit_Delay4_process
      if (reset_x == 1'b1) begin
        Unit_Delay4_out1 <= 3'b000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay4_out1 <= Switch4_out1;
        end
      end
    end



  assign Switch4_out1 = (new_frame_in == 1'b0 ? Unit_Delay4_out1 :
              Bit_Slice4_out1);



  assign y_1_4 = Switch4_out1[0];



  assign y_2_4 = Switch4_out1[1];



  assign y_3_3 = Switch4_out1[2];



  assign y_28[0] = y_1_4;
  assign y_28[1] = y_2_4;
  assign y_28[2] = y_3_3;

  always @* begin
    Data_Type_Conversion7_y = 1'b0;

    for(Data_Type_Conversion7_ii = 32'sd0; Data_Type_Conversion7_ii <= 32'sd2; Data_Type_Conversion7_ii = Data_Type_Conversion7_ii + 32'sd1) begin
      if (y_28[Data_Type_Conversion7_ii] != 1'b0) begin
        Data_Type_Conversion7_y = 1'b1;
      end
      else begin
        Data_Type_Conversion7_y = 1'b0;
      end
      Data_Type_Conversion7_out1[Data_Type_Conversion7_ii] = Data_Type_Conversion7_y;
    end

  end



  assign rep_number_0 = Data_Type_Conversion7_out1[0];

  assign rep_number_1 = Data_Type_Conversion7_out1[1];

  assign rep_number_2 = Data_Type_Conversion7_out1[2];

  assign Bit_Slice5_out1 = reg2[26:24];



  always @(posedge clk)
    begin : Unit_Delay5_process
      if (reset_x == 1'b1) begin
        Unit_Delay5_out1 <= 3'b000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay5_out1 <= Switch5_out1;
        end
      end
    end



  assign Switch5_out1 = (new_frame_in == 1'b0 ? Unit_Delay5_out1 :
              Bit_Slice5_out1);



  assign y_1_5 = Switch5_out1[0];



  assign y_2_5 = Switch5_out1[1];



  assign y_3_4 = Switch5_out1[2];



  assign y_29[0] = y_1_5;
  assign y_29[1] = y_2_5;
  assign y_29[2] = y_3_4;

  always @* begin
    Data_Type_Conversion6_y = 1'b0;

    for(Data_Type_Conversion6_ii = 32'sd0; Data_Type_Conversion6_ii <= 32'sd2; Data_Type_Conversion6_ii = Data_Type_Conversion6_ii + 32'sd1) begin
      if (y_29[Data_Type_Conversion6_ii] != 1'b0) begin
        Data_Type_Conversion6_y = 1'b1;
      end
      else begin
        Data_Type_Conversion6_y = 1'b0;
      end
      Data_Type_Conversion6_out1[Data_Type_Conversion6_ii] = Data_Type_Conversion6_y;
    end

  end



  assign concat_factor_0 = Data_Type_Conversion6_out1[0];

  assign concat_factor_1 = Data_Type_Conversion6_out1[1];

  assign concat_factor_2 = Data_Type_Conversion6_out1[2];

  assign Bit_Slice6_out1 = reg3[3:0];



  always @(posedge clk)
    begin : Unit_Delay6_process
      if (reset_x == 1'b1) begin
        Unit_Delay6_out1 <= 4'b0000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay6_out1 <= Switch6_out1;
        end
      end
    end



  assign Switch6_out1 = (new_frame_in == 1'b0 ? Unit_Delay6_out1 :
              Bit_Slice6_out1);



  assign y_1_6 = Switch6_out1[0];



  assign y_2_6 = Switch6_out1[1];



  assign y_3_5 = Switch6_out1[2];



  assign y_4_2 = Switch6_out1[3];



  assign y_30[0] = y_1_6;
  assign y_30[1] = y_2_6;
  assign y_30[2] = y_3_5;
  assign y_30[3] = y_4_2;

  always @* begin
    Data_Type_Conversion5_y = 1'b0;

    for(Data_Type_Conversion5_ii = 32'sd0; Data_Type_Conversion5_ii <= 32'sd3; Data_Type_Conversion5_ii = Data_Type_Conversion5_ii + 32'sd1) begin
      if (y_30[Data_Type_Conversion5_ii] != 1'b0) begin
        Data_Type_Conversion5_y = 1'b1;
      end
      else begin
        Data_Type_Conversion5_y = 1'b0;
      end
      Data_Type_Conversion5_out1[Data_Type_Conversion5_ii] = Data_Type_Conversion5_y;
    end

  end



  assign scrambler_init_0 = Data_Type_Conversion5_out1[0];

  assign scrambler_init_1 = Data_Type_Conversion5_out1[1];

  assign scrambler_init_2 = Data_Type_Conversion5_out1[2];

  assign scrambler_init_3 = Data_Type_Conversion5_out1[3];

  assign Bit_Slice7_out1 = reg3[12:8];



  always @(posedge clk)
    begin : Unit_Delay7_process
      if (reset_x == 1'b1) begin
        Unit_Delay7_out1 <= 5'b00000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay7_out1 <= Switch7_out1;
        end
      end
    end



  assign Switch7_out1 = (new_frame_in == 1'b0 ? Unit_Delay7_out1 :
              Bit_Slice7_out1);



  assign y_1_7 = Switch7_out1[0];



  assign y_2_7 = Switch7_out1[1];



  assign y_3_6 = Switch7_out1[2];



  assign y_4_3 = Switch7_out1[3];



  assign y_5_2 = Switch7_out1[4];



  assign y_31[0] = y_1_7;
  assign y_31[1] = y_2_7;
  assign y_31[2] = y_3_6;
  assign y_31[3] = y_4_3;
  assign y_31[4] = y_5_2;

  always @* begin
    Data_Type_Conversion4_y = 1'b0;

    for(Data_Type_Conversion4_ii = 32'sd0; Data_Type_Conversion4_ii <= 32'sd4; Data_Type_Conversion4_ii = Data_Type_Conversion4_ii + 32'sd1) begin
      if (y_31[Data_Type_Conversion4_ii] != 1'b0) begin
        Data_Type_Conversion4_y = 1'b1;
      end
      else begin
        Data_Type_Conversion4_y = 1'b0;
      end
      Data_Type_Conversion4_out1[Data_Type_Conversion4_ii] = Data_Type_Conversion4_y;
    end

  end



  assign bat_id_0 = Data_Type_Conversion4_out1[0];

  assign bat_id_1 = Data_Type_Conversion4_out1[1];

  assign bat_id_2 = Data_Type_Conversion4_out1[2];

  assign bat_id_3 = Data_Type_Conversion4_out1[3];

  assign bat_id_4 = Data_Type_Conversion4_out1[4];

  assign Bit_Slice8_out1 = reg3[18:16];



  always @(posedge clk)
    begin : Unit_Delay8_process
      if (reset_x == 1'b1) begin
        Unit_Delay8_out1 <= 3'b000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay8_out1 <= Switch8_out1;
        end
      end
    end



  assign Switch8_out1 = (new_frame_in == 1'b0 ? Unit_Delay8_out1 :
              Bit_Slice8_out1);



  assign y_1_8 = Switch8_out1[0];



  assign y_2_8 = Switch8_out1[1];



  assign y_3_7 = Switch8_out1[2];



  assign y_32[0] = y_1_8;
  assign y_32[1] = y_2_8;
  assign y_32[2] = y_3_7;

  always @* begin
    Data_Type_Conversion3_y = 1'b0;

    for(Data_Type_Conversion3_ii = 32'sd0; Data_Type_Conversion3_ii <= 32'sd2; Data_Type_Conversion3_ii = Data_Type_Conversion3_ii + 32'sd1) begin
      if (y_32[Data_Type_Conversion3_ii] != 1'b0) begin
        Data_Type_Conversion3_y = 1'b1;
      end
      else begin
        Data_Type_Conversion3_y = 1'b0;
      end
      Data_Type_Conversion3_out1[Data_Type_Conversion3_ii] = Data_Type_Conversion3_y;
    end

  end



  assign cp_id_0 = Data_Type_Conversion3_out1[0];

  assign cp_id_1 = Data_Type_Conversion3_out1[1];

  assign cp_id_2 = Data_Type_Conversion3_out1[2];

  assign Bit_Slice9_out1 = reg3[26:24];



  always @(posedge clk)
    begin : Unit_Delay9_process
      if (reset_x == 1'b1) begin
        Unit_Delay9_out1 <= 3'b000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay9_out1 <= Switch9_out1;
        end
      end
    end



  assign Switch9_out1 = (new_frame_in == 1'b0 ? Unit_Delay9_out1 :
              Bit_Slice9_out1);



  assign y_1_9 = Switch9_out1[0];



  assign y_2_9 = Switch9_out1[1];



  assign y_3_8 = Switch9_out1[2];



  assign y_33[0] = y_1_9;
  assign y_33[1] = y_2_9;
  assign y_33[2] = y_3_8;

  always @* begin
    Data_Type_Conversion2_y = 1'b0;

    for(Data_Type_Conversion2_ii = 32'sd0; Data_Type_Conversion2_ii <= 32'sd2; Data_Type_Conversion2_ii = Data_Type_Conversion2_ii + 32'sd1) begin
      if (y_33[Data_Type_Conversion2_ii] != 1'b0) begin
        Data_Type_Conversion2_y = 1'b1;
      end
      else begin
        Data_Type_Conversion2_y = 1'b0;
      end
      Data_Type_Conversion2_out1[Data_Type_Conversion2_ii] = Data_Type_Conversion2_y;
    end

  end



  assign mimo_spacing_0 = Data_Type_Conversion2_out1[0];

  assign mimo_spacing_1 = Data_Type_Conversion2_out1[1];

  assign mimo_spacing_2 = Data_Type_Conversion2_out1[2];

  assign Bit_Slice10_out1 = reg3[29:27];



  always @(posedge clk)
    begin : Unit_Delay10_process
      if (reset_x == 1'b1) begin
        Unit_Delay10_out1 <= 3'b000;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay10_out1 <= Switch10_out1;
        end
      end
    end



  assign Switch10_out1 = (new_frame_in == 1'b0 ? Unit_Delay10_out1 :
              Bit_Slice10_out1);



  assign y_1_10 = Switch10_out1[0];



  assign y_2_10 = Switch10_out1[1];



  assign y_3_9 = Switch10_out1[2];



  assign y_34[0] = y_1_10;
  assign y_34[1] = y_2_10;
  assign y_34[2] = y_3_9;

  always @* begin
    Data_Type_Conversion1_y = 1'b0;

    for(Data_Type_Conversion1_ii = 32'sd0; Data_Type_Conversion1_ii <= 32'sd2; Data_Type_Conversion1_ii = Data_Type_Conversion1_ii + 32'sd1) begin
      if (y_34[Data_Type_Conversion1_ii] != 1'b0) begin
        Data_Type_Conversion1_y = 1'b1;
      end
      else begin
        Data_Type_Conversion1_y = 1'b0;
      end
      Data_Type_Conversion1_out1[Data_Type_Conversion1_ii] = Data_Type_Conversion1_y;
    end

  end



  assign mimo_number_0 = Data_Type_Conversion1_out1[0];

  assign mimo_number_1 = Data_Type_Conversion1_out1[1];

  assign mimo_number_2 = Data_Type_Conversion1_out1[2];

endmodule  // tx_125_src_reg_to_variable

