// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_FIRFilter1.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_FIRFilter1
// Source Path: HDLTx/full_tx/full_ofdm_modulator/interpolator/FIR Interpolator/HDLTx/full_tx/full_ofdm_modulator/interpolator/FIR 
// Interpolator/FIRFilter
// Hierarchy Level: 4
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_FIRFilter1
          (clk,
           reset_x,
           enb,
           dataIn_re,
           dataIn_im,
           validIn,
           dataOut_re,
           dataOut_im,
           validOut);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [15:0] dataIn_re;  // sfix16_En14
  input   signed [15:0] dataIn_im;  // sfix16_En14
  input   validIn;
  output  signed [15:0] dataOut_re;  // sfix16_En12
  output  signed [15:0] dataOut_im;  // sfix16_En12
  output  validOut;


  wire signed [15:0] coeff_re;  // sfix16_En14
  wire signed [15:0] coeff_im;  // sfix16_En14
  wire haltProcess;
  wire signed [15:0] dinSM_re;  // sfix16_En14
  wire signed [15:0] dinSM_im;  // sfix16_En14
  wire dinVldSM;
  reg  nextDelayLineRdAddrReverse;  // ufix1
  reg  rdCountReverse_1;  // ufix1
  reg  nextDelayLineWrAddr;  // ufix1
  reg  wrCount_1;  // ufix1
  reg  nextDelayLineRdAddr;  // ufix1
  reg  rdCount_1;  // ufix1
  reg  nextSharingCount;  // ufix1
  reg  sharingCount_1;  // ufix1
  reg  delayLineValidInP;
  reg  lastPhaseStrobe;
  reg  delayLineShiftEnP;
  reg  delayLineShiftEn1_1;
  wire syncResetRst;
  reg  delayLineShiftEn2_1;
  reg  delayLineShiftEn3_1;
  reg  delayLineShiftEn4_1;
  reg  delayLineShiftEn5_1;
  reg  [6:0] validOutLookahead_reg;  // ufix1 [7]
  wire validOutLookahead_1;
  reg  vldOut_1;
  wire notValid;
  reg  rdAddr0_1;  // ufix1
  reg  rdAddr1;  // ufix1
  reg  rdAddr2;  // ufix1
  reg  rdAddr3;  // ufix1
  reg  rdAddr4;  // ufix1
  reg  rdAddr5;  // ufix1
  wire rdAddrEndZero;
  reg  [5:0] finalSumValidPipe_reg;  // ufix1 [6]
  wire accumulate;
  wire signed [28:0] accDataOut;  // sfix29_En26
  wire signed [15:0] delayLineEnd0;  // sfix16_En14
  wire signed [15:0] delayLineDataOut0;  // sfix16_En14
  reg signed [15:0] delayLineDataIn1_1;  // sfix16_En14
  wire signed [15:0] delayLineEnd1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut1;  // sfix16_En14
  reg signed [15:0] delayLineDataIn2_1;  // sfix16_En14
  wire signed [15:0] delayLineEnd2;  // sfix16_En14
  wire signed [15:0] delayLineDataOut2;  // sfix16_En14
  reg signed [15:0] delayLineDataIn3_1;  // sfix16_En14
  wire signed [15:0] delayLineEnd3;  // sfix16_En14
  wire signed [15:0] delayLineDataOut3;  // sfix16_En14
  reg signed [15:0] delayLineDataIn4_1;  // sfix16_En14
  wire signed [15:0] delayLineEnd4;  // sfix16_En14
  wire signed [15:0] delayLineDataOut4;  // sfix16_En14
  wire signed [15:0] preAddIn;  // sfix16_En14
  reg signed [15:0] coeffTableOut4;  // sfix16_En12
  reg signed [15:0] coeffTableRegP4_1;  // sfix16_En12
  reg signed [15:0] coeffTableReg4_1;  // sfix16_En12
  reg signed [15:0] delayLineDataIn5_1;  // sfix16_En14
  wire signed [15:0] delayLineEnd5;  // sfix16_En14
  wire signed [15:0] delayLineDataOut5;  // sfix16_En14
  reg signed [15:0] coeffTableOut3;  // sfix16_En12
  reg signed [15:0] coeffTableRegP3_1;  // sfix16_En12
  reg signed [15:0] coeffTableReg3_1;  // sfix16_En12
  wire signed [15:0] delayLineEnd6;  // sfix16_En14
  wire signed [15:0] delayLineDataOut6;  // sfix16_En14
  reg signed [15:0] coeffTableOut2;  // sfix16_En12
  reg signed [15:0] coeffTableRegP2_1;  // sfix16_En12
  reg signed [15:0] coeffTableReg2_1;  // sfix16_En12
  wire signed [15:0] delayLineEnd7;  // sfix16_En14
  wire signed [15:0] delayLineDataOut7;  // sfix16_En14
  reg signed [15:0] coeffTableOut1;  // sfix16_En12
  reg signed [15:0] coeffTableRegP1_1;  // sfix16_En12
  reg signed [15:0] coeffTableReg1_1;  // sfix16_En12
  wire signed [15:0] delayLineEnd8deadOut;  // sfix16_En14
  wire signed [15:0] delayLineDataOut8;  // sfix16_En14
  reg signed [15:0] coeffTableOut0;  // sfix16_En12
  reg signed [15:0] coeffTableRegP0_1;  // sfix16_En12
  reg signed [15:0] coeffTableReg0_1;  // sfix16_En12
  wire signed [28:0] sumIn;  // sfix29_En26
  wire signed [28:0] sumOut;  // sfix29_En26
  wire signed [28:0] sumOut_0;  // sfix29_En26
  wire signed [28:0] sumOut_1;  // sfix29_En26
  wire signed [28:0] sumOut_2;  // sfix29_En26
  wire signed [28:0] sumOut_3;  // sfix29_En26
  reg signed [28:0] sumOutReg_1;  // sfix29_En26
  reg signed [28:0] accDataOut_1;  // sfix29_En26
  wire signed [28:0] accSwitchOut;  // sfix29_En26
  wire signed [28:0] accAdderOut;  // sfix29_En26
  wire signed [15:0] converterOut;  // sfix16_En12
  reg signed [15:0] dout_re_1;  // sfix16_En12
  reg  [6:0] validOutLookahead_reg_1;  // ufix1 [7]
  wire validOutLookahead_3;
  wire rdAddrEndZero_1;
  reg  [5:0] finalSumValidPipe_reg_1;  // ufix1 [6]
  wire accumulate_1;
  wire signed [28:0] accDataOut_3;  // sfix29_En26
  wire signed [15:0] delayLineEnd0_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut0_1;  // sfix16_En14
  reg signed [15:0] delayLineDataIn1_3;  // sfix16_En14
  wire signed [15:0] delayLineEnd1_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut1_1;  // sfix16_En14
  reg signed [15:0] delayLineDataIn2_3;  // sfix16_En14
  wire signed [15:0] delayLineEnd2_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut2_1;  // sfix16_En14
  reg signed [15:0] delayLineDataIn3_3;  // sfix16_En14
  wire signed [15:0] delayLineEnd3_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut3_1;  // sfix16_En14
  reg signed [15:0] delayLineDataIn4_3;  // sfix16_En14
  wire signed [15:0] delayLineEnd4_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut4_1;  // sfix16_En14
  wire signed [15:0] preAddIn_1;  // sfix16_En14
  reg signed [15:0] coeffTableOut4_1;  // sfix16_En12
  reg signed [15:0] coeffTableRegP4_3;  // sfix16_En12
  reg signed [15:0] coeffTableReg4_3;  // sfix16_En12
  reg signed [15:0] delayLineDataIn5_3;  // sfix16_En14
  wire signed [15:0] delayLineEnd5_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut5_1;  // sfix16_En14
  reg signed [15:0] coeffTableOut3_1;  // sfix16_En12
  reg signed [15:0] coeffTableRegP3_3;  // sfix16_En12
  reg signed [15:0] coeffTableReg3_3;  // sfix16_En12
  wire signed [15:0] delayLineEnd6_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut6_1;  // sfix16_En14
  reg signed [15:0] coeffTableOut2_1;  // sfix16_En12
  reg signed [15:0] coeffTableRegP2_3;  // sfix16_En12
  reg signed [15:0] coeffTableReg2_3;  // sfix16_En12
  wire signed [15:0] delayLineEnd7_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut7_1;  // sfix16_En14
  reg signed [15:0] coeffTableOut1_1;  // sfix16_En12
  reg signed [15:0] coeffTableRegP1_3;  // sfix16_En12
  reg signed [15:0] coeffTableReg1_3;  // sfix16_En12
  wire signed [15:0] delayLineEnd8deadOut_1;  // sfix16_En14
  wire signed [15:0] delayLineDataOut8_1;  // sfix16_En14
  reg signed [15:0] coeffTableOut0_1;  // sfix16_En12
  reg signed [15:0] coeffTableRegP0_3;  // sfix16_En12
  reg signed [15:0] coeffTableReg0_3;  // sfix16_En12
  wire signed [28:0] sumIn_1;  // sfix29_En26
  wire signed [28:0] sumOut_4;  // sfix29_En26
  wire signed [28:0] sumOut_0_1;  // sfix29_En26
  wire signed [28:0] sumOut_1_1;  // sfix29_En26
  wire signed [28:0] sumOut_2_1;  // sfix29_En26
  wire signed [28:0] sumOut_3_1;  // sfix29_En26
  reg signed [28:0] sumOutReg_3;  // sfix29_En26
  reg signed [28:0] accDataOut_4;  // sfix29_En26
  wire signed [28:0] accSwitchOut_1;  // sfix29_En26
  wire signed [28:0] accAdderOut_1;  // sfix29_En26
  wire signed [15:0] converterOut_1;  // sfix16_En12
  reg signed [15:0] dout_im_1;  // sfix16_En12
  wire signed [15:0] dataZero;  // sfix16_En12
  wire signed [15:0] dataZero_dtc_re;  // sfix16_En12
  wire signed [15:0] dataZero_dtc_im;  // sfix16_En12
  wire signed [15:0] dout_cmplxSW_re;  // sfix16_En12
  wire signed [15:0] dout_cmplxSW_im;  // sfix16_En12
  reg  InputControl_out4_0;  // ufix1
  reg [1:0] InputControl_add_temp;  // ufix2
  reg [1:0] InputControl_add_temp_0;  // ufix2
  reg [1:0] InputControl_sub_temp;  // ufix2
  reg [1:0] InputControl_add_temp_1;  // ufix2
  reg [1:0] InputControl_add_temp_2;  // ufix2
  reg [1:0] InputControl_t_0_0;  // ufix2
  reg [1:0] InputControl_t_1;  // ufix2
  reg [1:0] InputControl_t_2_0;  // ufix2
  reg [1:0] InputControl_t_3;  // ufix2
  reg [1:0] InputControl_t_4;  // ufix2

  initial begin
    coeffTableRegP4_1 = 16'sb0000000000000000;
    coeffTableRegP3_1 = 16'sb0000000000000000;
    coeffTableRegP2_1 = 16'sb0000000000000000;
    coeffTableRegP1_1 = 16'sb0000000000000000;
    coeffTableRegP0_1 = 16'sb0000000000000000;
    coeffTableRegP4_3 = 16'sb0000000000000000;
    coeffTableRegP3_3 = 16'sb0000000000000000;
    coeffTableRegP2_3 = 16'sb0000000000000000;
    coeffTableRegP1_3 = 16'sb0000000000000000;
    coeffTableRegP0_3 = 16'sb0000000000000000;
  end

  assign coeff_re = 16'sb0000000000000000;
  assign coeff_im = 16'sb0000000000000000;



  assign haltProcess = 1'b0;



  tx_125_src_FirRdyLogic u_firRdyLogic (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb(enb),
                                        .dinSwitch_re(dataIn_re),  // sfix16_En14
                                        .dinSwitch_im(dataIn_im),  // sfix16_En14
                                        .dinVldSwitch(validIn),
                                        .coeff_re(coeff_re),  // sfix16_En14
                                        .coeff_im(coeff_im),  // sfix16_En14
                                        .haltProcess(haltProcess),
                                        .dinSM_re(dinSM_re),  // sfix16_En14
                                        .dinSM_im(dinSM_im),  // sfix16_En14
                                        .dinVldSM(dinVldSM)
                                        );

  always @(posedge clk)
    begin : rdCountReverse_process
      if (reset_x == 1'b1) begin
        rdCountReverse_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdCountReverse_1 <= nextDelayLineRdAddrReverse;
        end
      end
    end



  always @(posedge clk)
    begin : wrCount_process
      if (reset_x == 1'b1) begin
        wrCount_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          wrCount_1 <= nextDelayLineWrAddr;
        end
      end
    end



  always @(posedge clk)
    begin : rdCount_process
      if (reset_x == 1'b1) begin
        rdCount_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdCount_1 <= nextDelayLineRdAddr;
        end
      end
    end



  always @(posedge clk)
    begin : sharingCount_process
      if (reset_x == 1'b1) begin
        sharingCount_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          sharingCount_1 <= nextSharingCount;
        end
      end
    end



  // Input control counter combinatorial logic
  always @(dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1) begin
    InputControl_add_temp = 2'b00;
    InputControl_add_temp_0 = 2'b00;
    InputControl_sub_temp = 2'b00;
    InputControl_add_temp_1 = 2'b00;
    InputControl_add_temp_2 = 2'b00;
    InputControl_t_4 = 2'b00;
    InputControl_t_3 = 2'b00;
    InputControl_t_2_0 = 2'b00;
    InputControl_t_1 = 2'b00;
    InputControl_t_0_0 = 2'b00;
    delayLineValidInP = (sharingCount_1 == 1'b0) && (dinVldSM == 1'b1);
    lastPhaseStrobe = sharingCount_1 == 1'b1;
    if ((dinVldSM == 1'b1) || (sharingCount_1 > 1'b0)) begin
      if (sharingCount_1 == 1'b1) begin
        nextSharingCount = 1'b0;
      end
      else begin
        InputControl_t_0_0 = {1'b0, sharingCount_1};
        InputControl_add_temp = InputControl_t_0_0 + 2'b01;
        nextSharingCount = InputControl_add_temp[0];
      end
    end
    else begin
      nextSharingCount = sharingCount_1;
    end
    if (dinVldSM == 1'b1) begin
      if (wrCount_1 == 1'b1) begin
        InputControl_out4_0 = 1'b0;
      end
      else begin
        InputControl_t_1 = {1'b0, wrCount_1};
        InputControl_add_temp_0 = InputControl_t_1 + 2'b01;
        InputControl_out4_0 = InputControl_add_temp_0[0];
      end
    end
    else begin
      InputControl_out4_0 = wrCount_1;
    end
    if ((rdCount_1 != InputControl_out4_0) || (dinVldSM == 1'b1)) begin
      if (rdCount_1 == 1'b0) begin
        nextDelayLineRdAddr = 1'b1;
      end
      else begin
        InputControl_t_2_0 = {1'b0, rdCount_1};
        InputControl_sub_temp = InputControl_t_2_0 - 2'b01;
        nextDelayLineRdAddr = InputControl_sub_temp[0];
      end
    end
    else begin
      nextDelayLineRdAddr = rdCount_1;
    end
    if ((sharingCount_1 > 1'b0) || (dinVldSM == 1'b1)) begin
      if (sharingCount_1 == 1'b1) begin
        if (wrCount_1 == 1'b1) begin
          nextDelayLineRdAddrReverse = 1'b0;
        end
        else begin
          InputControl_t_4 = {1'b0, wrCount_1};
          InputControl_add_temp_2 = InputControl_t_4 + 2'b01;
          nextDelayLineRdAddrReverse = InputControl_add_temp_2[0];
        end
      end
      else if (rdCountReverse_1 == 1'b1) begin
        nextDelayLineRdAddrReverse = 1'b0;
      end
      else begin
        InputControl_t_3 = {1'b0, rdCountReverse_1};
        InputControl_add_temp_1 = InputControl_t_3 + 2'b01;
        nextDelayLineRdAddrReverse = InputControl_add_temp_1[0];
      end
    end
    else begin
      nextDelayLineRdAddrReverse = rdCountReverse_1;
    end
    nextDelayLineWrAddr = InputControl_out4_0;
  end



  always @(posedge clk)
    begin : delayLineShiftEn0_process
      if (reset_x == 1'b1) begin
        delayLineShiftEnP <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEnP <= lastPhaseStrobe;
        end
      end
    end



  always @(posedge clk)
    begin : delayLineShiftEn1_process
      if (reset_x == 1'b1) begin
        delayLineShiftEn1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          delayLineShiftEn1_1 <= delayLineShiftEnP;
        end
      end
    end



  always @(posedge clk)
    begin : delayLineShiftEn2_process
      if (reset_x == 1'b1) begin
        delayLineShiftEn2_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn2_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn2_1 <= delayLineShiftEn1_1;
          end
        end
      end
    end



  always @(posedge clk)
    begin : delayLineShiftEn3_process
      if (reset_x == 1'b1) begin
        delayLineShiftEn3_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn3_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn3_1 <= delayLineShiftEn2_1;
          end
        end
      end
    end



  always @(posedge clk)
    begin : delayLineShiftEn4_process
      if (reset_x == 1'b1) begin
        delayLineShiftEn4_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn4_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn4_1 <= delayLineShiftEn3_1;
          end
        end
      end
    end



  always @(posedge clk)
    begin : delayLineShiftEn5_process
      if (reset_x == 1'b1) begin
        delayLineShiftEn5_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncResetRst == 1'b1) begin
            delayLineShiftEn5_1 <= 1'b0;
          end
          else begin
            delayLineShiftEn5_1 <= delayLineShiftEn4_1;
          end
        end
      end
    end



  always @(posedge clk)
    begin : validOutLookahead_process
      if (reset_x == 1'b1) begin
        validOutLookahead_reg <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          validOutLookahead_reg[0] <= delayLineShiftEn5_1;
          validOutLookahead_reg[32'sd6:32'sd1] <= validOutLookahead_reg[32'sd5:32'sd0];
        end
      end
    end

  assign validOutLookahead_1 = validOutLookahead_reg[6];



  always @(posedge clk)
    begin : vldOut_process
      if (reset_x == 1'b1) begin
        vldOut_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          vldOut_1 <= validOutLookahead_1;
        end
      end
    end



  assign notValid =  ~ vldOut_1;



  always @(posedge clk)
    begin : rdAddr0_process
      if (reset_x == 1'b1) begin
        rdAddr0_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdAddr0_1 <= sharingCount_1;
        end
      end
    end



  always @(posedge clk)
    begin : rdAddr0_2_process
      if (reset_x == 1'b1) begin
        rdAddr1 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdAddr1 <= rdAddr0_1;
        end
      end
    end



  always @(posedge clk)
    begin : rdAddr1_1_process
      if (reset_x == 1'b1) begin
        rdAddr2 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdAddr2 <= rdAddr1;
        end
      end
    end



  always @(posedge clk)
    begin : rdAddr2_1_process
      if (reset_x == 1'b1) begin
        rdAddr3 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdAddr3 <= rdAddr2;
        end
      end
    end



  always @(posedge clk)
    begin : rdAddr3_1_process
      if (reset_x == 1'b1) begin
        rdAddr4 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdAddr4 <= rdAddr3;
        end
      end
    end



  always @(posedge clk)
    begin : rdAddr4_1_process
      if (reset_x == 1'b1) begin
        rdAddr5 <= 1'b0;
      end
      else begin
        if (enb) begin
          rdAddr5 <= rdAddr4;
        end
      end
    end



  assign rdAddrEndZero =  ~ rdAddr5;



  always @(posedge clk)
    begin : finalSumValidPipe_process
      if (reset_x == 1'b1) begin
        finalSumValidPipe_reg <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          finalSumValidPipe_reg[0] <= rdAddrEndZero;
          finalSumValidPipe_reg[32'sd5:32'sd1] <= finalSumValidPipe_reg[32'sd4:32'sd0];
        end
      end
    end

  assign accumulate = finalSumValidPipe_reg[5];



  assign accDataOut = 29'sb00000000000000000000000000000;



  tx_125_src_Addressable_Delay_Line u_delayLine0 (.clk(clk),
                                                  .reset_x(reset_x),
                                                  .enb(enb),
                                                  .dataIn(dinSM_re),  // sfix16_En14
                                                  .wrEn(delayLineValidInP),
                                                  .rdAddr(rdAddr0_1),  // ufix1
                                                  .delayLineEnd(delayLineEnd0),  // sfix16_En14
                                                  .dataOut(delayLineDataOut0)  // sfix16_En14
                                                  );

  always @(posedge clk)
    begin : delayLineDataIn1_process
      if (reset_x == 1'b1) begin
        delayLineDataIn1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn1_1 <= delayLineEnd0;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line u_delayLine1 (.clk(clk),
                                                  .reset_x(reset_x),
                                                  .enb(enb),
                                                  .dataIn(delayLineDataIn1_1),  // sfix16_En14
                                                  .wrEn(delayLineShiftEn1_1),
                                                  .rdAddr(rdAddr1),  // ufix1
                                                  .delayLineEnd(delayLineEnd1),  // sfix16_En14
                                                  .dataOut(delayLineDataOut1)  // sfix16_En14
                                                  );

  always @(posedge clk)
    begin : delayLineDataIn2_process
      if (reset_x == 1'b1) begin
        delayLineDataIn2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn2_1 <= delayLineEnd1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line u_delayLine2 (.clk(clk),
                                                  .reset_x(reset_x),
                                                  .enb(enb),
                                                  .dataIn(delayLineDataIn2_1),  // sfix16_En14
                                                  .wrEn(delayLineShiftEn2_1),
                                                  .rdAddr(rdAddr2),  // ufix1
                                                  .delayLineEnd(delayLineEnd2),  // sfix16_En14
                                                  .dataOut(delayLineDataOut2)  // sfix16_En14
                                                  );

  always @(posedge clk)
    begin : delayLineDataIn3_process
      if (reset_x == 1'b1) begin
        delayLineDataIn3_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn3_1 <= delayLineEnd2;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block u_delayLine3 (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb(enb),
                                                        .dataIn(delayLineDataIn3_1),  // sfix16_En14
                                                        .wrEn(delayLineShiftEn3_1),
                                                        .rdAddr(rdAddr3),  // ufix1
                                                        .delayLineEnd(delayLineEnd3),  // sfix16_En14
                                                        .dataOut(delayLineDataOut3)  // sfix16_En14
                                                        );

  always @(posedge clk)
    begin : delayLineDataIn4_process
      if (reset_x == 1'b1) begin
        delayLineDataIn4_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn4_1 <= delayLineEnd3;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block1 u_delayLine4 (.clk(clk),
                                                         .reset_x(reset_x),
                                                         .enb(enb),
                                                         .dataIn(delayLineDataIn4_1),  // sfix16_En14
                                                         .validIn(delayLineShiftEn4_1),
                                                         .rdAddr(rdAddr4),  // ufix1
                                                         .delayLineEnd(delayLineEnd4),  // sfix16_En14
                                                         .dataOut(delayLineDataOut4)  // sfix16_En14
                                                         );

  assign preAddIn = 16'sb0000000000000000;



  // Coefficient table for multiplier4
  always @(rdAddr4) begin
    case ( rdAddr4)
      1'b0 :
        begin
          coeffTableOut4 = 16'sb0000111111100100;
        end
      1'b1 :
        begin
          coeffTableOut4 = 16'sb0000000000000000;
        end
      default :
        begin
          coeffTableOut4 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP4_process
      if (enb) begin
        coeffTableRegP4_1 <= coeffTableOut4;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg4_process
      if (reset_x == 1'b1) begin
        coeffTableReg4_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg4_1 <= coeffTableRegP4_1;
        end
      end
    end



  always @(posedge clk)
    begin : delayLineDataIn5_process
      if (reset_x == 1'b1) begin
        delayLineDataIn5_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn5_1 <= delayLineEnd4;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block2 u_delayLine5 (.clk(clk),
                                                         .reset_x(reset_x),
                                                         .enb(enb),
                                                         .dataIn(delayLineDataIn5_1),  // sfix16_En14
                                                         .validIn(delayLineShiftEn4_1),
                                                         .lutaddr(rdAddr4),  // ufix1
                                                         .delayLineEnd(delayLineEnd5),  // sfix16_En14
                                                         .dataOut(delayLineDataOut5)  // sfix16_En14
                                                         );

  // Coefficient table for multiplier3
  always @(rdAddr3) begin
    case ( rdAddr3)
      1'b0 :
        begin
          coeffTableOut3 = 16'sb0000000000011011;
        end
      1'b1 :
        begin
          coeffTableOut3 = 16'sb0000000000000000;
        end
      default :
        begin
          coeffTableOut3 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP3_process
      if (enb) begin
        coeffTableRegP3_1 <= coeffTableOut3;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg3_process
      if (reset_x == 1'b1) begin
        coeffTableReg3_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg3_1 <= coeffTableRegP3_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block3 u_delayLine6 (.clk(clk),
                                                         .reset_x(reset_x),
                                                         .enb(enb),
                                                         .dataIn(delayLineEnd5),  // sfix16_En14
                                                         .validIn(delayLineShiftEn3_1),
                                                         .rdAddr(rdAddr3),  // ufix1
                                                         .delayLineEnd(delayLineEnd6),  // sfix16_En14
                                                         .dataOut(delayLineDataOut6)  // sfix16_En14
                                                         );

  // Coefficient table for multiplier2
  always @(rdAddr2) begin
    case ( rdAddr2)
      1'b0 :
        begin
          coeffTableOut2 = 16'sb0000000000011001;
        end
      1'b1 :
        begin
          coeffTableOut2 = 16'sb1111111111100101;
        end
      default :
        begin
          coeffTableOut2 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP2_process
      if (enb) begin
        coeffTableRegP2_1 <= coeffTableOut2;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg2_process
      if (reset_x == 1'b1) begin
        coeffTableReg2_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg2_1 <= coeffTableRegP2_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block3 u_delayLine7 (.clk(clk),
                                                         .reset_x(reset_x),
                                                         .enb(enb),
                                                         .dataIn(delayLineEnd6),  // sfix16_En14
                                                         .validIn(delayLineShiftEn2_1),
                                                         .rdAddr(rdAddr2),  // ufix1
                                                         .delayLineEnd(delayLineEnd7),  // sfix16_En14
                                                         .dataOut(delayLineDataOut7)  // sfix16_En14
                                                         );

  // Coefficient table for multiplier1
  always @(rdAddr1) begin
    case ( rdAddr1)
      1'b0 :
        begin
          coeffTableOut1 = 16'sb0000000000010000;
        end
      1'b1 :
        begin
          coeffTableOut1 = 16'sb1111111111100111;
        end
      default :
        begin
          coeffTableOut1 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP1_process
      if (enb) begin
        coeffTableRegP1_1 <= coeffTableOut1;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg1_process
      if (reset_x == 1'b1) begin
        coeffTableReg1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg1_1 <= coeffTableRegP1_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block3 u_delayLine8 (.clk(clk),
                                                         .reset_x(reset_x),
                                                         .enb(enb),
                                                         .dataIn(delayLineEnd7),  // sfix16_En14
                                                         .validIn(delayLineShiftEn1_1),
                                                         .rdAddr(rdAddr1),  // ufix1
                                                         .delayLineEnd(delayLineEnd8deadOut),  // sfix16_En14
                                                         .dataOut(delayLineDataOut8)  // sfix16_En14
                                                         );

  // Coefficient table for multiplier0
  always @(rdAddr0_1) begin
    case ( rdAddr0_1)
      1'b0 :
        begin
          coeffTableOut0 = 16'sb0000000000001001;
        end
      1'b1 :
        begin
          coeffTableOut0 = 16'sb1111111111101011;
        end
      default :
        begin
          coeffTableOut0 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP0_process
      if (enb) begin
        coeffTableRegP0_1 <= coeffTableOut0;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg0_process
      if (reset_x == 1'b1) begin
        coeffTableReg0_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg0_1 <= coeffTableRegP0_1;
        end
      end
    end



  assign sumIn = 29'sb00000000000000000000000000000;



  tx_125_src_FilterTapSystolicPreAdd u_filterTap0 (.clk(clk),
                                                   .reset_x(reset_x),
                                                   .enb(enb),
                                                   .din_re(delayLineDataOut0),  // sfix16_En14
                                                   .preAddIn(delayLineDataOut8),  // sfix16_En14
                                                   .coeff(coeffTableReg0_1),  // sfix16_En12
                                                   .sumIn(sumIn),  // sfix29_En26
                                                   .sumOut(sumOut)  // sfix29_En26
                                                   );

  tx_125_src_FilterTapSystolicPreAdd u_filterTap1 (.clk(clk),
                                                   .reset_x(reset_x),
                                                   .enb(enb),
                                                   .din_re(delayLineDataOut1),  // sfix16_En14
                                                   .preAddIn(delayLineDataOut7),  // sfix16_En14
                                                   .coeff(coeffTableReg1_1),  // sfix16_En12
                                                   .sumIn(sumOut),  // sfix29_En26
                                                   .sumOut(sumOut_0)  // sfix29_En26
                                                   );

  tx_125_src_FilterTapSystolicPreAdd u_filterTap2 (.clk(clk),
                                                   .reset_x(reset_x),
                                                   .enb(enb),
                                                   .din_re(delayLineDataOut2),  // sfix16_En14
                                                   .preAddIn(delayLineDataOut6),  // sfix16_En14
                                                   .coeff(coeffTableReg2_1),  // sfix16_En12
                                                   .sumIn(sumOut_0),  // sfix29_En26
                                                   .sumOut(sumOut_1)  // sfix29_En26
                                                   );

  tx_125_src_FilterTapSystolicPreAdd u_filterTap3 (.clk(clk),
                                                   .reset_x(reset_x),
                                                   .enb(enb),
                                                   .din_re(delayLineDataOut3),  // sfix16_En14
                                                   .preAddIn(delayLineDataOut5),  // sfix16_En14
                                                   .coeff(coeffTableReg3_1),  // sfix16_En12
                                                   .sumIn(sumOut_1),  // sfix29_En26
                                                   .sumOut(sumOut_2)  // sfix29_En26
                                                   );

  tx_125_src_FilterTapSystolicPreAdd u_filterTap4 (.clk(clk),
                                                   .reset_x(reset_x),
                                                   .enb(enb),
                                                   .din_re(delayLineDataOut4),  // sfix16_En14
                                                   .preAddIn(preAddIn),  // sfix16_En14
                                                   .coeff(coeffTableReg4_1),  // sfix16_En12
                                                   .sumIn(sumOut_2),  // sfix29_En26
                                                   .sumOut(sumOut_3)  // sfix29_En26
                                                   );

  always @(posedge clk)
    begin : sumOutReg_process
      if (reset_x == 1'b1) begin
        sumOutReg_1 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sumOutReg_1 <= sumOut_3;
        end
      end
    end



  assign accSwitchOut = (accumulate == 1'b0 ? accDataOut_1 :
              accDataOut);



  assign accAdderOut = accSwitchOut + sumOutReg_1;



  always @(posedge clk)
    begin : accDataOut_2_process
      if (reset_x == 1'b1) begin
        accDataOut_1 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          accDataOut_1 <= accAdderOut;
        end
      end
    end



  assign converterOut = {accDataOut_1[28], accDataOut_1[28:14]};



  always @(posedge clk)
    begin : dout_re_process
      if (reset_x == 1'b1) begin
        dout_re_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb && validOutLookahead_1) begin
          dout_re_1 <= converterOut;
        end
      end
    end



  always @(posedge clk)
    begin : validOutLookahead_2_process
      if (reset_x == 1'b1) begin
        validOutLookahead_reg_1 <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          validOutLookahead_reg_1[0] <= delayLineShiftEn5_1;
          validOutLookahead_reg_1[32'sd6:32'sd1] <= validOutLookahead_reg_1[32'sd5:32'sd0];
        end
      end
    end

  assign validOutLookahead_3 = validOutLookahead_reg_1[6];



  assign rdAddrEndZero_1 =  ~ rdAddr5;



  always @(posedge clk)
    begin : finalSumValidPipe_1_process
      if (reset_x == 1'b1) begin
        finalSumValidPipe_reg_1 <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          finalSumValidPipe_reg_1[0] <= rdAddrEndZero_1;
          finalSumValidPipe_reg_1[32'sd5:32'sd1] <= finalSumValidPipe_reg_1[32'sd4:32'sd0];
        end
      end
    end

  assign accumulate_1 = finalSumValidPipe_reg_1[5];



  assign accDataOut_3 = 29'sb00000000000000000000000000000;



  tx_125_src_Addressable_Delay_Line_block4 u_delayLine0_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(dinSM_im),  // sfix16_En14
                                                           .wrEn(delayLineValidInP),
                                                           .rdAddr(rdAddr0_1),  // ufix1
                                                           .delayLineEnd(delayLineEnd0_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut0_1)  // sfix16_En14
                                                           );

  always @(posedge clk)
    begin : delayLineDataIn1_2_process
      if (reset_x == 1'b1) begin
        delayLineDataIn1_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn1_3 <= delayLineEnd0_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block4 u_delayLine1_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineDataIn1_3),  // sfix16_En14
                                                           .wrEn(delayLineShiftEn1_1),
                                                           .rdAddr(rdAddr1),  // ufix1
                                                           .delayLineEnd(delayLineEnd1_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut1_1)  // sfix16_En14
                                                           );

  always @(posedge clk)
    begin : delayLineDataIn2_2_process
      if (reset_x == 1'b1) begin
        delayLineDataIn2_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn2_3 <= delayLineEnd1_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block4 u_delayLine2_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineDataIn2_3),  // sfix16_En14
                                                           .wrEn(delayLineShiftEn2_1),
                                                           .rdAddr(rdAddr2),  // ufix1
                                                           .delayLineEnd(delayLineEnd2_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut2_1)  // sfix16_En14
                                                           );

  always @(posedge clk)
    begin : delayLineDataIn3_2_process
      if (reset_x == 1'b1) begin
        delayLineDataIn3_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn3_3 <= delayLineEnd2_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block5 u_delayLine3_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineDataIn3_3),  // sfix16_En14
                                                           .wrEn(delayLineShiftEn3_1),
                                                           .rdAddr(rdAddr3),  // ufix1
                                                           .delayLineEnd(delayLineEnd3_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut3_1)  // sfix16_En14
                                                           );

  always @(posedge clk)
    begin : delayLineDataIn4_2_process
      if (reset_x == 1'b1) begin
        delayLineDataIn4_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn4_3 <= delayLineEnd3_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block6 u_delayLine4_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineDataIn4_3),  // sfix16_En14
                                                           .validIn(delayLineShiftEn4_1),
                                                           .rdAddr(rdAddr4),  // ufix1
                                                           .delayLineEnd(delayLineEnd4_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut4_1)  // sfix16_En14
                                                           );

  assign preAddIn_1 = 16'sb0000000000000000;



  // Coefficient table for multiplier4
  always @(rdAddr4) begin
    case ( rdAddr4)
      1'b0 :
        begin
          coeffTableOut4_1 = 16'sb0000111111100100;
        end
      1'b1 :
        begin
          coeffTableOut4_1 = 16'sb0000000000000000;
        end
      default :
        begin
          coeffTableOut4_1 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP4_2_process
      if (enb) begin
        coeffTableRegP4_3 <= coeffTableOut4_1;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg4_2_process
      if (reset_x == 1'b1) begin
        coeffTableReg4_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg4_3 <= coeffTableRegP4_3;
        end
      end
    end



  always @(posedge clk)
    begin : delayLineDataIn5_2_process
      if (reset_x == 1'b1) begin
        delayLineDataIn5_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          delayLineDataIn5_3 <= delayLineEnd4_1;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block7 u_delayLine5_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineDataIn5_3),  // sfix16_En14
                                                           .validIn(delayLineShiftEn4_1),
                                                           .lutaddr(rdAddr4),  // ufix1
                                                           .delayLineEnd(delayLineEnd5_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut5_1)  // sfix16_En14
                                                           );

  // Coefficient table for multiplier3
  always @(rdAddr3) begin
    case ( rdAddr3)
      1'b0 :
        begin
          coeffTableOut3_1 = 16'sb0000000000011011;
        end
      1'b1 :
        begin
          coeffTableOut3_1 = 16'sb0000000000000000;
        end
      default :
        begin
          coeffTableOut3_1 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP3_2_process
      if (enb) begin
        coeffTableRegP3_3 <= coeffTableOut3_1;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg3_2_process
      if (reset_x == 1'b1) begin
        coeffTableReg3_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg3_3 <= coeffTableRegP3_3;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block8 u_delayLine6_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineEnd5_1),  // sfix16_En14
                                                           .validIn(delayLineShiftEn3_1),
                                                           .rdAddr(rdAddr3),  // ufix1
                                                           .delayLineEnd(delayLineEnd6_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut6_1)  // sfix16_En14
                                                           );

  // Coefficient table for multiplier2
  always @(rdAddr2) begin
    case ( rdAddr2)
      1'b0 :
        begin
          coeffTableOut2_1 = 16'sb0000000000011001;
        end
      1'b1 :
        begin
          coeffTableOut2_1 = 16'sb1111111111100101;
        end
      default :
        begin
          coeffTableOut2_1 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP2_2_process
      if (enb) begin
        coeffTableRegP2_3 <= coeffTableOut2_1;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg2_2_process
      if (reset_x == 1'b1) begin
        coeffTableReg2_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg2_3 <= coeffTableRegP2_3;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block8 u_delayLine7_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineEnd6_1),  // sfix16_En14
                                                           .validIn(delayLineShiftEn2_1),
                                                           .rdAddr(rdAddr2),  // ufix1
                                                           .delayLineEnd(delayLineEnd7_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut7_1)  // sfix16_En14
                                                           );

  // Coefficient table for multiplier1
  always @(rdAddr1) begin
    case ( rdAddr1)
      1'b0 :
        begin
          coeffTableOut1_1 = 16'sb0000000000010000;
        end
      1'b1 :
        begin
          coeffTableOut1_1 = 16'sb1111111111100111;
        end
      default :
        begin
          coeffTableOut1_1 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP1_2_process
      if (enb) begin
        coeffTableRegP1_3 <= coeffTableOut1_1;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg1_2_process
      if (reset_x == 1'b1) begin
        coeffTableReg1_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg1_3 <= coeffTableRegP1_3;
        end
      end
    end



  tx_125_src_Addressable_Delay_Line_block8 u_delayLine8_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .dataIn(delayLineEnd7_1),  // sfix16_En14
                                                           .validIn(delayLineShiftEn1_1),
                                                           .rdAddr(rdAddr1),  // ufix1
                                                           .delayLineEnd(delayLineEnd8deadOut_1),  // sfix16_En14
                                                           .dataOut(delayLineDataOut8_1)  // sfix16_En14
                                                           );

  // Coefficient table for multiplier0
  always @(rdAddr0_1) begin
    case ( rdAddr0_1)
      1'b0 :
        begin
          coeffTableOut0_1 = 16'sb0000000000001001;
        end
      1'b1 :
        begin
          coeffTableOut0_1 = 16'sb1111111111101011;
        end
      default :
        begin
          coeffTableOut0_1 = 16'sb0000000000000000;
        end
    endcase
  end



  always @(posedge clk)
    begin : coeffTableRegP0_2_process
      if (enb) begin
        coeffTableRegP0_3 <= coeffTableOut0_1;
      end
    end



  always @(posedge clk)
    begin : coeffTableReg0_2_process
      if (reset_x == 1'b1) begin
        coeffTableReg0_3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          coeffTableReg0_3 <= coeffTableRegP0_3;
        end
      end
    end



  assign sumIn_1 = 29'sb00000000000000000000000000000;



  tx_125_src_FilterTapSystolicPreAdd_block u_filterTap0_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .din_im(delayLineDataOut0_1),  // sfix16_En14
                                                           .preAddIn(delayLineDataOut8_1),  // sfix16_En14
                                                           .coeff(coeffTableReg0_3),  // sfix16_En12
                                                           .sumIn(sumIn_1),  // sfix29_En26
                                                           .sumOut(sumOut_4)  // sfix29_En26
                                                           );

  tx_125_src_FilterTapSystolicPreAdd_block u_filterTap1_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .din_im(delayLineDataOut1_1),  // sfix16_En14
                                                           .preAddIn(delayLineDataOut7_1),  // sfix16_En14
                                                           .coeff(coeffTableReg1_3),  // sfix16_En12
                                                           .sumIn(sumOut_4),  // sfix29_En26
                                                           .sumOut(sumOut_0_1)  // sfix29_En26
                                                           );

  tx_125_src_FilterTapSystolicPreAdd_block u_filterTap2_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .din_im(delayLineDataOut2_1),  // sfix16_En14
                                                           .preAddIn(delayLineDataOut6_1),  // sfix16_En14
                                                           .coeff(coeffTableReg2_3),  // sfix16_En12
                                                           .sumIn(sumOut_0_1),  // sfix29_En26
                                                           .sumOut(sumOut_1_1)  // sfix29_En26
                                                           );

  tx_125_src_FilterTapSystolicPreAdd_block u_filterTap3_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .din_im(delayLineDataOut3_1),  // sfix16_En14
                                                           .preAddIn(delayLineDataOut5_1),  // sfix16_En14
                                                           .coeff(coeffTableReg3_3),  // sfix16_En12
                                                           .sumIn(sumOut_1_1),  // sfix29_En26
                                                           .sumOut(sumOut_2_1)  // sfix29_En26
                                                           );

  tx_125_src_FilterTapSystolicPreAdd_block u_filterTap4_1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(enb),
                                                           .din_im(delayLineDataOut4_1),  // sfix16_En14
                                                           .preAddIn(preAddIn_1),  // sfix16_En14
                                                           .coeff(coeffTableReg4_3),  // sfix16_En12
                                                           .sumIn(sumOut_2_1),  // sfix29_En26
                                                           .sumOut(sumOut_3_1)  // sfix29_En26
                                                           );

  always @(posedge clk)
    begin : sumOutReg_2_process
      if (reset_x == 1'b1) begin
        sumOutReg_3 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sumOutReg_3 <= sumOut_3_1;
        end
      end
    end



  assign accSwitchOut_1 = (accumulate_1 == 1'b0 ? accDataOut_4 :
              accDataOut_3);



  assign accAdderOut_1 = accSwitchOut_1 + sumOutReg_3;



  always @(posedge clk)
    begin : accDataOut_5_process
      if (reset_x == 1'b1) begin
        accDataOut_4 <= 29'sb00000000000000000000000000000;
      end
      else begin
        if (enb) begin
          accDataOut_4 <= accAdderOut_1;
        end
      end
    end



  assign converterOut_1 = {accDataOut_4[28], accDataOut_4[28:14]};



  always @(posedge clk)
    begin : dout_im_process
      if (reset_x == 1'b1) begin
        dout_im_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb && validOutLookahead_3) begin
          dout_im_1 <= converterOut_1;
        end
      end
    end



  assign dataZero = 16'sb0000000000000000;



  assign dataZero_dtc_re = dataZero;
  assign dataZero_dtc_im = 16'sb0000000000000000;



  assign dout_cmplxSW_re = (notValid == 1'b0 ? dout_re_1 :
              dataZero_dtc_re);
  assign dout_cmplxSW_im = (notValid == 1'b0 ? dout_im_1 :
              dataZero_dtc_im);



  assign dataOut_re = dout_cmplxSW_re;

  assign dataOut_im = dout_cmplxSW_im;

  assign validOut = vldOut_1;

endmodule  // tx_125_src_FIRFilter1

