// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_payload_full.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_payload_full
// Source Path: HDLTx/full_tx/payload_full
// Hierarchy Level: 1
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_payload_full
          (clk,
           reset_x,
           enb_1_8_0,
           enb,
           enb_1_8_1,
           data_in,
           valid_in,
           last_frame,
           new_frame,
           scrambler_init_0,
           scrambler_init_1,
           scrambler_init_2,
           scrambler_init_3,
           bat_id_0,
           bat_id_1,
           bat_id_2,
           bat_id_3,
           psdu_size_0,
           psdu_size_1,
           psdu_size_2,
           psdu_size_3,
           psdu_size_4,
           psdu_size_5,
           psdu_size_6,
           psdu_size_7,
           psdu_size_8,
           psdu_size_9,
           psdu_size_10,
           psdu_size_11,
           psdu_size_12,
           psdu_size_13,
           psdu_size_14,
           psdu_size_15,
           psdu_size_16,
           psdu_size_17,
           psdu_size_18,
           psdu_size_19,
           psdu_size_20,
           psdu_size_21,
           psdu_size_22,
           psdu_size_23,
           payload,
           ctrl_out_start,
           ctrl_out_end,
           ctrl_out_valid,
           ready,
           len_in_ofdm_symbols,
           bits_per_subcarrier);


  input   clk;
  input   reset_x;
  input   enb_1_8_0;
  input   enb;
  input   enb_1_8_1;
  input   [7:0] data_in;  // uint8
  input   valid_in;
  input   last_frame;
  input   new_frame;
  input   scrambler_init_0;  // boolean
  input   scrambler_init_1;  // boolean
  input   scrambler_init_2;  // boolean
  input   scrambler_init_3;  // boolean
  input   bat_id_0;  // boolean
  input   bat_id_1;  // boolean
  input   bat_id_2;  // boolean
  input   bat_id_3;  // boolean
  input   psdu_size_0;  // boolean
  input   psdu_size_1;  // boolean
  input   psdu_size_2;  // boolean
  input   psdu_size_3;  // boolean
  input   psdu_size_4;  // boolean
  input   psdu_size_5;  // boolean
  input   psdu_size_6;  // boolean
  input   psdu_size_7;  // boolean
  input   psdu_size_8;  // boolean
  input   psdu_size_9;  // boolean
  input   psdu_size_10;  // boolean
  input   psdu_size_11;  // boolean
  input   psdu_size_12;  // boolean
  input   psdu_size_13;  // boolean
  input   psdu_size_14;  // boolean
  input   psdu_size_15;  // boolean
  input   psdu_size_16;  // boolean
  input   psdu_size_17;  // boolean
  input   psdu_size_18;  // boolean
  input   psdu_size_19;  // boolean
  input   psdu_size_20;  // boolean
  input   psdu_size_21;  // boolean
  input   psdu_size_22;  // boolean
  input   psdu_size_23;  // boolean
  output  payload;
  output  ctrl_out_start;
  output  ctrl_out_end;
  output  ctrl_out_valid;
  output  ready;
  output  [15:0] len_in_ofdm_symbols;  // uint16
  output  [3:0] bits_per_subcarrier;  // ufix4


  wire Logical_Operator5_out1;
  wire Switch1_out1;
  reg  Unit_Delay1_out1;
  reg  Delay3_out1;
  reg [7:0] Delay4_out1;  // uint8
  wire y_1;  // ufix1
  wire y_2;  // ufix1
  wire y_3;  // ufix1
  wire y_4;  // ufix1
  wire y_5;  // ufix1
  wire y_6;  // ufix1
  wire y_7;  // ufix1
  wire y_8;  // ufix1
  wire [7:0] y;  // ufix1 [8]
  wire [7:0] serial_in_1;  // ufix1 [8]
  wire [3:0] scrambler_init;  // boolean [4]
  reg  [3:0] Rate_Transition1_out1;  // boolean [4]
  wire Serializer1D_out2;
  wire valid_to_ctrl_out1_start;
  wire valid_to_ctrl_out1_end;
  wire valid_to_ctrl_out1_valid;
  wire reduced_ldpc_out3;
  reg  Delay1_out1;
  reg  Rate_Transition_out1;
  reg  Delay5_out1;
  wire Logical_Operator1_out1;
  reg  Delay2_out1;
  wire Logical_Operator_out1;
  wire control_in_2;
  reg [2:0] Serializer1D_contl_cnt;  // ufix3
  wire Serializer1D_invldSignal;
  reg  [6:0] Serializer1D_data;  // ufix1 [7]
  reg  [6:0] Serializer1D_data_next;  // ufix1 [7]
  reg  serializer_PostProcessed;  // ufix1
  reg  Delay_out1;  // ufix1
  wire p_scrambler_out1;
  wire p_scrambler_out2_start;
  wire p_scrambler_out2_end;
  wire p_scrambler_out2_valid;
  wire dataOut;
  wire reduced_ldpc_out2_start;
  wire reduced_ldpc_out2_end;
  wire reduced_ldpc_out2_valid;
  wire puncturer_out1;
  wire puncturer_out2_start;
  wire puncturer_out2_end;
  wire puncturer_out2_valid;
  wire payload_rep_out1;
  wire ctrl_in_start;
  wire ctrl_in_end;
  wire ctrl_in_valid;
  wire [3:0] y_9;  // ufix4
  reg [3:0] bits_per_subcarrier_1;  // ufix4
  wire [15:0] psdu_size_to_payload_len_out1;  // uint16
  reg [15:0] len_in_ofdm_symbols_1;  // uint16
  reg  Rate_Transition6_out1;
  wire tone_mapping_out1;
  wire tone_mapping_out2_start;
  wire tone_mapping_out2_end;
  wire tone_mapping_out2_valid;

  // Note: careful when adding delays to signals "ready, valid or data" outside this block


  assign Logical_Operator5_out1 = new_frame | last_frame;



  always @(posedge clk)
    begin : Unit_Delay1_process
      if (reset_x == 1'b1) begin
        Unit_Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Unit_Delay1_out1 <= Switch1_out1;
        end
      end
    end



  assign Switch1_out1 = (Logical_Operator5_out1 == 1'b0 ? Unit_Delay1_out1 :
              new_frame);



  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay3_out1 <= valid_in;
        end
      end
    end



  always @(posedge clk)
    begin : Delay4_process
      if (reset_x == 1'b1) begin
        Delay4_out1 <= 8'b00000000;
      end
      else begin
        if (enb_1_8_0) begin
          Delay4_out1 <= data_in;
        end
      end
    end



  assign y_1 = Delay4_out1[0];



  assign y_2 = Delay4_out1[1];



  assign y_3 = Delay4_out1[2];



  assign y_4 = Delay4_out1[3];



  assign y_5 = Delay4_out1[4];



  assign y_6 = Delay4_out1[5];



  assign y_7 = Delay4_out1[6];



  assign y_8 = Delay4_out1[7];



  assign y[0] = y_1;
  assign y[1] = y_2;
  assign y[2] = y_3;
  assign y[3] = y_4;
  assign y[4] = y_5;
  assign y[5] = y_6;
  assign y[6] = y_7;
  assign y[7] = y_8;

  assign serial_in_1[0] = y[0];
  assign serial_in_1[1] = y[1];
  assign serial_in_1[2] = y[2];
  assign serial_in_1[3] = y[3];
  assign serial_in_1[4] = y[4];
  assign serial_in_1[5] = y[5];
  assign serial_in_1[6] = y[6];
  assign serial_in_1[7] = y[7];

  assign scrambler_init[0] = scrambler_init_0;
  assign scrambler_init[1] = scrambler_init_1;
  assign scrambler_init[2] = scrambler_init_2;
  assign scrambler_init[3] = scrambler_init_3;

  always @(posedge clk)
    begin : Rate_Transition1_process
      if (reset_x == 1'b1) begin
        Rate_Transition1_out1 <= {4{1'b0}};
      end
      else begin
        if (enb_1_8_0) begin
          Rate_Transition1_out1 <= scrambler_init;
        end
      end
    end



  tx_125_src_valid_to_ctrl_block1 u_valid_to_ctrl (.clk(clk),
                                                   .reset_x(reset_x),
                                                   .enb(enb),
                                                   .validIn(Serializer1D_out2),
                                                   .ctrlOut_start(valid_to_ctrl_out1_start),
                                                   .ctrlOut_end(valid_to_ctrl_out1_end),
                                                   .ctrlOut_valid(valid_to_ctrl_out1_valid)
                                                   );

  always @(posedge clk)
    begin : Delay1_process
      if (reset_x == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= reduced_ldpc_out3;
        end
      end
    end



  always @(posedge clk)
    begin : Rate_Transition_output_process
      if (reset_x == 1'b1) begin
        Rate_Transition_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_1) begin
          Rate_Transition_out1 <= Delay1_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Delay5_process
      if (reset_x == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay5_out1 <= Rate_Transition_out1;
        end
      end
    end



  assign Logical_Operator1_out1 = Switch1_out1 & Delay5_out1;



  tx_125_src_next_frame_to_ready u_next_frame_to_ready (.clk(clk),
                                                        .reset_x(reset_x),
                                                        .enb_1_8_0(enb_1_8_0),
                                                        .next_frame(Logical_Operator1_out1),
                                                        .ready(ready)
                                                        );

  always @(posedge clk)
    begin : Delay2_process
      if (reset_x == 1'b1) begin
        Delay2_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Delay2_out1 <= ready;
        end
      end
    end



  assign Logical_Operator_out1 = Delay2_out1 & Delay3_out1;



  assign control_in_2 = Logical_Operator_out1;

  always @(posedge clk)
    begin : Serializer1D_contl_process
      if (reset_x == 1'b1) begin
        Serializer1D_contl_cnt <= 3'b000;
      end
      else begin
        if (enb) begin
          if (Serializer1D_contl_cnt == 3'b111) begin
            Serializer1D_contl_cnt <= 3'b000;
          end
          else begin
            Serializer1D_contl_cnt <= Serializer1D_contl_cnt + 3'b001;
          end
        end
      end
    end

  assign Serializer1D_out2 = control_in_2 != 1'b0;
  assign Serializer1D_invldSignal = Serializer1D_contl_cnt == 3'b000;



  always @(posedge clk)
    begin : Serializer1D_process
      if (reset_x == 1'b1) begin
        Serializer1D_data <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          Serializer1D_data <= Serializer1D_data_next;
        end
      end
    end

  always @* begin
    Serializer1D_data_next = Serializer1D_data;
    if (Serializer1D_invldSignal != 1'b0) begin
      serializer_PostProcessed = serial_in_1[0];
    end
    else begin
      serializer_PostProcessed = Serializer1D_data[0];
    end
    if (Serializer1D_invldSignal != 1'b0) begin
      Serializer1D_data_next[32'sd6:32'sd0] = serial_in_1[32'sd7:32'sd1];
    end
    else begin
      Serializer1D_data_next[32'sd5:32'sd0] = Serializer1D_data[32'sd6:32'sd1];
      Serializer1D_data_next[6] = serial_in_1[7];
    end
  end



  always @(posedge clk)
    begin : Delay_process
      if (reset_x == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= serializer_PostProcessed;
        end
      end
    end



  tx_125_src_p_scrambler u_p_scrambler (.clk(clk),
                                        .reset_x(reset_x),
                                        .enb(enb),
                                        .data_in(Delay_out1),  // ufix1
                                        .ctrl_in_start(valid_to_ctrl_out1_start),
                                        .ctrl_in_end(valid_to_ctrl_out1_end),
                                        .ctrl_in_valid(valid_to_ctrl_out1_valid),
                                        .SI_0(Rate_Transition1_out1[0]),  // boolean
                                        .SI_1(Rate_Transition1_out1[1]),  // boolean
                                        .SI_2(Rate_Transition1_out1[2]),  // boolean
                                        .SI_3(Rate_Transition1_out1[3]),  // boolean
                                        .data_out(p_scrambler_out1),
                                        .ctrl_out_start(p_scrambler_out2_start),
                                        .ctrl_out_end(p_scrambler_out2_end),
                                        .ctrl_out_valid(p_scrambler_out2_valid)
                                        );

  tx_125_src_reduced_ldpc u_reduced_ldpc (.clk(clk),
                                          .reset_x(reset_x),
                                          .enb(enb),
                                          .data_in(p_scrambler_out1),
                                          .ctrl_in_start(p_scrambler_out2_start),
                                          .ctrl_in_end(p_scrambler_out2_end),
                                          .ctrl_in_valid(p_scrambler_out2_valid),
                                          .data_out(dataOut),
                                          .ctrl_out_start(reduced_ldpc_out2_start),
                                          .ctrl_out_end(reduced_ldpc_out2_end),
                                          .ctrl_out_valid(reduced_ldpc_out2_valid),
                                          .next_frame(reduced_ldpc_out3)
                                          );

  tx_125_src_puncturer u_puncturer (.data_in(dataOut),
                                    .ctrl_in_start(reduced_ldpc_out2_start),
                                    .ctrl_in_end(reduced_ldpc_out2_end),
                                    .ctrl_in_valid(reduced_ldpc_out2_valid),
                                    .data_out(puncturer_out1),
                                    .ctrl_out_start(puncturer_out2_start),
                                    .ctrl_out_end(puncturer_out2_end),
                                    .ctrl_out_valid(puncturer_out2_valid)
                                    );

  tx_125_src_payload_rep u_payload_rep (.data_in(puncturer_out1),
                                        .ctrl_in_start(puncturer_out2_start),
                                        .ctrl_in_end(puncturer_out2_end),
                                        .ctrl_in_valid(puncturer_out2_valid),
                                        .data_out(payload_rep_out1),
                                        .ctrl_out_start(ctrl_in_start),
                                        .ctrl_out_end(ctrl_in_end),
                                        .ctrl_out_valid(ctrl_in_valid)
                                        );

  tx_125_src_batid_to_bits_per_subcarrier u_batid_to_bits_per_subcarrier (.bat_id_0(bat_id_0),  // boolean
                                                                          .bat_id_1(bat_id_1),  // boolean
                                                                          .bat_id_2(bat_id_2),  // boolean
                                                                          .bat_id_3(bat_id_3),  // boolean
                                                                          .bits_per_subcarrier(y_9)  // ufix4
                                                                          );

  always @(posedge clk)
    begin : Rate_Transition4_process
      if (reset_x == 1'b1) begin
        bits_per_subcarrier_1 <= 4'b0000;
      end
      else begin
        if (enb_1_8_0) begin
          bits_per_subcarrier_1 <= y_9;
        end
      end
    end



  tx_125_src_psdu_size_to_payload_len u_psdu_size_to_payload_len (.clk(clk),
                                                                  .reset_x(reset_x),
                                                                  .enb_1_8_0(enb_1_8_0),
                                                                  .bits_per_subcarrier(y_9),  // ufix4
                                                                  .psdu_size_0(psdu_size_0),  // boolean
                                                                  .psdu_size_1(psdu_size_1),  // boolean
                                                                  .psdu_size_2(psdu_size_2),  // boolean
                                                                  .psdu_size_3(psdu_size_3),  // boolean
                                                                  .psdu_size_4(psdu_size_4),  // boolean
                                                                  .psdu_size_5(psdu_size_5),  // boolean
                                                                  .psdu_size_6(psdu_size_6),  // boolean
                                                                  .psdu_size_7(psdu_size_7),  // boolean
                                                                  .psdu_size_8(psdu_size_8),  // boolean
                                                                  .psdu_size_9(psdu_size_9),  // boolean
                                                                  .psdu_size_10(psdu_size_10),  // boolean
                                                                  .psdu_size_11(psdu_size_11),  // boolean
                                                                  .psdu_size_12(psdu_size_12),  // boolean
                                                                  .psdu_size_13(psdu_size_13),  // boolean
                                                                  .psdu_size_14(psdu_size_14),  // boolean
                                                                  .psdu_size_15(psdu_size_15),  // boolean
                                                                  .psdu_size_16(psdu_size_16),  // boolean
                                                                  .psdu_size_17(psdu_size_17),  // boolean
                                                                  .psdu_size_18(psdu_size_18),  // boolean
                                                                  .psdu_size_19(psdu_size_19),  // boolean
                                                                  .psdu_size_20(psdu_size_20),  // boolean
                                                                  .psdu_size_21(psdu_size_21),  // boolean
                                                                  .psdu_size_22(psdu_size_22),  // boolean
                                                                  .psdu_size_23(psdu_size_23),  // boolean
                                                                  .payload_len_in_ofdm_symbols(psdu_size_to_payload_len_out1)  // uint16
                                                                  );

  always @(posedge clk)
    begin : Rate_Transition5_process
      if (reset_x == 1'b1) begin
        len_in_ofdm_symbols_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_8_0) begin
          len_in_ofdm_symbols_1 <= psdu_size_to_payload_len_out1;
        end
      end
    end



  always @(posedge clk)
    begin : Rate_Transition6_process
      if (reset_x == 1'b1) begin
        Rate_Transition6_out1 <= 1'b0;
      end
      else begin
        if (enb_1_8_0) begin
          Rate_Transition6_out1 <= new_frame;
        end
      end
    end



  tx_125_src_tone_mapping u_tone_mapping (.clk(clk),
                                          .reset_x(reset_x),
                                          .enb(enb),
                                          .data_in(payload_rep_out1),
                                          .ctrl_in_start(ctrl_in_start),
                                          .ctrl_in_end(ctrl_in_end),
                                          .ctrl_in_valid(ctrl_in_valid),
                                          .bits_per_subcarrier(bits_per_subcarrier_1),  // ufix4
                                          .len_in_ofdm_symbols(len_in_ofdm_symbols_1),  // uint16
                                          .new_frame(Rate_Transition6_out1),
                                          .data_out(tone_mapping_out1),
                                          .ctrl_out_start(tone_mapping_out2_start),
                                          .ctrl_out_end(tone_mapping_out2_end),
                                          .ctrl_out_valid(tone_mapping_out2_valid)
                                          );

  assign payload = tone_mapping_out1;

  assign ctrl_out_start = tone_mapping_out2_start;

  assign ctrl_out_end = tone_mapping_out2_end;

  assign ctrl_out_valid = tone_mapping_out2_valid;

  assign len_in_ofdm_symbols = len_in_ofdm_symbols_1;

  assign bits_per_subcarrier = bits_per_subcarrier_1;

endmodule  // tx_125_src_payload_full

