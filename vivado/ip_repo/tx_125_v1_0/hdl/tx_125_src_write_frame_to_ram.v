// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_write_frame_to_ram.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_write_frame_to_ram
// Source Path: HDLTx/full_tx/store_frame_in_ram/write_frame_to_ram
// Hierarchy Level: 2
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_write_frame_to_ram
          (clk,
           reset_x,
           enb_1_2_0,
           preamble,
           preamble_valid,
           channel,
           channel_valid,
           header_0,
           header_1,
           header_valid,
           payload_0,
           payload_1,
           payload_valid,
           payload_len,
           write_data,
           wr_addr,
           we,
           end_rsvd,
           ram_size);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   preamble;
  input   preamble_valid;
  input   channel;
  input   channel_valid;
  input   header_0;  // boolean
  input   header_1;  // boolean
  input   header_valid;
  input   payload_0;  // boolean
  input   payload_1;  // boolean
  input   payload_valid;
  input   [15:0] payload_len;  // uint16
  output  [11:0] write_data;  // ufix12
  output  [15:0] wr_addr;  // uint16
  output  we;
  output  end_rsvd;
  output  [24:0] ram_size;  // ufix25


  wire [11:0] ram_formatting_out1;  // ufix12
  wire [12:0] Constant73_out1;  // ufix13
  wire [7:0] Constant43_out1;  // uint8
  wire [23:0] Product_out1;  // ufix24
  wire stateControl;
  reg  stateControl_1;
  wire enb_1_2_0_gated;
  reg [23:0] Delay8_out1;  // ufix24
  wire [24:0] Add1_1;  // ufix25
  wire [24:0] Add1_2;  // ufix25
  wire [24:0] Add1_out1;  // ufix25
  wire stateControl_2;
  reg  stateControl_3;
  wire enb_1_2_0_gated_1;
  reg [24:0] Delay9_out1;  // ufix25
  wire stateControl_5;
  reg  stateControl_6;
  wire enb_1_2_0_gated_2;
  wire [15:0] count_step;  // uint16
  wire [15:0] count_reset;  // uint16
  reg [15:0] wr_addr_1;  // uint16
  wire [15:0] count;  // uint16
  wire [15:0] count_1;  // uint16
  wire [24:0] Relational_Operator_1;  // ufix25
  wire Relational_Operator_out1;
  reg  Delay3_out1;
  wire [15:0] count_2;  // uint16


  tx_125_src_ram_formatting u_ram_formatting (.channel_valid(channel_valid),
                                              .header_valid(header_valid),
                                              .payload_valid(payload_valid),
                                              .preamble(preamble),
                                              .channel(channel),
                                              .header_0(header_0),  // boolean
                                              .header_1(header_1),  // boolean
                                              .payload_0(payload_0),  // boolean
                                              .payload_1(payload_1),  // boolean
                                              .Out1(ram_formatting_out1)  // ufix12
                                              );

  assign write_data = ram_formatting_out1;

  assign Constant73_out1 = 13'b0110011100001;



  assign Constant43_out1 = 8'b11000010;



  assign Product_out1 = Constant43_out1 * payload_len;



  assign stateControl = 1'b1;



  always @(posedge clk)
    begin : delayMatch1_process
      if (reset_x == 1'b1) begin
        stateControl_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_1 <= stateControl;
        end
      end
    end



  assign enb_1_2_0_gated = stateControl_1 && enb_1_2_0;

  always @(posedge clk)
    begin : Delay8_process
      if (reset_x == 1'b1) begin
        Delay8_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb_1_2_0_gated) begin
          Delay8_out1 <= Product_out1;
        end
      end
    end



  assign Add1_1 = {12'b0, Constant73_out1};
  assign Add1_2 = {1'b0, Delay8_out1};
  assign Add1_out1 = Add1_1 + Add1_2;



  assign stateControl_2 = 1'b1;



  always @(posedge clk)
    begin : delayMatch2_process
      if (reset_x == 1'b1) begin
        stateControl_3 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_3 <= stateControl_2;
        end
      end
    end



  assign enb_1_2_0_gated_1 = stateControl_3 && enb_1_2_0;

  always @(posedge clk)
    begin : Delay9_process
      if (reset_x == 1'b1) begin
        Delay9_out1 <= 25'b0000000000000000000000001;
      end
      else begin
        if (enb_1_2_0_gated_1) begin
          Delay9_out1 <= Add1_out1;
        end
      end
    end



  assign stateControl_5 = 1'b1;



  always @(posedge clk)
    begin : delayMatch_process
      if (reset_x == 1'b1) begin
        stateControl_6 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          stateControl_6 <= stateControl_5;
        end
      end
    end



  assign enb_1_2_0_gated_2 = stateControl_6 && enb_1_2_0;

  assign we = payload_valid | (header_valid | (preamble_valid | channel_valid));



  // Free running, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  assign count_step = 16'b0000000000000001;



  assign count_reset = 16'b0000000000000000;



  assign count = wr_addr_1 + count_step;



  assign count_1 = (we == 1'b0 ? wr_addr_1 :
              count);



  assign Relational_Operator_1 = {9'b0, wr_addr_1};
  assign Relational_Operator_out1 = Delay9_out1 == Relational_Operator_1;



  always @(posedge clk)
    begin : Delay3_process
      if (reset_x == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0_gated_2) begin
          Delay3_out1 <= Relational_Operator_out1;
        end
      end
    end



  assign count_2 = (Delay3_out1 == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset_x == 1'b1) begin
        wr_addr_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          wr_addr_1 <= count_2;
        end
      end
    end



  assign end_rsvd = Delay3_out1;

  assign ram_size = Delay9_out1;

  assign wr_addr = wr_addr_1;

endmodule  // tx_125_src_write_frame_to_ram

