// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_RADIX22FFT_CTRL1_7.v
// Created: 2024-09-14 22:22:21
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_RADIX22FFT_CTRL1_7
// Source Path: HDLTx/full_tx/full_ofdm_modulator/ofdm_modulator/OFDM Modulator/dsphdl.IFFT/RADIX22FFT_CTRL1_7
// Hierarchy Level: 5
// Model version: 4.114
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_RADIX22FFT_CTRL1_7
          (clk,
           reset_x,
           enb_1_2_0,
           dinXTwdl_7_1_vld,
           dinXTwdl_7_1_vld_1,
           rd_7_Addr,
           rd_7_Enb,
           proc_7_enb);


  input   clk;
  input   reset_x;
  input   enb_1_2_0;
  input   dinXTwdl_7_1_vld;
  input   dinXTwdl_7_1_vld_1;
  output  rd_7_Addr;  // ufix1
  output  rd_7_Enb;
  output  proc_7_enb;


  reg  SDFController_wrCount;  // ufix1
  reg [1:0] SDFController_wrState;  // ufix2
  reg [1:0] SDFController_rdState;  // ufix2
  reg  SDFController_rdAddr_reg;  // ufix1
  reg  SDFController_procEnb_reg;
  reg [1:0] SDFController_multjState;  // ufix2
  reg  SDFController_multiply_J_reg;
  reg  SDFController_wrCount_next;  // ufix1
  reg [1:0] SDFController_wrState_next;  // ufix2
  reg [1:0] SDFController_rdState_next;  // ufix2
  reg  SDFController_rdAddr_reg_next;  // ufix1
  reg  SDFController_procEnb_reg_next;
  reg [1:0] SDFController_multjState_next;  // ufix2
  reg  SDFController_multiply_J_reg_next;
  reg  rd_7_Addr_1;  // ufix1
  reg  rd_7_Enb_1;
  reg  proc_7_enb_1;
  reg  multiply_7_J;


  // SDFController
  always @(posedge clk)
    begin : SDFController_process
      if (reset_x == 1'b1) begin
        SDFController_wrCount <= 1'b0;
        SDFController_rdAddr_reg <= 1'b0;
        SDFController_wrState <= 2'b00;
        SDFController_rdState <= 2'b00;
        SDFController_multjState <= 2'b00;
        SDFController_procEnb_reg <= 1'b0;
        SDFController_multiply_J_reg <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          SDFController_wrCount <= SDFController_wrCount_next;
          SDFController_wrState <= SDFController_wrState_next;
          SDFController_rdState <= SDFController_rdState_next;
          SDFController_rdAddr_reg <= SDFController_rdAddr_reg_next;
          SDFController_procEnb_reg <= SDFController_procEnb_reg_next;
          SDFController_multjState <= SDFController_multjState_next;
          SDFController_multiply_J_reg <= SDFController_multiply_J_reg_next;
        end
      end
    end

  always @(SDFController_multiply_J_reg, SDFController_multjState,
       SDFController_procEnb_reg, SDFController_rdAddr_reg,
       SDFController_rdState, SDFController_wrCount, SDFController_wrState,
       dinXTwdl_7_1_vld, dinXTwdl_7_1_vld_1) begin
    SDFController_wrCount_next = SDFController_wrCount;
    SDFController_rdState_next = SDFController_rdState;
    SDFController_rdAddr_reg_next = SDFController_rdAddr_reg;
    SDFController_multjState_next = SDFController_multjState;
    case ( SDFController_multjState)
      2'b00 :
        begin
          SDFController_multjState_next = 2'b00;
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b01;
          end
        end
      2'b01 :
        begin
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b10) begin
            SDFController_multjState_next = 2'b10;
          end
        end
      2'b10 :
        begin
          SDFController_multiply_J_reg_next = 1'b0;
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b11;
            SDFController_multiply_J_reg_next = 1'b1;
          end
        end
      2'b11 :
        begin
          if (SDFController_rdState == 2'b01) begin
            SDFController_multjState_next = 2'b11;
            SDFController_multiply_J_reg_next = 1'b1;
          end
          else begin
            SDFController_multiply_J_reg_next = 1'b0;
            SDFController_multjState_next = 2'b00;
          end
        end
      default :
        begin
          SDFController_multjState_next = 2'b00;
          SDFController_multiply_J_reg_next = 1'b0;
        end
    endcase
    case ( SDFController_rdState)
      2'b00 :
        begin
          SDFController_rdState_next = 2'b00;
          SDFController_rdAddr_reg_next = 1'b0;
          rd_7_Enb_1 = 1'b0;
          if (SDFController_procEnb_reg) begin
            SDFController_rdState_next = 2'b01;
            rd_7_Enb_1 = dinXTwdl_7_1_vld_1;
            if (dinXTwdl_7_1_vld_1) begin
              SDFController_rdAddr_reg_next = 1'b1;
            end
          end
        end
      2'b01 :
        begin
          SDFController_rdState_next = 2'b01;
          rd_7_Enb_1 = dinXTwdl_7_1_vld_1;
          if (dinXTwdl_7_1_vld_1) begin
            if (SDFController_rdAddr_reg == 1'b1) begin
              SDFController_rdState_next = 2'b10;
              SDFController_rdAddr_reg_next = 1'b0;
            end
            else begin
              SDFController_rdAddr_reg_next = 1'b1;
            end
          end
        end
      2'b10 :
        begin
          rd_7_Enb_1 = 1'b0;
          if (SDFController_rdAddr_reg == 1'b1) begin
            SDFController_rdAddr_reg_next = 1'b0;
            if (SDFController_procEnb_reg) begin
              SDFController_rdState_next = 2'b01;
            end
            else begin
              SDFController_rdState_next = 2'b00;
            end
          end
          else begin
            SDFController_rdAddr_reg_next = 1'b1;
          end
        end
      default :
        begin
          SDFController_rdState_next = 2'b00;
          SDFController_rdAddr_reg_next = 1'b0;
          rd_7_Enb_1 = 1'b0;
        end
    endcase
    case ( SDFController_wrState)
      2'b00 :
        begin
          SDFController_wrState_next = 2'b00;
          SDFController_wrCount_next = 1'b0;
          SDFController_procEnb_reg_next = 1'b0;
          if (dinXTwdl_7_1_vld) begin
            SDFController_wrState_next = 2'b01;
            SDFController_wrCount_next = 1'b1;
          end
        end
      2'b01 :
        begin
          SDFController_wrState_next = 2'b01;
          SDFController_procEnb_reg_next = 1'b0;
          if (dinXTwdl_7_1_vld) begin
            SDFController_wrState_next = 2'b10;
            SDFController_procEnb_reg_next = 1'b1;
            SDFController_wrCount_next = 1'b0;
          end
        end
      2'b10 :
        begin
          SDFController_wrState_next = 2'b10;
          SDFController_procEnb_reg_next = 1'b1;
          if (dinXTwdl_7_1_vld) begin
            if (SDFController_wrCount == 1'b1) begin
              SDFController_wrState_next = 2'b00;
              SDFController_procEnb_reg_next = 1'b0;
              SDFController_wrCount_next = 1'b0;
            end
            else begin
              SDFController_wrCount_next = 1'b1;
            end
          end
        end
      default :
        begin
          SDFController_wrState_next = 2'b00;
          SDFController_wrCount_next = 1'b0;
          SDFController_procEnb_reg_next = 1'b0;
        end
    endcase
    rd_7_Addr_1 = SDFController_rdAddr_reg;
    proc_7_enb_1 = SDFController_procEnb_reg;
    multiply_7_J = SDFController_multiply_J_reg;
  end



  assign rd_7_Addr = rd_7_Addr_1;

  assign rd_7_Enb = rd_7_Enb_1;

  assign proc_7_enb = proc_7_enb_1;

endmodule  // tx_125_src_RADIX22FFT_CTRL1_7

