// -------------------------------------------------------------
// 
// File Name: hdl_prj/hdlsrc/HDLTx/tx_125_src_full_tx_tc.v
// Created: 2024-09-14 22:22:20
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: tx_125_src_full_tx_tc
// Source Path: full_tx_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_1_1   : identical to clk_enable
// enb_1_2_0   : 2x slower than clk with last phase
// enb_1_2_1   : 2x slower than clk with phase 1
// enb_1_8_0   : 8x slower than clk with last phase
// enb_1_8_1   : 8x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module tx_125_src_full_tx_tc
          (clk,
           reset_x,
           clk_enable,
           enb,
           enb_1_1_1,
           enb_1_2_0,
           enb_1_2_1,
           enb_1_8_0,
           enb_1_8_1);


  input   clk;
  input   reset_x;
  input   clk_enable;
  (* direct_enable  = "yes" *)     output enb;
  (* direct_enable  = "yes" *)     output enb_1_1_1;
  (* direct_enable  = "yes" *)     output enb_1_2_0;
  (* direct_enable  = "yes" *)     output enb_1_2_1;
  (* direct_enable  = "yes" *)     output enb_1_8_0;
  (* direct_enable  = "yes" *)     output enb_1_8_1;


  reg  count2;  // ufix1
  wire comp_0_tmp;
  wire phase_0_tmp;
  (* keep  = "true", mcp_info  = "full_tx_tc.u1_d2_o0" *)   reg phase_0;
  wire enb_1_2_0_1;
  wire comp_1_tmp;
  wire phase_1_tmp;
  (* keep  = "true", mcp_info  = "full_tx_tc.u1_d2_o1" *)   reg phase_1;
  wire enb_1_2_1_1;
  reg [2:0] count8;  // ufix3
  wire comp_0_tmp_1;
  wire phase_0_tmp_1;
  (* keep  = "true", mcp_info  = "full_tx_tc.u1_d8_o0" *)   reg phase_0_1;
  wire enb_1_8_0_1;
  wire comp_1_tmp_1;
  wire phase_1_tmp_1;
  (* keep  = "true", mcp_info  = "full_tx_tc.u1_d8_o1" *)   reg phase_1_1;
  wire enb_1_8_1_1;


  assign enb = clk_enable;

  assign enb_1_1_1 = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk)
    begin : counter_2_process
      if (reset_x == 1'b1) begin
        count2 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          count2 <=  ~ count2;
        end
      end
    end



  assign comp_0_tmp = count2 == 1'b1;



  assign phase_0_tmp = comp_0_tmp & clk_enable;



  always @(posedge clk)
    begin : phase_delay_process
      if (reset_x == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end



  assign enb_1_2_0_1 = phase_0 & clk_enable;



  assign enb_1_2_0 = enb_1_2_0_1;

  assign comp_1_tmp = count2 == 1'b0;



  assign phase_1_tmp = comp_1_tmp & clk_enable;



  always @(posedge clk)
    begin : phase_delay_1_process
      if (reset_x == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end



  assign enb_1_2_1_1 = phase_1 & clk_enable;



  assign enb_1_2_1 = enb_1_2_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 7
  always @(posedge clk)
    begin : counter_8_process
      if (reset_x == 1'b1) begin
        count8 <= 3'b001;
      end
      else begin
        if (clk_enable) begin
          count8 <= count8 + 3'b001;
        end
      end
    end



  assign comp_0_tmp_1 = count8 == 3'b111;



  assign phase_0_tmp_1 = comp_0_tmp_1 & clk_enable;



  always @(posedge clk)
    begin : phase_delay_2_process
      if (reset_x == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end



  assign enb_1_8_0_1 = phase_0_1 & clk_enable;



  assign enb_1_8_0 = enb_1_8_0_1;

  assign comp_1_tmp_1 = count8 == 3'b000;



  assign phase_1_tmp_1 = comp_1_tmp_1 & clk_enable;



  always @(posedge clk)
    begin : phase_delay_3_process
      if (reset_x == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end



  assign enb_1_8_1_1 = phase_1_1 & clk_enable;



  assign enb_1_8_1 = enb_1_8_1_1;

endmodule  // tx_125_src_full_tx_tc

