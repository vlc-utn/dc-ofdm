-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_src_Complex_Divide_HDL_Optimized.vhd
-- Created: 2024-10-03 19:36:10
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_src_Complex_Divide_HDL_Optimized
-- Source Path: test/divider/Complex Divide HDL Optimized
-- Hierarchy Level: 1
-- Model version: 1.59
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip_src_Complex_Divide_HDL_Optimized IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        num_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validIn                           :   IN    std_logic;
        y_re                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validOut                          :   OUT   std_logic
        );
END divider_ip_src_Complex_Divide_HDL_Optimized;


ARCHITECTURE rtl OF divider_ip_src_Complex_Divide_HDL_Optimized IS

  -- Component Declarations
  COMPONENT divider_ip_src_Verify_divide_sizes
    PORT( denominator_re                  :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          denominator_im                  :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          numerator_re                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          numerator_im                    :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den_im                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_re                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_im                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
          );
  END COMPONENT;

  COMPONENT divider_ip_src_ForEach_Complex_Divide
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          den_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          y_re                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          y_im                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_src_Reshape_to_original_size
    PORT( y_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          y_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          u_re                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          u_im                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          z_re                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          z_im                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
          );
  END COMPONENT;

  COMPONENT divider_ip_src_y_u_1
    PORT( u                               :   IN    std_logic;
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_src_Verify_divide_sizes
    USE ENTITY work.divider_ip_src_Verify_divide_sizes(rtl);

  FOR ALL : divider_ip_src_ForEach_Complex_Divide
    USE ENTITY work.divider_ip_src_ForEach_Complex_Divide(rtl);

  FOR ALL : divider_ip_src_Reshape_to_original_size
    USE ENTITY work.divider_ip_src_Reshape_to_original_size(rtl);

  FOR ALL : divider_ip_src_y_u_1
    USE ENTITY work.divider_ip_src_y_u_1(rtl);

  -- Signals
  SIGNAL den_re_1                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL den_im_1                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL num_re_1                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL num_im_1                         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ForEach_Complex_Divide_out1_re   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ForEach_Complex_Divide_out1_im   : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ForEach_Complex_Divide_out2      : std_logic;
  SIGNAL z_re                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL z_im                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL z_re_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL z_im_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay17_out1_re                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay17_out1_im                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL y                                : std_logic;
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  u_Verify_divide_sizes : divider_ip_src_Verify_divide_sizes
    PORT MAP( denominator_re => den_re,  -- sfix16_En10
              denominator_im => den_im,  -- sfix16_En10
              numerator_re => num_re,  -- sfix16_En10
              numerator_im => num_im,  -- sfix16_En10
              den_re => den_re_1,  -- sfix16_En10
              den_im => den_im_1,  -- sfix16_En10
              num_re => num_re_1,  -- sfix16_En10
              num_im => num_im_1  -- sfix16_En10
              );

  u_ForEach_Complex_Divide_instance1 : divider_ip_src_ForEach_Complex_Divide
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              den_re => den_re_1,  -- sfix16_En10
              den_im => den_im_1,  -- sfix16_En10
              num_re => num_re_1,  -- sfix16_En10
              num_im => num_im_1,  -- sfix16_En10
              validIn => validIn,
              y_re => ForEach_Complex_Divide_out1_re,  -- sfix16_En10
              y_im => ForEach_Complex_Divide_out1_im,  -- sfix16_En10
              validOut => ForEach_Complex_Divide_out2
              );

  u_Reshape_to_original_size : divider_ip_src_Reshape_to_original_size
    PORT MAP( y_re => ForEach_Complex_Divide_out1_re,  -- sfix16_En10
              y_im => ForEach_Complex_Divide_out1_im,  -- sfix16_En10
              u_re => num_re,  -- sfix16_En10
              u_im => num_im,  -- sfix16_En10
              z_re => z_re,  -- sfix16_En10
              z_im => z_im  -- sfix16_En10
              );

  u_y_u_1 : divider_ip_src_y_u_1
    PORT MAP( u => ForEach_Complex_Divide_out2,
              y => y
              );

  z_re_signed <= signed(z_re);

  z_im_signed <= signed(z_im);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay17_out1_re <= to_signed(16#0000#, 16);
        Delay17_out1_im <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay17_out1_re <= z_re_signed;
        Delay17_out1_im <= z_im_signed;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  y_re <= std_logic_vector(Delay17_out1_re);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= y;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  validOut <= Delay1_out1;


END rtl;

