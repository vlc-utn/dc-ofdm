-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_src_Rotate_to_real.vhd
-- Created: 2024-10-03 19:36:10
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_src_Rotate_to_real
-- Source Path: test/divider/Complex Divide HDL Optimized/ForEach - Complex Divide/Rotate to real/Rotate to real
-- Hierarchy Level: 4
-- Model version: 1.59
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.divider_ip_src_divider_pac.ALL;

ENTITY divider_ip_src_Rotate_to_real IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        den_real                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den_imag                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_real                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_imag                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validIn                           :   IN    std_logic;
        den_real_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_real_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_imag_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validOut                          :   OUT   std_logic
        );
END divider_ip_src_Rotate_to_real;


ARCHITECTURE rtl OF divider_ip_src_Rotate_to_real IS

  -- Signals
  SIGNAL den_real_signed                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL den_imag_signed                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL num_real_signed                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL num_imag_signed                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL den_real_out_tmp                 : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL den_imag_out                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL num_real_out_tmp                 : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL num_imag_out_tmp                 : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL den_real_reg                     : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL den_imag_reg                     : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL num_real_reg                     : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL num_imag_reg                     : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL validReg                         : std_logic_vector(16 DOWNTO 0);  -- boolean [17]
  SIGNAL den_real_reg_next                : vector_of_signed16(0 TO 16);  -- sfix16_En10 [17]
  SIGNAL den_imag_reg_next                : vector_of_signed16(0 TO 16);  -- sfix16_En10 [17]
  SIGNAL num_real_reg_next                : vector_of_signed16(0 TO 16);  -- sfix16_En10 [17]
  SIGNAL num_imag_reg_next                : vector_of_signed16(0 TO 16);  -- sfix16_En10 [17]
  SIGNAL validReg_next                    : std_logic_vector(16 DOWNTO 0);  -- boolean [17]

BEGIN
  den_real_signed <= signed(den_real);

  den_imag_signed <= signed(den_imag);

  num_real_signed <= signed(num_real);

  num_imag_signed <= signed(num_imag);

  embreciprocals_c10_Rotate_to_real_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        num_real_reg <= (OTHERS => to_signed(16#0000#, 16));
        num_imag_reg <= (OTHERS => to_signed(16#0000#, 16));
        den_real_reg <= (OTHERS => to_signed(16#0000#, 16));
        den_imag_reg <= (OTHERS => to_signed(16#0000#, 16));
        validReg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        den_real_reg <= den_real_reg_next;
        den_imag_reg <= den_imag_reg_next;
        num_real_reg <= num_real_reg_next;
        num_imag_reg <= num_imag_reg_next;
        validReg <= validReg_next;
      END IF;
    END IF;
  END PROCESS embreciprocals_c10_Rotate_to_real_process;

  embreciprocals_c10_Rotate_to_real_output : PROCESS (den_imag_reg, den_imag_signed, den_real_reg, den_real_signed, num_imag_reg,
       num_imag_signed, num_real_reg, num_real_signed, validIn, validReg)
    VARIABLE d : signed(15 DOWNTO 0);
    VARIABLE n : signed(15 DOWNTO 0);
    VARIABLE a : signed(15 DOWNTO 0);
    VARIABLE c : signed(15 DOWNTO 0);
    VARIABLE a_0 : signed(15 DOWNTO 0);
    VARIABLE c_0 : signed(15 DOWNTO 0);
    VARIABLE c_1 : signed(15 DOWNTO 0);
    VARIABLE c_2 : signed(15 DOWNTO 0);
    VARIABLE a_1 : signed(15 DOWNTO 0);
    VARIABLE c_3 : signed(15 DOWNTO 0);
    VARIABLE a_2 : signed(15 DOWNTO 0);
    VARIABLE c_4 : signed(15 DOWNTO 0);
    VARIABLE a_3 : signed(15 DOWNTO 0);
    VARIABLE c_5 : signed(15 DOWNTO 0);
    VARIABLE c_6 : signed(15 DOWNTO 0);
    VARIABLE a_4 : signed(15 DOWNTO 0);
    VARIABLE c_7 : signed(15 DOWNTO 0);
    VARIABLE c_8 : signed(15 DOWNTO 0);
    VARIABLE c_9 : signed(15 DOWNTO 0);
    VARIABLE c_10 : signed(15 DOWNTO 0);
    VARIABLE a_5 : signed(15 DOWNTO 0);
    VARIABLE c_11 : signed(15 DOWNTO 0);
    VARIABLE a_6 : signed(15 DOWNTO 0);
    VARIABLE c_12 : signed(15 DOWNTO 0);
    VARIABLE a_7 : signed(15 DOWNTO 0);
    VARIABLE c_13 : signed(15 DOWNTO 0);
    VARIABLE c_14 : signed(15 DOWNTO 0);
    VARIABLE a_8 : signed(15 DOWNTO 0);
    VARIABLE c_15 : signed(15 DOWNTO 0);
    VARIABLE c_16 : signed(15 DOWNTO 0);
    VARIABLE c_17 : signed(15 DOWNTO 0);
    VARIABLE c_18 : signed(15 DOWNTO 0);
    VARIABLE a_9 : signed(15 DOWNTO 0);
    VARIABLE c_19 : signed(15 DOWNTO 0);
    VARIABLE a_10 : signed(15 DOWNTO 0);
    VARIABLE c_20 : signed(15 DOWNTO 0);
    VARIABLE a_11 : signed(15 DOWNTO 0);
    VARIABLE c_21 : signed(15 DOWNTO 0);
    VARIABLE c_22 : signed(15 DOWNTO 0);
    VARIABLE a_12 : signed(15 DOWNTO 0);
    VARIABLE c_23 : signed(15 DOWNTO 0);
    VARIABLE c_24 : signed(15 DOWNTO 0);
    VARIABLE c_25 : signed(15 DOWNTO 0);
    VARIABLE c_26 : signed(15 DOWNTO 0);
    VARIABLE a_13 : signed(15 DOWNTO 0);
    VARIABLE c_27 : signed(15 DOWNTO 0);
    VARIABLE a_14 : signed(15 DOWNTO 0);
    VARIABLE c_28 : signed(15 DOWNTO 0);
    VARIABLE a_15 : signed(15 DOWNTO 0);
    VARIABLE c_29 : signed(15 DOWNTO 0);
    VARIABLE c_30 : signed(15 DOWNTO 0);
    VARIABLE a_16 : signed(15 DOWNTO 0);
    VARIABLE c_31 : signed(15 DOWNTO 0);
    VARIABLE c_32 : signed(15 DOWNTO 0);
    VARIABLE c_33 : signed(15 DOWNTO 0);
    VARIABLE c_34 : signed(15 DOWNTO 0);
    VARIABLE a_17 : signed(15 DOWNTO 0);
    VARIABLE c_35 : signed(15 DOWNTO 0);
    VARIABLE a_18 : signed(15 DOWNTO 0);
    VARIABLE c_36 : signed(15 DOWNTO 0);
    VARIABLE a_19 : signed(15 DOWNTO 0);
    VARIABLE c_37 : signed(15 DOWNTO 0);
    VARIABLE c_38 : signed(15 DOWNTO 0);
    VARIABLE a_20 : signed(15 DOWNTO 0);
    VARIABLE c_39 : signed(15 DOWNTO 0);
    VARIABLE c_40 : signed(15 DOWNTO 0);
    VARIABLE c_41 : signed(15 DOWNTO 0);
    VARIABLE c_42 : signed(15 DOWNTO 0);
    VARIABLE a_21 : signed(15 DOWNTO 0);
    VARIABLE c_43 : signed(15 DOWNTO 0);
    VARIABLE a_22 : signed(15 DOWNTO 0);
    VARIABLE c_44 : signed(15 DOWNTO 0);
    VARIABLE a_23 : signed(15 DOWNTO 0);
    VARIABLE c_45 : signed(15 DOWNTO 0);
    VARIABLE c_46 : signed(15 DOWNTO 0);
    VARIABLE a_24 : signed(15 DOWNTO 0);
    VARIABLE c_47 : signed(15 DOWNTO 0);
    VARIABLE c_48 : signed(15 DOWNTO 0);
    VARIABLE c_49 : signed(15 DOWNTO 0);
    VARIABLE c_50 : signed(15 DOWNTO 0);
    VARIABLE a_25 : signed(15 DOWNTO 0);
    VARIABLE c_51 : signed(15 DOWNTO 0);
    VARIABLE a_26 : signed(15 DOWNTO 0);
    VARIABLE c_52 : signed(15 DOWNTO 0);
    VARIABLE a_27 : signed(15 DOWNTO 0);
    VARIABLE c_53 : signed(15 DOWNTO 0);
    VARIABLE c_54 : signed(15 DOWNTO 0);
    VARIABLE a_28 : signed(15 DOWNTO 0);
    VARIABLE c_55 : signed(15 DOWNTO 0);
    VARIABLE c_56 : signed(15 DOWNTO 0);
    VARIABLE c_57 : signed(15 DOWNTO 0);
    VARIABLE c_58 : signed(15 DOWNTO 0);
    VARIABLE a_29 : signed(15 DOWNTO 0);
    VARIABLE c_59 : signed(15 DOWNTO 0);
    VARIABLE a_30 : signed(15 DOWNTO 0);
    VARIABLE c_60 : signed(15 DOWNTO 0);
    VARIABLE a_31 : signed(15 DOWNTO 0);
    VARIABLE c_61 : signed(15 DOWNTO 0);
    VARIABLE c_62 : signed(15 DOWNTO 0);
    VARIABLE a_32 : signed(15 DOWNTO 0);
    VARIABLE c_63 : signed(15 DOWNTO 0);
    VARIABLE c_64 : signed(15 DOWNTO 0);
    VARIABLE c_65 : signed(15 DOWNTO 0);
    VARIABLE c_66 : signed(15 DOWNTO 0);
    VARIABLE a_33 : signed(15 DOWNTO 0);
    VARIABLE c_67 : signed(15 DOWNTO 0);
    VARIABLE a_34 : signed(15 DOWNTO 0);
    VARIABLE c_68 : signed(15 DOWNTO 0);
    VARIABLE a_35 : signed(15 DOWNTO 0);
    VARIABLE c_69 : signed(15 DOWNTO 0);
    VARIABLE c_70 : signed(15 DOWNTO 0);
    VARIABLE a_36 : signed(15 DOWNTO 0);
    VARIABLE c_71 : signed(15 DOWNTO 0);
    VARIABLE c_72 : signed(15 DOWNTO 0);
    VARIABLE c_73 : signed(15 DOWNTO 0);
    VARIABLE c_74 : signed(15 DOWNTO 0);
    VARIABLE a_37 : signed(15 DOWNTO 0);
    VARIABLE c_75 : signed(15 DOWNTO 0);
    VARIABLE a_38 : signed(15 DOWNTO 0);
    VARIABLE c_76 : signed(15 DOWNTO 0);
    VARIABLE a_39 : signed(15 DOWNTO 0);
    VARIABLE c_77 : signed(15 DOWNTO 0);
    VARIABLE c_78 : signed(15 DOWNTO 0);
    VARIABLE a_40 : signed(15 DOWNTO 0);
    VARIABLE c_79 : signed(15 DOWNTO 0);
    VARIABLE c_80 : signed(15 DOWNTO 0);
    VARIABLE c_81 : signed(15 DOWNTO 0);
    VARIABLE c_82 : signed(15 DOWNTO 0);
    VARIABLE a_41 : signed(15 DOWNTO 0);
    VARIABLE c_83 : signed(15 DOWNTO 0);
    VARIABLE a_42 : signed(15 DOWNTO 0);
    VARIABLE c_84 : signed(15 DOWNTO 0);
    VARIABLE a_43 : signed(15 DOWNTO 0);
    VARIABLE c_85 : signed(15 DOWNTO 0);
    VARIABLE c_86 : signed(15 DOWNTO 0);
    VARIABLE a_44 : signed(15 DOWNTO 0);
    VARIABLE c_87 : signed(15 DOWNTO 0);
    VARIABLE c_88 : signed(15 DOWNTO 0);
    VARIABLE c_89 : signed(15 DOWNTO 0);
    VARIABLE c_90 : signed(15 DOWNTO 0);
    VARIABLE a_45 : signed(15 DOWNTO 0);
    VARIABLE c_91 : signed(15 DOWNTO 0);
    VARIABLE a_46 : signed(15 DOWNTO 0);
    VARIABLE c_92 : signed(15 DOWNTO 0);
    VARIABLE a_47 : signed(15 DOWNTO 0);
    VARIABLE c_93 : signed(15 DOWNTO 0);
    VARIABLE c_94 : signed(15 DOWNTO 0);
    VARIABLE a_48 : signed(15 DOWNTO 0);
    VARIABLE c_95 : signed(15 DOWNTO 0);
    VARIABLE c_96 : signed(15 DOWNTO 0);
    VARIABLE c_97 : signed(15 DOWNTO 0);
    VARIABLE c_98 : signed(15 DOWNTO 0);
    VARIABLE a_49 : signed(15 DOWNTO 0);
    VARIABLE c_99 : signed(15 DOWNTO 0);
    VARIABLE a_50 : signed(15 DOWNTO 0);
    VARIABLE c_100 : signed(15 DOWNTO 0);
    VARIABLE a_51 : signed(15 DOWNTO 0);
    VARIABLE c_101 : signed(15 DOWNTO 0);
    VARIABLE c_102 : signed(15 DOWNTO 0);
    VARIABLE a_52 : signed(15 DOWNTO 0);
    VARIABLE c_103 : signed(15 DOWNTO 0);
    VARIABLE c_104 : signed(15 DOWNTO 0);
    VARIABLE c_105 : signed(15 DOWNTO 0);
    VARIABLE c_106 : signed(15 DOWNTO 0);
    VARIABLE a_53 : signed(15 DOWNTO 0);
    VARIABLE c_107 : signed(15 DOWNTO 0);
    VARIABLE a_54 : signed(15 DOWNTO 0);
    VARIABLE c_108 : signed(15 DOWNTO 0);
    VARIABLE a_55 : signed(15 DOWNTO 0);
    VARIABLE c_109 : signed(15 DOWNTO 0);
    VARIABLE c_110 : signed(15 DOWNTO 0);
    VARIABLE a_56 : signed(15 DOWNTO 0);
    VARIABLE c_111 : signed(15 DOWNTO 0);
    VARIABLE c_112 : signed(15 DOWNTO 0);
    VARIABLE c_113 : signed(15 DOWNTO 0);
    VARIABLE c_114 : signed(15 DOWNTO 0);
    VARIABLE a_57 : signed(15 DOWNTO 0);
    VARIABLE c_115 : signed(15 DOWNTO 0);
    VARIABLE a_58 : signed(15 DOWNTO 0);
    VARIABLE a_59 : signed(15 DOWNTO 0);
    VARIABLE c_116 : signed(15 DOWNTO 0);
    VARIABLE c_117 : signed(15 DOWNTO 0);
    VARIABLE a_60 : signed(15 DOWNTO 0);
    VARIABLE c_118 : signed(15 DOWNTO 0);
    VARIABLE a_61 : signed(15 DOWNTO 0);
    VARIABLE a_62 : signed(15 DOWNTO 0);
    VARIABLE d_0 : signed(15 DOWNTO 0);
    VARIABLE n_0 : signed(15 DOWNTO 0);
    VARIABLE d_1 : signed(15 DOWNTO 0);
    VARIABLE n_1 : signed(15 DOWNTO 0);
    VARIABLE d_2 : signed(15 DOWNTO 0);
    VARIABLE n_2 : signed(15 DOWNTO 0);
    VARIABLE d_3 : signed(15 DOWNTO 0);
    VARIABLE n_3 : signed(15 DOWNTO 0);
    VARIABLE d_4 : signed(15 DOWNTO 0);
    VARIABLE n_4 : signed(15 DOWNTO 0);
    VARIABLE d_5 : signed(15 DOWNTO 0);
    VARIABLE n_5 : signed(15 DOWNTO 0);
    VARIABLE d_6 : signed(15 DOWNTO 0);
    VARIABLE n_6 : signed(15 DOWNTO 0);
    VARIABLE d_7 : signed(15 DOWNTO 0);
    VARIABLE n_7 : signed(15 DOWNTO 0);
    VARIABLE d_8 : signed(15 DOWNTO 0);
    VARIABLE n_8 : signed(15 DOWNTO 0);
    VARIABLE d_9 : signed(15 DOWNTO 0);
    VARIABLE n_9 : signed(15 DOWNTO 0);
    VARIABLE d_10 : signed(15 DOWNTO 0);
    VARIABLE n_10 : signed(15 DOWNTO 0);
    VARIABLE d_11 : signed(15 DOWNTO 0);
    VARIABLE n_11 : signed(15 DOWNTO 0);
    VARIABLE d_12 : signed(15 DOWNTO 0);
    VARIABLE n_12 : signed(15 DOWNTO 0);
    VARIABLE d_13 : signed(15 DOWNTO 0);
    VARIABLE n_13 : signed(15 DOWNTO 0);
    VARIABLE d_14 : signed(15 DOWNTO 0);
    VARIABLE n_14 : signed(15 DOWNTO 0);
    VARIABLE mul_temp : signed(31 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(31 DOWNTO 0);
    VARIABLE mul_temp_1 : signed(31 DOWNTO 0);
    VARIABLE mul_temp_2 : signed(31 DOWNTO 0);
  BEGIN
    a := to_signed(16#0000#, 16);
    a_0 := to_signed(16#0000#, 16);
    a_1 := to_signed(16#0000#, 16);
    a_2 := to_signed(16#0000#, 16);
    a_3 := to_signed(16#0000#, 16);
    a_4 := to_signed(16#0000#, 16);
    a_5 := to_signed(16#0000#, 16);
    a_6 := to_signed(16#0000#, 16);
    a_7 := to_signed(16#0000#, 16);
    a_8 := to_signed(16#0000#, 16);
    a_9 := to_signed(16#0000#, 16);
    a_10 := to_signed(16#0000#, 16);
    a_11 := to_signed(16#0000#, 16);
    a_12 := to_signed(16#0000#, 16);
    a_13 := to_signed(16#0000#, 16);
    a_14 := to_signed(16#0000#, 16);
    a_15 := to_signed(16#0000#, 16);
    a_16 := to_signed(16#0000#, 16);
    a_17 := to_signed(16#0000#, 16);
    a_18 := to_signed(16#0000#, 16);
    a_19 := to_signed(16#0000#, 16);
    a_20 := to_signed(16#0000#, 16);
    a_21 := to_signed(16#0000#, 16);
    a_22 := to_signed(16#0000#, 16);
    a_23 := to_signed(16#0000#, 16);
    a_24 := to_signed(16#0000#, 16);
    a_25 := to_signed(16#0000#, 16);
    a_26 := to_signed(16#0000#, 16);
    a_27 := to_signed(16#0000#, 16);
    a_28 := to_signed(16#0000#, 16);
    a_29 := to_signed(16#0000#, 16);
    a_30 := to_signed(16#0000#, 16);
    a_31 := to_signed(16#0000#, 16);
    a_32 := to_signed(16#0000#, 16);
    a_33 := to_signed(16#0000#, 16);
    a_34 := to_signed(16#0000#, 16);
    a_35 := to_signed(16#0000#, 16);
    a_36 := to_signed(16#0000#, 16);
    a_37 := to_signed(16#0000#, 16);
    a_38 := to_signed(16#0000#, 16);
    a_39 := to_signed(16#0000#, 16);
    a_40 := to_signed(16#0000#, 16);
    a_41 := to_signed(16#0000#, 16);
    a_42 := to_signed(16#0000#, 16);
    a_43 := to_signed(16#0000#, 16);
    a_44 := to_signed(16#0000#, 16);
    a_45 := to_signed(16#0000#, 16);
    a_46 := to_signed(16#0000#, 16);
    a_47 := to_signed(16#0000#, 16);
    a_48 := to_signed(16#0000#, 16);
    a_49 := to_signed(16#0000#, 16);
    a_50 := to_signed(16#0000#, 16);
    a_51 := to_signed(16#0000#, 16);
    a_52 := to_signed(16#0000#, 16);
    a_53 := to_signed(16#0000#, 16);
    a_54 := to_signed(16#0000#, 16);
    a_55 := to_signed(16#0000#, 16);
    a_56 := to_signed(16#0000#, 16);
    a_57 := to_signed(16#0000#, 16);
    a_58 := to_signed(16#0000#, 16);
    a_59 := to_signed(16#0000#, 16);
    a_60 := to_signed(16#0000#, 16);
    a_61 := to_signed(16#0000#, 16);
    a_62 := to_signed(16#0000#, 16);
    c := to_signed(16#0000#, 16);
    c_0 := to_signed(16#0000#, 16);
    c_1 := to_signed(16#0000#, 16);
    c_2 := to_signed(16#0000#, 16);
    c_3 := to_signed(16#0000#, 16);
    c_4 := to_signed(16#0000#, 16);
    c_5 := to_signed(16#0000#, 16);
    c_7 := to_signed(16#0000#, 16);
    c_6 := to_signed(16#0000#, 16);
    c_8 := to_signed(16#0000#, 16);
    c_9 := to_signed(16#0000#, 16);
    c_10 := to_signed(16#0000#, 16);
    c_11 := to_signed(16#0000#, 16);
    c_12 := to_signed(16#0000#, 16);
    c_13 := to_signed(16#0000#, 16);
    c_15 := to_signed(16#0000#, 16);
    c_14 := to_signed(16#0000#, 16);
    c_16 := to_signed(16#0000#, 16);
    c_17 := to_signed(16#0000#, 16);
    c_18 := to_signed(16#0000#, 16);
    c_19 := to_signed(16#0000#, 16);
    c_20 := to_signed(16#0000#, 16);
    c_21 := to_signed(16#0000#, 16);
    c_23 := to_signed(16#0000#, 16);
    c_22 := to_signed(16#0000#, 16);
    c_24 := to_signed(16#0000#, 16);
    c_25 := to_signed(16#0000#, 16);
    c_26 := to_signed(16#0000#, 16);
    c_27 := to_signed(16#0000#, 16);
    c_28 := to_signed(16#0000#, 16);
    c_29 := to_signed(16#0000#, 16);
    c_31 := to_signed(16#0000#, 16);
    c_30 := to_signed(16#0000#, 16);
    c_32 := to_signed(16#0000#, 16);
    c_33 := to_signed(16#0000#, 16);
    c_34 := to_signed(16#0000#, 16);
    c_35 := to_signed(16#0000#, 16);
    c_36 := to_signed(16#0000#, 16);
    c_37 := to_signed(16#0000#, 16);
    c_39 := to_signed(16#0000#, 16);
    c_38 := to_signed(16#0000#, 16);
    c_40 := to_signed(16#0000#, 16);
    c_41 := to_signed(16#0000#, 16);
    c_42 := to_signed(16#0000#, 16);
    c_43 := to_signed(16#0000#, 16);
    c_44 := to_signed(16#0000#, 16);
    c_45 := to_signed(16#0000#, 16);
    c_47 := to_signed(16#0000#, 16);
    c_46 := to_signed(16#0000#, 16);
    c_48 := to_signed(16#0000#, 16);
    c_49 := to_signed(16#0000#, 16);
    c_50 := to_signed(16#0000#, 16);
    c_51 := to_signed(16#0000#, 16);
    c_52 := to_signed(16#0000#, 16);
    c_53 := to_signed(16#0000#, 16);
    c_55 := to_signed(16#0000#, 16);
    c_54 := to_signed(16#0000#, 16);
    c_56 := to_signed(16#0000#, 16);
    c_57 := to_signed(16#0000#, 16);
    c_58 := to_signed(16#0000#, 16);
    c_59 := to_signed(16#0000#, 16);
    c_60 := to_signed(16#0000#, 16);
    c_61 := to_signed(16#0000#, 16);
    c_63 := to_signed(16#0000#, 16);
    c_62 := to_signed(16#0000#, 16);
    c_64 := to_signed(16#0000#, 16);
    c_65 := to_signed(16#0000#, 16);
    c_66 := to_signed(16#0000#, 16);
    c_67 := to_signed(16#0000#, 16);
    c_68 := to_signed(16#0000#, 16);
    c_69 := to_signed(16#0000#, 16);
    c_71 := to_signed(16#0000#, 16);
    c_70 := to_signed(16#0000#, 16);
    c_72 := to_signed(16#0000#, 16);
    c_73 := to_signed(16#0000#, 16);
    c_74 := to_signed(16#0000#, 16);
    c_75 := to_signed(16#0000#, 16);
    c_76 := to_signed(16#0000#, 16);
    c_77 := to_signed(16#0000#, 16);
    c_79 := to_signed(16#0000#, 16);
    c_78 := to_signed(16#0000#, 16);
    c_80 := to_signed(16#0000#, 16);
    c_81 := to_signed(16#0000#, 16);
    c_82 := to_signed(16#0000#, 16);
    c_83 := to_signed(16#0000#, 16);
    c_84 := to_signed(16#0000#, 16);
    c_85 := to_signed(16#0000#, 16);
    c_87 := to_signed(16#0000#, 16);
    c_86 := to_signed(16#0000#, 16);
    c_88 := to_signed(16#0000#, 16);
    c_89 := to_signed(16#0000#, 16);
    c_90 := to_signed(16#0000#, 16);
    c_91 := to_signed(16#0000#, 16);
    c_92 := to_signed(16#0000#, 16);
    c_93 := to_signed(16#0000#, 16);
    c_95 := to_signed(16#0000#, 16);
    c_94 := to_signed(16#0000#, 16);
    c_96 := to_signed(16#0000#, 16);
    c_97 := to_signed(16#0000#, 16);
    c_98 := to_signed(16#0000#, 16);
    c_99 := to_signed(16#0000#, 16);
    c_100 := to_signed(16#0000#, 16);
    c_101 := to_signed(16#0000#, 16);
    c_103 := to_signed(16#0000#, 16);
    c_102 := to_signed(16#0000#, 16);
    c_104 := to_signed(16#0000#, 16);
    c_105 := to_signed(16#0000#, 16);
    c_106 := to_signed(16#0000#, 16);
    c_107 := to_signed(16#0000#, 16);
    c_108 := to_signed(16#0000#, 16);
    c_109 := to_signed(16#0000#, 16);
    c_111 := to_signed(16#0000#, 16);
    c_110 := to_signed(16#0000#, 16);
    c_112 := to_signed(16#0000#, 16);
    c_113 := to_signed(16#0000#, 16);
    c_114 := to_signed(16#0000#, 16);
    c_115 := to_signed(16#0000#, 16);
    c_116 := to_signed(16#0000#, 16);
    c_117 := to_signed(16#0000#, 16);
    c_118 := to_signed(16#0000#, 16);
    --NOTE: The numerator and denominator should be upcasted before reaching
    --this function; use 'fixed.internal.type.upcastWordlength(num, den)'.
    -- Persistent variables that act as registers.
    -- Get niters and CORDIC gain.
    -- Initialize registers to be vectors that hold a value for each
    -- iteration.
    -- TODO: Figure out the right types here. 
    -- Use the final values in the registers as the outputs.
    -- TODO: Figure out how to use the right fimath objects here.
    -- Update validReg.
    validReg_next(16) <= validReg(15);
    validReg_next(15) <= validReg(14);
    validReg_next(14) <= validReg(13);
    validReg_next(13) <= validReg(12);
    validReg_next(12) <= validReg(11);
    validReg_next(11) <= validReg(10);
    validReg_next(10) <= validReg(9);
    validReg_next(9) <= validReg(8);
    validReg_next(8) <= validReg(7);
    validReg_next(7) <= validReg(6);
    validReg_next(6) <= validReg(5);
    validReg_next(5) <= validReg(4);
    validReg_next(4) <= validReg(3);
    validReg_next(3) <= validReg(2);
    validReg_next(2) <= validReg(1);
    validReg_next(1) <= validReg(0);
    validReg_next(0) <= validIn;
    -- Actual algorithm.
    -- NOTE: Similar to the real row rotations block, quadrant compensation
    -- will be applied to the arguments outside of this MLFB.
    d := den_real_reg(15);
    n := num_real_reg(15);
    IF den_imag_reg(15) < to_signed(16#0000#, 16) THEN 
      a := num_imag_reg(15);
      c := SHIFT_RIGHT(a, 15);
      num_real_reg_next(16) <= n - c;
      c_1 := SHIFT_RIGHT(n, 15);
      num_imag_reg_next(16) <= num_imag_reg(15) + c_1;
      a_1 := den_imag_reg(15);
      c_3 := SHIFT_RIGHT(a_1, 15);
      den_real_reg_next(16) <= den_real_reg(15) - c_3;
      c_6 := SHIFT_RIGHT(d, 15);
      den_imag_reg_next(16) <= den_imag_reg(15) + c_6;
    ELSIF den_imag_reg(15) > to_signed(16#0000#, 16) THEN 
      a_0 := num_imag_reg(15);
      c_0 := SHIFT_RIGHT(a_0, 15);
      num_real_reg_next(16) <= n + c_0;
      c_2 := SHIFT_RIGHT(n, 15);
      num_imag_reg_next(16) <= num_imag_reg(15) - c_2;
      a_3 := den_imag_reg(15);
      c_5 := SHIFT_RIGHT(a_3, 15);
      den_real_reg_next(16) <= den_real_reg(15) + c_5;
      c_9 := SHIFT_RIGHT(d, 15);
      den_imag_reg_next(16) <= den_imag_reg(15) - c_9;
    ELSE 
      num_real_reg_next(16) <= n;
      num_imag_reg_next(16) <= num_imag_reg(15);
      den_real_reg_next(16) <= den_real_reg(15);
      den_imag_reg_next(16) <= den_imag_reg(15);
    END IF;
    d_0 := den_real_reg(14);
    n_0 := num_real_reg(14);
    IF den_imag_reg(14) < to_signed(16#0000#, 16) THEN 
      a_2 := num_imag_reg(14);
      c_4 := SHIFT_RIGHT(a_2, 14);
      num_real_reg_next(15) <= n_0 - c_4;
      c_8 := SHIFT_RIGHT(n_0, 14);
      num_imag_reg_next(15) <= num_imag_reg(14) + c_8;
      a_5 := den_imag_reg(14);
      c_11 := SHIFT_RIGHT(a_5, 14);
      den_real_reg_next(15) <= den_real_reg(14) - c_11;
      c_14 := SHIFT_RIGHT(d_0, 14);
      den_imag_reg_next(15) <= den_imag_reg(14) + c_14;
    ELSIF den_imag_reg(14) > to_signed(16#0000#, 16) THEN 
      a_4 := num_imag_reg(14);
      c_7 := SHIFT_RIGHT(a_4, 14);
      num_real_reg_next(15) <= n_0 + c_7;
      c_10 := SHIFT_RIGHT(n_0, 14);
      num_imag_reg_next(15) <= num_imag_reg(14) - c_10;
      a_7 := den_imag_reg(14);
      c_13 := SHIFT_RIGHT(a_7, 14);
      den_real_reg_next(15) <= den_real_reg(14) + c_13;
      c_17 := SHIFT_RIGHT(d_0, 14);
      den_imag_reg_next(15) <= den_imag_reg(14) - c_17;
    ELSE 
      num_real_reg_next(15) <= n_0;
      num_imag_reg_next(15) <= num_imag_reg(14);
      den_real_reg_next(15) <= den_real_reg(14);
      den_imag_reg_next(15) <= den_imag_reg(14);
    END IF;
    d_1 := den_real_reg(13);
    n_1 := num_real_reg(13);
    IF den_imag_reg(13) < to_signed(16#0000#, 16) THEN 
      a_6 := num_imag_reg(13);
      c_12 := SHIFT_RIGHT(a_6, 13);
      num_real_reg_next(14) <= n_1 - c_12;
      c_16 := SHIFT_RIGHT(n_1, 13);
      num_imag_reg_next(14) <= num_imag_reg(13) + c_16;
      a_9 := den_imag_reg(13);
      c_19 := SHIFT_RIGHT(a_9, 13);
      den_real_reg_next(14) <= den_real_reg(13) - c_19;
      c_22 := SHIFT_RIGHT(d_1, 13);
      den_imag_reg_next(14) <= den_imag_reg(13) + c_22;
    ELSIF den_imag_reg(13) > to_signed(16#0000#, 16) THEN 
      a_8 := num_imag_reg(13);
      c_15 := SHIFT_RIGHT(a_8, 13);
      num_real_reg_next(14) <= n_1 + c_15;
      c_18 := SHIFT_RIGHT(n_1, 13);
      num_imag_reg_next(14) <= num_imag_reg(13) - c_18;
      a_11 := den_imag_reg(13);
      c_21 := SHIFT_RIGHT(a_11, 13);
      den_real_reg_next(14) <= den_real_reg(13) + c_21;
      c_25 := SHIFT_RIGHT(d_1, 13);
      den_imag_reg_next(14) <= den_imag_reg(13) - c_25;
    ELSE 
      num_real_reg_next(14) <= n_1;
      num_imag_reg_next(14) <= num_imag_reg(13);
      den_real_reg_next(14) <= den_real_reg(13);
      den_imag_reg_next(14) <= den_imag_reg(13);
    END IF;
    d_2 := den_real_reg(12);
    n_2 := num_real_reg(12);
    IF den_imag_reg(12) < to_signed(16#0000#, 16) THEN 
      a_10 := num_imag_reg(12);
      c_20 := SHIFT_RIGHT(a_10, 12);
      num_real_reg_next(13) <= n_2 - c_20;
      c_24 := SHIFT_RIGHT(n_2, 12);
      num_imag_reg_next(13) <= num_imag_reg(12) + c_24;
      a_13 := den_imag_reg(12);
      c_27 := SHIFT_RIGHT(a_13, 12);
      den_real_reg_next(13) <= den_real_reg(12) - c_27;
      c_30 := SHIFT_RIGHT(d_2, 12);
      den_imag_reg_next(13) <= den_imag_reg(12) + c_30;
    ELSIF den_imag_reg(12) > to_signed(16#0000#, 16) THEN 
      a_12 := num_imag_reg(12);
      c_23 := SHIFT_RIGHT(a_12, 12);
      num_real_reg_next(13) <= n_2 + c_23;
      c_26 := SHIFT_RIGHT(n_2, 12);
      num_imag_reg_next(13) <= num_imag_reg(12) - c_26;
      a_15 := den_imag_reg(12);
      c_29 := SHIFT_RIGHT(a_15, 12);
      den_real_reg_next(13) <= den_real_reg(12) + c_29;
      c_33 := SHIFT_RIGHT(d_2, 12);
      den_imag_reg_next(13) <= den_imag_reg(12) - c_33;
    ELSE 
      num_real_reg_next(13) <= n_2;
      num_imag_reg_next(13) <= num_imag_reg(12);
      den_real_reg_next(13) <= den_real_reg(12);
      den_imag_reg_next(13) <= den_imag_reg(12);
    END IF;
    d_3 := den_real_reg(11);
    n_3 := num_real_reg(11);
    IF den_imag_reg(11) < to_signed(16#0000#, 16) THEN 
      a_14 := num_imag_reg(11);
      c_28 := SHIFT_RIGHT(a_14, 11);
      num_real_reg_next(12) <= n_3 - c_28;
      c_32 := SHIFT_RIGHT(n_3, 11);
      num_imag_reg_next(12) <= num_imag_reg(11) + c_32;
      a_17 := den_imag_reg(11);
      c_35 := SHIFT_RIGHT(a_17, 11);
      den_real_reg_next(12) <= den_real_reg(11) - c_35;
      c_38 := SHIFT_RIGHT(d_3, 11);
      den_imag_reg_next(12) <= den_imag_reg(11) + c_38;
    ELSIF den_imag_reg(11) > to_signed(16#0000#, 16) THEN 
      a_16 := num_imag_reg(11);
      c_31 := SHIFT_RIGHT(a_16, 11);
      num_real_reg_next(12) <= n_3 + c_31;
      c_34 := SHIFT_RIGHT(n_3, 11);
      num_imag_reg_next(12) <= num_imag_reg(11) - c_34;
      a_19 := den_imag_reg(11);
      c_37 := SHIFT_RIGHT(a_19, 11);
      den_real_reg_next(12) <= den_real_reg(11) + c_37;
      c_41 := SHIFT_RIGHT(d_3, 11);
      den_imag_reg_next(12) <= den_imag_reg(11) - c_41;
    ELSE 
      num_real_reg_next(12) <= n_3;
      num_imag_reg_next(12) <= num_imag_reg(11);
      den_real_reg_next(12) <= den_real_reg(11);
      den_imag_reg_next(12) <= den_imag_reg(11);
    END IF;
    d_4 := den_real_reg(10);
    n_4 := num_real_reg(10);
    IF den_imag_reg(10) < to_signed(16#0000#, 16) THEN 
      a_18 := num_imag_reg(10);
      c_36 := SHIFT_RIGHT(a_18, 10);
      num_real_reg_next(11) <= n_4 - c_36;
      c_40 := SHIFT_RIGHT(n_4, 10);
      num_imag_reg_next(11) <= num_imag_reg(10) + c_40;
      a_21 := den_imag_reg(10);
      c_43 := SHIFT_RIGHT(a_21, 10);
      den_real_reg_next(11) <= den_real_reg(10) - c_43;
      c_46 := SHIFT_RIGHT(d_4, 10);
      den_imag_reg_next(11) <= den_imag_reg(10) + c_46;
    ELSIF den_imag_reg(10) > to_signed(16#0000#, 16) THEN 
      a_20 := num_imag_reg(10);
      c_39 := SHIFT_RIGHT(a_20, 10);
      num_real_reg_next(11) <= n_4 + c_39;
      c_42 := SHIFT_RIGHT(n_4, 10);
      num_imag_reg_next(11) <= num_imag_reg(10) - c_42;
      a_23 := den_imag_reg(10);
      c_45 := SHIFT_RIGHT(a_23, 10);
      den_real_reg_next(11) <= den_real_reg(10) + c_45;
      c_49 := SHIFT_RIGHT(d_4, 10);
      den_imag_reg_next(11) <= den_imag_reg(10) - c_49;
    ELSE 
      num_real_reg_next(11) <= n_4;
      num_imag_reg_next(11) <= num_imag_reg(10);
      den_real_reg_next(11) <= den_real_reg(10);
      den_imag_reg_next(11) <= den_imag_reg(10);
    END IF;
    d_5 := den_real_reg(9);
    n_5 := num_real_reg(9);
    IF den_imag_reg(9) < to_signed(16#0000#, 16) THEN 
      a_22 := num_imag_reg(9);
      c_44 := SHIFT_RIGHT(a_22, 9);
      num_real_reg_next(10) <= n_5 - c_44;
      c_48 := SHIFT_RIGHT(n_5, 9);
      num_imag_reg_next(10) <= num_imag_reg(9) + c_48;
      a_25 := den_imag_reg(9);
      c_51 := SHIFT_RIGHT(a_25, 9);
      den_real_reg_next(10) <= den_real_reg(9) - c_51;
      c_54 := SHIFT_RIGHT(d_5, 9);
      den_imag_reg_next(10) <= den_imag_reg(9) + c_54;
    ELSIF den_imag_reg(9) > to_signed(16#0000#, 16) THEN 
      a_24 := num_imag_reg(9);
      c_47 := SHIFT_RIGHT(a_24, 9);
      num_real_reg_next(10) <= n_5 + c_47;
      c_50 := SHIFT_RIGHT(n_5, 9);
      num_imag_reg_next(10) <= num_imag_reg(9) - c_50;
      a_27 := den_imag_reg(9);
      c_53 := SHIFT_RIGHT(a_27, 9);
      den_real_reg_next(10) <= den_real_reg(9) + c_53;
      c_57 := SHIFT_RIGHT(d_5, 9);
      den_imag_reg_next(10) <= den_imag_reg(9) - c_57;
    ELSE 
      num_real_reg_next(10) <= n_5;
      num_imag_reg_next(10) <= num_imag_reg(9);
      den_real_reg_next(10) <= den_real_reg(9);
      den_imag_reg_next(10) <= den_imag_reg(9);
    END IF;
    d_6 := den_real_reg(8);
    n_6 := num_real_reg(8);
    IF den_imag_reg(8) < to_signed(16#0000#, 16) THEN 
      a_26 := num_imag_reg(8);
      c_52 := SHIFT_RIGHT(a_26, 8);
      num_real_reg_next(9) <= n_6 - c_52;
      c_56 := SHIFT_RIGHT(n_6, 8);
      num_imag_reg_next(9) <= num_imag_reg(8) + c_56;
      a_29 := den_imag_reg(8);
      c_59 := SHIFT_RIGHT(a_29, 8);
      den_real_reg_next(9) <= den_real_reg(8) - c_59;
      c_62 := SHIFT_RIGHT(d_6, 8);
      den_imag_reg_next(9) <= den_imag_reg(8) + c_62;
    ELSIF den_imag_reg(8) > to_signed(16#0000#, 16) THEN 
      a_28 := num_imag_reg(8);
      c_55 := SHIFT_RIGHT(a_28, 8);
      num_real_reg_next(9) <= n_6 + c_55;
      c_58 := SHIFT_RIGHT(n_6, 8);
      num_imag_reg_next(9) <= num_imag_reg(8) - c_58;
      a_31 := den_imag_reg(8);
      c_61 := SHIFT_RIGHT(a_31, 8);
      den_real_reg_next(9) <= den_real_reg(8) + c_61;
      c_65 := SHIFT_RIGHT(d_6, 8);
      den_imag_reg_next(9) <= den_imag_reg(8) - c_65;
    ELSE 
      num_real_reg_next(9) <= n_6;
      num_imag_reg_next(9) <= num_imag_reg(8);
      den_real_reg_next(9) <= den_real_reg(8);
      den_imag_reg_next(9) <= den_imag_reg(8);
    END IF;
    d_7 := den_real_reg(7);
    n_7 := num_real_reg(7);
    IF den_imag_reg(7) < to_signed(16#0000#, 16) THEN 
      a_30 := num_imag_reg(7);
      c_60 := SHIFT_RIGHT(a_30, 7);
      num_real_reg_next(8) <= n_7 - c_60;
      c_64 := SHIFT_RIGHT(n_7, 7);
      num_imag_reg_next(8) <= num_imag_reg(7) + c_64;
      a_33 := den_imag_reg(7);
      c_67 := SHIFT_RIGHT(a_33, 7);
      den_real_reg_next(8) <= den_real_reg(7) - c_67;
      c_70 := SHIFT_RIGHT(d_7, 7);
      den_imag_reg_next(8) <= den_imag_reg(7) + c_70;
    ELSIF den_imag_reg(7) > to_signed(16#0000#, 16) THEN 
      a_32 := num_imag_reg(7);
      c_63 := SHIFT_RIGHT(a_32, 7);
      num_real_reg_next(8) <= n_7 + c_63;
      c_66 := SHIFT_RIGHT(n_7, 7);
      num_imag_reg_next(8) <= num_imag_reg(7) - c_66;
      a_35 := den_imag_reg(7);
      c_69 := SHIFT_RIGHT(a_35, 7);
      den_real_reg_next(8) <= den_real_reg(7) + c_69;
      c_73 := SHIFT_RIGHT(d_7, 7);
      den_imag_reg_next(8) <= den_imag_reg(7) - c_73;
    ELSE 
      num_real_reg_next(8) <= n_7;
      num_imag_reg_next(8) <= num_imag_reg(7);
      den_real_reg_next(8) <= den_real_reg(7);
      den_imag_reg_next(8) <= den_imag_reg(7);
    END IF;
    d_8 := den_real_reg(6);
    n_8 := num_real_reg(6);
    IF den_imag_reg(6) < to_signed(16#0000#, 16) THEN 
      a_34 := num_imag_reg(6);
      c_68 := SHIFT_RIGHT(a_34, 6);
      num_real_reg_next(7) <= n_8 - c_68;
      c_72 := SHIFT_RIGHT(n_8, 6);
      num_imag_reg_next(7) <= num_imag_reg(6) + c_72;
      a_37 := den_imag_reg(6);
      c_75 := SHIFT_RIGHT(a_37, 6);
      den_real_reg_next(7) <= den_real_reg(6) - c_75;
      c_78 := SHIFT_RIGHT(d_8, 6);
      den_imag_reg_next(7) <= den_imag_reg(6) + c_78;
    ELSIF den_imag_reg(6) > to_signed(16#0000#, 16) THEN 
      a_36 := num_imag_reg(6);
      c_71 := SHIFT_RIGHT(a_36, 6);
      num_real_reg_next(7) <= n_8 + c_71;
      c_74 := SHIFT_RIGHT(n_8, 6);
      num_imag_reg_next(7) <= num_imag_reg(6) - c_74;
      a_39 := den_imag_reg(6);
      c_77 := SHIFT_RIGHT(a_39, 6);
      den_real_reg_next(7) <= den_real_reg(6) + c_77;
      c_81 := SHIFT_RIGHT(d_8, 6);
      den_imag_reg_next(7) <= den_imag_reg(6) - c_81;
    ELSE 
      num_real_reg_next(7) <= n_8;
      num_imag_reg_next(7) <= num_imag_reg(6);
      den_real_reg_next(7) <= den_real_reg(6);
      den_imag_reg_next(7) <= den_imag_reg(6);
    END IF;
    d_9 := den_real_reg(5);
    n_9 := num_real_reg(5);
    IF den_imag_reg(5) < to_signed(16#0000#, 16) THEN 
      a_38 := num_imag_reg(5);
      c_76 := SHIFT_RIGHT(a_38, 5);
      num_real_reg_next(6) <= n_9 - c_76;
      c_80 := SHIFT_RIGHT(n_9, 5);
      num_imag_reg_next(6) <= num_imag_reg(5) + c_80;
      a_41 := den_imag_reg(5);
      c_83 := SHIFT_RIGHT(a_41, 5);
      den_real_reg_next(6) <= den_real_reg(5) - c_83;
      c_86 := SHIFT_RIGHT(d_9, 5);
      den_imag_reg_next(6) <= den_imag_reg(5) + c_86;
    ELSIF den_imag_reg(5) > to_signed(16#0000#, 16) THEN 
      a_40 := num_imag_reg(5);
      c_79 := SHIFT_RIGHT(a_40, 5);
      num_real_reg_next(6) <= n_9 + c_79;
      c_82 := SHIFT_RIGHT(n_9, 5);
      num_imag_reg_next(6) <= num_imag_reg(5) - c_82;
      a_43 := den_imag_reg(5);
      c_85 := SHIFT_RIGHT(a_43, 5);
      den_real_reg_next(6) <= den_real_reg(5) + c_85;
      c_89 := SHIFT_RIGHT(d_9, 5);
      den_imag_reg_next(6) <= den_imag_reg(5) - c_89;
    ELSE 
      num_real_reg_next(6) <= n_9;
      num_imag_reg_next(6) <= num_imag_reg(5);
      den_real_reg_next(6) <= den_real_reg(5);
      den_imag_reg_next(6) <= den_imag_reg(5);
    END IF;
    d_10 := den_real_reg(4);
    n_10 := num_real_reg(4);
    IF den_imag_reg(4) < to_signed(16#0000#, 16) THEN 
      a_42 := num_imag_reg(4);
      c_84 := SHIFT_RIGHT(a_42, 4);
      num_real_reg_next(5) <= n_10 - c_84;
      c_88 := SHIFT_RIGHT(n_10, 4);
      num_imag_reg_next(5) <= num_imag_reg(4) + c_88;
      a_45 := den_imag_reg(4);
      c_91 := SHIFT_RIGHT(a_45, 4);
      den_real_reg_next(5) <= den_real_reg(4) - c_91;
      c_94 := SHIFT_RIGHT(d_10, 4);
      den_imag_reg_next(5) <= den_imag_reg(4) + c_94;
    ELSIF den_imag_reg(4) > to_signed(16#0000#, 16) THEN 
      a_44 := num_imag_reg(4);
      c_87 := SHIFT_RIGHT(a_44, 4);
      num_real_reg_next(5) <= n_10 + c_87;
      c_90 := SHIFT_RIGHT(n_10, 4);
      num_imag_reg_next(5) <= num_imag_reg(4) - c_90;
      a_47 := den_imag_reg(4);
      c_93 := SHIFT_RIGHT(a_47, 4);
      den_real_reg_next(5) <= den_real_reg(4) + c_93;
      c_97 := SHIFT_RIGHT(d_10, 4);
      den_imag_reg_next(5) <= den_imag_reg(4) - c_97;
    ELSE 
      num_real_reg_next(5) <= n_10;
      num_imag_reg_next(5) <= num_imag_reg(4);
      den_real_reg_next(5) <= den_real_reg(4);
      den_imag_reg_next(5) <= den_imag_reg(4);
    END IF;
    d_11 := den_real_reg(3);
    n_11 := num_real_reg(3);
    IF den_imag_reg(3) < to_signed(16#0000#, 16) THEN 
      a_46 := num_imag_reg(3);
      c_92 := SHIFT_RIGHT(a_46, 3);
      num_real_reg_next(4) <= n_11 - c_92;
      c_96 := SHIFT_RIGHT(n_11, 3);
      num_imag_reg_next(4) <= num_imag_reg(3) + c_96;
      a_49 := den_imag_reg(3);
      c_99 := SHIFT_RIGHT(a_49, 3);
      den_real_reg_next(4) <= den_real_reg(3) - c_99;
      c_102 := SHIFT_RIGHT(d_11, 3);
      den_imag_reg_next(4) <= den_imag_reg(3) + c_102;
    ELSIF den_imag_reg(3) > to_signed(16#0000#, 16) THEN 
      a_48 := num_imag_reg(3);
      c_95 := SHIFT_RIGHT(a_48, 3);
      num_real_reg_next(4) <= n_11 + c_95;
      c_98 := SHIFT_RIGHT(n_11, 3);
      num_imag_reg_next(4) <= num_imag_reg(3) - c_98;
      a_51 := den_imag_reg(3);
      c_101 := SHIFT_RIGHT(a_51, 3);
      den_real_reg_next(4) <= den_real_reg(3) + c_101;
      c_105 := SHIFT_RIGHT(d_11, 3);
      den_imag_reg_next(4) <= den_imag_reg(3) - c_105;
    ELSE 
      num_real_reg_next(4) <= n_11;
      num_imag_reg_next(4) <= num_imag_reg(3);
      den_real_reg_next(4) <= den_real_reg(3);
      den_imag_reg_next(4) <= den_imag_reg(3);
    END IF;
    d_12 := den_real_reg(2);
    n_12 := num_real_reg(2);
    IF den_imag_reg(2) < to_signed(16#0000#, 16) THEN 
      a_50 := num_imag_reg(2);
      c_100 := SHIFT_RIGHT(a_50, 2);
      num_real_reg_next(3) <= n_12 - c_100;
      c_104 := SHIFT_RIGHT(n_12, 2);
      num_imag_reg_next(3) <= num_imag_reg(2) + c_104;
      a_53 := den_imag_reg(2);
      c_107 := SHIFT_RIGHT(a_53, 2);
      den_real_reg_next(3) <= den_real_reg(2) - c_107;
      c_110 := SHIFT_RIGHT(d_12, 2);
      den_imag_reg_next(3) <= den_imag_reg(2) + c_110;
    ELSIF den_imag_reg(2) > to_signed(16#0000#, 16) THEN 
      a_52 := num_imag_reg(2);
      c_103 := SHIFT_RIGHT(a_52, 2);
      num_real_reg_next(3) <= n_12 + c_103;
      c_106 := SHIFT_RIGHT(n_12, 2);
      num_imag_reg_next(3) <= num_imag_reg(2) - c_106;
      a_55 := den_imag_reg(2);
      c_109 := SHIFT_RIGHT(a_55, 2);
      den_real_reg_next(3) <= den_real_reg(2) + c_109;
      c_113 := SHIFT_RIGHT(d_12, 2);
      den_imag_reg_next(3) <= den_imag_reg(2) - c_113;
    ELSE 
      num_real_reg_next(3) <= n_12;
      num_imag_reg_next(3) <= num_imag_reg(2);
      den_real_reg_next(3) <= den_real_reg(2);
      den_imag_reg_next(3) <= den_imag_reg(2);
    END IF;
    d_13 := den_real_reg(1);
    n_13 := num_real_reg(1);
    IF den_imag_reg(1) < to_signed(16#0000#, 16) THEN 
      a_54 := num_imag_reg(1);
      c_108 := SHIFT_RIGHT(a_54, 1);
      num_real_reg_next(2) <= n_13 - c_108;
      c_112 := SHIFT_RIGHT(n_13, 1);
      num_imag_reg_next(2) <= num_imag_reg(1) + c_112;
      a_57 := den_imag_reg(1);
      c_115 := SHIFT_RIGHT(a_57, 1);
      den_real_reg_next(2) <= den_real_reg(1) - c_115;
      c_117 := SHIFT_RIGHT(d_13, 1);
      den_imag_reg_next(2) <= den_imag_reg(1) + c_117;
    ELSIF den_imag_reg(1) > to_signed(16#0000#, 16) THEN 
      a_56 := num_imag_reg(1);
      c_111 := SHIFT_RIGHT(a_56, 1);
      num_real_reg_next(2) <= n_13 + c_111;
      c_114 := SHIFT_RIGHT(n_13, 1);
      num_imag_reg_next(2) <= num_imag_reg(1) - c_114;
      a_59 := den_imag_reg(1);
      c_116 := SHIFT_RIGHT(a_59, 1);
      den_real_reg_next(2) <= den_real_reg(1) + c_116;
      c_118 := SHIFT_RIGHT(d_13, 1);
      den_imag_reg_next(2) <= den_imag_reg(1) - c_118;
    ELSE 
      num_real_reg_next(2) <= n_13;
      num_imag_reg_next(2) <= num_imag_reg(1);
      den_real_reg_next(2) <= den_real_reg(1);
      den_imag_reg_next(2) <= den_imag_reg(1);
    END IF;
    d_14 := den_real_reg(0);
    n_14 := num_real_reg(0);
    IF den_imag_reg(0) < to_signed(16#0000#, 16) THEN 
      a_58 := num_imag_reg(0);
      num_real_reg_next(1) <= n_14 - a_58;
      num_imag_reg_next(1) <= num_imag_reg(0) + n_14;
      a_61 := den_imag_reg(0);
      den_real_reg_next(1) <= den_real_reg(0) - a_61;
      den_imag_reg_next(1) <= den_imag_reg(0) + d_14;
    ELSIF den_imag_reg(0) > to_signed(16#0000#, 16) THEN 
      a_60 := num_imag_reg(0);
      num_real_reg_next(1) <= n_14 + a_60;
      num_imag_reg_next(1) <= num_imag_reg(0) - n_14;
      a_62 := den_imag_reg(0);
      den_real_reg_next(1) <= den_real_reg(0) + a_62;
      den_imag_reg_next(1) <= den_imag_reg(0) - d_14;
    ELSE 
      num_real_reg_next(1) <= n_14;
      num_imag_reg_next(1) <= num_imag_reg(0);
      den_real_reg_next(1) <= den_real_reg(0);
      den_imag_reg_next(1) <= den_imag_reg(0);
    END IF;
    num_real_reg_next(0) <= num_real_signed;
    num_imag_reg_next(0) <= num_imag_signed;
    den_real_reg_next(0) <= den_real_signed;
    den_imag_reg_next(0) <= den_imag_signed;
    -- CSD Encoding (19898) : 0101001'001'001'010; Cost (Adders) = 5
    mul_temp := ((((resize(den_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32) + resize(den_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(den_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(den_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(den_real_reg(16) & '0' & '0' & '0', 32)) + resize(den_real_reg(16) & '0', 32);
    den_real_out_tmp <= mul_temp(30 DOWNTO 15);
    -- CSD Encoding (19898) : 0101001'001'001'010; Cost (Adders) = 5
    mul_temp_0 := ((((resize(den_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32) + resize(den_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(den_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(den_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(den_imag_reg(16) & '0' & '0' & '0', 32)) + resize(den_imag_reg(16) & '0', 32);
    den_imag_out <= mul_temp_0(30 DOWNTO 15);
    -- CSD Encoding (19898) : 0101001'001'001'010; Cost (Adders) = 5
    mul_temp_1 := ((((resize(num_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32) + resize(num_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(num_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(num_real_reg(16) & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(num_real_reg(16) & '0' & '0' & '0', 32)) + resize(num_real_reg(16) & '0', 32);
    num_real_out_tmp <= mul_temp_1(30 DOWNTO 15);
    -- CSD Encoding (19898) : 0101001'001'001'010; Cost (Adders) = 5
    mul_temp_2 := ((((resize(num_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32) + resize(num_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(num_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(num_imag_reg(16) & '0' & '0' & '0' & '0' & '0' & '0', 32)) - resize(num_imag_reg(16) & '0' & '0' & '0', 32)) + resize(num_imag_reg(16) & '0', 32);
    num_imag_out_tmp <= mul_temp_2(30 DOWNTO 15);
    validOut <= validReg(16);
  END PROCESS embreciprocals_c10_Rotate_to_real_output;


  den_real_out <= std_logic_vector(den_real_out_tmp);

  num_real_out <= std_logic_vector(num_real_out_tmp);

  num_imag_out <= std_logic_vector(num_imag_out_tmp);

END rtl;

