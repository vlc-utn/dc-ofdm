-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip.vhd
-- Created: 2024-10-03 19:36:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip
-- Source Path: divider_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        num                               :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        den                               :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        y                                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        validOut                          :   OUT   std_logic;  -- ufix1
        y1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        validOut1                         :   OUT   std_logic;  -- ufix1
        y2                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- ufix18
        validOut2                         :   OUT   std_logic;  -- ufix1
        y3                                :   OUT   std_logic_vector(15 DOWNTO 0);  -- ufix16
        validOut3                         :   OUT   std_logic  -- ufix1
        );
END divider_ip;


ARCHITECTURE rtl OF divider_ip IS

  -- Component Declarations
  COMPONENT divider_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_x                         :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          ce_out                          :   OUT   std_logic;  -- ufix1
          y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut                        :   OUT   std_logic;  -- ufix1
          y1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut1                       :   OUT   std_logic;  -- ufix1
          y2                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut2                       :   OUT   std_logic;  -- ufix1
          y3                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validOut3                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_reset_sync
    USE ENTITY work.divider_ip_reset_sync(rtl);

  FOR ALL : divider_ip_dut
    USE ENTITY work.divider_ip_dut(rtl);

  -- Signals
  SIGNAL reset_x                          : std_logic;
  SIGNAL dut_enable                       : std_logic;  -- ufix1
  SIGNAL num_unsigned                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL num_sig                          : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL den_unsigned                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL den_sig                          : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL y_sig                            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL validOut_sig                     : std_logic;  -- ufix1
  SIGNAL y1_sig                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL validOut1_sig                    : std_logic;  -- ufix1
  SIGNAL y2_sig                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL validOut2_sig                    : std_logic;  -- ufix1
  SIGNAL y3_sig                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL validOut3_sig                    : std_logic;  -- ufix1
  SIGNAL y_sig_signed                     : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL y_tmp                            : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL y1_sig_signed                    : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL y1_tmp                           : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL y2_sig_signed                    : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL y2_tmp                           : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL y3_sig_signed                    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL y3_tmp                           : unsigned(15 DOWNTO 0);  -- ufix16

BEGIN
  u_divider_ip_reset_sync_inst : divider_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_cm,  -- ufix1
              reset_out => reset_x
              );

  u_divider_ip_dut_inst : divider_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_x => reset_x,
              dut_enable => dut_enable,  -- ufix1
              num => std_logic_vector(num_sig),  -- sfix16_En10
              den => std_logic_vector(den_sig),  -- sfix16_En10
              ce_out => ce_out_sig,  -- ufix1
              y => y_sig,  -- sfix18_En10
              validOut => validOut_sig,  -- ufix1
              y1 => y1_sig,  -- sfix18_En10
              validOut1 => validOut1_sig,  -- ufix1
              y2 => y2_sig,  -- sfix18_En10
              validOut2 => validOut2_sig,  -- ufix1
              y3 => y3_sig,  -- sfix16_En10
              validOut3 => validOut3_sig  -- ufix1
              );

  dut_enable <= '1';

  num_unsigned <= unsigned(num);

  num_sig <= signed(num_unsigned);

  den_unsigned <= unsigned(den);

  den_sig <= signed(den_unsigned);

  reset_cm <=  NOT IPCORE_RESETN;

  y_sig_signed <= signed(y_sig);

  y_tmp <= unsigned(y_sig_signed);

  y <= std_logic_vector(y_tmp);

  y1_sig_signed <= signed(y1_sig);

  y1_tmp <= unsigned(y1_sig_signed);

  y1 <= std_logic_vector(y1_tmp);

  y2_sig_signed <= signed(y2_sig);

  y2_tmp <= unsigned(y2_sig_signed);

  y2 <= std_logic_vector(y2_tmp);

  y3_sig_signed <= signed(y3_sig);

  y3_tmp <= unsigned(y3_sig_signed);

  y3 <= std_logic_vector(y3_tmp);

  validOut <= validOut_sig;

  validOut1 <= validOut1_sig;

  validOut2 <= validOut2_sig;

  validOut3 <= validOut3_sig;

END rtl;

