-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_src_Rotate_to_real_block.vhd
-- Created: 2024-10-03 19:36:10
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_src_Rotate_to_real_block
-- Source Path: test/divider/Complex Divide HDL Optimized/ForEach - Complex Divide/Rotate to real
-- Hierarchy Level: 3
-- Model version: 1.59
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip_src_Rotate_to_real_block IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        den_real                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den_imag                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_real                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_imag                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validIn                           :   IN    std_logic;
        den_real_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_real_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        num_imag_out                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validOut                          :   OUT   std_logic
        );
END divider_ip_src_Rotate_to_real_block;


ARCHITECTURE rtl OF divider_ip_src_Rotate_to_real_block IS

  -- Component Declarations
  COMPONENT divider_ip_src_Quadrant_compensation
    PORT( x                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          y                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          v                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          xOut                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          yOut                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          uOut                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          vOut                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_src_Rotate_to_real
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          den_real                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den_imag                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_real                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_imag                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          den_real_out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_real_out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_imag_out                    :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_src_Quadrant_compensation
    USE ENTITY work.divider_ip_src_Quadrant_compensation(rtl);

  FOR ALL : divider_ip_src_Rotate_to_real
    USE ENTITY work.divider_ip_src_Rotate_to_real(rtl);

  -- Signals
  SIGNAL xOut                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL yOut                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL uOut                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL vOut                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL validOut_1                       : std_logic;
  SIGNAL xOut_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL yOut_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL uOut_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL vOut_signed                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay_out1                       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay1_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay2_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay3_out1                      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL den_real_out_tmp                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL num_real_out_tmp                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL num_imag_out_tmp                 : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  u_Quadrant_compensation : divider_ip_src_Quadrant_compensation
    PORT MAP( x => den_real,  -- sfix16_En10
              y => den_imag,  -- sfix16_En10
              u => num_real,  -- sfix16_En10
              v => num_imag,  -- sfix16_En10
              validIn => validIn,
              xOut => xOut,  -- sfix16_En10
              yOut => yOut,  -- sfix16_En10
              uOut => uOut,  -- sfix16_En10
              vOut => vOut,  -- sfix16_En10
              validOut => validOut_1
              );

  u_Rotate_to_real : divider_ip_src_Rotate_to_real
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              den_real => std_logic_vector(Delay_out1),  -- sfix16_En10
              den_imag => std_logic_vector(Delay1_out1),  -- sfix16_En10
              num_real => std_logic_vector(Delay2_out1),  -- sfix16_En10
              num_imag => std_logic_vector(Delay3_out1),  -- sfix16_En10
              validIn => Delay4_out1,
              den_real_out => den_real_out_tmp,  -- sfix16_En10
              num_real_out => num_real_out_tmp,  -- sfix16_En10
              num_imag_out => num_imag_out_tmp,  -- sfix16_En10
              validOut => validOut
              );

  xOut_signed <= signed(xOut);

  yOut_signed <= signed(yOut);

  uOut_signed <= signed(uOut);

  vOut_signed <= signed(vOut);

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay_out1 <= xOut_signed;
      END IF;
    END IF;
  END PROCESS Delay_process;


  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay1_out1 <= yOut_signed;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay2_out1 <= uOut_signed;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(16#0000#, 16);
      ELSIF enb = '1' THEN
        Delay3_out1 <= vOut_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay4_out1 <= validOut_1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  den_real_out <= den_real_out_tmp;

  num_real_out <= num_real_out_tmp;

  num_imag_out <= num_imag_out_tmp;

END rtl;

