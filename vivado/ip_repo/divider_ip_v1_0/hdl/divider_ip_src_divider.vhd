-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_src_divider.vhd
-- Created: 2024-10-03 19:36:11
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.2
-- Target subsystem base rate: 0.2
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.2
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- y                             ce_out        0.2
-- validOut                      ce_out        0.2
-- y1                            ce_out        0.2
-- validOut1                     ce_out        0.2
-- y2                            ce_out        0.2
-- validOut2                     ce_out        0.2
-- y3                            ce_out        0.2
-- validOut3                     ce_out        0.2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_src_divider
-- Source Path: test/divider
-- Hierarchy Level: 0
-- Model version: 1.59
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip_src_divider IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        num                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        ce_out                            :   OUT   std_logic;
        y                                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut                          :   OUT   std_logic;
        y1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut1                         :   OUT   std_logic;
        y2                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut2                         :   OUT   std_logic;
        y3                                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validOut3                         :   OUT   std_logic
        );
END divider_ip_src_divider;


ARCHITECTURE rtl OF divider_ip_src_divider IS

  -- Component Declarations
  COMPONENT divider_ip_src_in_16_out_16
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_src_in_16_out_8
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_src_in_8_out_16
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          num                             :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8_En6
          den                             :   IN    std_logic_vector(7 DOWNTO 0);  -- sfix8_En6
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_src_Complex_Divide_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          num_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den_re                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den_im                          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          y_re                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_src_in_16_out_16
    USE ENTITY work.divider_ip_src_in_16_out_16(rtl);

  FOR ALL : divider_ip_src_in_16_out_8
    USE ENTITY work.divider_ip_src_in_16_out_8(rtl);

  FOR ALL : divider_ip_src_in_8_out_16
    USE ENTITY work.divider_ip_src_in_8_out_16(rtl);

  FOR ALL : divider_ip_src_Complex_Divide_HDL_Optimized
    USE ENTITY work.divider_ip_src_Complex_Divide_HDL_Optimized(rtl);

  -- Signals
  SIGNAL Constant15_out1                  : std_logic;
  SIGNAL in_16_out_16_out1                : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL in_16_out_16_out2                : std_logic;
  SIGNAL Constant14_out1                  : std_logic;
  SIGNAL in_16_out_8_out1                 : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL in_16_out_8_out2                 : std_logic;
  SIGNAL num_signed                       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion4_out1       : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL den_signed                       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion5_out1       : signed(7 DOWNTO 0);  -- sfix8_En6
  SIGNAL Constant13_out1                  : std_logic;
  SIGNAL in_8_out_16_out1                 : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL in_8_out_16_out2                 : std_logic;
  SIGNAL Constant12_out1                  : std_logic;
  SIGNAL Complex_Divide_HDL_Optimized_out1_re : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Complex_Divide_HDL_Optimized_out2 : std_logic;

BEGIN
  u_in_16_out_16 : divider_ip_src_in_16_out_16
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              num => num,  -- sfix16_En10
              den => den,  -- sfix16_En10
              validIn => Constant15_out1,
              y => in_16_out_16_out1,  -- sfix18_En10
              validOut => in_16_out_16_out2
              );

  u_in_16_out_8 : divider_ip_src_in_16_out_8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              num => num,  -- sfix16_En10
              den => den,  -- sfix16_En10
              validIn => Constant14_out1,
              y => in_16_out_8_out1,  -- sfix18_En10
              validOut => in_16_out_8_out2
              );

  u_in_8_out_16 : divider_ip_src_in_8_out_16
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              num => std_logic_vector(Data_Type_Conversion4_out1),  -- sfix8_En6
              den => std_logic_vector(Data_Type_Conversion5_out1),  -- sfix8_En6
              validIn => Constant13_out1,
              y => in_8_out_16_out1,  -- sfix18_En10
              validOut => in_8_out_16_out2
              );

  u_Complex_Divide_HDL_Optimized : divider_ip_src_Complex_Divide_HDL_Optimized
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => clk_enable,
              num_re => num,  -- sfix16_En10
              num_im => num,  -- sfix16_En10
              den_re => den,  -- sfix16_En10
              den_im => den,  -- sfix16_En10
              validIn => Constant12_out1,
              y_re => Complex_Divide_HDL_Optimized_out1_re,  -- sfix16_En10
              validOut => Complex_Divide_HDL_Optimized_out2
              );

  Constant15_out1 <= '1';

  Constant14_out1 <= '1';

  num_signed <= signed(num);

  Data_Type_Conversion4_out1 <= num_signed(11 DOWNTO 4);

  den_signed <= signed(den);

  Data_Type_Conversion5_out1 <= den_signed(11 DOWNTO 4);

  Constant13_out1 <= '1';

  Constant12_out1 <= '1';

  ce_out <= clk_enable;

  y <= in_16_out_16_out1;

  validOut <= in_16_out_16_out2;

  y1 <= in_16_out_8_out1;

  validOut1 <= in_16_out_8_out2;

  y2 <= in_8_out_16_out1;

  validOut2 <= in_8_out_16_out2;

  y3 <= Complex_Divide_HDL_Optimized_out1_re;

  validOut3 <= Complex_Divide_HDL_Optimized_out2;

END rtl;

