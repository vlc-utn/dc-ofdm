-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_dut.vhd
-- Created: 2024-10-03 19:36:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_dut
-- Source Path: divider_ip/divider_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        num                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        ce_out                            :   OUT   std_logic;  -- ufix1
        y                                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut                          :   OUT   std_logic;  -- ufix1
        y1                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut1                         :   OUT   std_logic;  -- ufix1
        y2                                :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut2                         :   OUT   std_logic;  -- ufix1
        y3                                :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validOut3                         :   OUT   std_logic  -- ufix1
        );
END divider_ip_dut;


ARCHITECTURE rtl OF divider_ip_dut IS

  -- Component Declarations
  COMPONENT divider_ip_src_divider
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          ce_out                          :   OUT   std_logic;  -- ufix1
          y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut                        :   OUT   std_logic;  -- ufix1
          y1                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut1                       :   OUT   std_logic;  -- ufix1
          y2                              :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut2                       :   OUT   std_logic;  -- ufix1
          y3                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validOut3                       :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_src_divider
    USE ENTITY work.divider_ip_src_divider(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL y_sig                            : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL validOut_sig                     : std_logic;  -- ufix1
  SIGNAL y1_sig                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL validOut1_sig                    : std_logic;  -- ufix1
  SIGNAL y2_sig                           : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL validOut2_sig                    : std_logic;  -- ufix1
  SIGNAL y3_sig                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL validOut3_sig                    : std_logic;  -- ufix1

BEGIN
  u_divider_ip_src_divider : divider_ip_src_divider
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset_x => reset_x,
              num => num,  -- sfix16_En10
              den => den,  -- sfix16_En10
              ce_out => ce_out_sig,  -- ufix1
              y => y_sig,  -- sfix18_En10
              validOut => validOut_sig,  -- ufix1
              y1 => y1_sig,  -- sfix18_En10
              validOut1 => validOut1_sig,  -- ufix1
              y2 => y2_sig,  -- sfix18_En10
              validOut2 => validOut2_sig,  -- ufix1
              y3 => y3_sig,  -- sfix16_En10
              validOut3 => validOut3_sig  -- ufix1
              );

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  y <= y_sig;

  validOut <= validOut_sig;

  y1 <= y1_sig;

  validOut1 <= validOut1_sig;

  y2 <= y2_sig;

  validOut2 <= validOut2_sig;

  y3 <= y3_sig;

  validOut3 <= validOut3_sig;

END rtl;

