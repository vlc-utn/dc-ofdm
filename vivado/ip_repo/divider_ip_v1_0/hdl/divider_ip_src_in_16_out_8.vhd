-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_src_in_16_out_8.vhd
-- Created: 2024-10-03 19:36:11
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_src_in_16_out_8
-- Source Path: test/divider/in_16_out_8
-- Hierarchy Level: 1
-- Model version: 1.59
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip_src_in_16_out_8 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        num                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        den                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
        validIn                           :   IN    std_logic;
        y                                 :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
        validOut                          :   OUT   std_logic
        );
END divider_ip_src_in_16_out_8;


ARCHITECTURE rtl OF divider_ip_src_in_16_out_8 IS

  -- Component Declarations
  COMPONENT divider_ip_src_Verify_divide_sizes_block
    PORT( denominator                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          numerator                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          den                             :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
          );
  END COMPONENT;

  COMPONENT divider_ip_src_ForEach_Real_Divide_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          den                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          num                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          validIn                         :   IN    std_logic;
          y                               :   OUT   std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT divider_ip_src_Reshape_to_original_size_block
    PORT( y                               :   IN    std_logic_vector(17 DOWNTO 0);  -- sfix18_En10
          u                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          z                               :   OUT   std_logic_vector(17 DOWNTO 0)  -- sfix18_En10
          );
  END COMPONENT;

  COMPONENT divider_ip_src_y_u_1
    PORT( u                               :   IN    std_logic;
          y                               :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_src_Verify_divide_sizes_block
    USE ENTITY work.divider_ip_src_Verify_divide_sizes_block(rtl);

  FOR ALL : divider_ip_src_ForEach_Real_Divide_block
    USE ENTITY work.divider_ip_src_ForEach_Real_Divide_block(rtl);

  FOR ALL : divider_ip_src_Reshape_to_original_size_block
    USE ENTITY work.divider_ip_src_Reshape_to_original_size_block(rtl);

  FOR ALL : divider_ip_src_y_u_1
    USE ENTITY work.divider_ip_src_y_u_1(rtl);

  -- Signals
  SIGNAL Verify_divide_sizes_out1         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Verify_divide_sizes_out2         : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL ForEach_Real_Divide_out1         : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL ForEach_Real_Divide_out2         : std_logic;
  SIGNAL Reshape_to_original_size_out1    : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Reshape_to_original_size_out1_signed : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL Delay17_out1                     : signed(17 DOWNTO 0);  -- sfix18_En10
  SIGNAL y_u_1_out1                       : std_logic;
  SIGNAL Delay1_out1                      : std_logic;

BEGIN
  u_Verify_divide_sizes : divider_ip_src_Verify_divide_sizes_block
    PORT MAP( denominator => den,  -- sfix16_En10
              numerator => num,  -- sfix16_En10
              den => Verify_divide_sizes_out1,  -- sfix16_En10
              num => Verify_divide_sizes_out2  -- sfix16_En10
              );

  u_ForEach_Real_Divide_instance1 : divider_ip_src_ForEach_Real_Divide_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              den => Verify_divide_sizes_out1,  -- sfix16_En10
              num => Verify_divide_sizes_out2,  -- sfix16_En10
              validIn => validIn,
              y => ForEach_Real_Divide_out1,  -- sfix18_En10
              validOut => ForEach_Real_Divide_out2
              );

  u_Reshape_to_original_size : divider_ip_src_Reshape_to_original_size_block
    PORT MAP( y => ForEach_Real_Divide_out1,  -- sfix18_En10
              u => num,  -- sfix16_En10
              z => Reshape_to_original_size_out1  -- sfix18_En10
              );

  u_y_u_1 : divider_ip_src_y_u_1
    PORT MAP( u => ForEach_Real_Divide_out2,
              y => y_u_1_out1
              );

  Reshape_to_original_size_out1_signed <= signed(Reshape_to_original_size_out1);

  Delay17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay17_out1 <= to_signed(16#00000#, 18);
      ELSIF enb = '1' THEN
        Delay17_out1 <= Reshape_to_original_size_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  y <= std_logic_vector(Delay17_out1);

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay1_out1 <= y_u_1_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  validOut <= Delay1_out1;

END rtl;

