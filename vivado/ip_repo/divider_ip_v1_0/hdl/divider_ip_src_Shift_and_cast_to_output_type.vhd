-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/divider_ip_src_Shift_and_cast_to_output_type.vhd
-- Created: 2024-10-03 19:36:10
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: divider_ip_src_Shift_and_cast_to_output_type
-- Source Path: test/divider/Complex Divide HDL Optimized/ForEach - Complex Divide/Shift and cast to output type
-- Hierarchy Level: 3
-- Model version: 1.59
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY divider_ip_src_Shift_and_cast_to_output_type IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        x                                 :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        shiftValue                        :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34
        y                                 :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
        );
END divider_ip_src_Shift_and_cast_to_output_type;


ARCHITECTURE rtl OF divider_ip_src_Shift_and_cast_to_output_type IS

  -- Component Declarations
  COMPONENT divider_ip_src_Cast_to_Union_of_Types_block
    PORT( Xref                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En10
          Cin                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          Cout                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En14
          );
  END COMPONENT;

  COMPONENT divider_ip_src_Variable_Right_Shift_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          x                               :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En14
          rightShift                      :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En14
          );
  END COMPONENT;

  COMPONENT divider_ip_src_Variable_Left_Shift_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          x                               :   IN    std_logic_vector(19 DOWNTO 0);  -- sfix20_En14
          leftShift                       :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
          y                               :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : divider_ip_src_Cast_to_Union_of_Types_block
    USE ENTITY work.divider_ip_src_Cast_to_Union_of_Types_block(rtl);

  FOR ALL : divider_ip_src_Variable_Right_Shift_block
    USE ENTITY work.divider_ip_src_Variable_Right_Shift_block(rtl);

  FOR ALL : divider_ip_src_Variable_Left_Shift_block
    USE ENTITY work.divider_ip_src_Variable_Left_Shift_block(rtl);

  -- Signals
  SIGNAL shiftValue_signed                : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL Constant_out1                    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Cout                             : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL Abs_rsvd_y                       : signed(34 DOWNTO 0);  -- sfix35
  SIGNAL Abs_out1                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL Delay3_out1                      : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Variable_Right_Shift_out1        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL Variable_Right_Shift_out1_signed : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Variable_Left_Shift_out1         : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL Variable_Left_Shift_out1_signed  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Switch_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Delay1_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Data_Type_Conversion_out1        : signed(15 DOWNTO 0);  -- sfix16_En10

BEGIN
  u_Cast_to_Union_of_Types : divider_ip_src_Cast_to_Union_of_Types_block
    PORT MAP( Xref => std_logic_vector(Constant_out1),  -- sfix16_En10
              Cin => x,  -- sfix16_En14
              Cout => Cout  -- sfix20_En14
              );

  u_Variable_Right_Shift : divider_ip_src_Variable_Right_Shift_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              x => Cout,  -- sfix20_En14
              rightShift => std_logic_vector(Abs_out1),  -- int32
              y => Variable_Right_Shift_out1  -- sfix20_En14
              );

  u_Variable_Left_Shift : divider_ip_src_Variable_Left_Shift_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              x => Cout,  -- sfix20_En14
              leftShift => std_logic_vector(Abs_out1),  -- int32
              y => Variable_Left_Shift_out1  -- sfix20_En14
              );

  shiftValue_signed <= signed(shiftValue);

  Constant_out1 <= to_signed(16#0000#, 16);

  
  Abs_rsvd_y <=  - (resize(shiftValue_signed, 35)) WHEN shiftValue_signed < to_signed(0, 34) ELSE
      resize(shiftValue_signed, 35);
  Abs_out1 <= Abs_rsvd_y(31 DOWNTO 0);

  Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_out1 <= to_signed(0, 34);
      ELSIF enb = '1' THEN
        Delay3_out1 <= shiftValue_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  
  switch_compare_1 <= '1' WHEN Delay3_out1 >= to_signed(0, 34) ELSE
      '0';

  Variable_Right_Shift_out1_signed <= signed(Variable_Right_Shift_out1);

  Variable_Left_Shift_out1_signed <= signed(Variable_Left_Shift_out1);

  
  Switch_out1 <= Variable_Right_Shift_out1_signed WHEN switch_compare_1 = '0' ELSE
      Variable_Left_Shift_out1_signed;

  Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_out1 <= to_signed(16#00000#, 20);
      ELSIF enb = '1' THEN
        Delay1_out1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Data_Type_Conversion_out1 <= Delay1_out1(19 DOWNTO 4);

  y <= std_logic_vector(Data_Type_Conversion_out1);

END rtl;

