-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/ldpc_deco_23_ip_src_BarrelRotator.vhd
-- Created: 2024-10-03 14:23:14
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ldpc_deco_23_ip_src_BarrelRotator
-- Source Path: test/ldpc_deco_23/LDPC Decoder/DecoderCore/BarrelRotator
-- Hierarchy Level: 3
-- Model version: 1.55
-- 
-- Barrel Rotator Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ldpc_deco_23_ip_src_ldpc_deco_23_pac.ALL;

ENTITY ldpc_deco_23_ip_src_BarrelRotator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        data                              :   IN    vector_of_std_logic_vector6(0 TO 47);  -- sfix6 [48]
        shift                             :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        shiftData                         :   OUT   vector_of_std_logic_vector6(0 TO 47)  -- sfix6 [48]
        );
END ldpc_deco_23_ip_src_BarrelRotator;


ARCHITECTURE rtl OF ldpc_deco_23_ip_src_BarrelRotator IS

  -- Signals
  SIGNAL shift_unsigned                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL vShift_6                         : std_logic;  -- ufix1
  SIGNAL vShiftReg_6                      : std_logic;  -- ufix1
  SIGNAL vShift_5                         : std_logic;  -- ufix1
  SIGNAL vShiftReg_5                      : std_logic;  -- ufix1
  SIGNAL vShift_4                         : std_logic;  -- ufix1
  SIGNAL vShift_3                         : std_logic;  -- ufix1
  SIGNAL vShift_2                         : std_logic;  -- ufix1
  SIGNAL vShift_1                         : std_logic;  -- ufix1
  SIGNAL data_0                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_1                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_2                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_3                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_4                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_5                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_6                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_7                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_8                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_9                           : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_10                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_11                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_12                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_13                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_14                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_15                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_15                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_1                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_16                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_17                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_17                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_18                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_19                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_19                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_17                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_20                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_21                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_21                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_22                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_23                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_23                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_21                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_17                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_24                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_25                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_25                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_26                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_27                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_27                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_25                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_28                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_29                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_29                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_30                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_31                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_31                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_29                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_25                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_17                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_17                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_32                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_33                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_33                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_34                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_35                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_35                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_33                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_36                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_37                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_37                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_38                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_39                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_39                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_37                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_33                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_40                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_41                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_41                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_42                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_43                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_43                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_41                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_44                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_45                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_45                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_46                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL data_47                          : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_47                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_45                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_41                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_33                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_33                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_33                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_1                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_16                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_2                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_18                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_20                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_18                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_22                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_24                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_22                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_18                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_26                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_28                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_26                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_30                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_32                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_30                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_26                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_18                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_18                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_34                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_36                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_34                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_38                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_40                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_38                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_34                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_42                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_44                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_42                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_46                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage1_48                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_46                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_42                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_34                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_34                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_34                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_2                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_15                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_3                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_19                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_23                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_19                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_27                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_31                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_27                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_19                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_19                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_35                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_39                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_35                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_43                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_47                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_43                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_35                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_35                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_35                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_3                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_16                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_4                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_20                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_24                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_20                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_28                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_32                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_28                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_20                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_20                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_36                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_40                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_36                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_44                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage2_48                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_44                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_36                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_36                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_36                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_4                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_5                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_21                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_29                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_21                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_21                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_37                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_45                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_37                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_37                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_37                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_5                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_6                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_22                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_30                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_22                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_22                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_38                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_46                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_38                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_38                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_38                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_6                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_15                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_7                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_23                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_31                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_23                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_23                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_39                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_47                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_39                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_39                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_39                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_7                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_16                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_8                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_24                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_32                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_24                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_24                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_40                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage3_48                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_40                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_40                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_40                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_8                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_9                 : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_25                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_25                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_41                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_41                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_41                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_9                    : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_10                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_26                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_26                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_42                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_42                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_42                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_10                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_11                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_27                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_27                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_43                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_43                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_43                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_11                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_12                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_28                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_28                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_44                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_44                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_44                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_12                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_13                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_29                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_29                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_45                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_45                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_45                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_13                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_14                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_30                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_30                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_46                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_46                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_46                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_14                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_15                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_15                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_31                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_31                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_15                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_47                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_47                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_47                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_15                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_16                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_16                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_32                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_32                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_16                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4_48                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage4Reg_48                : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_48                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_16                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_17                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_17                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_18                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_18                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_19                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_19                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_20                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_20                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_21                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_21                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_22                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_22                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_23                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_23                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_24                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_24                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_25                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_25                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_26                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_26                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_27                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_27                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_28                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_28                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_29                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_29                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_30                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_30                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_31                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_31                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage5_32                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_32                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_33                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_34                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_35                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_36                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_37                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_38                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_39                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_40                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_41                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_42                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_43                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_44                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_45                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_46                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_47                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL dout_stage6_48                   : signed(5 DOWNTO 0);  -- sfix6
  SIGNAL shiftData_tmp                    : vector_of_signed6(0 TO 47);  -- sfix6 [48]

BEGIN
  shift_unsigned <= unsigned(shift);

  vShift_6 <= shift_unsigned(5);

  c_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vShiftReg_6 <= '0';
      ELSIF enb = '1' THEN
        vShiftReg_6 <= vShift_6;
      END IF;
    END IF;
  END PROCESS c_process;


  vShift_5 <= shift_unsigned(4);

  c_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vShiftReg_5 <= '0';
      ELSIF enb = '1' THEN
        vShiftReg_5 <= vShift_5;
      END IF;
    END IF;
  END PROCESS c_1_process;


  vShift_4 <= shift_unsigned(3);

  vShift_3 <= shift_unsigned(2);

  vShift_2 <= shift_unsigned(1);

  vShift_1 <= shift_unsigned(0);

  data_0 <= signed(data(0));

  data_1 <= signed(data(1));

  
  dout_stage1_1 <= data_0 WHEN vShift_1 = '0' ELSE
      data_1;

  data_2 <= signed(data(2));

  data_3 <= signed(data(3));

  
  dout_stage1_3 <= data_2 WHEN vShift_1 = '0' ELSE
      data_3;

  
  dout_stage2_1 <= dout_stage1_1 WHEN vShift_2 = '0' ELSE
      dout_stage1_3;

  data_4 <= signed(data(4));

  data_5 <= signed(data(5));

  
  dout_stage1_5 <= data_4 WHEN vShift_1 = '0' ELSE
      data_5;

  data_6 <= signed(data(6));

  data_7 <= signed(data(7));

  
  dout_stage1_7 <= data_6 WHEN vShift_1 = '0' ELSE
      data_7;

  
  dout_stage2_5 <= dout_stage1_5 WHEN vShift_2 = '0' ELSE
      dout_stage1_7;

  
  dout_stage3_1 <= dout_stage2_1 WHEN vShift_3 = '0' ELSE
      dout_stage2_5;

  data_8 <= signed(data(8));

  data_9 <= signed(data(9));

  
  dout_stage1_9 <= data_8 WHEN vShift_1 = '0' ELSE
      data_9;

  data_10 <= signed(data(10));

  data_11 <= signed(data(11));

  
  dout_stage1_11 <= data_10 WHEN vShift_1 = '0' ELSE
      data_11;

  
  dout_stage2_9 <= dout_stage1_9 WHEN vShift_2 = '0' ELSE
      dout_stage1_11;

  data_12 <= signed(data(12));

  data_13 <= signed(data(13));

  
  dout_stage1_13 <= data_12 WHEN vShift_1 = '0' ELSE
      data_13;

  data_14 <= signed(data(14));

  data_15 <= signed(data(15));

  
  dout_stage1_15 <= data_14 WHEN vShift_1 = '0' ELSE
      data_15;

  
  dout_stage2_13 <= dout_stage1_13 WHEN vShift_2 = '0' ELSE
      dout_stage1_15;

  
  dout_stage3_9 <= dout_stage2_9 WHEN vShift_3 = '0' ELSE
      dout_stage2_13;

  
  dout_stage4_1 <= dout_stage3_1 WHEN vShift_4 = '0' ELSE
      dout_stage3_9;

  c_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_1 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_1 <= dout_stage4_1;
      END IF;
    END IF;
  END PROCESS c_2_process;


  data_16 <= signed(data(16));

  data_17 <= signed(data(17));

  
  dout_stage1_17 <= data_16 WHEN vShift_1 = '0' ELSE
      data_17;

  data_18 <= signed(data(18));

  data_19 <= signed(data(19));

  
  dout_stage1_19 <= data_18 WHEN vShift_1 = '0' ELSE
      data_19;

  
  dout_stage2_17 <= dout_stage1_17 WHEN vShift_2 = '0' ELSE
      dout_stage1_19;

  data_20 <= signed(data(20));

  data_21 <= signed(data(21));

  
  dout_stage1_21 <= data_20 WHEN vShift_1 = '0' ELSE
      data_21;

  data_22 <= signed(data(22));

  data_23 <= signed(data(23));

  
  dout_stage1_23 <= data_22 WHEN vShift_1 = '0' ELSE
      data_23;

  
  dout_stage2_21 <= dout_stage1_21 WHEN vShift_2 = '0' ELSE
      dout_stage1_23;

  
  dout_stage3_17 <= dout_stage2_17 WHEN vShift_3 = '0' ELSE
      dout_stage2_21;

  data_24 <= signed(data(24));

  data_25 <= signed(data(25));

  
  dout_stage1_25 <= data_24 WHEN vShift_1 = '0' ELSE
      data_25;

  data_26 <= signed(data(26));

  data_27 <= signed(data(27));

  
  dout_stage1_27 <= data_26 WHEN vShift_1 = '0' ELSE
      data_27;

  
  dout_stage2_25 <= dout_stage1_25 WHEN vShift_2 = '0' ELSE
      dout_stage1_27;

  data_28 <= signed(data(28));

  data_29 <= signed(data(29));

  
  dout_stage1_29 <= data_28 WHEN vShift_1 = '0' ELSE
      data_29;

  data_30 <= signed(data(30));

  data_31 <= signed(data(31));

  
  dout_stage1_31 <= data_30 WHEN vShift_1 = '0' ELSE
      data_31;

  
  dout_stage2_29 <= dout_stage1_29 WHEN vShift_2 = '0' ELSE
      dout_stage1_31;

  
  dout_stage3_25 <= dout_stage2_25 WHEN vShift_3 = '0' ELSE
      dout_stage2_29;

  
  dout_stage4_17 <= dout_stage3_17 WHEN vShift_4 = '0' ELSE
      dout_stage3_25;

  c_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_17 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_17 <= dout_stage4_17;
      END IF;
    END IF;
  END PROCESS c_3_process;


  
  dout_stage5_1 <= dout_stage4Reg_1 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_17;

  data_32 <= signed(data(32));

  data_33 <= signed(data(33));

  
  dout_stage1_33 <= data_32 WHEN vShift_1 = '0' ELSE
      data_33;

  data_34 <= signed(data(34));

  data_35 <= signed(data(35));

  
  dout_stage1_35 <= data_34 WHEN vShift_1 = '0' ELSE
      data_35;

  
  dout_stage2_33 <= dout_stage1_33 WHEN vShift_2 = '0' ELSE
      dout_stage1_35;

  data_36 <= signed(data(36));

  data_37 <= signed(data(37));

  
  dout_stage1_37 <= data_36 WHEN vShift_1 = '0' ELSE
      data_37;

  data_38 <= signed(data(38));

  data_39 <= signed(data(39));

  
  dout_stage1_39 <= data_38 WHEN vShift_1 = '0' ELSE
      data_39;

  
  dout_stage2_37 <= dout_stage1_37 WHEN vShift_2 = '0' ELSE
      dout_stage1_39;

  
  dout_stage3_33 <= dout_stage2_33 WHEN vShift_3 = '0' ELSE
      dout_stage2_37;

  data_40 <= signed(data(40));

  data_41 <= signed(data(41));

  
  dout_stage1_41 <= data_40 WHEN vShift_1 = '0' ELSE
      data_41;

  data_42 <= signed(data(42));

  data_43 <= signed(data(43));

  
  dout_stage1_43 <= data_42 WHEN vShift_1 = '0' ELSE
      data_43;

  
  dout_stage2_41 <= dout_stage1_41 WHEN vShift_2 = '0' ELSE
      dout_stage1_43;

  data_44 <= signed(data(44));

  data_45 <= signed(data(45));

  
  dout_stage1_45 <= data_44 WHEN vShift_1 = '0' ELSE
      data_45;

  data_46 <= signed(data(46));

  data_47 <= signed(data(47));

  
  dout_stage1_47 <= data_46 WHEN vShift_1 = '0' ELSE
      data_47;

  
  dout_stage2_45 <= dout_stage1_45 WHEN vShift_2 = '0' ELSE
      dout_stage1_47;

  
  dout_stage3_41 <= dout_stage2_41 WHEN vShift_3 = '0' ELSE
      dout_stage2_45;

  
  dout_stage4_33 <= dout_stage3_33 WHEN vShift_4 = '0' ELSE
      dout_stage3_41;

  c_4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_33 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_33 <= dout_stage4_33;
      END IF;
    END IF;
  END PROCESS c_4_process;


  
  dout_stage5_33 <= dout_stage4Reg_33 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_1;

  
  dout_stage6_1 <= dout_stage5_1 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_33;

  
  dout_stage1_2 <= data_1 WHEN vShift_1 = '0' ELSE
      data_2;

  
  dout_stage1_4 <= data_3 WHEN vShift_1 = '0' ELSE
      data_4;

  
  dout_stage2_2 <= dout_stage1_2 WHEN vShift_2 = '0' ELSE
      dout_stage1_4;

  
  dout_stage1_6 <= data_5 WHEN vShift_1 = '0' ELSE
      data_6;

  
  dout_stage1_8 <= data_7 WHEN vShift_1 = '0' ELSE
      data_8;

  
  dout_stage2_6 <= dout_stage1_6 WHEN vShift_2 = '0' ELSE
      dout_stage1_8;

  
  dout_stage3_2 <= dout_stage2_2 WHEN vShift_3 = '0' ELSE
      dout_stage2_6;

  
  dout_stage1_10 <= data_9 WHEN vShift_1 = '0' ELSE
      data_10;

  
  dout_stage1_12 <= data_11 WHEN vShift_1 = '0' ELSE
      data_12;

  
  dout_stage2_10 <= dout_stage1_10 WHEN vShift_2 = '0' ELSE
      dout_stage1_12;

  
  dout_stage1_14 <= data_13 WHEN vShift_1 = '0' ELSE
      data_14;

  
  dout_stage1_16 <= data_15 WHEN vShift_1 = '0' ELSE
      data_16;

  
  dout_stage2_14 <= dout_stage1_14 WHEN vShift_2 = '0' ELSE
      dout_stage1_16;

  
  dout_stage3_10 <= dout_stage2_10 WHEN vShift_3 = '0' ELSE
      dout_stage2_14;

  
  dout_stage4_2 <= dout_stage3_2 WHEN vShift_4 = '0' ELSE
      dout_stage3_10;

  c_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_2 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_2 <= dout_stage4_2;
      END IF;
    END IF;
  END PROCESS c_5_process;


  
  dout_stage1_18 <= data_17 WHEN vShift_1 = '0' ELSE
      data_18;

  
  dout_stage1_20 <= data_19 WHEN vShift_1 = '0' ELSE
      data_20;

  
  dout_stage2_18 <= dout_stage1_18 WHEN vShift_2 = '0' ELSE
      dout_stage1_20;

  
  dout_stage1_22 <= data_21 WHEN vShift_1 = '0' ELSE
      data_22;

  
  dout_stage1_24 <= data_23 WHEN vShift_1 = '0' ELSE
      data_24;

  
  dout_stage2_22 <= dout_stage1_22 WHEN vShift_2 = '0' ELSE
      dout_stage1_24;

  
  dout_stage3_18 <= dout_stage2_18 WHEN vShift_3 = '0' ELSE
      dout_stage2_22;

  
  dout_stage1_26 <= data_25 WHEN vShift_1 = '0' ELSE
      data_26;

  
  dout_stage1_28 <= data_27 WHEN vShift_1 = '0' ELSE
      data_28;

  
  dout_stage2_26 <= dout_stage1_26 WHEN vShift_2 = '0' ELSE
      dout_stage1_28;

  
  dout_stage1_30 <= data_29 WHEN vShift_1 = '0' ELSE
      data_30;

  
  dout_stage1_32 <= data_31 WHEN vShift_1 = '0' ELSE
      data_32;

  
  dout_stage2_30 <= dout_stage1_30 WHEN vShift_2 = '0' ELSE
      dout_stage1_32;

  
  dout_stage3_26 <= dout_stage2_26 WHEN vShift_3 = '0' ELSE
      dout_stage2_30;

  
  dout_stage4_18 <= dout_stage3_18 WHEN vShift_4 = '0' ELSE
      dout_stage3_26;

  c_6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_18 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_18 <= dout_stage4_18;
      END IF;
    END IF;
  END PROCESS c_6_process;


  
  dout_stage5_2 <= dout_stage4Reg_2 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_18;

  
  dout_stage1_34 <= data_33 WHEN vShift_1 = '0' ELSE
      data_34;

  
  dout_stage1_36 <= data_35 WHEN vShift_1 = '0' ELSE
      data_36;

  
  dout_stage2_34 <= dout_stage1_34 WHEN vShift_2 = '0' ELSE
      dout_stage1_36;

  
  dout_stage1_38 <= data_37 WHEN vShift_1 = '0' ELSE
      data_38;

  
  dout_stage1_40 <= data_39 WHEN vShift_1 = '0' ELSE
      data_40;

  
  dout_stage2_38 <= dout_stage1_38 WHEN vShift_2 = '0' ELSE
      dout_stage1_40;

  
  dout_stage3_34 <= dout_stage2_34 WHEN vShift_3 = '0' ELSE
      dout_stage2_38;

  
  dout_stage1_42 <= data_41 WHEN vShift_1 = '0' ELSE
      data_42;

  
  dout_stage1_44 <= data_43 WHEN vShift_1 = '0' ELSE
      data_44;

  
  dout_stage2_42 <= dout_stage1_42 WHEN vShift_2 = '0' ELSE
      dout_stage1_44;

  
  dout_stage1_46 <= data_45 WHEN vShift_1 = '0' ELSE
      data_46;

  
  dout_stage1_48 <= data_47 WHEN vShift_1 = '0' ELSE
      data_0;

  
  dout_stage2_46 <= dout_stage1_46 WHEN vShift_2 = '0' ELSE
      dout_stage1_48;

  
  dout_stage3_42 <= dout_stage2_42 WHEN vShift_3 = '0' ELSE
      dout_stage2_46;

  
  dout_stage4_34 <= dout_stage3_34 WHEN vShift_4 = '0' ELSE
      dout_stage3_42;

  c_7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_34 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_34 <= dout_stage4_34;
      END IF;
    END IF;
  END PROCESS c_7_process;


  
  dout_stage5_34 <= dout_stage4Reg_34 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_2;

  
  dout_stage6_2 <= dout_stage5_2 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_34;

  
  dout_stage2_3 <= dout_stage1_3 WHEN vShift_2 = '0' ELSE
      dout_stage1_5;

  
  dout_stage2_7 <= dout_stage1_7 WHEN vShift_2 = '0' ELSE
      dout_stage1_9;

  
  dout_stage3_3 <= dout_stage2_3 WHEN vShift_3 = '0' ELSE
      dout_stage2_7;

  
  dout_stage2_11 <= dout_stage1_11 WHEN vShift_2 = '0' ELSE
      dout_stage1_13;

  
  dout_stage2_15 <= dout_stage1_15 WHEN vShift_2 = '0' ELSE
      dout_stage1_17;

  
  dout_stage3_11 <= dout_stage2_11 WHEN vShift_3 = '0' ELSE
      dout_stage2_15;

  
  dout_stage4_3 <= dout_stage3_3 WHEN vShift_4 = '0' ELSE
      dout_stage3_11;

  c_8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_3 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_3 <= dout_stage4_3;
      END IF;
    END IF;
  END PROCESS c_8_process;


  
  dout_stage2_19 <= dout_stage1_19 WHEN vShift_2 = '0' ELSE
      dout_stage1_21;

  
  dout_stage2_23 <= dout_stage1_23 WHEN vShift_2 = '0' ELSE
      dout_stage1_25;

  
  dout_stage3_19 <= dout_stage2_19 WHEN vShift_3 = '0' ELSE
      dout_stage2_23;

  
  dout_stage2_27 <= dout_stage1_27 WHEN vShift_2 = '0' ELSE
      dout_stage1_29;

  
  dout_stage2_31 <= dout_stage1_31 WHEN vShift_2 = '0' ELSE
      dout_stage1_33;

  
  dout_stage3_27 <= dout_stage2_27 WHEN vShift_3 = '0' ELSE
      dout_stage2_31;

  
  dout_stage4_19 <= dout_stage3_19 WHEN vShift_4 = '0' ELSE
      dout_stage3_27;

  c_9_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_19 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_19 <= dout_stage4_19;
      END IF;
    END IF;
  END PROCESS c_9_process;


  
  dout_stage5_3 <= dout_stage4Reg_3 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_19;

  
  dout_stage2_35 <= dout_stage1_35 WHEN vShift_2 = '0' ELSE
      dout_stage1_37;

  
  dout_stage2_39 <= dout_stage1_39 WHEN vShift_2 = '0' ELSE
      dout_stage1_41;

  
  dout_stage3_35 <= dout_stage2_35 WHEN vShift_3 = '0' ELSE
      dout_stage2_39;

  
  dout_stage2_43 <= dout_stage1_43 WHEN vShift_2 = '0' ELSE
      dout_stage1_45;

  
  dout_stage2_47 <= dout_stage1_47 WHEN vShift_2 = '0' ELSE
      dout_stage1_1;

  
  dout_stage3_43 <= dout_stage2_43 WHEN vShift_3 = '0' ELSE
      dout_stage2_47;

  
  dout_stage4_35 <= dout_stage3_35 WHEN vShift_4 = '0' ELSE
      dout_stage3_43;

  c_10_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_35 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_35 <= dout_stage4_35;
      END IF;
    END IF;
  END PROCESS c_10_process;


  
  dout_stage5_35 <= dout_stage4Reg_35 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_3;

  
  dout_stage6_3 <= dout_stage5_3 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_35;

  
  dout_stage2_4 <= dout_stage1_4 WHEN vShift_2 = '0' ELSE
      dout_stage1_6;

  
  dout_stage2_8 <= dout_stage1_8 WHEN vShift_2 = '0' ELSE
      dout_stage1_10;

  
  dout_stage3_4 <= dout_stage2_4 WHEN vShift_3 = '0' ELSE
      dout_stage2_8;

  
  dout_stage2_12 <= dout_stage1_12 WHEN vShift_2 = '0' ELSE
      dout_stage1_14;

  
  dout_stage2_16 <= dout_stage1_16 WHEN vShift_2 = '0' ELSE
      dout_stage1_18;

  
  dout_stage3_12 <= dout_stage2_12 WHEN vShift_3 = '0' ELSE
      dout_stage2_16;

  
  dout_stage4_4 <= dout_stage3_4 WHEN vShift_4 = '0' ELSE
      dout_stage3_12;

  c_11_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_4 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_4 <= dout_stage4_4;
      END IF;
    END IF;
  END PROCESS c_11_process;


  
  dout_stage2_20 <= dout_stage1_20 WHEN vShift_2 = '0' ELSE
      dout_stage1_22;

  
  dout_stage2_24 <= dout_stage1_24 WHEN vShift_2 = '0' ELSE
      dout_stage1_26;

  
  dout_stage3_20 <= dout_stage2_20 WHEN vShift_3 = '0' ELSE
      dout_stage2_24;

  
  dout_stage2_28 <= dout_stage1_28 WHEN vShift_2 = '0' ELSE
      dout_stage1_30;

  
  dout_stage2_32 <= dout_stage1_32 WHEN vShift_2 = '0' ELSE
      dout_stage1_34;

  
  dout_stage3_28 <= dout_stage2_28 WHEN vShift_3 = '0' ELSE
      dout_stage2_32;

  
  dout_stage4_20 <= dout_stage3_20 WHEN vShift_4 = '0' ELSE
      dout_stage3_28;

  c_12_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_20 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_20 <= dout_stage4_20;
      END IF;
    END IF;
  END PROCESS c_12_process;


  
  dout_stage5_4 <= dout_stage4Reg_4 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_20;

  
  dout_stage2_36 <= dout_stage1_36 WHEN vShift_2 = '0' ELSE
      dout_stage1_38;

  
  dout_stage2_40 <= dout_stage1_40 WHEN vShift_2 = '0' ELSE
      dout_stage1_42;

  
  dout_stage3_36 <= dout_stage2_36 WHEN vShift_3 = '0' ELSE
      dout_stage2_40;

  
  dout_stage2_44 <= dout_stage1_44 WHEN vShift_2 = '0' ELSE
      dout_stage1_46;

  
  dout_stage2_48 <= dout_stage1_48 WHEN vShift_2 = '0' ELSE
      dout_stage1_2;

  
  dout_stage3_44 <= dout_stage2_44 WHEN vShift_3 = '0' ELSE
      dout_stage2_48;

  
  dout_stage4_36 <= dout_stage3_36 WHEN vShift_4 = '0' ELSE
      dout_stage3_44;

  c_13_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_36 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_36 <= dout_stage4_36;
      END IF;
    END IF;
  END PROCESS c_13_process;


  
  dout_stage5_36 <= dout_stage4Reg_36 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_4;

  
  dout_stage6_4 <= dout_stage5_4 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_36;

  
  dout_stage3_5 <= dout_stage2_5 WHEN vShift_3 = '0' ELSE
      dout_stage2_9;

  
  dout_stage3_13 <= dout_stage2_13 WHEN vShift_3 = '0' ELSE
      dout_stage2_17;

  
  dout_stage4_5 <= dout_stage3_5 WHEN vShift_4 = '0' ELSE
      dout_stage3_13;

  c_14_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_5 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_5 <= dout_stage4_5;
      END IF;
    END IF;
  END PROCESS c_14_process;


  
  dout_stage3_21 <= dout_stage2_21 WHEN vShift_3 = '0' ELSE
      dout_stage2_25;

  
  dout_stage3_29 <= dout_stage2_29 WHEN vShift_3 = '0' ELSE
      dout_stage2_33;

  
  dout_stage4_21 <= dout_stage3_21 WHEN vShift_4 = '0' ELSE
      dout_stage3_29;

  c_15_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_21 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_21 <= dout_stage4_21;
      END IF;
    END IF;
  END PROCESS c_15_process;


  
  dout_stage5_5 <= dout_stage4Reg_5 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_21;

  
  dout_stage3_37 <= dout_stage2_37 WHEN vShift_3 = '0' ELSE
      dout_stage2_41;

  
  dout_stage3_45 <= dout_stage2_45 WHEN vShift_3 = '0' ELSE
      dout_stage2_1;

  
  dout_stage4_37 <= dout_stage3_37 WHEN vShift_4 = '0' ELSE
      dout_stage3_45;

  c_16_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_37 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_37 <= dout_stage4_37;
      END IF;
    END IF;
  END PROCESS c_16_process;


  
  dout_stage5_37 <= dout_stage4Reg_37 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_5;

  
  dout_stage6_5 <= dout_stage5_5 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_37;

  
  dout_stage3_6 <= dout_stage2_6 WHEN vShift_3 = '0' ELSE
      dout_stage2_10;

  
  dout_stage3_14 <= dout_stage2_14 WHEN vShift_3 = '0' ELSE
      dout_stage2_18;

  
  dout_stage4_6 <= dout_stage3_6 WHEN vShift_4 = '0' ELSE
      dout_stage3_14;

  c_17_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_6 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_6 <= dout_stage4_6;
      END IF;
    END IF;
  END PROCESS c_17_process;


  
  dout_stage3_22 <= dout_stage2_22 WHEN vShift_3 = '0' ELSE
      dout_stage2_26;

  
  dout_stage3_30 <= dout_stage2_30 WHEN vShift_3 = '0' ELSE
      dout_stage2_34;

  
  dout_stage4_22 <= dout_stage3_22 WHEN vShift_4 = '0' ELSE
      dout_stage3_30;

  c_18_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_22 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_22 <= dout_stage4_22;
      END IF;
    END IF;
  END PROCESS c_18_process;


  
  dout_stage5_6 <= dout_stage4Reg_6 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_22;

  
  dout_stage3_38 <= dout_stage2_38 WHEN vShift_3 = '0' ELSE
      dout_stage2_42;

  
  dout_stage3_46 <= dout_stage2_46 WHEN vShift_3 = '0' ELSE
      dout_stage2_2;

  
  dout_stage4_38 <= dout_stage3_38 WHEN vShift_4 = '0' ELSE
      dout_stage3_46;

  c_19_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_38 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_38 <= dout_stage4_38;
      END IF;
    END IF;
  END PROCESS c_19_process;


  
  dout_stage5_38 <= dout_stage4Reg_38 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_6;

  
  dout_stage6_6 <= dout_stage5_6 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_38;

  
  dout_stage3_7 <= dout_stage2_7 WHEN vShift_3 = '0' ELSE
      dout_stage2_11;

  
  dout_stage3_15 <= dout_stage2_15 WHEN vShift_3 = '0' ELSE
      dout_stage2_19;

  
  dout_stage4_7 <= dout_stage3_7 WHEN vShift_4 = '0' ELSE
      dout_stage3_15;

  c_20_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_7 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_7 <= dout_stage4_7;
      END IF;
    END IF;
  END PROCESS c_20_process;


  
  dout_stage3_23 <= dout_stage2_23 WHEN vShift_3 = '0' ELSE
      dout_stage2_27;

  
  dout_stage3_31 <= dout_stage2_31 WHEN vShift_3 = '0' ELSE
      dout_stage2_35;

  
  dout_stage4_23 <= dout_stage3_23 WHEN vShift_4 = '0' ELSE
      dout_stage3_31;

  c_21_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_23 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_23 <= dout_stage4_23;
      END IF;
    END IF;
  END PROCESS c_21_process;


  
  dout_stage5_7 <= dout_stage4Reg_7 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_23;

  
  dout_stage3_39 <= dout_stage2_39 WHEN vShift_3 = '0' ELSE
      dout_stage2_43;

  
  dout_stage3_47 <= dout_stage2_47 WHEN vShift_3 = '0' ELSE
      dout_stage2_3;

  
  dout_stage4_39 <= dout_stage3_39 WHEN vShift_4 = '0' ELSE
      dout_stage3_47;

  c_22_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_39 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_39 <= dout_stage4_39;
      END IF;
    END IF;
  END PROCESS c_22_process;


  
  dout_stage5_39 <= dout_stage4Reg_39 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_7;

  
  dout_stage6_7 <= dout_stage5_7 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_39;

  
  dout_stage3_8 <= dout_stage2_8 WHEN vShift_3 = '0' ELSE
      dout_stage2_12;

  
  dout_stage3_16 <= dout_stage2_16 WHEN vShift_3 = '0' ELSE
      dout_stage2_20;

  
  dout_stage4_8 <= dout_stage3_8 WHEN vShift_4 = '0' ELSE
      dout_stage3_16;

  c_23_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_8 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_8 <= dout_stage4_8;
      END IF;
    END IF;
  END PROCESS c_23_process;


  
  dout_stage3_24 <= dout_stage2_24 WHEN vShift_3 = '0' ELSE
      dout_stage2_28;

  
  dout_stage3_32 <= dout_stage2_32 WHEN vShift_3 = '0' ELSE
      dout_stage2_36;

  
  dout_stage4_24 <= dout_stage3_24 WHEN vShift_4 = '0' ELSE
      dout_stage3_32;

  c_24_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_24 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_24 <= dout_stage4_24;
      END IF;
    END IF;
  END PROCESS c_24_process;


  
  dout_stage5_8 <= dout_stage4Reg_8 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_24;

  
  dout_stage3_40 <= dout_stage2_40 WHEN vShift_3 = '0' ELSE
      dout_stage2_44;

  
  dout_stage3_48 <= dout_stage2_48 WHEN vShift_3 = '0' ELSE
      dout_stage2_4;

  
  dout_stage4_40 <= dout_stage3_40 WHEN vShift_4 = '0' ELSE
      dout_stage3_48;

  c_25_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_40 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_40 <= dout_stage4_40;
      END IF;
    END IF;
  END PROCESS c_25_process;


  
  dout_stage5_40 <= dout_stage4Reg_40 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_8;

  
  dout_stage6_8 <= dout_stage5_8 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_40;

  
  dout_stage4_9 <= dout_stage3_9 WHEN vShift_4 = '0' ELSE
      dout_stage3_17;

  c_26_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_9 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_9 <= dout_stage4_9;
      END IF;
    END IF;
  END PROCESS c_26_process;


  
  dout_stage4_25 <= dout_stage3_25 WHEN vShift_4 = '0' ELSE
      dout_stage3_33;

  c_27_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_25 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_25 <= dout_stage4_25;
      END IF;
    END IF;
  END PROCESS c_27_process;


  
  dout_stage5_9 <= dout_stage4Reg_9 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_25;

  
  dout_stage4_41 <= dout_stage3_41 WHEN vShift_4 = '0' ELSE
      dout_stage3_1;

  c_28_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_41 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_41 <= dout_stage4_41;
      END IF;
    END IF;
  END PROCESS c_28_process;


  
  dout_stage5_41 <= dout_stage4Reg_41 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_9;

  
  dout_stage6_9 <= dout_stage5_9 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_41;

  
  dout_stage4_10 <= dout_stage3_10 WHEN vShift_4 = '0' ELSE
      dout_stage3_18;

  c_29_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_10 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_10 <= dout_stage4_10;
      END IF;
    END IF;
  END PROCESS c_29_process;


  
  dout_stage4_26 <= dout_stage3_26 WHEN vShift_4 = '0' ELSE
      dout_stage3_34;

  c_30_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_26 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_26 <= dout_stage4_26;
      END IF;
    END IF;
  END PROCESS c_30_process;


  
  dout_stage5_10 <= dout_stage4Reg_10 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_26;

  
  dout_stage4_42 <= dout_stage3_42 WHEN vShift_4 = '0' ELSE
      dout_stage3_2;

  c_31_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_42 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_42 <= dout_stage4_42;
      END IF;
    END IF;
  END PROCESS c_31_process;


  
  dout_stage5_42 <= dout_stage4Reg_42 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_10;

  
  dout_stage6_10 <= dout_stage5_10 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_42;

  
  dout_stage4_11 <= dout_stage3_11 WHEN vShift_4 = '0' ELSE
      dout_stage3_19;

  c_32_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_11 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_11 <= dout_stage4_11;
      END IF;
    END IF;
  END PROCESS c_32_process;


  
  dout_stage4_27 <= dout_stage3_27 WHEN vShift_4 = '0' ELSE
      dout_stage3_35;

  c_33_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_27 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_27 <= dout_stage4_27;
      END IF;
    END IF;
  END PROCESS c_33_process;


  
  dout_stage5_11 <= dout_stage4Reg_11 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_27;

  
  dout_stage4_43 <= dout_stage3_43 WHEN vShift_4 = '0' ELSE
      dout_stage3_3;

  c_34_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_43 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_43 <= dout_stage4_43;
      END IF;
    END IF;
  END PROCESS c_34_process;


  
  dout_stage5_43 <= dout_stage4Reg_43 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_11;

  
  dout_stage6_11 <= dout_stage5_11 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_43;

  
  dout_stage4_12 <= dout_stage3_12 WHEN vShift_4 = '0' ELSE
      dout_stage3_20;

  c_35_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_12 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_12 <= dout_stage4_12;
      END IF;
    END IF;
  END PROCESS c_35_process;


  
  dout_stage4_28 <= dout_stage3_28 WHEN vShift_4 = '0' ELSE
      dout_stage3_36;

  c_36_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_28 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_28 <= dout_stage4_28;
      END IF;
    END IF;
  END PROCESS c_36_process;


  
  dout_stage5_12 <= dout_stage4Reg_12 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_28;

  
  dout_stage4_44 <= dout_stage3_44 WHEN vShift_4 = '0' ELSE
      dout_stage3_4;

  c_37_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_44 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_44 <= dout_stage4_44;
      END IF;
    END IF;
  END PROCESS c_37_process;


  
  dout_stage5_44 <= dout_stage4Reg_44 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_12;

  
  dout_stage6_12 <= dout_stage5_12 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_44;

  
  dout_stage4_13 <= dout_stage3_13 WHEN vShift_4 = '0' ELSE
      dout_stage3_21;

  c_38_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_13 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_13 <= dout_stage4_13;
      END IF;
    END IF;
  END PROCESS c_38_process;


  
  dout_stage4_29 <= dout_stage3_29 WHEN vShift_4 = '0' ELSE
      dout_stage3_37;

  c_39_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_29 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_29 <= dout_stage4_29;
      END IF;
    END IF;
  END PROCESS c_39_process;


  
  dout_stage5_13 <= dout_stage4Reg_13 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_29;

  
  dout_stage4_45 <= dout_stage3_45 WHEN vShift_4 = '0' ELSE
      dout_stage3_5;

  c_40_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_45 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_45 <= dout_stage4_45;
      END IF;
    END IF;
  END PROCESS c_40_process;


  
  dout_stage5_45 <= dout_stage4Reg_45 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_13;

  
  dout_stage6_13 <= dout_stage5_13 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_45;

  
  dout_stage4_14 <= dout_stage3_14 WHEN vShift_4 = '0' ELSE
      dout_stage3_22;

  c_41_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_14 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_14 <= dout_stage4_14;
      END IF;
    END IF;
  END PROCESS c_41_process;


  
  dout_stage4_30 <= dout_stage3_30 WHEN vShift_4 = '0' ELSE
      dout_stage3_38;

  c_42_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_30 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_30 <= dout_stage4_30;
      END IF;
    END IF;
  END PROCESS c_42_process;


  
  dout_stage5_14 <= dout_stage4Reg_14 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_30;

  
  dout_stage4_46 <= dout_stage3_46 WHEN vShift_4 = '0' ELSE
      dout_stage3_6;

  c_43_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_46 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_46 <= dout_stage4_46;
      END IF;
    END IF;
  END PROCESS c_43_process;


  
  dout_stage5_46 <= dout_stage4Reg_46 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_14;

  
  dout_stage6_14 <= dout_stage5_14 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_46;

  
  dout_stage4_15 <= dout_stage3_15 WHEN vShift_4 = '0' ELSE
      dout_stage3_23;

  c_44_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_15 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_15 <= dout_stage4_15;
      END IF;
    END IF;
  END PROCESS c_44_process;


  
  dout_stage4_31 <= dout_stage3_31 WHEN vShift_4 = '0' ELSE
      dout_stage3_39;

  c_45_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_31 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_31 <= dout_stage4_31;
      END IF;
    END IF;
  END PROCESS c_45_process;


  
  dout_stage5_15 <= dout_stage4Reg_15 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_31;

  
  dout_stage4_47 <= dout_stage3_47 WHEN vShift_4 = '0' ELSE
      dout_stage3_7;

  c_46_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_47 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_47 <= dout_stage4_47;
      END IF;
    END IF;
  END PROCESS c_46_process;


  
  dout_stage5_47 <= dout_stage4Reg_47 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_15;

  
  dout_stage6_15 <= dout_stage5_15 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_47;

  
  dout_stage4_16 <= dout_stage3_16 WHEN vShift_4 = '0' ELSE
      dout_stage3_24;

  c_47_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_16 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_16 <= dout_stage4_16;
      END IF;
    END IF;
  END PROCESS c_47_process;


  
  dout_stage4_32 <= dout_stage3_32 WHEN vShift_4 = '0' ELSE
      dout_stage3_40;

  c_48_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_32 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_32 <= dout_stage4_32;
      END IF;
    END IF;
  END PROCESS c_48_process;


  
  dout_stage5_16 <= dout_stage4Reg_16 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_32;

  
  dout_stage4_48 <= dout_stage3_48 WHEN vShift_4 = '0' ELSE
      dout_stage3_8;

  c_49_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_stage4Reg_48 <= to_signed(16#00#, 6);
      ELSIF enb = '1' THEN
        dout_stage4Reg_48 <= dout_stage4_48;
      END IF;
    END IF;
  END PROCESS c_49_process;


  
  dout_stage5_48 <= dout_stage4Reg_48 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_16;

  
  dout_stage6_16 <= dout_stage5_16 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_48;

  
  dout_stage5_17 <= dout_stage4Reg_17 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_33;

  
  dout_stage6_17 <= dout_stage5_17 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_1;

  
  dout_stage5_18 <= dout_stage4Reg_18 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_34;

  
  dout_stage6_18 <= dout_stage5_18 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_2;

  
  dout_stage5_19 <= dout_stage4Reg_19 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_35;

  
  dout_stage6_19 <= dout_stage5_19 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_3;

  
  dout_stage5_20 <= dout_stage4Reg_20 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_36;

  
  dout_stage6_20 <= dout_stage5_20 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_4;

  
  dout_stage5_21 <= dout_stage4Reg_21 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_37;

  
  dout_stage6_21 <= dout_stage5_21 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_5;

  
  dout_stage5_22 <= dout_stage4Reg_22 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_38;

  
  dout_stage6_22 <= dout_stage5_22 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_6;

  
  dout_stage5_23 <= dout_stage4Reg_23 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_39;

  
  dout_stage6_23 <= dout_stage5_23 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_7;

  
  dout_stage5_24 <= dout_stage4Reg_24 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_40;

  
  dout_stage6_24 <= dout_stage5_24 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_8;

  
  dout_stage5_25 <= dout_stage4Reg_25 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_41;

  
  dout_stage6_25 <= dout_stage5_25 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_9;

  
  dout_stage5_26 <= dout_stage4Reg_26 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_42;

  
  dout_stage6_26 <= dout_stage5_26 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_10;

  
  dout_stage5_27 <= dout_stage4Reg_27 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_43;

  
  dout_stage6_27 <= dout_stage5_27 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_11;

  
  dout_stage5_28 <= dout_stage4Reg_28 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_44;

  
  dout_stage6_28 <= dout_stage5_28 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_12;

  
  dout_stage5_29 <= dout_stage4Reg_29 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_45;

  
  dout_stage6_29 <= dout_stage5_29 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_13;

  
  dout_stage5_30 <= dout_stage4Reg_30 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_46;

  
  dout_stage6_30 <= dout_stage5_30 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_14;

  
  dout_stage5_31 <= dout_stage4Reg_31 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_47;

  
  dout_stage6_31 <= dout_stage5_31 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_15;

  
  dout_stage5_32 <= dout_stage4Reg_32 WHEN vShiftReg_5 = '0' ELSE
      dout_stage4Reg_48;

  
  dout_stage6_32 <= dout_stage5_32 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_16;

  
  dout_stage6_33 <= dout_stage5_33 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_17;

  
  dout_stage6_34 <= dout_stage5_34 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_18;

  
  dout_stage6_35 <= dout_stage5_35 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_19;

  
  dout_stage6_36 <= dout_stage5_36 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_20;

  
  dout_stage6_37 <= dout_stage5_37 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_21;

  
  dout_stage6_38 <= dout_stage5_38 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_22;

  
  dout_stage6_39 <= dout_stage5_39 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_23;

  
  dout_stage6_40 <= dout_stage5_40 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_24;

  
  dout_stage6_41 <= dout_stage5_41 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_25;

  
  dout_stage6_42 <= dout_stage5_42 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_26;

  
  dout_stage6_43 <= dout_stage5_43 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_27;

  
  dout_stage6_44 <= dout_stage5_44 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_28;

  
  dout_stage6_45 <= dout_stage5_45 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_29;

  
  dout_stage6_46 <= dout_stage5_46 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_30;

  
  dout_stage6_47 <= dout_stage5_47 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_31;

  
  dout_stage6_48 <= dout_stage5_48 WHEN vShiftReg_6 = '0' ELSE
      dout_stage5_32;

  shiftData_tmp(0) <= dout_stage6_1;
  shiftData_tmp(1) <= dout_stage6_2;
  shiftData_tmp(2) <= dout_stage6_3;
  shiftData_tmp(3) <= dout_stage6_4;
  shiftData_tmp(4) <= dout_stage6_5;
  shiftData_tmp(5) <= dout_stage6_6;
  shiftData_tmp(6) <= dout_stage6_7;
  shiftData_tmp(7) <= dout_stage6_8;
  shiftData_tmp(8) <= dout_stage6_9;
  shiftData_tmp(9) <= dout_stage6_10;
  shiftData_tmp(10) <= dout_stage6_11;
  shiftData_tmp(11) <= dout_stage6_12;
  shiftData_tmp(12) <= dout_stage6_13;
  shiftData_tmp(13) <= dout_stage6_14;
  shiftData_tmp(14) <= dout_stage6_15;
  shiftData_tmp(15) <= dout_stage6_16;
  shiftData_tmp(16) <= dout_stage6_17;
  shiftData_tmp(17) <= dout_stage6_18;
  shiftData_tmp(18) <= dout_stage6_19;
  shiftData_tmp(19) <= dout_stage6_20;
  shiftData_tmp(20) <= dout_stage6_21;
  shiftData_tmp(21) <= dout_stage6_22;
  shiftData_tmp(22) <= dout_stage6_23;
  shiftData_tmp(23) <= dout_stage6_24;
  shiftData_tmp(24) <= dout_stage6_25;
  shiftData_tmp(25) <= dout_stage6_26;
  shiftData_tmp(26) <= dout_stage6_27;
  shiftData_tmp(27) <= dout_stage6_28;
  shiftData_tmp(28) <= dout_stage6_29;
  shiftData_tmp(29) <= dout_stage6_30;
  shiftData_tmp(30) <= dout_stage6_31;
  shiftData_tmp(31) <= dout_stage6_32;
  shiftData_tmp(32) <= dout_stage6_33;
  shiftData_tmp(33) <= dout_stage6_34;
  shiftData_tmp(34) <= dout_stage6_35;
  shiftData_tmp(35) <= dout_stage6_36;
  shiftData_tmp(36) <= dout_stage6_37;
  shiftData_tmp(37) <= dout_stage6_38;
  shiftData_tmp(38) <= dout_stage6_39;
  shiftData_tmp(39) <= dout_stage6_40;
  shiftData_tmp(40) <= dout_stage6_41;
  shiftData_tmp(41) <= dout_stage6_42;
  shiftData_tmp(42) <= dout_stage6_43;
  shiftData_tmp(43) <= dout_stage6_44;
  shiftData_tmp(44) <= dout_stage6_45;
  shiftData_tmp(45) <= dout_stage6_46;
  shiftData_tmp(46) <= dout_stage6_47;
  shiftData_tmp(47) <= dout_stage6_48;

  outputgen: FOR k IN 0 TO 47 GENERATE
    shiftData(k) <= std_logic_vector(shiftData_tmp(k));
  END GENERATE;

END rtl;

