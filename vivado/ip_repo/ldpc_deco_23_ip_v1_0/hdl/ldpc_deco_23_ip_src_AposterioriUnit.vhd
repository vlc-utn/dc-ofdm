-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test/ldpc_deco_23_ip_src_AposterioriUnit.vhd
-- Created: 2024-10-03 14:23:14
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ldpc_deco_23_ip_src_AposterioriUnit
-- Source Path: test/ldpc_deco_23/LDPC Decoder/DecoderCore/FunctionalUnit/AposterioriUnit
-- Hierarchy Level: 4
-- Model version: 1.55
-- 
-- Aposteriori Node Unit
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ldpc_deco_23_ip_src_ldpc_deco_23_pac.ALL;

ENTITY ldpc_deco_23_ip_src_AposterioriUnit IS
  PORT( alpha                             :   IN    vector_of_std_logic_vector6(0 TO 47);  -- sfix6 [48]
        beta                              :   IN    vector_of_std_logic_vector4(0 TO 47);  -- sfix4 [48]
        valid                             :   IN    std_logic;  -- ufix1
        gamma                             :   OUT   vector_of_std_logic_vector6(0 TO 47);  -- sfix6 [48]
        valid_1                           :   OUT   std_logic  -- ufix1
        );
END ldpc_deco_23_ip_src_AposterioriUnit;


ARCHITECTURE rtl OF ldpc_deco_23_ip_src_AposterioriUnit IS

  -- Signals
  SIGNAL alpha_signed                     : vector_of_signed6(0 TO 47);  -- sfix6 [48]
  SIGNAL beta_signed                      : vector_of_signed4(0 TO 47);  -- sfix4 [48]
  SIGNAL add_Comp_add_temp                : vector_of_signed7(0 TO 47);  -- sfix7 [48]
  SIGNAL add                              : vector_of_signed6(0 TO 47);  -- sfix6 [48]

BEGIN
  outputgen2: FOR k IN 0 TO 47 GENERATE
    alpha_signed(k) <= signed(alpha(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 47 GENERATE
    beta_signed(k) <= signed(beta(k));
  END GENERATE;


  add_gen: FOR t_0 IN 0 TO 47 GENERATE
    add_Comp_add_temp(t_0) <= resize(alpha_signed(t_0), 7) + resize(beta_signed(t_0), 7);
    
    add(t_0) <= "011111" WHEN (add_Comp_add_temp(t_0)(6) = '0') AND (add_Comp_add_temp(t_0)(5) /= '0') ELSE
        "100000" WHEN (add_Comp_add_temp(t_0)(6) = '1') AND (add_Comp_add_temp(t_0)(5) /= '1') ELSE
        add_Comp_add_temp(t_0)(5 DOWNTO 0);
  END GENERATE add_gen;


  outputgen: FOR k IN 0 TO 47 GENERATE
    gamma(k) <= std_logic_vector(add(k));
  END GENERATE;

  valid_1 <= valid;

END rtl;

