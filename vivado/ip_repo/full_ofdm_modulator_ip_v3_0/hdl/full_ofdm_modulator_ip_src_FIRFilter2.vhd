-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_FIRFilter2.vhd
-- Created: 2024-09-01 12:13:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_FIRFilter2
-- Source Path: HDLModulatorFull/full_ofdm_modulator/interpolator/FIR Interpolator/HDLModulatorFull/full_ofdm_modulator/interpolator/FIR 
-- Interpolator/FIRFilter
-- Hierarchy Level: 3
-- Model version: 1.43
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_FIRFilter2 IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        dataIn_im                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        dataOut_im                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        validOut                          :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_FIRFilter2;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_FIRFilter2 IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_FirRdyLogic_block
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dinSwitch_re                    :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dinSwitch_im                    :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dinVldSwitch                    :   IN    std_logic;
          coeff_re                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          coeff_im                        :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          haltProcess                     :   IN    std_logic;
          dinSM_re                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dinSM_im                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dinVldSM                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          wrEn                            :   IN    std_logic;
          rdAddr                          :   IN    std_logic;  -- ufix1
          delayLineEnd                    :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataOut                         :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_re                          :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          coeff                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          sumIn                           :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          sumOut                          :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          wrEn                            :   IN    std_logic;
          rdAddr                          :   IN    std_logic;  -- ufix1
          delayLineEnd                    :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataOut                         :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En10
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din_im                          :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          coeff                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          sumIn                           :   IN    std_logic_vector(22 DOWNTO 0);  -- sfix23_En20
          sumOut                          :   OUT   std_logic_vector(22 DOWNTO 0)  -- sfix23_En20
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_FirRdyLogic_block
    USE ENTITY work.full_ofdm_modulator_ip_src_FirRdyLogic_block(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    USE ENTITY work.full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_FilterTapSystolic
    USE ENTITY work.full_ofdm_modulator_ip_src_FilterTapSystolic(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    USE ENTITY work.full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    USE ENTITY work.full_ofdm_modulator_ip_src_FilterTapSystolic_block(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL coeff_re                         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeff_im                         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL haltProcess                      : std_logic;
  SIGNAL dinSM_re                         : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL dinSM_im                         : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL dinVldSM                         : std_logic;
  SIGNAL nextDelayLineRdAddrReverse       : std_logic;  -- ufix1
  SIGNAL rdCountReverse_1                 : std_logic;  -- ufix1
  SIGNAL nextDelayLineWrAddr              : std_logic;  -- ufix1
  SIGNAL wrCount_1                        : std_logic;  -- ufix1
  SIGNAL nextDelayLineRdAddr              : std_logic;  -- ufix1
  SIGNAL rdCount_1                        : std_logic;  -- ufix1
  SIGNAL nextSharingCount                 : std_logic;  -- ufix1
  SIGNAL sharingCount_1                   : std_logic;  -- ufix1
  SIGNAL delayLineValidInP                : std_logic;
  SIGNAL lastPhaseStrobe                  : std_logic;
  SIGNAL delayLineShiftEnP                : std_logic;
  SIGNAL delayLineShiftEn1_1              : std_logic;
  SIGNAL syncResetRst                     : std_logic;
  SIGNAL delayLineShiftEn2_1              : std_logic;
  SIGNAL delayLineShiftEn3_1              : std_logic;
  SIGNAL delayLineShiftEn4_1              : std_logic;
  SIGNAL delayLineShiftEn5_1              : std_logic;
  SIGNAL delayLineShiftEn6_1              : std_logic;
  SIGNAL delayLineShiftEn7_1              : std_logic;
  SIGNAL delayLineShiftEn8_1              : std_logic;
  SIGNAL validOutLookahead_reg            : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL validOutLookahead_1              : std_logic;
  SIGNAL vldOut_1                         : std_logic;
  SIGNAL notValid                         : std_logic;
  SIGNAL rdAddr0_1                        : std_logic;  -- ufix1
  SIGNAL rdAddr1                          : std_logic;  -- ufix1
  SIGNAL rdAddr2                          : std_logic;  -- ufix1
  SIGNAL rdAddr3                          : std_logic;  -- ufix1
  SIGNAL rdAddr4                          : std_logic;  -- ufix1
  SIGNAL rdAddr5                          : std_logic;  -- ufix1
  SIGNAL rdAddr6                          : std_logic;  -- ufix1
  SIGNAL rdAddr7                          : std_logic;  -- ufix1
  SIGNAL rdAddr8                          : std_logic;  -- ufix1
  SIGNAL rdAddrEndZero                    : std_logic;
  SIGNAL finalSumValidPipe_reg            : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL accumulate                       : std_logic;
  SIGNAL accDataOut                       : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL delayLineEnd0                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut0                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd0_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn1_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd1                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut1                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd1_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn2_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd2                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut2                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd2_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn3_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd3                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut3                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd3_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn4_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd4                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut4                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd4_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn5_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd5                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut5                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd5_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn6_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd6                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut6                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd6_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn7_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd7                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut7                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd7_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn8_1               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableOut8                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd8deadOut             : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut8                : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL coeffTableRegP8_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut7                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP7_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut6                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP6_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut5                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP5_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut4                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP4_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut3                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP3_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut2                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP2_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP1_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut0                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP0_1                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL sumIn                            : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL sumOut                           : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_0                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_1                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_2                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_3                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_4                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_5                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_6                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_7                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_7_signed                  : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL sumOutReg_1                      : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL accDataOut_1                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL accSwitchOut                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL accAdderOut                      : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL converterOut                     : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dout_re_1                        : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL validOutLookahead_reg_1          : std_logic_vector(6 DOWNTO 0);  -- ufix1 [7]
  SIGNAL validOutLookahead_3              : std_logic;
  SIGNAL rdAddrEndZero_1                  : std_logic;
  SIGNAL finalSumValidPipe_reg_1          : std_logic_vector(5 DOWNTO 0);  -- ufix1 [6]
  SIGNAL accumulate_1                     : std_logic;
  SIGNAL accDataOut_3                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL delayLineEnd0_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut0_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd0_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn1_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd1_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut1_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd1_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn2_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd2_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut2_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd2_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn3_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd3_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut3_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd3_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn4_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd4_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut4_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd4_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn5_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd5_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut5_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd5_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn6_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd6_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut6_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd6_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn7_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd7_1                  : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut7_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineEnd7_signed_1           : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineDataIn8_3               : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableOut8_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL delayLineEnd8deadOut_1           : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL delayLineDataOut8_1              : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL coeffTableRegP8_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut7_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP7_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut6_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP6_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut5_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP5_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut4_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP4_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut3_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP3_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut2_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP2_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut1_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP1_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL coeffTableOut0_1                 : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL coeffTableRegP0_3                : signed(11 DOWNTO 0) := to_signed(16#000#, 12);  -- sfix12_En10
  SIGNAL sumIn_1                          : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL sumOut_8                         : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_0_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_1_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_2_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_3_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_4_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_5_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_6_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_7_1                       : std_logic_vector(22 DOWNTO 0);  -- ufix23
  SIGNAL sumOut_7_signed_1                : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL sumOutReg_3                      : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL accDataOut_4                     : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL accSwitchOut_1                   : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL accAdderOut_1                    : signed(22 DOWNTO 0);  -- sfix23_En20
  SIGNAL converterOut_1                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dout_im_1                        : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataZero                         : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataZero_dtc_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataZero_dtc_im                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dout_cmplxSW_re                  : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dout_cmplxSW_im                  : signed(11 DOWNTO 0);  -- sfix12_En10

BEGIN
  u_firRdyLogic : full_ofdm_modulator_ip_src_FirRdyLogic_block
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dinSwitch_re => dataIn_re,  -- sfix12_En10
              dinSwitch_im => dataIn_im,  -- sfix12_En10
              dinVldSwitch => validIn,
              coeff_re => std_logic_vector(coeff_re),  -- sfix12_En10
              coeff_im => std_logic_vector(coeff_im),  -- sfix12_En10
              haltProcess => haltProcess,
              dinSM_re => dinSM_re,  -- sfix12_En10
              dinSM_im => dinSM_im,  -- sfix12_En10
              dinVldSM => dinVldSM
              );

  u_delayLine0 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => dinSM_re,  -- sfix12_En10
              wrEn => delayLineValidInP,
              rdAddr => rdAddr0_1,  -- ufix1
              delayLineEnd => delayLineEnd0,  -- sfix12_En10
              dataOut => delayLineDataOut0  -- sfix12_En10
              );

  u_delayLine1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn1_1),  -- sfix12_En10
              wrEn => delayLineShiftEn1_1,
              rdAddr => rdAddr1,  -- ufix1
              delayLineEnd => delayLineEnd1,  -- sfix12_En10
              dataOut => delayLineDataOut1  -- sfix12_En10
              );

  u_delayLine2 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn2_1),  -- sfix12_En10
              wrEn => delayLineShiftEn2_1,
              rdAddr => rdAddr2,  -- ufix1
              delayLineEnd => delayLineEnd2,  -- sfix12_En10
              dataOut => delayLineDataOut2  -- sfix12_En10
              );

  u_delayLine3 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn3_1),  -- sfix12_En10
              wrEn => delayLineShiftEn3_1,
              rdAddr => rdAddr3,  -- ufix1
              delayLineEnd => delayLineEnd3,  -- sfix12_En10
              dataOut => delayLineDataOut3  -- sfix12_En10
              );

  u_delayLine4 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn4_1),  -- sfix12_En10
              wrEn => delayLineShiftEn4_1,
              rdAddr => rdAddr4,  -- ufix1
              delayLineEnd => delayLineEnd4,  -- sfix12_En10
              dataOut => delayLineDataOut4  -- sfix12_En10
              );

  u_delayLine5 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn5_1),  -- sfix12_En10
              wrEn => delayLineShiftEn5_1,
              rdAddr => rdAddr5,  -- ufix1
              delayLineEnd => delayLineEnd5,  -- sfix12_En10
              dataOut => delayLineDataOut5  -- sfix12_En10
              );

  u_delayLine6 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn6_1),  -- sfix12_En10
              wrEn => delayLineShiftEn6_1,
              rdAddr => rdAddr6,  -- ufix1
              delayLineEnd => delayLineEnd6,  -- sfix12_En10
              dataOut => delayLineDataOut6  -- sfix12_En10
              );

  u_delayLine7 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn7_1),  -- sfix12_En10
              wrEn => delayLineShiftEn7_1,
              rdAddr => rdAddr7,  -- ufix1
              delayLineEnd => delayLineEnd7,  -- sfix12_En10
              dataOut => delayLineDataOut7  -- sfix12_En10
              );

  u_delayLine8 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block7
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn8_1),  -- sfix12_En10
              wrEn => delayLineShiftEn8_1,
              rdAddr => rdAddr8,  -- ufix1
              delayLineEnd => delayLineEnd8deadOut,  -- sfix12_En10
              dataOut => delayLineDataOut8  -- sfix12_En10
              );

  u_filterTap0 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut0,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP0_1),  -- sfix12_En10
              sumIn => std_logic_vector(sumIn),  -- sfix23_En20
              sumOut => sumOut  -- sfix23_En20
              );

  u_filterTap1 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP1_1),  -- sfix12_En10
              sumIn => sumOut,  -- sfix23_En20
              sumOut => sumOut_0  -- sfix23_En20
              );

  u_filterTap2 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut2,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP2_1),  -- sfix12_En10
              sumIn => sumOut_0,  -- sfix23_En20
              sumOut => sumOut_1  -- sfix23_En20
              );

  u_filterTap3 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut3,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP3_1),  -- sfix12_En10
              sumIn => sumOut_1,  -- sfix23_En20
              sumOut => sumOut_2  -- sfix23_En20
              );

  u_filterTap4 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut4,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP4_1),  -- sfix12_En10
              sumIn => sumOut_2,  -- sfix23_En20
              sumOut => sumOut_3  -- sfix23_En20
              );

  u_filterTap5 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut5,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP5_1),  -- sfix12_En10
              sumIn => sumOut_3,  -- sfix23_En20
              sumOut => sumOut_4  -- sfix23_En20
              );

  u_filterTap6 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut6,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP6_1),  -- sfix12_En10
              sumIn => sumOut_4,  -- sfix23_En20
              sumOut => sumOut_5  -- sfix23_En20
              );

  u_filterTap7 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut7,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP7_1),  -- sfix12_En10
              sumIn => sumOut_5,  -- sfix23_En20
              sumOut => sumOut_6  -- sfix23_En20
              );

  u_filterTap8 : full_ofdm_modulator_ip_src_FilterTapSystolic
    PORT MAP( clk => clk,
              enb => enb,
              din_re => delayLineDataOut8,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP8_1),  -- sfix12_En10
              sumIn => sumOut_6,  -- sfix23_En20
              sumOut => sumOut_7  -- sfix23_En20
              );

  u_delayLine0_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => dinSM_im,  -- sfix12_En10
              wrEn => delayLineValidInP,
              rdAddr => rdAddr0_1,  -- ufix1
              delayLineEnd => delayLineEnd0_1,  -- sfix12_En10
              dataOut => delayLineDataOut0_1  -- sfix12_En10
              );

  u_delayLine1_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn1_3),  -- sfix12_En10
              wrEn => delayLineShiftEn1_1,
              rdAddr => rdAddr1,  -- ufix1
              delayLineEnd => delayLineEnd1_1,  -- sfix12_En10
              dataOut => delayLineDataOut1_1  -- sfix12_En10
              );

  u_delayLine2_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn2_3),  -- sfix12_En10
              wrEn => delayLineShiftEn2_1,
              rdAddr => rdAddr2,  -- ufix1
              delayLineEnd => delayLineEnd2_1,  -- sfix12_En10
              dataOut => delayLineDataOut2_1  -- sfix12_En10
              );

  u_delayLine3_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn3_3),  -- sfix12_En10
              wrEn => delayLineShiftEn3_1,
              rdAddr => rdAddr3,  -- ufix1
              delayLineEnd => delayLineEnd3_1,  -- sfix12_En10
              dataOut => delayLineDataOut3_1  -- sfix12_En10
              );

  u_delayLine4_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn4_3),  -- sfix12_En10
              wrEn => delayLineShiftEn4_1,
              rdAddr => rdAddr4,  -- ufix1
              delayLineEnd => delayLineEnd4_1,  -- sfix12_En10
              dataOut => delayLineDataOut4_1  -- sfix12_En10
              );

  u_delayLine5_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn5_3),  -- sfix12_En10
              wrEn => delayLineShiftEn5_1,
              rdAddr => rdAddr5,  -- ufix1
              delayLineEnd => delayLineEnd5_1,  -- sfix12_En10
              dataOut => delayLineDataOut5_1  -- sfix12_En10
              );

  u_delayLine6_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn6_3),  -- sfix12_En10
              wrEn => delayLineShiftEn6_1,
              rdAddr => rdAddr6,  -- ufix1
              delayLineEnd => delayLineEnd6_1,  -- sfix12_En10
              dataOut => delayLineDataOut6_1  -- sfix12_En10
              );

  u_delayLine7_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn7_3),  -- sfix12_En10
              wrEn => delayLineShiftEn7_1,
              rdAddr => rdAddr7,  -- ufix1
              delayLineEnd => delayLineEnd7_1,  -- sfix12_En10
              dataOut => delayLineDataOut7_1  -- sfix12_En10
              );

  u_delayLine8_1 : full_ofdm_modulator_ip_src_Addressable_Delay_Line_block8
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn => std_logic_vector(delayLineDataIn8_3),  -- sfix12_En10
              wrEn => delayLineShiftEn8_1,
              rdAddr => rdAddr8,  -- ufix1
              delayLineEnd => delayLineEnd8deadOut_1,  -- sfix12_En10
              dataOut => delayLineDataOut8_1  -- sfix12_En10
              );

  u_filterTap0_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut0_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP0_3),  -- sfix12_En10
              sumIn => std_logic_vector(sumIn_1),  -- sfix23_En20
              sumOut => sumOut_8  -- sfix23_En20
              );

  u_filterTap1_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut1_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP1_3),  -- sfix12_En10
              sumIn => sumOut_8,  -- sfix23_En20
              sumOut => sumOut_0_1  -- sfix23_En20
              );

  u_filterTap2_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut2_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP2_3),  -- sfix12_En10
              sumIn => sumOut_0_1,  -- sfix23_En20
              sumOut => sumOut_1_1  -- sfix23_En20
              );

  u_filterTap3_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut3_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP3_3),  -- sfix12_En10
              sumIn => sumOut_1_1,  -- sfix23_En20
              sumOut => sumOut_2_1  -- sfix23_En20
              );

  u_filterTap4_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut4_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP4_3),  -- sfix12_En10
              sumIn => sumOut_2_1,  -- sfix23_En20
              sumOut => sumOut_3_1  -- sfix23_En20
              );

  u_filterTap5_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut5_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP5_3),  -- sfix12_En10
              sumIn => sumOut_3_1,  -- sfix23_En20
              sumOut => sumOut_4_1  -- sfix23_En20
              );

  u_filterTap6_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut6_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP6_3),  -- sfix12_En10
              sumIn => sumOut_4_1,  -- sfix23_En20
              sumOut => sumOut_5_1  -- sfix23_En20
              );

  u_filterTap7_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut7_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP7_3),  -- sfix12_En10
              sumIn => sumOut_5_1,  -- sfix23_En20
              sumOut => sumOut_6_1  -- sfix23_En20
              );

  u_filterTap8_1 : full_ofdm_modulator_ip_src_FilterTapSystolic_block
    PORT MAP( clk => clk,
              enb => enb,
              din_im => delayLineDataOut8_1,  -- sfix12_En10
              coeff => std_logic_vector(coeffTableRegP8_3),  -- sfix12_En10
              sumIn => sumOut_6_1,  -- sfix23_En20
              sumOut => sumOut_7_1  -- sfix23_En20
              );

  coeff_re <= to_signed(16#000#, 12);
  coeff_im <= to_signed(16#000#, 12);

  haltProcess <= '0';

  rdCountReverse_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdCountReverse_1 <= '0';
      ELSIF enb = '1' THEN
        rdCountReverse_1 <= nextDelayLineRdAddrReverse;
      END IF;
    END IF;
  END PROCESS rdCountReverse_process;


  wrCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        wrCount_1 <= '0';
      ELSIF enb = '1' THEN
        wrCount_1 <= nextDelayLineWrAddr;
      END IF;
    END IF;
  END PROCESS wrCount_process;


  rdCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdCount_1 <= '0';
      ELSIF enb = '1' THEN
        rdCount_1 <= nextDelayLineRdAddr;
      END IF;
    END IF;
  END PROCESS rdCount_process;


  sharingCount_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sharingCount_1 <= '0';
      ELSIF enb = '1' THEN
        sharingCount_1 <= nextSharingCount;
      END IF;
    END IF;
  END PROCESS sharingCount_process;


  -- Input control counter combinatorial logic
  InputControl_output : PROCESS (dinVldSM, rdCountReverse_1, rdCount_1, sharingCount_1, wrCount_1)
    VARIABLE out4 : std_logic;
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(1 DOWNTO 0);
    VARIABLE sub_cast : unsigned(1 DOWNTO 0);
    VARIABLE sub_temp : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_1 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_1 : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_2 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_2 : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_temp_0 := to_unsigned(16#0#, 2);
    sub_temp := to_unsigned(16#0#, 2);
    add_temp_1 := to_unsigned(16#0#, 2);
    add_temp_2 := to_unsigned(16#0#, 2);
    add_cast_2 := to_unsigned(16#0#, 2);
    add_cast_1 := to_unsigned(16#0#, 2);
    sub_cast := to_unsigned(16#0#, 2);
    add_cast_0 := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    delayLineValidInP <= hdlcoder_to_stdlogic((sharingCount_1 = '0') AND (dinVldSM = '1'));
    lastPhaseStrobe <= sharingCount_1;
    IF (dinVldSM = '1') OR (sharingCount_1 > '0') THEN 
      IF sharingCount_1 = '1' THEN 
        nextSharingCount <= '0';
      ELSE 
        add_cast := '0' & sharingCount_1;
        add_temp := add_cast + to_unsigned(16#1#, 2);
        nextSharingCount <= add_temp(0);
      END IF;
    ELSE 
      nextSharingCount <= sharingCount_1;
    END IF;
    IF dinVldSM = '1' THEN 
      IF wrCount_1 = '1' THEN 
        out4 := '0';
      ELSE 
        add_cast_0 := '0' & wrCount_1;
        add_temp_0 := add_cast_0 + to_unsigned(16#1#, 2);
        out4 := add_temp_0(0);
      END IF;
    ELSE 
      out4 := wrCount_1;
    END IF;
    IF (rdCount_1 /= out4) OR (dinVldSM = '1') THEN 
      IF rdCount_1 = '0' THEN 
        nextDelayLineRdAddr <= '1';
      ELSE 
        sub_cast := '0' & rdCount_1;
        sub_temp := sub_cast - to_unsigned(16#1#, 2);
        nextDelayLineRdAddr <= sub_temp(0);
      END IF;
    ELSE 
      nextDelayLineRdAddr <= rdCount_1;
    END IF;
    IF (sharingCount_1 > '0') OR (dinVldSM = '1') THEN 
      IF sharingCount_1 = '1' THEN 
        IF wrCount_1 = '1' THEN 
          nextDelayLineRdAddrReverse <= '0';
        ELSE 
          add_cast_2 := '0' & wrCount_1;
          add_temp_2 := add_cast_2 + to_unsigned(16#1#, 2);
          nextDelayLineRdAddrReverse <= add_temp_2(0);
        END IF;
      ELSIF rdCountReverse_1 = '1' THEN 
        nextDelayLineRdAddrReverse <= '0';
      ELSE 
        add_cast_1 := '0' & rdCountReverse_1;
        add_temp_1 := add_cast_1 + to_unsigned(16#1#, 2);
        nextDelayLineRdAddrReverse <= add_temp_1(0);
      END IF;
    ELSE 
      nextDelayLineRdAddrReverse <= rdCountReverse_1;
    END IF;
    nextDelayLineWrAddr <= out4;
  END PROCESS InputControl_output;


  delayLineShiftEn0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEnP <= '0';
      ELSIF enb = '1' THEN
        delayLineShiftEnP <= lastPhaseStrobe;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn0_process;


  delayLineShiftEn1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn1_1 <= '0';
      ELSIF enb = '1' THEN
        delayLineShiftEn1_1 <= delayLineShiftEnP;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn1_process;


  delayLineShiftEn2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn2_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn2_1 <= '0';
        ELSE 
          delayLineShiftEn2_1 <= delayLineShiftEn1_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn2_process;


  delayLineShiftEn3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn3_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn3_1 <= '0';
        ELSE 
          delayLineShiftEn3_1 <= delayLineShiftEn2_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn3_process;


  delayLineShiftEn4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn4_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn4_1 <= '0';
        ELSE 
          delayLineShiftEn4_1 <= delayLineShiftEn3_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn4_process;


  delayLineShiftEn5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn5_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn5_1 <= '0';
        ELSE 
          delayLineShiftEn5_1 <= delayLineShiftEn4_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn5_process;


  delayLineShiftEn6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn6_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn6_1 <= '0';
        ELSE 
          delayLineShiftEn6_1 <= delayLineShiftEn5_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn6_process;


  delayLineShiftEn7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn7_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn7_1 <= '0';
        ELSE 
          delayLineShiftEn7_1 <= delayLineShiftEn6_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn7_process;


  delayLineShiftEn8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineShiftEn8_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncResetRst = '1' THEN
          delayLineShiftEn8_1 <= '0';
        ELSE 
          delayLineShiftEn8_1 <= delayLineShiftEn7_1;
        END IF;
      END IF;
    END IF;
  END PROCESS delayLineShiftEn8_process;


  validOutLookahead_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOutLookahead_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOutLookahead_reg(0) <= delayLineShiftEn8_1;
        validOutLookahead_reg(6 DOWNTO 1) <= validOutLookahead_reg(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS validOutLookahead_process;

  validOutLookahead_1 <= validOutLookahead_reg(6);

  vldOut_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        vldOut_1 <= '0';
      ELSIF enb = '1' THEN
        vldOut_1 <= validOutLookahead_1;
      END IF;
    END IF;
  END PROCESS vldOut_process;


  notValid <=  NOT vldOut_1;

  rdAddr0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr0_1 <= '0';
      ELSIF enb = '1' THEN
        rdAddr0_1 <= sharingCount_1;
      END IF;
    END IF;
  END PROCESS rdAddr0_process;


  rdAddr0_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr1 <= '0';
      ELSIF enb = '1' THEN
        rdAddr1 <= rdAddr0_1;
      END IF;
    END IF;
  END PROCESS rdAddr0_2_process;


  rdAddr1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr2 <= '0';
      ELSIF enb = '1' THEN
        rdAddr2 <= rdAddr1;
      END IF;
    END IF;
  END PROCESS rdAddr1_1_process;


  rdAddr2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr3 <= '0';
      ELSIF enb = '1' THEN
        rdAddr3 <= rdAddr2;
      END IF;
    END IF;
  END PROCESS rdAddr2_1_process;


  rdAddr3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr4 <= '0';
      ELSIF enb = '1' THEN
        rdAddr4 <= rdAddr3;
      END IF;
    END IF;
  END PROCESS rdAddr3_1_process;


  rdAddr4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr5 <= '0';
      ELSIF enb = '1' THEN
        rdAddr5 <= rdAddr4;
      END IF;
    END IF;
  END PROCESS rdAddr4_1_process;


  rdAddr5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr6 <= '0';
      ELSIF enb = '1' THEN
        rdAddr6 <= rdAddr5;
      END IF;
    END IF;
  END PROCESS rdAddr5_1_process;


  rdAddr6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr7 <= '0';
      ELSIF enb = '1' THEN
        rdAddr7 <= rdAddr6;
      END IF;
    END IF;
  END PROCESS rdAddr6_1_process;


  rdAddr7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        rdAddr8 <= '0';
      ELSIF enb = '1' THEN
        rdAddr8 <= rdAddr7;
      END IF;
    END IF;
  END PROCESS rdAddr7_1_process;


  rdAddrEndZero <=  NOT rdAddr8;

  finalSumValidPipe_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        finalSumValidPipe_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        finalSumValidPipe_reg(0) <= rdAddrEndZero;
        finalSumValidPipe_reg(5 DOWNTO 1) <= finalSumValidPipe_reg(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS finalSumValidPipe_process;

  accumulate <= finalSumValidPipe_reg(5);

  accDataOut <= to_signed(16#000000#, 23);

  delayLineEnd0_signed <= signed(delayLineEnd0);

  delayLineDataIn1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn1_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn1_1 <= delayLineEnd0_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn1_process;


  delayLineEnd1_signed <= signed(delayLineEnd1);

  delayLineDataIn2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn2_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn2_1 <= delayLineEnd1_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn2_process;


  delayLineEnd2_signed <= signed(delayLineEnd2);

  delayLineDataIn3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn3_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn3_1 <= delayLineEnd2_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn3_process;


  delayLineEnd3_signed <= signed(delayLineEnd3);

  delayLineDataIn4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn4_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn4_1 <= delayLineEnd3_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn4_process;


  delayLineEnd4_signed <= signed(delayLineEnd4);

  delayLineDataIn5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn5_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn5_1 <= delayLineEnd4_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn5_process;


  delayLineEnd5_signed <= signed(delayLineEnd5);

  delayLineDataIn6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn6_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn6_1 <= delayLineEnd5_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn6_process;


  delayLineEnd6_signed <= signed(delayLineEnd6);

  delayLineDataIn7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn7_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn7_1 <= delayLineEnd6_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn7_process;


  delayLineEnd7_signed <= signed(delayLineEnd7);

  delayLineDataIn8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn8_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn8_1 <= delayLineEnd7_signed;
      END IF;
    END IF;
  END PROCESS delayLineDataIn8_process;


  -- Coefficient table for multiplier8
  coeffTable8_output : PROCESS (rdAddr8)
  BEGIN
    CASE rdAddr8 IS
      WHEN '0' =>
        coeffTableOut8 <= to_signed(-16#005#, 12);
      WHEN '1' =>
        coeffTableOut8 <= to_signed(16#000#, 12);
      WHEN OTHERS => 
        coeffTableOut8 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable8_output;


  coeffTableRegP8_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP8_1 <= coeffTableOut8;
      END IF;
    END IF;
  END PROCESS coeffTableRegP8_process;


  -- Coefficient table for multiplier7
  coeffTable7_output : PROCESS (rdAddr7)
  BEGIN
    CASE rdAddr7 IS
      WHEN '0' =>
        coeffTableOut7 <= to_signed(-16#00D#, 12);
      WHEN '1' =>
        coeffTableOut7 <= to_signed(16#008#, 12);
      WHEN OTHERS => 
        coeffTableOut7 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable7_output;


  coeffTableRegP7_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP7_1 <= coeffTableOut7;
      END IF;
    END IF;
  END PROCESS coeffTableRegP7_process;


  -- Coefficient table for multiplier6
  coeffTable6_output : PROCESS (rdAddr6)
  BEGIN
    CASE rdAddr6 IS
      WHEN '0' =>
        coeffTableOut6 <= to_signed(-16#019#, 12);
      WHEN '1' =>
        coeffTableOut6 <= to_signed(16#013#, 12);
      WHEN OTHERS => 
        coeffTableOut6 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable6_output;


  coeffTableRegP6_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP6_1 <= coeffTableOut6;
      END IF;
    END IF;
  END PROCESS coeffTableRegP6_process;


  -- Coefficient table for multiplier5
  coeffTable5_output : PROCESS (rdAddr5)
  BEGIN
    CASE rdAddr5 IS
      WHEN '0' =>
        coeffTableOut5 <= to_signed(-16#024#, 12);
      WHEN '1' =>
        coeffTableOut5 <= to_signed(16#01F#, 12);
      WHEN OTHERS => 
        coeffTableOut5 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable5_output;


  coeffTableRegP5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP5_1 <= coeffTableOut5;
      END IF;
    END IF;
  END PROCESS coeffTableRegP5_process;


  -- Coefficient table for multiplier4
  coeffTable4_output : PROCESS (rdAddr4)
  BEGIN
    CASE rdAddr4 IS
      WHEN '0' =>
        coeffTableOut4 <= to_signed(16#3D8#, 12);
      WHEN '1' =>
        coeffTableOut4 <= to_signed(16#027#, 12);
      WHEN OTHERS => 
        coeffTableOut4 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable4_output;


  coeffTableRegP4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP4_1 <= coeffTableOut4;
      END IF;
    END IF;
  END PROCESS coeffTableRegP4_process;


  -- Coefficient table for multiplier3
  coeffTable3_output : PROCESS (rdAddr3)
  BEGIN
    CASE rdAddr3 IS
      WHEN '0' =>
        coeffTableOut3 <= to_signed(-16#024#, 12);
      WHEN '1' =>
        coeffTableOut3 <= to_signed(16#027#, 12);
      WHEN OTHERS => 
        coeffTableOut3 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable3_output;


  coeffTableRegP3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP3_1 <= coeffTableOut3;
      END IF;
    END IF;
  END PROCESS coeffTableRegP3_process;


  -- Coefficient table for multiplier2
  coeffTable2_output : PROCESS (rdAddr2)
  BEGIN
    CASE rdAddr2 IS
      WHEN '0' =>
        coeffTableOut2 <= to_signed(-16#019#, 12);
      WHEN '1' =>
        coeffTableOut2 <= to_signed(16#01F#, 12);
      WHEN OTHERS => 
        coeffTableOut2 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable2_output;


  coeffTableRegP2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP2_1 <= coeffTableOut2;
      END IF;
    END IF;
  END PROCESS coeffTableRegP2_process;


  -- Coefficient table for multiplier1
  coeffTable1_output : PROCESS (rdAddr1)
  BEGIN
    CASE rdAddr1 IS
      WHEN '0' =>
        coeffTableOut1 <= to_signed(-16#00D#, 12);
      WHEN '1' =>
        coeffTableOut1 <= to_signed(16#013#, 12);
      WHEN OTHERS => 
        coeffTableOut1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable1_output;


  coeffTableRegP1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP1_1 <= coeffTableOut1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP1_process;


  -- Coefficient table for multiplier0
  coeffTable0_output : PROCESS (rdAddr0_1)
  BEGIN
    CASE rdAddr0_1 IS
      WHEN '0' =>
        coeffTableOut0 <= to_signed(-16#005#, 12);
      WHEN '1' =>
        coeffTableOut0 <= to_signed(16#008#, 12);
      WHEN OTHERS => 
        coeffTableOut0 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable0_output;


  coeffTableRegP0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP0_1 <= coeffTableOut0;
      END IF;
    END IF;
  END PROCESS coeffTableRegP0_process;


  sumIn <= to_signed(16#000000#, 23);

  sumOut_7_signed <= signed(sumOut_7);

  sumOutReg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sumOutReg_1 <= to_signed(16#000000#, 23);
      ELSIF enb = '1' THEN
        sumOutReg_1 <= sumOut_7_signed;
      END IF;
    END IF;
  END PROCESS sumOutReg_process;


  
  accSwitchOut <= accDataOut_1 WHEN accumulate = '0' ELSE
      accDataOut;

  accAdderOut <= accSwitchOut + sumOutReg_1;

  accDataOut_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accDataOut_1 <= to_signed(16#000000#, 23);
      ELSIF enb = '1' THEN
        accDataOut_1 <= accAdderOut;
      END IF;
    END IF;
  END PROCESS accDataOut_2_process;


  converterOut <= accDataOut_1(21 DOWNTO 10);

  dout_re_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_re_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' AND validOutLookahead_1 = '1' THEN
        dout_re_1 <= converterOut;
      END IF;
    END IF;
  END PROCESS dout_re_process;


  validOutLookahead_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOutLookahead_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        validOutLookahead_reg_1(0) <= delayLineShiftEn8_1;
        validOutLookahead_reg_1(6 DOWNTO 1) <= validOutLookahead_reg_1(5 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS validOutLookahead_2_process;

  validOutLookahead_3 <= validOutLookahead_reg_1(6);

  rdAddrEndZero_1 <=  NOT rdAddr8;

  finalSumValidPipe_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        finalSumValidPipe_reg_1 <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        finalSumValidPipe_reg_1(0) <= rdAddrEndZero_1;
        finalSumValidPipe_reg_1(5 DOWNTO 1) <= finalSumValidPipe_reg_1(4 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS finalSumValidPipe_1_process;

  accumulate_1 <= finalSumValidPipe_reg_1(5);

  accDataOut_3 <= to_signed(16#000000#, 23);

  delayLineEnd0_signed_1 <= signed(delayLineEnd0_1);

  delayLineDataIn1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn1_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn1_3 <= delayLineEnd0_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn1_2_process;


  delayLineEnd1_signed_1 <= signed(delayLineEnd1_1);

  delayLineDataIn2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn2_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn2_3 <= delayLineEnd1_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn2_2_process;


  delayLineEnd2_signed_1 <= signed(delayLineEnd2_1);

  delayLineDataIn3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn3_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn3_3 <= delayLineEnd2_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn3_2_process;


  delayLineEnd3_signed_1 <= signed(delayLineEnd3_1);

  delayLineDataIn4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn4_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn4_3 <= delayLineEnd3_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn4_2_process;


  delayLineEnd4_signed_1 <= signed(delayLineEnd4_1);

  delayLineDataIn5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn5_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn5_3 <= delayLineEnd4_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn5_2_process;


  delayLineEnd5_signed_1 <= signed(delayLineEnd5_1);

  delayLineDataIn6_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn6_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn6_3 <= delayLineEnd5_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn6_2_process;


  delayLineEnd6_signed_1 <= signed(delayLineEnd6_1);

  delayLineDataIn7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn7_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn7_3 <= delayLineEnd6_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn7_2_process;


  delayLineEnd7_signed_1 <= signed(delayLineEnd7_1);

  delayLineDataIn8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        delayLineDataIn8_3 <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        delayLineDataIn8_3 <= delayLineEnd7_signed_1;
      END IF;
    END IF;
  END PROCESS delayLineDataIn8_2_process;


  -- Coefficient table for multiplier8
  coeffTable8_1_output : PROCESS (rdAddr8)
  BEGIN
    CASE rdAddr8 IS
      WHEN '0' =>
        coeffTableOut8_1 <= to_signed(-16#005#, 12);
      WHEN '1' =>
        coeffTableOut8_1 <= to_signed(16#000#, 12);
      WHEN OTHERS => 
        coeffTableOut8_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable8_1_output;


  coeffTableRegP8_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP8_3 <= coeffTableOut8_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP8_2_process;


  -- Coefficient table for multiplier7
  coeffTable7_1_output : PROCESS (rdAddr7)
  BEGIN
    CASE rdAddr7 IS
      WHEN '0' =>
        coeffTableOut7_1 <= to_signed(-16#00D#, 12);
      WHEN '1' =>
        coeffTableOut7_1 <= to_signed(16#008#, 12);
      WHEN OTHERS => 
        coeffTableOut7_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable7_1_output;


  coeffTableRegP7_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP7_3 <= coeffTableOut7_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP7_2_process;


  -- Coefficient table for multiplier6
  coeffTable6_1_output : PROCESS (rdAddr6)
  BEGIN
    CASE rdAddr6 IS
      WHEN '0' =>
        coeffTableOut6_1 <= to_signed(-16#019#, 12);
      WHEN '1' =>
        coeffTableOut6_1 <= to_signed(16#013#, 12);
      WHEN OTHERS => 
        coeffTableOut6_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable6_1_output;


  coeffTableRegP6_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP6_3 <= coeffTableOut6_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP6_2_process;


  -- Coefficient table for multiplier5
  coeffTable5_1_output : PROCESS (rdAddr5)
  BEGIN
    CASE rdAddr5 IS
      WHEN '0' =>
        coeffTableOut5_1 <= to_signed(-16#024#, 12);
      WHEN '1' =>
        coeffTableOut5_1 <= to_signed(16#01F#, 12);
      WHEN OTHERS => 
        coeffTableOut5_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable5_1_output;


  coeffTableRegP5_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP5_3 <= coeffTableOut5_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP5_2_process;


  -- Coefficient table for multiplier4
  coeffTable4_1_output : PROCESS (rdAddr4)
  BEGIN
    CASE rdAddr4 IS
      WHEN '0' =>
        coeffTableOut4_1 <= to_signed(16#3D8#, 12);
      WHEN '1' =>
        coeffTableOut4_1 <= to_signed(16#027#, 12);
      WHEN OTHERS => 
        coeffTableOut4_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable4_1_output;


  coeffTableRegP4_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP4_3 <= coeffTableOut4_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP4_2_process;


  -- Coefficient table for multiplier3
  coeffTable3_1_output : PROCESS (rdAddr3)
  BEGIN
    CASE rdAddr3 IS
      WHEN '0' =>
        coeffTableOut3_1 <= to_signed(-16#024#, 12);
      WHEN '1' =>
        coeffTableOut3_1 <= to_signed(16#027#, 12);
      WHEN OTHERS => 
        coeffTableOut3_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable3_1_output;


  coeffTableRegP3_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP3_3 <= coeffTableOut3_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP3_2_process;


  -- Coefficient table for multiplier2
  coeffTable2_1_output : PROCESS (rdAddr2)
  BEGIN
    CASE rdAddr2 IS
      WHEN '0' =>
        coeffTableOut2_1 <= to_signed(-16#019#, 12);
      WHEN '1' =>
        coeffTableOut2_1 <= to_signed(16#01F#, 12);
      WHEN OTHERS => 
        coeffTableOut2_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable2_1_output;


  coeffTableRegP2_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP2_3 <= coeffTableOut2_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP2_2_process;


  -- Coefficient table for multiplier1
  coeffTable1_1_output : PROCESS (rdAddr1)
  BEGIN
    CASE rdAddr1 IS
      WHEN '0' =>
        coeffTableOut1_1 <= to_signed(-16#00D#, 12);
      WHEN '1' =>
        coeffTableOut1_1 <= to_signed(16#013#, 12);
      WHEN OTHERS => 
        coeffTableOut1_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable1_1_output;


  coeffTableRegP1_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP1_3 <= coeffTableOut1_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP1_2_process;


  -- Coefficient table for multiplier0
  coeffTable0_1_output : PROCESS (rdAddr0_1)
  BEGIN
    CASE rdAddr0_1 IS
      WHEN '0' =>
        coeffTableOut0_1 <= to_signed(-16#005#, 12);
      WHEN '1' =>
        coeffTableOut0_1 <= to_signed(16#008#, 12);
      WHEN OTHERS => 
        coeffTableOut0_1 <= to_signed(16#000#, 12);
    END CASE;
  END PROCESS coeffTable0_1_output;


  coeffTableRegP0_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        coeffTableRegP0_3 <= coeffTableOut0_1;
      END IF;
    END IF;
  END PROCESS coeffTableRegP0_2_process;


  sumIn_1 <= to_signed(16#000000#, 23);

  sumOut_7_signed_1 <= signed(sumOut_7_1);

  sumOutReg_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sumOutReg_3 <= to_signed(16#000000#, 23);
      ELSIF enb = '1' THEN
        sumOutReg_3 <= sumOut_7_signed_1;
      END IF;
    END IF;
  END PROCESS sumOutReg_2_process;


  
  accSwitchOut_1 <= accDataOut_4 WHEN accumulate_1 = '0' ELSE
      accDataOut_3;

  accAdderOut_1 <= accSwitchOut_1 + sumOutReg_3;

  accDataOut_5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        accDataOut_4 <= to_signed(16#000000#, 23);
      ELSIF enb = '1' THEN
        accDataOut_4 <= accAdderOut_1;
      END IF;
    END IF;
  END PROCESS accDataOut_5_process;


  converterOut_1 <= accDataOut_4(21 DOWNTO 10);

  dout_im_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        dout_im_1 <= to_signed(16#000#, 12);
      ELSIF enb = '1' AND validOutLookahead_3 = '1' THEN
        dout_im_1 <= converterOut_1;
      END IF;
    END IF;
  END PROCESS dout_im_process;


  dataZero <= to_signed(16#000#, 12);

  dataZero_dtc_re <= dataZero;
  dataZero_dtc_im <= to_signed(16#000#, 12);

  
  dout_cmplxSW_re <= dout_re_1 WHEN notValid = '0' ELSE
      dataZero_dtc_re;
  
  dout_cmplxSW_im <= dout_im_1 WHEN notValid = '0' ELSE
      dataZero_dtc_im;

  dataOut_re <= std_logic_vector(dout_cmplxSW_re);

  dataOut_im <= std_logic_vector(dout_cmplxSW_im);

  validOut <= vldOut_1;

END rtl;

