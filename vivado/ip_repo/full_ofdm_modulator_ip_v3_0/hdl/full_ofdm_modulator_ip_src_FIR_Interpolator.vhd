-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_FIR_Interpolator.vhd
-- Created: 2024-09-01 12:13:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_FIR_Interpolator
-- Source Path: HDLModulatorFull/full_ofdm_modulator/interpolator/FIR Interpolator
-- Hierarchy Level: 2
-- Model version: 1.43
-- 
-- HDLFIRInterpolation
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_ofdm_modulator_ip_src_full_ofdm_modulator_pac.ALL;

ENTITY full_ofdm_modulator_ip_src_FIR_Interpolator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn_re                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        dataIn_im                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        validIn                           :   IN    std_logic;
        dataOut_re                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        dataOut_im                        :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        validOut                          :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_FIR_Interpolator;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_FIR_Interpolator IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_FIRFilter2
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataIn_im                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataOut_im                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_FIRFilter1
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataIn_im                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataOut_im                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_FIRFilter2
    USE ENTITY work.full_ofdm_modulator_ip_src_FIRFilter2(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_FIRFilter1
    USE ENTITY work.full_ofdm_modulator_ip_src_FIRFilter1(rtl);

  -- Signals
  SIGNAL syncReset                        : std_logic;
  SIGNAL FIROutput2_re                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL FIROutput2_im                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL FIRValid2                        : std_logic;
  SIGNAL outputSharingRSTTerm2            : std_logic;
  SIGNAL sharingReset                     : std_logic;
  SIGNAL counterRST                       : std_logic;
  SIGNAL validSharing                     : std_logic;
  SIGNAL sharingSEL_1                     : std_logic;  -- ufix1
  SIGNAL SharingSEL0                      : std_logic;
  SIGNAL SharingCount0                    : std_logic;
  SIGNAL outputSharingRSTTerm1            : std_logic;
  SIGNAL outputSharingRSTTerm3            : std_logic;
  SIGNAL outputSharing_1                  : std_logic;
  SIGNAL counterEnTerm                    : std_logic;
  SIGNAL counterEn                        : std_logic;
  SIGNAL sharingCounter_1                 : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL validOutTerm                     : std_logic;
  SIGNAL validOut_1                       : std_logic;
  SIGNAL dataZero_re                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataZero_im                      : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL sharingSELREG                    : std_logic;  -- ufix1
  SIGNAL FIROutput1_re                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL FIROutput1_im                    : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL FIRValid1                        : std_logic;
  SIGNAL intdelay_reg                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL ValidPipeline1                   : std_logic;
  SIGNAL FIROutput1_re_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutput1_im_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL intdelay_reg_re                  : vector_of_signed12(0 TO 2);  -- sfix12_En10 [3]
  SIGNAL intdelay_reg_im                  : vector_of_signed12(0 TO 2);  -- sfix12_En10 [3]
  SIGNAL FIROutputCastDBP1_re             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutputCastDBP1_im             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutputCastDB1_re              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutputCastDB1_im              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutput2_re_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutput2_im_signed             : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutputCastDB2_re              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL FIROutputCastDB2_im              : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataSelect_re                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataSelect_im                    : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataOut_re_tmp                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL dataOut_im_tmp                   : signed(11 DOWNTO 0);  -- sfix12_En10

BEGIN
  u_filterInstantiation : full_ofdm_modulator_ip_src_FIRFilter2
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => dataIn_re,  -- sfix12_En10
              dataIn_im => dataIn_im,  -- sfix12_En10
              validIn => validIn,
              dataOut_re => FIROutput2_re,  -- sfix12_En10
              dataOut_im => FIROutput2_im,  -- sfix12_En10
              validOut => FIRValid2
              );

  u_filterInstantiation_1 : full_ofdm_modulator_ip_src_FIRFilter1
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb => enb,
              dataIn_re => dataIn_re,  -- sfix12_En10
              dataIn_im => dataIn_im,  -- sfix12_En10
              validIn => validIn,
              dataOut_re => FIROutput1_re,  -- sfix12_En10
              dataOut_im => FIROutput1_im,  -- sfix12_En10
              validOut => FIRValid1
              );

  syncReset <= '0';

  outputSharingRSTTerm2 <=  NOT FIRValid2;

  counterRST <=  NOT sharingReset;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 1
  SharingSEL_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sharingSEL_1 <= '0';
      ELSIF enb = '1' AND validSharing = '1' THEN
        sharingSEL_1 <=  NOT sharingSEL_1;
      END IF;
    END IF;
  END PROCESS SharingSEL_process;


  
  SharingSEL0 <= '1' WHEN sharingSEL_1 = '0' ELSE
      '0';

  outputSharingRSTTerm1 <= SharingCount0 AND SharingSEL0;

  outputSharingRSTTerm3 <= outputSharingRSTTerm1 AND outputSharingRSTTerm2;

  sharingReset <= syncReset OR outputSharingRSTTerm3;

  OutputSharing_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        outputSharing_1 <= '0';
      ELSIF enb = '1' THEN
        IF sharingReset = '1' THEN
          outputSharing_1 <= '0';
        ELSIF FIRValid2 = '1' THEN
          outputSharing_1 <= FIRValid2;
        END IF;
      END IF;
    END IF;
  END PROCESS OutputSharing_process;


  counterEnTerm <= outputSharing_1 OR FIRValid2;

  counterEn <= counterEnTerm AND counterRST;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 0
  SharingCounter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sharingCounter_1 <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        IF counterEn = '1' THEN 
          sharingCounter_1 <= to_unsigned(16#0#, 2);
        END IF;
      END IF;
    END IF;
  END PROCESS SharingCounter_process;


  
  SharingCount0 <= '1' WHEN sharingCounter_1 = to_unsigned(16#0#, 2) ELSE
      '0';

  validSharing <= SharingCount0 AND counterEn;

  validOutTerm <= validSharing OR FIRValid2;

  OutputSharing_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        validOut_1 <= '0';
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          validOut_1 <= '0';
        ELSE 
          validOut_1 <= validOutTerm;
        END IF;
      END IF;
    END IF;
  END PROCESS OutputSharing_2_process;


  dataZero_re <= to_signed(16#000#, 12);
  dataZero_im <= to_signed(16#000#, 12);

  OutputSharing_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        sharingSELREG <= '0';
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          sharingSELREG <= '0';
        ELSIF validSharing = '1' THEN
          sharingSELREG <= sharingSEL_1;
        END IF;
      END IF;
    END IF;
  END PROCESS OutputSharing_3_process;


  intdelay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        intdelay_reg <= (OTHERS => '0');
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          intdelay_reg <= (OTHERS => '0');
        ELSE 
          intdelay_reg(0) <= FIRValid1;
          intdelay_reg(2 DOWNTO 1) <= intdelay_reg(1 DOWNTO 0);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_process;

  ValidPipeline1 <= intdelay_reg(2);

  FIROutput1_re_signed <= signed(FIROutput1_re);

  FIROutput1_im_signed <= signed(FIROutput1_im);

  intdelay_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        intdelay_reg_re <= (OTHERS => to_signed(16#000#, 12));
        intdelay_reg_im <= (OTHERS => to_signed(16#000#, 12));
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          intdelay_reg_re <= (OTHERS => to_signed(16#000#, 12));
          intdelay_reg_im <= (OTHERS => to_signed(16#000#, 12));
        ELSE 
          intdelay_reg_im(0) <= FIROutput1_im_signed;
          intdelay_reg_im(1 TO 2) <= intdelay_reg_im(0 TO 1);
          intdelay_reg_re(0) <= FIROutput1_re_signed;
          intdelay_reg_re(1 TO 2) <= intdelay_reg_re(0 TO 1);
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  FIROutputCastDBP1_re <= intdelay_reg_re(2);
  FIROutputCastDBP1_im <= intdelay_reg_im(2);

  intdelay_2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        FIROutputCastDB1_re <= to_signed(16#000#, 12);
        FIROutputCastDB1_im <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          FIROutputCastDB1_re <= to_signed(16#000#, 12);
          FIROutputCastDB1_im <= to_signed(16#000#, 12);
        ELSIF ValidPipeline1 = '1' THEN
          FIROutputCastDB1_re <= FIROutputCastDBP1_re;
          FIROutputCastDB1_im <= FIROutputCastDBP1_im;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  FIROutput2_re_signed <= signed(FIROutput2_re);

  FIROutput2_im_signed <= signed(FIROutput2_im);

  intdelay_3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        FIROutputCastDB2_re <= to_signed(16#000#, 12);
        FIROutputCastDB2_im <= to_signed(16#000#, 12);
      ELSIF enb = '1' THEN
        IF syncReset = '1' THEN
          FIROutputCastDB2_re <= to_signed(16#000#, 12);
          FIROutputCastDB2_im <= to_signed(16#000#, 12);
        ELSIF FIRValid2 = '1' THEN
          FIROutputCastDB2_re <= FIROutput2_re_signed;
          FIROutputCastDB2_im <= FIROutput2_im_signed;
        END IF;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  
  dataSelect_re <= FIROutputCastDB1_re WHEN sharingSELREG = '0' ELSE
      FIROutputCastDB2_re;
  
  dataSelect_im <= FIROutputCastDB1_im WHEN sharingSELREG = '0' ELSE
      FIROutputCastDB2_im;

  
  dataOut_re_tmp <= dataZero_re WHEN validOut_1 = '0' ELSE
      dataSelect_re;
  
  dataOut_im_tmp <= dataZero_im WHEN validOut_1 = '0' ELSE
      dataSelect_im;

  dataOut_re <= std_logic_vector(dataOut_re_tmp);

  dataOut_im <= std_logic_vector(dataOut_im_tmp);

  validOut <= validOut_1;

END rtl;

