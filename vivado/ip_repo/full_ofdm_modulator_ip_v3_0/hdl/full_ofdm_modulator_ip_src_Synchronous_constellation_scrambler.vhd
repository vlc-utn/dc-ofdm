-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_Synchronous_constellation_scrambler.vhd
-- Created: 2024-09-01 12:13:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_Synchronous_constellation_scrambler
-- Source Path: HDLModulatorFull/full_ofdm_modulator/enabled_qam_and_scrambler/sync_constellation_scrambler/Synchronous 
-- constellation scramble
-- Hierarchy Level: 3
-- Model version: 1.43
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY full_ofdm_modulator_ip_src_Synchronous_constellation_scrambler IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        valid_in                          :   IN    std_logic;
        init                              :   IN    std_logic_vector(12 DOWNTO 0);  -- boolean [13]
        new_ofdm_symbol                   :   IN    std_logic;
        ready_out                         :   IN    std_logic;
        s1_out                            :   OUT   std_logic;
        s2_out                            :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_Synchronous_constellation_scrambler;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_Synchronous_constellation_scrambler IS

  -- Signals
  SIGNAL ready_out_1                      : std_logic;
  SIGNAL enb_1_2_0_gated                  : std_logic;
  SIGNAL enb_1_2_0_gated_1                : std_logic;
  SIGNAL enb_1_2_0_gated_2                : std_logic;
  SIGNAL enb_1_2_0_gated_3                : std_logic;
  SIGNAL enb_1_2_0_gated_4                : std_logic;
  SIGNAL enb_1_2_0_gated_5                : std_logic;
  SIGNAL enb_1_2_0_gated_6                : std_logic;
  SIGNAL enb_1_2_0_gated_7                : std_logic;
  SIGNAL enb_1_2_0_gated_8                : std_logic;
  SIGNAL enb_1_2_0_gated_9                : std_logic;
  SIGNAL enb_1_2_0_gated_10               : std_logic;
  SIGNAL enb_1_2_0_gated_11               : std_logic;
  SIGNAL enb_1_2_0_gated_12               : std_logic;
  SIGNAL init_2                           : std_logic;
  SIGNAL enb_1_2_0_gated_13               : std_logic;
  SIGNAL init_4                           : std_logic;
  SIGNAL enb_1_2_0_gated_14               : std_logic;
  SIGNAL init_6                           : std_logic;
  SIGNAL enb_1_2_0_gated_15               : std_logic;
  SIGNAL init_8                           : std_logic;
  SIGNAL enb_1_2_0_gated_16               : std_logic;
  SIGNAL init_10                          : std_logic;
  SIGNAL enb_1_2_0_gated_17               : std_logic;
  SIGNAL init_12                          : std_logic;
  SIGNAL enb_1_2_0_gated_18               : std_logic;
  SIGNAL init_1                           : std_logic;
  SIGNAL enb_1_2_0_gated_19               : std_logic;
  SIGNAL init_3                           : std_logic;
  SIGNAL enb_1_2_0_gated_20               : std_logic;
  SIGNAL init_5                           : std_logic;
  SIGNAL enb_1_2_0_gated_21               : std_logic;
  SIGNAL init_7                           : std_logic;
  SIGNAL enb_1_2_0_gated_22               : std_logic;
  SIGNAL init_9                           : std_logic;
  SIGNAL enb_1_2_0_gated_23               : std_logic;
  SIGNAL init_11                          : std_logic;
  SIGNAL enb_1_2_0_gated_24               : std_logic;
  SIGNAL init_0                           : std_logic;
  SIGNAL enb_1_2_0_gated_25               : std_logic;
  SIGNAL s1                               : std_logic;
  SIGNAL s1_1                             : std_logic;
  SIGNAL Switch2_out1                     : std_logic;
  SIGNAL Delay2_delOut                    : std_logic;
  SIGNAL Delay2_ectrl                     : std_logic;
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Delay2_last_value                : std_logic;
  SIGNAL Switch4_out1                     : std_logic;
  SIGNAL Delay4_delOut                    : std_logic;
  SIGNAL Delay4_ectrl                     : std_logic;
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Delay4_last_value                : std_logic;
  SIGNAL Switch6_out1                     : std_logic;
  SIGNAL Delay6_delOut                    : std_logic;
  SIGNAL Delay6_ectrl                     : std_logic;
  SIGNAL Delay6_out1                      : std_logic;
  SIGNAL Delay6_last_value                : std_logic;
  SIGNAL Switch8_out1                     : std_logic;
  SIGNAL Delay8_delOut                    : std_logic;
  SIGNAL Delay8_ectrl                     : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Delay8_last_value                : std_logic;
  SIGNAL Switch10_out1                    : std_logic;
  SIGNAL Delay10_delOut                   : std_logic;
  SIGNAL Delay10_ectrl                    : std_logic;
  SIGNAL Delay10_out1                     : std_logic;
  SIGNAL Delay10_last_value               : std_logic;
  SIGNAL Switch12_out1                    : std_logic;
  SIGNAL Delay12_delOut                   : std_logic;
  SIGNAL Delay12_ectrl                    : std_logic;
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay12_last_value               : std_logic;
  SIGNAL Delay11_out1                     : std_logic;
  SIGNAL XOR3_out1                        : std_logic;
  SIGNAL XOR4_out1                        : std_logic;
  SIGNAL Delay7_out1                      : std_logic;
  SIGNAL XOR5_out1                        : std_logic;
  SIGNAL Switch1_out1                     : std_logic;
  SIGNAL Delay1_delOut                    : std_logic;
  SIGNAL Delay1_ectrl                     : std_logic;
  SIGNAL s2                               : std_logic;
  SIGNAL Delay1_last_value                : std_logic;
  SIGNAL s2_1                             : std_logic;
  SIGNAL Switch3_out1                     : std_logic;
  SIGNAL Delay3_delOut                    : std_logic;
  SIGNAL Delay3_ectrl                     : std_logic;
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Delay3_last_value                : std_logic;
  SIGNAL Switch5_out1                     : std_logic;
  SIGNAL Delay5_delOut                    : std_logic;
  SIGNAL Delay5_ectrl                     : std_logic;
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Delay5_last_value                : std_logic;
  SIGNAL Switch7_out1                     : std_logic;
  SIGNAL Delay7_delOut                    : std_logic;
  SIGNAL Delay7_ectrl                     : std_logic;
  SIGNAL Delay7_last_value                : std_logic;
  SIGNAL Switch9_out1                     : std_logic;
  SIGNAL Delay9_delOut                    : std_logic;
  SIGNAL Delay9_ectrl                     : std_logic;
  SIGNAL Delay9_out1                      : std_logic;
  SIGNAL Delay9_last_value                : std_logic;
  SIGNAL Switch11_out1                    : std_logic;
  SIGNAL Delay11_delOut                   : std_logic;
  SIGNAL Delay11_ectrl                    : std_logic;
  SIGNAL Delay11_last_value               : std_logic;
  SIGNAL XOR_out1                         : std_logic;
  SIGNAL XOR1_out1                        : std_logic;
  SIGNAL XOR2_out1                        : std_logic;
  SIGNAL Switch_out1                      : std_logic;
  SIGNAL Delay_delOut                     : std_logic;
  SIGNAL Delay_ectrl                      : std_logic;
  SIGNAL Delay_last_value                 : std_logic;
  SIGNAL s1_2                             : std_logic;
  SIGNAL s2_2                             : std_logic;

BEGIN
  rd_0_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        ready_out_1 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        ready_out_1 <= ready_out;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  enb_1_2_0_gated <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_1 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_2 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_3 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_4 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_5 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_6 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_7 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_8 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_9 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_10 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_11 <= ready_out_1 AND enb_1_2_0;

  enb_1_2_0_gated_12 <= ready_out_1 AND enb_1_2_0;

  init_2 <= init(2);

  enb_1_2_0_gated_13 <= ready_out_1 AND enb_1_2_0;

  init_4 <= init(4);

  enb_1_2_0_gated_14 <= ready_out_1 AND enb_1_2_0;

  init_6 <= init(6);

  enb_1_2_0_gated_15 <= ready_out_1 AND enb_1_2_0;

  init_8 <= init(8);

  enb_1_2_0_gated_16 <= ready_out_1 AND enb_1_2_0;

  init_10 <= init(10);

  enb_1_2_0_gated_17 <= ready_out_1 AND enb_1_2_0;

  init_12 <= init(12);

  enb_1_2_0_gated_18 <= ready_out_1 AND enb_1_2_0;

  init_1 <= init(1);

  enb_1_2_0_gated_19 <= ready_out_1 AND enb_1_2_0;

  init_3 <= init(3);

  enb_1_2_0_gated_20 <= ready_out_1 AND enb_1_2_0;

  init_5 <= init(5);

  enb_1_2_0_gated_21 <= ready_out_1 AND enb_1_2_0;

  init_7 <= init(7);

  enb_1_2_0_gated_22 <= ready_out_1 AND enb_1_2_0;

  init_9 <= init(9);

  enb_1_2_0_gated_23 <= ready_out_1 AND enb_1_2_0;

  init_11 <= init(11);

  enb_1_2_0_gated_24 <= ready_out_1 AND enb_1_2_0;

  init_0 <= init(0);

  enb_1_2_0_gated_25 <= ready_out_1 AND enb_1_2_0;

  s1_1 <= s1;

  
  Switch2_out1 <= s1_1 WHEN new_ofdm_symbol = '0' ELSE
      init_2;

  
  Delay2_ectrl <= Delay2_delOut WHEN valid_in = '0' ELSE
      Switch2_out1;

  Delay2_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_delOut <= '0';
      ELSIF enb_1_2_0_gated_13 = '1' THEN
        Delay2_delOut <= Delay2_ectrl;
      END IF;
    END IF;
  END PROCESS Delay2_lowered_process;


  Delay2_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay2_last_value <= '0';
      ELSIF enb_1_2_0_gated_12 = '1' THEN
        Delay2_last_value <= Delay2_out1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;


  
  Delay2_out1 <= Delay2_last_value WHEN valid_in = '0' ELSE
      Delay2_delOut;

  
  Switch4_out1 <= Delay2_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_4;

  
  Delay4_ectrl <= Delay4_delOut WHEN valid_in = '0' ELSE
      Switch4_out1;

  Delay4_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_delOut <= '0';
      ELSIF enb_1_2_0_gated_14 = '1' THEN
        Delay4_delOut <= Delay4_ectrl;
      END IF;
    END IF;
  END PROCESS Delay4_lowered_process;


  Delay4_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay4_last_value <= '0';
      ELSIF enb_1_2_0_gated_11 = '1' THEN
        Delay4_last_value <= Delay4_out1;
      END IF;
    END IF;
  END PROCESS Delay4_bypass_process;


  
  Delay4_out1 <= Delay4_last_value WHEN valid_in = '0' ELSE
      Delay4_delOut;

  
  Switch6_out1 <= Delay4_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_6;

  
  Delay6_ectrl <= Delay6_delOut WHEN valid_in = '0' ELSE
      Switch6_out1;

  Delay6_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_delOut <= '0';
      ELSIF enb_1_2_0_gated_15 = '1' THEN
        Delay6_delOut <= Delay6_ectrl;
      END IF;
    END IF;
  END PROCESS Delay6_lowered_process;


  Delay6_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay6_last_value <= '0';
      ELSIF enb_1_2_0_gated_10 = '1' THEN
        Delay6_last_value <= Delay6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_bypass_process;


  
  Delay6_out1 <= Delay6_last_value WHEN valid_in = '0' ELSE
      Delay6_delOut;

  
  Switch8_out1 <= Delay6_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_8;

  
  Delay8_ectrl <= Delay8_delOut WHEN valid_in = '0' ELSE
      Switch8_out1;

  Delay8_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_delOut <= '0';
      ELSIF enb_1_2_0_gated_16 = '1' THEN
        Delay8_delOut <= Delay8_ectrl;
      END IF;
    END IF;
  END PROCESS Delay8_lowered_process;


  Delay8_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay8_last_value <= '0';
      ELSIF enb_1_2_0_gated_9 = '1' THEN
        Delay8_last_value <= Delay8_out1;
      END IF;
    END IF;
  END PROCESS Delay8_bypass_process;


  
  Delay8_out1 <= Delay8_last_value WHEN valid_in = '0' ELSE
      Delay8_delOut;

  
  Switch10_out1 <= Delay8_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_10;

  
  Delay10_ectrl <= Delay10_delOut WHEN valid_in = '0' ELSE
      Switch10_out1;

  Delay10_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_delOut <= '0';
      ELSIF enb_1_2_0_gated_17 = '1' THEN
        Delay10_delOut <= Delay10_ectrl;
      END IF;
    END IF;
  END PROCESS Delay10_lowered_process;


  Delay10_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay10_last_value <= '0';
      ELSIF enb_1_2_0_gated_8 = '1' THEN
        Delay10_last_value <= Delay10_out1;
      END IF;
    END IF;
  END PROCESS Delay10_bypass_process;


  
  Delay10_out1 <= Delay10_last_value WHEN valid_in = '0' ELSE
      Delay10_delOut;

  
  Switch12_out1 <= Delay10_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_12;

  
  Delay12_ectrl <= Delay12_delOut WHEN valid_in = '0' ELSE
      Switch12_out1;

  Delay12_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_delOut <= '0';
      ELSIF enb_1_2_0_gated_18 = '1' THEN
        Delay12_delOut <= Delay12_ectrl;
      END IF;
    END IF;
  END PROCESS Delay12_lowered_process;


  Delay12_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay12_last_value <= '0';
      ELSIF enb_1_2_0_gated_7 = '1' THEN
        Delay12_last_value <= Delay12_out1;
      END IF;
    END IF;
  END PROCESS Delay12_bypass_process;


  
  Delay12_out1 <= Delay12_last_value WHEN valid_in = '0' ELSE
      Delay12_delOut;

  XOR3_out1 <= Delay12_out1 XOR Delay11_out1;

  XOR4_out1 <= XOR3_out1 XOR Delay10_out1;

  XOR5_out1 <= XOR4_out1 XOR Delay7_out1;

  
  Switch1_out1 <= XOR5_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_1;

  
  Delay1_ectrl <= Delay1_delOut WHEN valid_in = '0' ELSE
      Switch1_out1;

  Delay1_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_delOut <= '0';
      ELSIF enb_1_2_0_gated_19 = '1' THEN
        Delay1_delOut <= Delay1_ectrl;
      END IF;
    END IF;
  END PROCESS Delay1_lowered_process;


  Delay1_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay1_last_value <= '0';
      ELSIF enb_1_2_0_gated_6 = '1' THEN
        Delay1_last_value <= s2;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;


  
  s2 <= Delay1_last_value WHEN valid_in = '0' ELSE
      Delay1_delOut;

  s2_1 <= s2;

  
  Switch3_out1 <= s2_1 WHEN new_ofdm_symbol = '0' ELSE
      init_3;

  
  Delay3_ectrl <= Delay3_delOut WHEN valid_in = '0' ELSE
      Switch3_out1;

  Delay3_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_delOut <= '0';
      ELSIF enb_1_2_0_gated_20 = '1' THEN
        Delay3_delOut <= Delay3_ectrl;
      END IF;
    END IF;
  END PROCESS Delay3_lowered_process;


  Delay3_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay3_last_value <= '0';
      ELSIF enb_1_2_0_gated_5 = '1' THEN
        Delay3_last_value <= Delay3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;


  
  Delay3_out1 <= Delay3_last_value WHEN valid_in = '0' ELSE
      Delay3_delOut;

  
  Switch5_out1 <= Delay3_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_5;

  
  Delay5_ectrl <= Delay5_delOut WHEN valid_in = '0' ELSE
      Switch5_out1;

  Delay5_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_delOut <= '0';
      ELSIF enb_1_2_0_gated_21 = '1' THEN
        Delay5_delOut <= Delay5_ectrl;
      END IF;
    END IF;
  END PROCESS Delay5_lowered_process;


  Delay5_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay5_last_value <= '0';
      ELSIF enb_1_2_0_gated_4 = '1' THEN
        Delay5_last_value <= Delay5_out1;
      END IF;
    END IF;
  END PROCESS Delay5_bypass_process;


  
  Delay5_out1 <= Delay5_last_value WHEN valid_in = '0' ELSE
      Delay5_delOut;

  
  Switch7_out1 <= Delay5_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_7;

  
  Delay7_ectrl <= Delay7_delOut WHEN valid_in = '0' ELSE
      Switch7_out1;

  Delay7_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_delOut <= '0';
      ELSIF enb_1_2_0_gated_22 = '1' THEN
        Delay7_delOut <= Delay7_ectrl;
      END IF;
    END IF;
  END PROCESS Delay7_lowered_process;


  Delay7_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay7_last_value <= '0';
      ELSIF enb_1_2_0_gated_3 = '1' THEN
        Delay7_last_value <= Delay7_out1;
      END IF;
    END IF;
  END PROCESS Delay7_bypass_process;


  
  Delay7_out1 <= Delay7_last_value WHEN valid_in = '0' ELSE
      Delay7_delOut;

  
  Switch9_out1 <= Delay7_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_9;

  
  Delay9_ectrl <= Delay9_delOut WHEN valid_in = '0' ELSE
      Switch9_out1;

  Delay9_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_delOut <= '0';
      ELSIF enb_1_2_0_gated_23 = '1' THEN
        Delay9_delOut <= Delay9_ectrl;
      END IF;
    END IF;
  END PROCESS Delay9_lowered_process;


  Delay9_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay9_last_value <= '0';
      ELSIF enb_1_2_0_gated_2 = '1' THEN
        Delay9_last_value <= Delay9_out1;
      END IF;
    END IF;
  END PROCESS Delay9_bypass_process;


  
  Delay9_out1 <= Delay9_last_value WHEN valid_in = '0' ELSE
      Delay9_delOut;

  
  Switch11_out1 <= Delay9_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_11;

  
  Delay11_ectrl <= Delay11_delOut WHEN valid_in = '0' ELSE
      Switch11_out1;

  Delay11_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_delOut <= '0';
      ELSIF enb_1_2_0_gated_24 = '1' THEN
        Delay11_delOut <= Delay11_ectrl;
      END IF;
    END IF;
  END PROCESS Delay11_lowered_process;


  Delay11_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay11_last_value <= '0';
      ELSIF enb_1_2_0_gated_1 = '1' THEN
        Delay11_last_value <= Delay11_out1;
      END IF;
    END IF;
  END PROCESS Delay11_bypass_process;


  
  Delay11_out1 <= Delay11_last_value WHEN valid_in = '0' ELSE
      Delay11_delOut;

  XOR_out1 <= Delay11_out1 XOR Delay10_out1;

  XOR1_out1 <= XOR_out1 XOR Delay9_out1;

  XOR2_out1 <= XOR1_out1 XOR Delay6_out1;

  
  Switch_out1 <= XOR2_out1 WHEN new_ofdm_symbol = '0' ELSE
      init_0;

  
  Delay_ectrl <= Delay_delOut WHEN valid_in = '0' ELSE
      Switch_out1;

  Delay_lowered_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_delOut <= '0';
      ELSIF enb_1_2_0_gated_25 = '1' THEN
        Delay_delOut <= Delay_ectrl;
      END IF;
    END IF;
  END PROCESS Delay_lowered_process;


  Delay_bypass_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        Delay_last_value <= '0';
      ELSIF enb_1_2_0_gated = '1' THEN
        Delay_last_value <= s1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;


  
  s1 <= Delay_last_value WHEN valid_in = '0' ELSE
      Delay_delOut;

  s1_2 <= s1;

  s2_2 <= s2;

  s1_out <= s1_2;

  s2_out <= s2_2;

END rtl;

