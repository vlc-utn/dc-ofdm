-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/HDLModulatorFull/full_ofdm_modulator_ip_src_OFDM_Modulator.vhd
-- Created: 2024-09-01 12:13:06
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_ofdm_modulator_ip_src_OFDM_Modulator
-- Source Path: HDLModulatorFull/full_ofdm_modulator/ofdm_modulator/OFDM Modulator
-- Hierarchy Level: 2
-- Model version: 1.43
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_ofdm_modulator_ip_src_full_ofdm_modulator_pac.ALL;

ENTITY full_ofdm_modulator_ip_src_OFDM_Modulator IS
  PORT( clk                               :   IN    std_logic;
        reset_x                           :   IN    std_logic;
        enb_1_2_0                         :   IN    std_logic;
        data_re                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_im                           :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid                             :   IN    std_logic;
        FFTLen                            :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
        CPLen                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        numLgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        numRgSc                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        data_re_1                         :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        data_im_1                         :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
        valid_1                           :   OUT   std_logic;
        ready                             :   OUT   std_logic
        );
END full_ofdm_modulator_ip_src_OFDM_Modulator;


ARCHITECTURE rtl OF full_ofdm_modulator_ip_src_OFDM_Modulator IS

  -- Component Declarations
  COMPONENT full_ofdm_modulator_ip_src_symbolFormation
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_1_im                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_4                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_5                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_6                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargout_1_re                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_1_im                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargout_4                     :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_samplesRepetitionMod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_1_im                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargin_4                      :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          varargout_1_re                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_1_im                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          varargout_4                     :   OUT   std_logic_vector(8 DOWNTO 0)  -- ufix9
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_dsphdl_IFFT
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataIn_im                       :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          dataOut_im                      :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          startOut                        :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_DownSamplerMod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_1_im                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_1_im                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_4                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_HDLFFTShiftMod
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_1_im                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_1_im                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_2                     :   OUT   std_logic;
          varargout_3                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_4                     :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT full_ofdm_modulator_ip_src_CPAddition
    PORT( clk                             :   IN    std_logic;
          reset_x                         :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          varargin_1_re                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_1_im                   :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargin_2                      :   IN    std_logic;
          varargin_3                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargin_4                      :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          varargout_1_re                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_1_im                  :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En10
          varargout_2                     :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_ofdm_modulator_ip_src_symbolFormation
    USE ENTITY work.full_ofdm_modulator_ip_src_symbolFormation(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_samplesRepetitionMod
    USE ENTITY work.full_ofdm_modulator_ip_src_samplesRepetitionMod(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_dsphdl_IFFT
    USE ENTITY work.full_ofdm_modulator_ip_src_dsphdl_IFFT(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_DownSamplerMod
    USE ENTITY work.full_ofdm_modulator_ip_src_DownSamplerMod(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_HDLFFTShiftMod
    USE ENTITY work.full_ofdm_modulator_ip_src_HDLFFTShiftMod(rtl);

  FOR ALL : full_ofdm_modulator_ip_src_CPAddition
    USE ENTITY work.full_ofdm_modulator_ip_src_CPAddition(rtl);

  -- Signals
  SIGNAL out_rsvd                         : std_logic;
  SIGNAL out_rsvd_1                       : std_logic;
  SIGNAL obj_readyLowFlag                 : std_logic;
  SIGNAL out_rsvd_2                       : std_logic;
  SIGNAL out_rsvd_3                       : std_logic;
  SIGNAL obj_readyLowCount                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_validInHighCount             : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_sampleInputs                 : std_logic;
  SIGNAL out_rsvd_4                       : std_logic;
  SIGNAL out_rsvd_5                       : std_logic;
  SIGNAL CPLen_unsigned                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL tmp                              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL FFTLen_unsigned                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_1                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_insertDC                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL numLgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_2                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL numRgSc_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_3                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLowFlag_1               : std_logic;
  SIGNAL out_rsvd_6                       : std_logic;
  SIGNAL out_rsvd_7                       : std_logic;
  SIGNAL obj_validInHighFlag              : std_logic;
  SIGNAL out_rsvd_8                       : std_logic;
  SIGNAL out_rsvd_9                       : std_logic;
  SIGNAL obj_validInHighFlag_1            : std_logic;
  SIGNAL out_rsvd_10                      : std_logic;
  SIGNAL out_rsvd_11                      : std_logic;
  SIGNAL obj_readyOut                     : std_logic;
  SIGNAL obj_readyOut_1                   : std_logic;
  SIGNAL obj_readyOut_2                   : std_logic;
  SIGNAL obj_readyOut_3                   : std_logic;
  SIGNAL out_rsvd_12                      : std_logic;
  SIGNAL out_rsvd_13                      : std_logic;
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : std_logic;
  SIGNAL tmp_6                            : std_logic;
  SIGNAL tmp_7                            : std_logic;
  SIGNAL obj_validInHighCount_1           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_8                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_9                            : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_10                           : std_logic;
  SIGNAL tmp_11                           : std_logic;
  SIGNAL tmp_12                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numRgScReg                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_13                           : std_logic;
  SIGNAL tmp_14                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numLgScReg                   : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_15                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_FFTLengthReg                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_numDataSc                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_16                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_CPLengthReg                  : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_17                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_18                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_19                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_20                           : std_logic;
  SIGNAL tmp_21                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_22                           : std_logic;
  SIGNAL obj_sampleInputs_1               : std_logic;
  SIGNAL tmp_23                           : std_logic;
  SIGNAL tmp_24                           : std_logic;
  SIGNAL tmp_25                           : std_logic;
  SIGNAL obj_maxFFTPlusCP                 : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLow                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLowCount_1              : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_26                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_27                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_28                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_29                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : std_logic;
  SIGNAL tmp_32                           : std_logic;
  SIGNAL tmp_33                           : std_logic;
  SIGNAL tmp_34                           : std_logic;
  SIGNAL obj_readyLowFlag_2               : std_logic;
  SIGNAL obj_validInHighFlag_2            : std_logic;
  SIGNAL s                                : std_logic;
  SIGNAL tmp_35                           : std_logic;
  SIGNAL tmp_36                           : std_logic;
  SIGNAL tmp_37                           : std_logic;
  SIGNAL tmp_38                           : std_logic;
  SIGNAL tmp_39                           : std_logic;
  SIGNAL tmp_40                           : std_logic;
  SIGNAL tmp_41                           : std_logic;
  SIGNAL tmp_42                           : std_logic;
  SIGNAL tmp_43                           : std_logic;
  SIGNAL tmp_44                           : std_logic;
  SIGNAL obj_delayedReady                 : std_logic;
  SIGNAL s_1                              : std_logic;
  SIGNAL varargout_1_re                   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_1_im                   : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_2                      : std_logic;
  SIGNAL varargout_3                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL varargout_4                      : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL varargout_1_re_1                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_1_im_1                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_2_1                    : std_logic;
  SIGNAL varargout_3_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_4_1                    : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL varargout_1_re_2                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_1_im_2                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_2_2                    : std_logic;
  SIGNAL varargout_3_2                    : std_logic;
  SIGNAL varargout_3_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_fftInFFTDelayBal             : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel                              : std_logic;
  SIGNAL obj_countReg                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_countReg_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_45                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL s_2                              : std_logic;
  SIGNAL tmp_46                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_47                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL s_3                              : std_logic;
  SIGNAL sel_1                            : std_logic;
  SIGNAL out_rsvd_14                      : std_logic;
  SIGNAL sel_2                            : std_logic;
  SIGNAL sel_2_1                          : std_logic;
  SIGNAL obj_index                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_48                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL s_4                              : std_logic;
  SIGNAL tmp_49                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_50                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_51                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_52                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_53                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_FFTReg                       : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_5                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_index1                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL obj_index1_1                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_54                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL s_6                              : std_logic;
  SIGNAL tmp_55                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_56                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_57                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_FFTRegDelay                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_58                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_59                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_60                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_unsigned             : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL obj_cpInFFTDelayBal              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sel_3                            : std_logic;
  SIGNAL sel_4                            : std_logic;
  SIGNAL out_rsvd_15                      : std_logic;
  SIGNAL sel_2_2                          : std_logic;
  SIGNAL sel_2_3                          : std_logic;
  SIGNAL tmp_61                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_62                           : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL obj_cpReg                        : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL s_7                              : vector_of_unsigned10(0 TO 2);  -- ufix10 [3]
  SIGNAL tmp_63                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL obj_cpRegDelay                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_64                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_65                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_66                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_3                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_1_im_3                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_2_3                    : std_logic;
  SIGNAL varargout_3_3                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_2                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_4                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_1_im_4                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_2_4                    : std_logic;
  SIGNAL varargout_3_4                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_4_3                    : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL varargout_1_re_5                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_1_im_5                 : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL varargout_2_5                    : std_logic;
  SIGNAL varargout_1_re_signed            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL varargout_1_im_signed            : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL obj_dataOut_re                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL obj_dataOut_im                   : signed(11 DOWNTO 0);  -- sfix12_En10
  SIGNAL obj_validOut                     : std_logic;
  SIGNAL obj_numDataSc_1                  : std_logic;
  SIGNAL tmp_67                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL obj_readyLast                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_68                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_69                           : std_logic;
  SIGNAL obj_readyFlag                    : std_logic;
  SIGNAL obj_readyLow_1                   : std_logic;
  SIGNAL obj_readyFlag_1                  : std_logic;
  SIGNAL obj_readyFlag_2                  : std_logic;
  SIGNAL tmp_70                           : std_logic;
  SIGNAL s_8                              : std_logic;
  SIGNAL obj_readyFlag_3                  : std_logic;
  SIGNAL tmp_71                           : std_logic;
  SIGNAL tmp_72                           : std_logic;
  SIGNAL tmp_73                           : std_logic;
  SIGNAL obj_triggerReady                 : std_logic;
  SIGNAL obj_triggerReady_1               : std_logic;
  SIGNAL obj_triggerReady_2               : std_logic;
  SIGNAL tmp_74                           : std_logic;
  SIGNAL tmp_75                           : std_logic;
  SIGNAL tmp_76                           : std_logic;
  SIGNAL obj_readyOut_4                   : std_logic;
  SIGNAL varargout_3_5                    : std_logic;
  SIGNAL tmp_77                           : std_logic;
  SIGNAL varargout_3_6                    : std_logic;
  SIGNAL tmp_78                           : std_logic;

BEGIN
  u_symbolFormation : full_ofdm_modulator_ip_src_symbolFormation
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => data_re,  -- sfix12_En10
              varargin_1_im => data_im,  -- sfix12_En10
              varargin_2 => tmp_24,
              varargin_3 => std_logic_vector(tmp_15),  -- ufix14
              varargin_4 => std_logic_vector(tmp_16),  -- ufix14
              varargin_5 => std_logic_vector(tmp_14),  -- ufix14
              varargin_6 => std_logic_vector(tmp_12),  -- ufix14
              varargout_1_re => varargout_1_re,  -- sfix12_En10
              varargout_1_im => varargout_1_im,  -- sfix12_En10
              varargout_2 => varargout_2,
              varargout_3 => varargout_3,  -- ufix14
              varargout_4 => varargout_4  -- ufix14
              );

  u_samplesRepetitionMod : full_ofdm_modulator_ip_src_samplesRepetitionMod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re,  -- sfix12_En10
              varargin_1_im => varargout_1_im,  -- sfix12_En10
              varargin_2 => varargout_2,
              varargin_3 => varargout_3,  -- ufix14
              varargin_4 => varargout_4,  -- ufix14
              varargout_1_re => varargout_1_re_1,  -- sfix12_En10
              varargout_1_im => varargout_1_im_1,  -- sfix12_En10
              varargout_2 => varargout_2_1,
              varargout_3 => varargout_3_1,  -- ufix9
              varargout_4 => varargout_4_1  -- ufix9
              );

  u_dsphdl_IFFT : full_ofdm_modulator_ip_src_dsphdl_IFFT
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              dataIn_re => varargout_1_re_1,  -- sfix12_En10
              dataIn_im => varargout_1_im_1,  -- sfix12_En10
              validIn => varargout_2_1,
              dataOut_re => varargout_1_re_2,  -- sfix12_En10
              dataOut_im => varargout_1_im_2,  -- sfix12_En10
              startOut => varargout_2_2,
              validOut => varargout_3_2
              );

  u_DownSamplerMod : full_ofdm_modulator_ip_src_DownSamplerMod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_2,  -- sfix12_En10
              varargin_1_im => varargout_1_im_2,  -- sfix12_En10
              varargin_2 => varargout_3_2,
              varargin_3 => std_logic_vector(tmp_60),  -- ufix10
              varargin_4 => std_logic_vector(tmp_66),  -- ufix10
              varargout_1_re => varargout_1_re_3,  -- sfix12_En10
              varargout_1_im => varargout_1_im_3,  -- sfix12_En10
              varargout_2 => varargout_2_3,
              varargout_3 => varargout_3_3,  -- ufix10
              varargout_4 => varargout_4_2  -- ufix10
              );

  u_HDLFFTShiftMod : full_ofdm_modulator_ip_src_HDLFFTShiftMod
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_3,  -- sfix12_En10
              varargin_1_im => varargout_1_im_3,  -- sfix12_En10
              varargin_2 => varargout_2_3,
              varargin_3 => varargout_3_3,  -- ufix10
              varargin_4 => varargout_4_2,  -- ufix10
              varargout_1_re => varargout_1_re_4,  -- sfix12_En10
              varargout_1_im => varargout_1_im_4,  -- sfix12_En10
              varargout_2 => varargout_2_4,
              varargout_3 => varargout_3_4,  -- ufix10
              varargout_4 => varargout_4_3  -- ufix10
              );

  u_CPAddition : full_ofdm_modulator_ip_src_CPAddition
    PORT MAP( clk => clk,
              reset_x => reset_x,
              enb_1_2_0 => enb_1_2_0,
              varargin_1_re => varargout_1_re_4,  -- sfix12_En10
              varargin_1_im => varargout_1_im_4,  -- sfix12_En10
              varargin_2 => varargout_2_4,
              varargin_3 => varargout_3_4,  -- ufix10
              varargin_4 => varargout_4_3,  -- ufix10
              varargout_1_re => varargout_1_re_5,  -- sfix12_En10
              varargout_1_im => varargout_1_im_5,  -- sfix12_En10
              varargout_2 => varargout_2_5
              );

  out_rsvd <= '0';

  out_rsvd_1 <= '1';

  obj_readyLowFlag <= '0';

  out_rsvd_2 <= '0';

  out_rsvd_3 <= '1';

  obj_readyLowCount <= to_unsigned(16#0000#, 14);

  obj_validInHighCount <= to_unsigned(16#0000#, 14);

  obj_sampleInputs <= '1';

  out_rsvd_4 <= '0';

  out_rsvd_5 <= '1';

  CPLen_unsigned <= unsigned(CPLen);

  tmp <= resize(CPLen_unsigned, 14);

  FFTLen_unsigned <= unsigned(FFTLen);

  tmp_1 <= resize(FFTLen_unsigned, 14);

  obj_insertDC <= to_unsigned(16#0000#, 14);

  numLgSc_unsigned <= unsigned(numLgSc);

  tmp_2 <= resize(numLgSc_unsigned, 14);

  numRgSc_unsigned <= unsigned(numRgSc);

  tmp_3 <= resize(numRgSc_unsigned, 14);

  obj_readyLowFlag_1 <= '1';

  out_rsvd_6 <= '0';

  out_rsvd_7 <= '1';

  obj_validInHighFlag <= '0';

  out_rsvd_8 <= '0';

  out_rsvd_9 <= '1';

  obj_validInHighFlag_1 <= '1';

  out_rsvd_10 <= '0';

  out_rsvd_11 <= '1';

  obj_readyOut <= '1';

  obj_readyOut_1 <= '1';

  obj_readyOut_2 <= '0';

  obj_readyOut_3 <= '1';

  out_rsvd_12 <= '0';

  out_rsvd_13 <= '1';

  
  tmp_5 <= obj_readyOut WHEN tmp_4 = '0' ELSE
      obj_readyOut_1;

  
  tmp_7 <= tmp_5 WHEN tmp_6 = '0' ELSE
      obj_readyOut_2;

  tmp_8 <= obj_validInHighCount_1 + to_unsigned(16#0001#, 14);

  obj_validInHighCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validInHighCount_1 <= to_unsigned(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_validInHighCount_1 <= tmp_9;
      END IF;
    END IF;
  END PROCESS obj_validInHighCount_reg_process;


  
  tmp_11 <= tmp_10 WHEN tmp_4 = '0' ELSE
      obj_validInHighFlag;

  obj_numRgScReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_numRgScReg <= to_unsigned(16#0005#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_numRgScReg <= tmp_12;
      END IF;
    END IF;
  END PROCESS obj_numRgScReg_reg_process;


  
  tmp_12 <= obj_numRgScReg WHEN tmp_13 = '0' ELSE
      tmp_3;

  obj_numLgScReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_numLgScReg <= to_unsigned(16#0006#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_numLgScReg <= tmp_14;
      END IF;
    END IF;
  END PROCESS obj_numLgScReg_reg_process;


  
  tmp_14 <= obj_numLgScReg WHEN tmp_13 = '0' ELSE
      tmp_2;

  obj_FFTLengthReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTLengthReg <= to_unsigned(16#0040#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTLengthReg <= tmp_15;
      END IF;
    END IF;
  END PROCESS obj_FFTLengthReg_reg_process;


  
  tmp_15 <= obj_FFTLengthReg WHEN tmp_13 = '0' ELSE
      tmp_1;

  obj_numDataSc <= tmp_15 - (obj_insertDC + (tmp_14 + tmp_12));

  obj_CPLengthReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_CPLengthReg <= to_unsigned(16#0010#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_CPLengthReg <= tmp_16;
      END IF;
    END IF;
  END PROCESS obj_CPLengthReg_reg_process;


  
  tmp_18 <= tmp_17 WHEN tmp_4 = '0' ELSE
      obj_validInHighCount;

  
  tmp_19 <= tmp_18 WHEN tmp_6 = '0' ELSE
      tmp_17;

  
  tmp_9 <= tmp_19 WHEN tmp_20 = '0' ELSE
      tmp_17;

  
  tmp_22 <= '1' WHEN (tmp_9 = to_unsigned(16#0000#, 14)) AND (tmp_21 = to_unsigned(16#0000#, 14)) ELSE
      '0';

  
  tmp_23 <= obj_sampleInputs_1 WHEN tmp_22 = '0' ELSE
      obj_sampleInputs;

  obj_sampleInputs_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_sampleInputs_1 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_sampleInputs_1 <= tmp_23;
      END IF;
    END IF;
  END PROCESS obj_sampleInputs_reg_process;


  tmp_25 <= tmp_24 AND obj_sampleInputs_1;

  
  tmp_13 <= out_rsvd_4 WHEN tmp_25 = '0' ELSE
      out_rsvd_5;

  
  tmp_16 <= obj_CPLengthReg WHEN tmp_13 = '0' ELSE
      tmp;

  obj_maxFFTPlusCP <= tmp_16 + to_unsigned(16#0100#, 14);

  obj_readyLow <= obj_maxFFTPlusCP - obj_numDataSc;

  tmp_26 <= obj_readyLowCount_1 + to_unsigned(16#0001#, 14);

  
  tmp_28 <= tmp_27 WHEN tmp_4 = '0' ELSE
      obj_readyLowCount;

  
  tmp_29 <= tmp_28 WHEN tmp_6 = '0' ELSE
      tmp_27;

  
  tmp_21 <= tmp_29 WHEN tmp_20 = '0' ELSE
      tmp_27;

  obj_readyLowCount_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyLowCount_1 <= to_unsigned(16#0000#, 14);
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyLowCount_1 <= tmp_21;
      END IF;
    END IF;
  END PROCESS obj_readyLowCount_reg_process;


  tmp_31 <= tmp_10 AND tmp_30;

  
  tmp_4 <= out_rsvd WHEN tmp_31 = '0' ELSE
      out_rsvd_1;

  
  tmp_32 <= tmp_30 WHEN tmp_4 = '0' ELSE
      obj_readyLowFlag;

  
  tmp_33 <= tmp_32 WHEN tmp_6 = '0' ELSE
      tmp_30;

  
  tmp_34 <= tmp_33 WHEN tmp_20 = '0' ELSE
      tmp_30;

  obj_readyLowFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyLowFlag_2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyLowFlag_2 <= tmp_34;
      END IF;
    END IF;
  END PROCESS obj_readyLowFlag_reg_process;


  s <= obj_validInHighFlag_2 AND ( NOT obj_readyLowFlag_2);

  
  tmp_35 <= out_rsvd_2 WHEN s = '0' ELSE
      out_rsvd_3;

  
  tmp_27 <= obj_readyLowCount_1 WHEN tmp_35 = '0' ELSE
      tmp_26;

  
  tmp_36 <= '1' WHEN tmp_27 = obj_readyLow ELSE
      '0';

  
  tmp_30 <= obj_readyLowFlag_2 WHEN tmp_36 = '0' ELSE
      obj_readyLowFlag_1;

  tmp_37 <= tmp_10 AND ( NOT tmp_30);

  
  tmp_6 <= out_rsvd_6 WHEN tmp_37 = '0' ELSE
      out_rsvd_7;

  
  tmp_38 <= tmp_11 WHEN tmp_6 = '0' ELSE
      tmp_10;

  
  tmp_39 <= tmp_38 WHEN tmp_20 = '0' ELSE
      tmp_10;

  obj_validInHighFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validInHighFlag_2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validInHighFlag_2 <= tmp_39;
      END IF;
    END IF;
  END PROCESS obj_validInHighFlag_reg_process;


  tmp_40 <= tmp_24 AND ( NOT obj_validInHighFlag_2);

  
  tmp_41 <= out_rsvd_8 WHEN tmp_40 = '0' ELSE
      out_rsvd_9;

  
  tmp_17 <= obj_validInHighCount_1 WHEN tmp_41 = '0' ELSE
      tmp_8;

  
  tmp_42 <= '1' WHEN tmp_17 = obj_numDataSc ELSE
      '0';

  
  tmp_10 <= obj_validInHighFlag_2 WHEN tmp_42 = '0' ELSE
      obj_validInHighFlag_1;

  tmp_43 <= ( NOT tmp_10) AND ( NOT tmp_30);

  
  tmp_20 <= out_rsvd_10 WHEN tmp_43 = '0' ELSE
      out_rsvd_11;

  
  tmp_44 <= tmp_7 WHEN tmp_20 = '0' ELSE
      obj_readyOut_3;

  obj_delayedReady_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_delayedReady <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_delayedReady <= tmp_44;
      END IF;
    END IF;
  END PROCESS obj_delayedReady_reg_process;


  s_1 <= obj_delayedReady AND valid;

  
  tmp_24 <= out_rsvd_12 WHEN s_1 = '0' ELSE
      out_rsvd_13;

  varargout_3_unsigned <= unsigned(varargout_3_1);

  obj_fftInFFTDelayBal <= resize(varargout_3_unsigned, 10);

  sel <= '0';

  obj_countReg <= to_unsigned(16#000#, 10);

  tmp_45 <= obj_countReg_1 + to_unsigned(16#001#, 10);

  
  s_2 <= '1' WHEN obj_countReg_1 = to_unsigned(16#0FF#, 10) ELSE
      '0';

  
  tmp_46 <= tmp_45 WHEN s_2 = '0' ELSE
      obj_countReg;

  
  tmp_47 <= obj_countReg_1 WHEN varargout_2_1 = '0' ELSE
      tmp_46;

  obj_countReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_countReg_1 <= to_unsigned(16#000#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_countReg_1 <= tmp_47;
      END IF;
    END IF;
  END PROCESS obj_countReg_reg_process;


  
  s_3 <= '1' WHEN obj_countReg_1 = to_unsigned(16#000#, 10) ELSE
      '0';

  sel_1 <= '0';

  out_rsvd_14 <= '1';

  
  sel_2 <= sel_1 WHEN s_3 = '0' ELSE
      out_rsvd_14;

  
  sel_2_1 <= sel WHEN varargout_2_1 = '0' ELSE
      sel_2;

  obj_index <= to_unsigned(16#00#, 7);

  tmp_48 <= obj_index_1 + to_unsigned(16#01#, 7);

  
  s_4 <= '1' WHEN obj_index_1 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_49 <= tmp_48 WHEN s_4 = '0' ELSE
      obj_index;

  
  tmp_50 <= obj_index_1 WHEN s_3 = '0' ELSE
      tmp_49;

  
  tmp_51 <= obj_index_1 WHEN varargout_2_1 = '0' ELSE
      tmp_50;

  obj_index_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index_1 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        obj_index_1 <= tmp_51;
      END IF;
    END IF;
  END PROCESS obj_index_reg_process;


  tmp_52 <= signed(resize(obj_index_1, 32));

  obj_FFTReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTReg <= (OTHERS => to_unsigned(16#040#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTReg <= tmp_53;
      END IF;
    END IF;
  END PROCESS obj_FFTReg_reg_process;


  p55_output : PROCESS (obj_FFTReg, obj_fftInFFTDelayBal, sel_2_1, tmp_52)
  BEGIN
    s_5 <= obj_FFTReg;
    IF sel_2_1 = '1' THEN 
      s_5(to_integer(tmp_52)) <= obj_fftInFFTDelayBal;
    END IF;
  END PROCESS p55_output;


  
  tmp_53 <= s_5 WHEN varargout_2_1 = '0' ELSE
      s_5;

  obj_index1 <= to_unsigned(16#00#, 7);

  tmp_54 <= obj_index1_1 + to_unsigned(16#01#, 7);

  
  s_6 <= '1' WHEN obj_index1_1 = to_unsigned(16#02#, 7) ELSE
      '0';

  
  tmp_55 <= tmp_54 WHEN s_6 = '0' ELSE
      obj_index1;

  
  tmp_56 <= obj_index1_1 WHEN varargout_2_2 = '0' ELSE
      tmp_55;

  obj_index1_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_index1_1 <= to_unsigned(16#00#, 7);
      ELSIF enb_1_2_0 = '1' THEN
        obj_index1_1 <= tmp_56;
      END IF;
    END IF;
  END PROCESS obj_index1_reg_process;


  tmp_57 <= tmp_53(to_integer(obj_index1_1));

  
  tmp_58 <= obj_FFTRegDelay WHEN varargout_2_2 = '0' ELSE
      tmp_57;

  obj_FFTRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_FFTRegDelay <= to_unsigned(16#040#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_FFTRegDelay <= tmp_58;
      END IF;
    END IF;
  END PROCESS obj_FFTRegDelay_reg_process;


  tmp_59 <= tmp_53(to_integer(obj_index1_1));

  
  tmp_60 <= obj_FFTRegDelay WHEN varargout_2_2 = '0' ELSE
      tmp_59;

  varargout_4_unsigned <= unsigned(varargout_4_1);

  obj_cpInFFTDelayBal <= resize(varargout_4_unsigned, 10);

  sel_3 <= '0';

  sel_4 <= '0';

  out_rsvd_15 <= '1';

  
  sel_2_2 <= sel_4 WHEN s_3 = '0' ELSE
      out_rsvd_15;

  
  sel_2_3 <= sel_3 WHEN varargout_2_1 = '0' ELSE
      sel_2_2;

  tmp_61 <= signed(resize(obj_index_1, 32));

  obj_cpReg_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_cpReg <= (OTHERS => to_unsigned(16#010#, 10));
      ELSIF enb_1_2_0 = '1' THEN
        obj_cpReg <= tmp_62;
      END IF;
    END IF;
  END PROCESS obj_cpReg_reg_process;


  p51_output : PROCESS (obj_cpInFFTDelayBal, obj_cpReg, sel_2_3, tmp_61)
  BEGIN
    s_7 <= obj_cpReg;
    IF sel_2_3 = '1' THEN 
      s_7(to_integer(tmp_61)) <= obj_cpInFFTDelayBal;
    END IF;
  END PROCESS p51_output;


  
  tmp_62 <= s_7 WHEN varargout_2_1 = '0' ELSE
      s_7;

  tmp_63 <= tmp_62(to_integer(obj_index1_1));

  
  tmp_64 <= obj_cpRegDelay WHEN varargout_2_2 = '0' ELSE
      tmp_63;

  obj_cpRegDelay_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_cpRegDelay <= to_unsigned(16#010#, 10);
      ELSIF enb_1_2_0 = '1' THEN
        obj_cpRegDelay <= tmp_64;
      END IF;
    END IF;
  END PROCESS obj_cpRegDelay_reg_process;


  tmp_65 <= tmp_62(to_integer(obj_index1_1));

  
  tmp_66 <= obj_cpRegDelay WHEN varargout_2_2 = '0' ELSE
      tmp_65;

  varargout_1_re_signed <= signed(varargout_1_re_5);

  varargout_1_im_signed <= signed(varargout_1_im_5);

  obj_dataOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_dataOut_re <= to_signed(16#000#, 12);
        obj_dataOut_im <= to_signed(16#000#, 12);
      ELSIF enb_1_2_0 = '1' THEN
        obj_dataOut_re <= varargout_1_re_signed;
        obj_dataOut_im <= varargout_1_im_signed;
      END IF;
    END IF;
  END PROCESS obj_dataOut_reg_process;


  obj_validOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_validOut <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_validOut <= varargout_2_5;
      END IF;
    END IF;
  END PROCESS obj_validOut_reg_process;


  
  obj_numDataSc_1 <= '1' WHEN obj_numDataSc = to_unsigned(16#0001#, 14) ELSE
      '0';

  tmp_67 <= obj_numDataSc - to_unsigned(16#0001#, 14);

  obj_readyLast <= to_unsigned(16#0001#, 14);

  
  tmp_68 <= tmp_67 WHEN obj_numDataSc_1 = '0' ELSE
      obj_readyLast;

  
  tmp_69 <= '1' WHEN tmp_17 = tmp_68 ELSE
      '0';

  obj_readyFlag <= '0';

  
  obj_readyLow_1 <= '1' WHEN obj_readyLow /= to_unsigned(16#0000#, 14) ELSE
      '0';

  obj_readyFlag_1 <= '0';

  obj_readyFlag_2 <= '1';

  
  tmp_70 <= obj_readyFlag_1 WHEN obj_readyLow_1 = '0' ELSE
      obj_readyFlag_2;

  
  tmp_71 <= obj_readyFlag_3 WHEN s_8 = '0' ELSE
      obj_readyFlag;

  
  tmp_72 <= tmp_71 WHEN tmp_69 = '0' ELSE
      tmp_70;

  obj_readyFlag_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyFlag_3 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyFlag_3 <= tmp_72;
      END IF;
    END IF;
  END PROCESS obj_readyFlag_reg_process;


  s_8 <= obj_readyFlag_3 AND valid;

  
  tmp_73 <= '1' WHEN resize(tmp_27, 15) = (resize(obj_readyLow, 15) - to_unsigned(16#0001#, 15)) ELSE
      '0';

  obj_triggerReady <= '0';

  obj_triggerReady_1 <= '1';

  
  tmp_74 <= obj_triggerReady_2 WHEN obj_triggerReady_2 = '0' ELSE
      obj_triggerReady;

  
  tmp_75 <= tmp_74 WHEN s_8 = '0' ELSE
      obj_triggerReady_2;

  
  tmp_76 <= tmp_75 WHEN tmp_73 = '0' ELSE
      obj_triggerReady_1;

  obj_triggerReady_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_triggerReady_2 <= '0';
      ELSIF enb_1_2_0 = '1' THEN
        obj_triggerReady_2 <= tmp_76;
      END IF;
    END IF;
  END PROCESS obj_triggerReady_reg_process;


  obj_readyOut_reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset_x = '1' THEN
        obj_readyOut_4 <= '1';
      ELSIF enb_1_2_0 = '1' THEN
        obj_readyOut_4 <= tmp_44;
      END IF;
    END IF;
  END PROCESS obj_readyOut_reg_process;


  varargout_3_5 <= '1';

  
  tmp_77 <= obj_readyOut_4 WHEN obj_triggerReady_2 = '0' ELSE
      varargout_3_5;

  varargout_3_6 <= '0';

  
  tmp_78 <= tmp_77 WHEN s_8 = '0' ELSE
      varargout_3_6;

  data_re_1 <= std_logic_vector(obj_dataOut_re);

  data_im_1 <= std_logic_vector(obj_dataOut_im);

  valid_1 <= obj_validOut;

  ready <= tmp_78;

END rtl;

